{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","vizicities.min.js","webpack:/webpack/bootstrap 592d1894b768a8f48264","webpack:///src/vizicities.js","webpack:///src/World.js","webpack:///~/eventemitter3/index.js","webpack:///~/lodash.assign/index.js","webpack:///src/geo/Geo.js","webpack:///src/geo/LatLon.js","webpack:///src/geo/Point.js","webpack:///src/engine/Engine.js","webpack:/external \"THREE\"","webpack:///src/engine/Scene.js","webpack:///src/engine/DOMScene3D.js","webpack:///src/engine/DOMScene2D.js","webpack:///src/engine/Renderer.js","webpack:///src/engine/DOMRenderer3D.js","webpack:///src/vendor/CSS3DRenderer.js","webpack:///src/engine/DOMRenderer2D.js","webpack:///src/vendor/CSS2DRenderer.js","webpack:///src/engine/Camera.js","webpack:///src/engine/Picking.js","webpack:///src/engine/PickingScene.js","webpack:///~/lodash.throttle/index.js","webpack:///src/engine/EffectComposer.js","webpack:///src/vendor/EffectComposer.js","webpack:///src/vendor/CopyShader.js","webpack:///src/vendor/ShaderPass.js","webpack:///src/vendor/MaskPass.js","webpack:///src/vendor/RenderPass.js","webpack:///src/vendor/HorizontalTiltShiftShader.js","webpack:///src/vendor/VerticalTiltShiftShader.js","webpack:///src/vendor/FXAAShader.js","webpack:///src/layer/environment/EnvironmentLayer.js","webpack:///src/layer/Layer.js","webpack:///~/shortid/index.js","webpack:///~/shortid/lib/index.js","webpack:///~/shortid/lib/alphabet.js","webpack:///~/shortid/lib/random/random-from-seed.js","webpack:///~/shortid/lib/build.js","webpack:///~/shortid/lib/generate.js","webpack:///~/shortid/lib/random/random-byte-browser.js","webpack:///~/nanoid/format.js","webpack:///~/shortid/lib/is-valid.js","webpack:///~/shortid/lib/util/cluster-worker-id-browser.js","webpack:///src/layer/environment/Skybox.js","webpack:///src/layer/environment/Sky.js","webpack:///src/util/Worker.js","webpack:///src/util/WorkerPool.js","webpack:///src/util/WorkerPoolWorker.js","webpack:///src/controls/index.js","webpack:///src/controls/Controls.Orbit.js","webpack:///src/vendor/OrbitControls.js","webpack:///~/hammerjs/hammer.js","webpack:/external \"TweenLite\"","webpack:///src/layer/LayerGroup.js","webpack:///src/layer/tile/ImageTileLayer.js","webpack:///src/layer/tile/TileLayer.js","webpack:///src/layer/tile/TileCache.js","webpack:///~/lru-cache/index.js","webpack:///~/process/browser.js","webpack:///~/pseudomap/map.js","webpack:///~/pseudomap/pseudomap.js","webpack:///~/util/util.js","webpack:///~/util/support/types.js","webpack:///~/util/support/isBufferBrowser.js","webpack:///~/is-arguments/index.js","webpack:///~/is-generator-function/index.js","webpack:///~/inherits/inherits_browser.js","webpack:///~/lru-cache/~/yallist/yallist.js","webpack:///src/layer/tile/ImageTile.js","webpack:///src/layer/tile/Tile.js","webpack:///src/vendor/BoxHelper.js","webpack:///src/layer/tile/ImageTileLayerBaseMaterial.js","webpack:///src/layer/tile/GeoJSONTileLayer.js","webpack:///src/layer/tile/GeoJSONTile.js","webpack:///src/layer/GeoJSONLayer.js","webpack:///~/reqwest/reqwest.js","webpack:///src/util/GeoJSON.js","webpack:///~/topojson/build/topojson.js","webpack:///~/geojson-merge/index.js","webpack:///~/geojson-normalize/index.js","webpack:///~/earcut/src/earcut.js","webpack:///src/util/extrudePolygon.js","webpack:///src/util/Buffer.js","webpack:///~/text-encoding/index.js","webpack:///~/text-encoding/lib/encoding.js","webpack:///~/text-encoding/lib/encoding-indexes.js","webpack:///src/engine/PickingMaterial.js","webpack:///src/engine/PickingShader.js","webpack:///src/layer/geometry/PolygonLayer.js","webpack:///src/layer/geometry/PolylineLayer.js","webpack:///src/layer/geometry/PointLayer.js","webpack:///src/layer/GeoJSONWorkerLayer.js","webpack:///src/util/Stringify.js","webpack:///src/layer/tile/TopoJSONTileLayer.js","webpack:///src/layer/TopoJSONLayer.js","webpack:///src/layer/TopoJSONWorkerLayer.js","webpack:///src/util/index.js","webpack:///src/util/wrapNum.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_8__","__WEBPACK_EXTERNAL_MODULE_51__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_World","_World2","_controlsIndex","_controlsIndex2","_geoGeoJs","_geoGeoJs2","_layerLayer","_layerLayer2","_layerLayerGroup","_layerEnvironmentEnvironmentLayer","_layerEnvironmentEnvironmentLayer2","_layerTileImageTileLayer","_layerTileImageTileLayer2","_layerTileGeoJSONTileLayer","_layerTileGeoJSONTileLayer2","_layerTileTopoJSONTileLayer","_layerTileTopoJSONTileLayer2","_layerTileGeoJSONTile","_layerTileGeoJSONTile2","_layerGeoJSONLayer","_layerGeoJSONLayer2","_layerTopoJSONLayer","_layerTopoJSONLayer2","_layerGeoJSONWorkerLayer","_layerGeoJSONWorkerLayer2","_layerTopoJSONWorkerLayer","_layerTopoJSONWorkerLayer2","_layerGeometryPolygonLayer","_layerGeometryPolygonLayer2","_layerGeometryPolylineLayer","_layerGeometryPolylineLayer2","_layerGeometryPointLayer","_layerGeometryPointLayer2","_geoPoint","_geoPoint2","_geoLatLon","_geoLatLon2","_enginePickingMaterial","_enginePickingMaterial2","_utilIndex","_utilIndex2","VIZI","version","World","world","Controls","Geo","Layer","layer","EnvironmentLayer","environmentLayer","ImageTileLayer","imageTileLayer","GeoJSONTileLayer","geoJSONTileLayer","GeoJSONTile","geoJSONTile","TopoJSONTileLayer","topoJSONTileLayer","GeoJSONLayer","geoJSONLayer","TopoJSONLayer","topoJSONLayer","GeoJSONWorkerLayer","geoJSONWorkerLayer","TopoJSONWorkerLayer","topoJSONWorkerLayer","PolygonLayer","polygonLayer","PolylineLayer","polylineLayer","PointLayer","pointLayer","Point","point","LatLon","latLon","PickingMaterial","Util","_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","parent","getPrototypeOf","_eventemitter3","_eventemitter32","_lodashAssign","_lodashAssign2","_geoGeo","_geoGeo2","_engineEngine","_engineEngine2","_utilWorker","_utilWorker2","_EventEmitter","domId","options","_this","defaults","skybox","postProcessing","_layers","_controls","_initContainer","_initAttribution","_initEngine","_initEnvironment","then","_initEvents","_pause","_update","maxWorkers","workerScript","createWorkers","_container","document","getElementById","message","element","createElement","classList","add","additionalElem","innerHTML","appendChild","addEventListener","e","currentTarget","parentNode","toggle","_engine","_environment","addTo","on","_onControlsMoveEnd","_point","x","z","_resetView","pointToLatLon","latlon","emit","_moveStart","_move","_moveEnd","_lastPosition","delta","clock","getDelta","window","requestAnimationFrame","bind","update","container","span","dataset","elem","querySelectorAll","remove","_originLatlon","_originPoint","project","latLonToPoint","projectedPoint","_subtract","unproject","accurate","pointScale","metres","zoom","metresToWorld","worldUnits","worldToMetres","_camera","_this2","push","isOutput","isOutputToScene","_scene","_object3D","_domScene3D","_domObject3D","_domScene2D","_domObject2D","Promise","resolve","reject","_addToWorld","_options","attribution","_addAttribution","layerIndex","indexOf","splice","_removeAttribution","controls","controlsIndex","stop","off","removeControls","destroy","removeLayer","firstChild","removeChild","noNew","EE","fn","context","once","EventEmitter","has","hasOwnProperty","prefix","_events","eventNames","name","events","names","slice","getOwnPropertySymbols","concat","listeners","event","exists","evt","available","l","ee","Array","a1","a2","a3","a4","a5","args","len","arguments","removeListener","apply","j","listener","removeAllListeners","addListener","setMaxListeners","prefixed","func","thisArg","baseTimes","n","iteratee","index","result","overArg","transform","arg","arrayLikeKeys","inherited","isArray","isArguments","String","skipIndexes","isIndex","assignValue","objValue","eq","baseKeys","isPrototype","nativeKeys","baseRest","start","nativeMax","array","otherArgs","copyObject","source","customizer","newValue","createAssigner","assigner","sources","guard","isIterateeCall","MAX_SAFE_INTEGER","reIsUint","test","isObject","type","isArrayLike","Ctor","proto","objectProto","other","isArrayLikeObject","propertyIsEnumerable","objectToString","argsTag","isLength","isFunction","isObjectLike","tag","funcTag","genTag","keys","toString","Math","max","nonEnumShadows","valueOf","assign","_LatLon","_Point","R","MAX_LATITUDE","ECC","ECC2","multiplier","d","PI","lat","min","sin","lon","log","atan","exp","y","projected","k","rad","a","sinLat","sinLat2","cosLat","cos","pow","v","sqrt","h","metresToProjected","projectedToMetres","projectedUnits","projectedMetres","realMetres","scale","LN2","distance","latlon1","latlon2","lat1","lat2","lon1","lon2","deltaLat","deltaLon","halfDeltaLat","halfDeltaLon","atan2","acos","bounds","alt","isNaN","Error","b","lng","round","clone","_add","_three","_three2","_Scene","_Scene2","_DOMScene3D","_DOMScene3D2","_DOMScene2D","_DOMScene2D2","_Renderer","_Renderer2","_DOMRenderer3D","_DOMRenderer3D2","_DOMRenderer2D","_DOMRenderer2D2","_Camera","_Camera2","_Picking","_Picking2","_EffectComposer","_EffectComposer2","_vendorRenderPass","_vendorRenderPass2","_vendorShaderPass","_vendorShaderPass2","_vendorCopyShader","_vendorCopyShader2","_vendorHorizontalTiltShiftShader","_vendorHorizontalTiltShiftShader2","_vendorVerticalTiltShiftShader","_vendorVerticalTiltShiftShader2","_vendorFXAAShader","_vendorFXAAShader2","Engine","console","_world","antialias","_renderer","_domRenderer3D","_domRenderer2D","_picking","Clock","_frustum","Frustum","_initPostProcessing","renderPass","fxaaPass","hblurPass","vblurPass","bluriness","uniforms","r","copyPass","renderToScreen","_composer","addPass","self","updatePostProcessingSize","width","clientWidth","height","clientHeight","pixelRatio","resolution","set","render","child","children","geometry","dispose","material","map","_clock","scene","Scene","renderer","WebGLRenderer","setClearColor","setPixelRatio","gammaInput","gammaOutput","shadowMap","enabled","domElement","updateSize","setSize","_vendorCSS3DRenderer","CSS3DRenderer","style","position","top","CSS3DObject","Object3D","CSS3DSprite","REVISION","_width","_height","_widthHalf","_heightHalf","matrix","Matrix4","cache","camera","fov","objects","overflow","WebkitTransformStyle","MozTransformStyle","oTransformStyle","transformStyle","cameraElement","getSize","epsilon","abs","Number","EPSILON","getCameraCSSMatrix","elements","getObjectCSSMatrix","renderObject","copy","matrixWorldInverse","transpose","copyPosition","matrixWorld","cachedStyle","WebkitTransform","MozTransform","oTransform","tan","degToRad","WebkitPerspective","MozPerspective","oPerspective","perspective","updateMatrixWorld","getInverse","_vendorCSS2DRenderer","CSS2DRenderer","CSS2DObject","vector","Vector3","viewMatrix","viewProjectionMatrix","frustum","setFromMatrixPosition","applyProjection","containsPoint","display","multiplyMatrices","projectionMatrix","setFromMatrix","PerspectiveCamera","aspect","updateProjectionMatrix","_PickingScene","_PickingScene2","_lodashThrottle","_lodashThrottle2","nextId","Picking","_raycaster","Raycaster","linePrecision","_pickingScene","_pickingTexture","WebGLRenderTarget","texture","minFilter","LinearFilter","generateMipmaps","_nextId","_resizeTexture","_resizeHandler","_throttledMouseMoveHandler","_onMouseMove","_mouseUpHandler","_onMouseUp","_onWorldMove","button","clientX","offsetLeft","clientY","offsetTop","normalisedPoint","_pick","_needUpdate","size","_pixelBuffer","Uint8Array","readRenderTargetPixels","hover","setFromCamera","_point3d","intersects","intersectObjects","_point2d","mesh","removeEventListener","global","debounce","wait","invokeFunc","time","lastArgs","lastThis","lastInvokeTime","leadingEdge","timerId","setTimeout","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","nativeMin","maxWait","shouldInvoke","now","trailingEdge","trailing","cancel","clearTimeout","flush","debounced","isInvoking","FUNC_ERROR_TEXT","toNumber","throttle","isSymbol","symbolTag","NAN","replace","reTrim","isBinary","reIsBinary","reIsOctal","freeParseInt","reIsBadHex","parseInt","freeGlobal","freeSelf","Date","_vendorEffectComposer","_vendorEffectComposer2","composer","_CopyShader","_CopyShader2","_ShaderPass","_ShaderPass2","_MaskPass","_MaskPass2","EffectComposer","renderTarget","getPixelRatio","floor","canvas","parameters","magFilter","format","RGBAFormat","stencilBuffer","renderTarget1","renderTarget2","writeBuffer","readBuffer","passes","error","swapBuffers","tmp","pass","insertPass","maskActive","il","needsSwap","stencilFunc","NOTEQUAL","EQUAL","ClearMaskPass","reset","CopyShader","tDiffuse","opacity","vertexShader","join","fragmentShader","ShaderPass","shader","textureID","ShaderMaterial","UniformsUtils","defines","clear","OrthographicCamera","quad","Mesh","PlaneBufferGeometry","MaskPass","inverse","colorMask","depthMask","writeValue","clearValue","enable","STENCIL_TEST","stencilOp","REPLACE","ALWAYS","clearStencil","KEEP","disable","RenderPass","overrideMaterial","clearColor","clearAlpha","oldClearColor","Color","oldClearAlpha","getClearColor","getClearAlpha","HorizontalTiltShiftShader","VerticalTiltShiftShader","FXAAShader","Vector2","_Layer2","_Layer3","_Skybox","_Skybox2","_Layer","_initLights","_initSkybox","_skyboxLight","DirectionalLight","castShadow","shadow","left","right","bottom","near","far","mapSize","directionalLight","directionalLight2","directionalLight3","_skybox","_mesh","step","gridHelper","GridHelper","_shortid","_shortid2","_engineScene","generate","output","outputToScene","_dom3D","_dom2D","addLayer","_onAdd","getNextId","visible","_pickingMesh","removeDOM3D","removeDOM2D","seed","seedValue","alphabet","worker","workerId","clusterWorkerId","characters","newCharacters","shuffled","build","isValid","setCharacters","_alphabet_","ORIGINAL","unique","split","filter","item","ind","arr","lastIndexOf","setSeed","randomFromSeed","previousSeed","shuffle","characterIndex","sourceArray","targetArray","nextValue","getShuffled","lookup","alphabetShuffled","getNextValue","_seed_","str","seconds","REDUCE_TIME","previousSeconds","counter","number","done","loopCounter","random","randomByte","crypto","msCrypto","getRandomValues","bytes","mask","ceil","byte","isShortId","nonAlphabetic","RegExp","_Sky","_Sky2","cubemap","Skybox","light","_light","_settings","turbidity","reileigh","mieCoefficient","mieDirectionalG","luminance","inclination","azimuth","_updateUniforms","_throttledWorldUpdate","_cubeCamera","CubeCamera","cubeTarget","_sky","_skyScene","_sunSphere","SphereBufferGeometry","MeshBasicMaterial","color","skyboxUniforms","skyboxMat","side","BackSide","BoxGeometry","_updateSkybox","settings","theta","phi","sunPosition","intensity","updateCubeMap","ShaderLib","Sky","skyShader","skyUniforms","skyMat","skyGeo","skyMesh","_WorkerPool","_WorkerPool2","Worker","pool","_maxWorkers","numThreads","exec","method","transferrables","_WorkerPoolWorker","_WorkerPoolWorker2","DEBUG","find","predicate","list","WorkerPool","workers","tasks","workerPromises","createWorker","all","performance","busy","deferred","task","processTasks","promise","_this3","getFreeWorker","shift","err","WorkerPoolWorker","ready","onStartup","data","onMessage","postMessage","payload","_ControlsOrbit","_ControlsOrbit2","Orbit","orbit","_vendorOrbitControls","_vendorOrbitControls2","_TweenLite","_TweenLite2","lagSmoothing","startPosition","startPolar","getPolarAngle","startAzimuth","getAzimuthalAngle","endPosition","endPolar","endAzimuth","changed","distanceTo","animate","deltaX","deltaY","panLeft","panUp","pointDelta","pan","metresDelta","dollyIn","dollyOut","angle","rotateUp","angleDelta","rotateLeft","duration","animationTime","_flyTarget","diff","subVectors","_flyTween","prev","onUpdate","tween","deltaZ","onComplete","onUpdateParams","onCompleteParams","callbackScope","ease","Power1","easeInOut","zoomTime","_zoomTweenIn","_zoomTweenOut","delay","noZoom","flyToPoint","addControls","maxPolarAngle","_hammerjs","_hammerjs2","OrbitControls","getAutoRotationAngle","scope","autoRotateSpeed","getZoomScale","zoomSpeed","thetaDelta","phiDelta","dollyScale","minZoom","maxZoom","zoomChanged","warn","enableZoom","handleMouseDownRotate","rotateStart","handleMouseDownDolly","dollyStart","handleMouseDownPan","panStart","handleMouseMoveRotate","rotateEnd","rotateDelta","body","rotateSpeed","handleMouseMoveDolly","dollyEnd","dollyDelta","handleMouseMovePan","panEnd","panDelta","handleMouseUp","handleMouseWheel","wheelDelta","detail","handleKeyDown","keyCode","UP","keyPanSpeed","dispatchEvent","endEvent","BOTTOM","LEFT","RIGHT","CTRL","KEY_STATE","handleKeyUp","handleTouchStartRotate","pointers","pageX","pageY","handleTouchStartDolly","dx","dy","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","handleTouchEnd","onMouseDown","preventDefault","mouseButtons","ORBIT","enablePan","state","STATE","PAN","enableRotate","ROTATE","ZOOM","DOLLY","NONE","onMouseMove","onMouseUp","startEvent","onMouseWheel","stopPropagation","onKeyDown","enableKeys","onKeyUp","onTouchStart","touches","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","onTouchMove","onTouchEnd","onContextMenu","minDistance","maxDistance","Infinity","minPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","autoRotate","MOUSE","MIDDLE","target0","position0","zoom0","changeEvent","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","lastPosition","lastQuaternion","sub","applyQuaternion","EPS","radius","panOffset","lookAt","distanceToSquared","dot","quaternion","objectMatrix","te","multiplyScalar","adjDist","targetDistance","hammer","direction","DIRECTION_ALL","threshold","pointerType","EventDispatcher","center","noRotate","noPan","noKeys","staticMoving","constraint","dynamicDampingFactor","__WEBPACK_AMD_DEFINE_RESULT__","exportName","setTimeoutContext","timeout","bindFn","invokeArrayArg","each","iterator","forEach","deprecate","deprecationMessage","stack","inherit","base","properties","childP","baseP","_super","boolOrFn","val","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","removeEventListeners","hasParent","node","inStr","trim","inArray","src","findByKey","toArray","uniqueArray","sort","results","values","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","inputTarget","domHandler","ev","init","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","getCenter","timeStamp","deltaTime","getAngle","getDistance","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offsetDelta","prevDelta","velocity","velocityX","velocityY","last","lastInterval","COMPUTE_INTERVAL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","PROPS_XY","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","changedTouches","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","DEDUP_TIMEOUT","isSyntheticEvent","t","DEDUP_DISTANCE","TouchAction","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","recognizeWith","requireFailure","cssProps","triggerDomEvent","gestureEvent","createEvent","initEvent","gesture","TEST_ELEMENT","nextKey","extend","dest","merge","MOBILE_REGEX","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","which","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","getTouchAction","preventDefaults","prevented","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","process","attrTest","optionPointers","isRecognized","directionTest","hasMoved","inOut","validPointers","validMovement","validTime","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","force","stopped","curRecognizer","existing","Tap","Pan","Swipe","Pinch","Rotate","Press","LayerGroup","layerGroup","_TileLayer2","_TileLayer3","_ImageTile","_ImageTile2","_ImageTileLayerBaseMaterial","_TileLayer","path","_path","_calculateLOD","_onWorldUpdate","_outputTiles","_baseLayer","quadcode","_TileCache","_TileCache2","TileLayer","picking","maxCache","maxLOD","_destroy","_tileCache","tile","_destroyTile","_tileList","_minLOD","_maxLOD","_tiles","_tilesPicking","addToPicking","getCamera","projScreenMatrix","getBounds","intersectsBox","Box3","_removeTiles","isReady","getMesh","getPickingMesh","_stop","_updateFrustum","checkList","_checklist","_requestTile","_divide","_quadcode","tileList","_tileInFrustum","dist","isAborted","requestTileAsync","missingTiles","_abortRequest","currentItem","getQuadcode","_screenSpaceError","minDepth","maxDepth","quality","getSide","getTile","_createTile","setTile","removeFromPicking","_lruCache","_lruCache2","TileCache","cacheLimit","onDestroyTile","_cache","tileCache","naiveLength","LRUCache","MAX","lc","LENGTH_CALCULATOR","ALLOW_STALE","stale","MAX_AGE","maxAge","DISPOSE","NO_DISPOSE_ON_SET","noDisposeOnSet","forEachStep","thisp","hit","isStale","del","doUse","CACHE","LRU_LIST","unshiftNode","LENGTH","walker","tail","removeNode","Entry","makeSymbol","Map","util","Yallist","hasSymbol","Symbol","env","_nodeLRUCacheForceNoSymbol","mL","allowStale","mA","lC","rforEach","head","next","dump","dumpLru","inspect","opts","extras","as","didFirst","unshift","peek","pop","load","expiresAt","prune","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","run","Item","noop","nextTick","title","browser","argv","versions","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","npm_package_name","npm_lifecycle_script","TEST_PSEUDOMAP","PseudoMap","kv","same","_index","s","_data","res","entries","ctx","seen","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","styles","arrayToHash","hash","idx","recurseTimes","ret","isString","primitive","formatPrimitive","visibleKeys","getOwnPropertyNames","isError","formatError","isRegExp","isDate","braces","toUTCString","formatArray","formatProperty","reduceToSingleString","simple","JSON","stringify","isNumber","isNull","match","line","substr","numLinesEst","reduce","cur","ar","isNullOrUndefined","re","isPrimitive","o","pad","timestamp","getHours","getMinutes","getSeconds","getDate","months","getMonth","callbackifyOnRejected","reason","cb","newReason","callbackify","original","callbackified","maybeCb","rej","getOwnPropertyDescriptors","descriptors","formatRegExp","f","_","msg","deprecated","warned","throwDeprecation","traceDeprecation","trace","noDeprecation","debugEnviron","debugs","debuglog","NODE_DEBUG","pid","bold","italic","underline","white","grey","black","blue","cyan","green","magenta","red","yellow","special","boolean","null","string","date","regexp","isNativeError","isBuffer","inherits","origin","kCustomPromisifiedSymbol","promisify","promiseResolve","promiseReject","custom","uncurryThis","checkBoxedPrimitive","prototypeValueOf","isPromise","isArrayBufferView","ArrayBufferSupported","ArrayBuffer","isView","isTypedArray","isDataView","Uint8ArraySupported","SymbolToStringTagSupported","TypedArrayProto_toStringTag","isUint8Array","isUint8ClampedArray","isUint16Array","isUint32Array","isInt8Array","isInt16Array","isInt32Array","isFloat32Array","isFloat64Array","isBigInt64Array","isBigUint64Array","ObjectToString","buffer","isMapToString","isMap","working","isSetToString","isSet","Set","isWeakMapToString","isWeakMap","WeakMap","isWeakSetToString","isWeakSet","isArrayBufferToString","isArrayBuffer","isDataViewToString","DataView","isSharedArrayBufferToString","isSharedArrayBuffer","SharedArrayBuffer","isAsyncFunction","isMapIterator","isSetIterator","isGeneratorObject","isWebAssemblyCompiledModule","isNumberObject","numberValue","isStringObject","stringValue","isBooleanObject","booleanValue","isBigIntObject","BigIntSupported","bigIntValue","isSymbolObject","SymbolSupported","symbolValue","isBoxedPrimitive","isAnyArrayBuffer","isArgumentsObject","isGeneratorFunction","BigInt","toStringTag","TypedArrayPrototype","Boolean","WeakSet","fill","readUInt8","hasToStringTag","toStr","isStandardArguments","isLegacyArguments","callee","supportsStandardArguments","fnToStr","isFnRegex","getProto","getGeneratorFunc","generatorFunc","GeneratorFunction","ctor","superCtor","super_","TempCtor","Node","pushNode","forEachReverse","getReverse","mapReverse","initial","acc","reduceReverse","toArrayReverse","from","to","sliceReverse","reverse","_Tile2","_Tile3","_vendorBoxHelper","ImageTile","_Tile","_createMesh","_image","_center","geom","_side","MeshStandardMaterial","depthWrite","roughness","metalness","envMap","getRenderTarget","localMesh","receiveShadow","getContext","font","fillStyle","fillText","_tile","Texture","LinearMipMapLinearFilter","anisotropy","needsUpdate","transparent","urlParams","url","_getTileURL","image","_aborted","_texture","_ready","crossOrigin","imageTile","r2d","tileURLRegex","Tile","_layer","_quadcodeToTile","_boundsLatLon","_tileBoundsWGS84","_boundsWorld","_tileBoundsFromWGS84","_boundsToCenter","_centerLatlon","_getSide","_pointScale","destroyMesh","fromCharCode","lastIndex","q","boundsWGS84","sw","ne","_tile2lon","w","_tile2lat","BoxHelper","indices","Uint16Array","positions","Float32Array","BufferGeometry","setIndex","BufferAttribute","addAttribute","LineSegments","LineBasicMaterial","linewidth","box","setFromObject","isEmpty","attributes","computeBoundingSphere","colour","skyboxTarget","fillRect","_GeoJSONTile","_GeoJSONTile2","_onControlsMove","_pauseOutput","_disableOutput","newOptions","_GeoJSONLayer","_GeoJSONWorkerLayer","_reqwest","_reqwest2","_utilGeoJSON","_utilGeoJSON2","_utilBuffer","_defaultStyle","defaultStyle","interactive","topojson","onEachFeature","polygonMaterial","onPolygonMesh","onPolygonBufferAttributes","polylineMaterial","onPolylineMesh","onPolylineBufferAttributes","pointGeometry","pointMaterial","onPointMesh","keepFeatures","_request","_geojsonLayer","_processTileData","headers","GeoJSONClass","_geojson","abort","_LayerGroup2","_LayerGroup3","_utilBuffer2","_geometryPolygonLayer","_geometryPolygonLayer2","_geometryPolylineLayer","_geometryPolylineLayer2","_geometryPointLayer","_geometryPointLayer2","_LayerGroup","geojson","THREE","_requestData","_processData","collectFeatures","features","layerPromises","feature","_featureToLayer","polygonAttributes","polygonOutlineAttributes","polygonAttributeLengths","normals","polygonFlat","polylineAttributes","polylineAttributeLengths","polylineFlat","pointAttributes","pointAttributeLengths","pointFlat","getBufferAttributes","outlineBufferAttributes","getOutlineBufferAttributes","isFlat","pickingIds","mergedPolygonOutlineAttributes","mergedPolygonAttributes","mergeAttributes","_setPolygonMesh","_polygonMesh","outlineRenderOrder","lineRenderOrder","renderOrder","outlineWidth","lineWidth","_setPolylineMesh","pickingMesh","mergedPolylineAttributes","_polylineMesh","mergedPointAttributes","_setPointMesh","_pointMesh","clearBufferAttributes","clearCoordinates","attributeLengths","flat","SetMesh","coordinates","onBufferAttributes","lineMaterial","__WEBPACK_AMD_DEFINE_FACTORY__","definition","succeed","protocol","protocolRe","location","httpsRe","twoHundo","request","status","response","handleReadyState","success","_timedOut","readyState","onreadystatechange","setHeaders","http","defaultHeaders","isAFormData","FormData","requestedWith","contentType","setRequestHeader","setCredentials","withCredentials","generalCallback","lastValue","urlappend","handleJsonp","reqId","uniqid","cbkey","cbval","reqwest","getcallbackPrefix","cbreg","script","isIE10","async","htmlFor","onload","onclick","getRequest","toQueryString","sendWait","xhr","open","xDomainRequest","onerror","onprogress","send","Reqwest","setType","header","complete","resp","_completeHandlers","getResponseHeader","filteredResponse","globalSetupOptions","dataFilter","responseText","parse","eval","responseXML","parseError","errorCode","_responseArgs","_fulfilled","_successHandler","_fulfillmentHandlers","timedOut","_erred","_errorHandlers","normalize","serial","el","ch","ra","tagName","optCb","disabled","checked","selectedIndex","selected","eachFormElement","serializeSubtags","tags","fa","byTag","serializeQueryString","serializeArray","serializeHash","buildParams","traditional","rbracket","XHR2","ex","callbackPrefix","xmlHttpRequest","accept","*","xml","html","text","json","js","XMLHttpRequest","XDomainRequest","ActiveXObject","retry","fail","always","catch","serialize","opt","nodeType","trad","enc","encodeURIComponent","compat","ajaxSetup","_interopRequireWildcard","newObj","_topojson2","_geojsonMerge","_geojsonMerge2","_earcut","_earcut2","_extrudePolygon","_extrudePolygon2","GeoJSON","outline","outlineColor","blending","NormalBlending","lineOpacity","lineTransparent","lineColor","lineBlending","_topojson","collections","tk","gk","lineStringAttributes","nextCoord","_coords","_colours","coordinate","g","vertices","colours","multiLineStringAttributes","coord","earcutData","_toEarcut","faces","_triangulate","holes","dimensions","groupedVertices","_colour","extruded","topColor","multiply","bottomColor","_vertices","_faces","face","fi","allFlat","sides","dim","holeIndex","contour","transformAbsolute","x0","y0","kx","ky","translate","transformRelative","x1","y1","bisect","lo","hi","mid","topology","geometries","feature$1","arc","points","arcs","absolute","ring","polygon","geometryType","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","stitchArcs","ends","p0","dp","fragmentByEnd","fragmentByStart","stitchedArcs","fragments","emptyIndex","fg","gf","meshArcs","geomsByArc","geoms","cartesianTriangleArea","triangle","area","mergeArcs","register","ring$$","polygonsByArc","polygons","components","component","neighbors","ki","indexesByArc","indexes","ij","ik","compareArea","minAreaHeap","down","heap","removed","presimplify","triangleArea","relative","triangles","maxArea","previous","inputs","memo","gj","GeometryCollection","Feature","FeatureCollection","earcut","holeIndices","hasHoles","outerLen","outerNode","linkedList","minX","minY","maxX","maxY","invSize","eliminateHoles","earcutLinked","clockwise","signedArea","insertNode","equals","filterPoints","again","steiner","ear","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","prevZ","nextZ","locallyInside","isValidDiagonal","splitPolygon","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","hx","hy","qx","mx","my","tanMin","sortLinked","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","middleInside","q1","q2","inside","b2","an","bp","sum","deviation","polygonArea","trianglesArea","flatten","extrudePolygon","cells","topCells","full","sideCells","closed","bottomCells","_textEncoding","Buffer","mergeFloat32Arrays","arrays","Int32Array","_array","mergedArray","splitFloat32Array","subarray","mergeUint8Arrays","splitUint8Array","lengths","_attributes","mergedAttributes","lastLengths","createLineGeometry","lines","verticesCount","_pickingId","az","c1","computeBoundingBox","createGeometry","facesCount","pA","pB","pC","ab","bz","c2","cz","c3","cross","nx","ny","nz","textEncoder","TextEncoder","textDecoder","TextDecoder","stringToUint8Array","encode","uint8ArrayToString","decode","fillTypedArray","encoding","inRange","includes","ToDictionary","stringToCodePoints","u","charCodeAt","codePointsToString","code_points","cp","isASCIIByte","Stream","tokens","decoderError","fatal","opt_code_point","encoderError","code_point","Decoder","Encoder","getEncoding","label","label_to_encoding","indexCodePointFor","pointer","indexPointerFor","indexGB18030RangesCodePointFor","code_point_offset","entry","indexGB18030RangesPointerFor","pointer_offset","indexShiftJISPointerFor","shift_jis_index","index_","indexBig5PointerFor","big5_index_no_hkscs","DEFAULT_ENCODING","_encoding","_decoder","_ignoreBOM","_BOMseen","_error_mode","_do_not_flush","RangeError","decoders","dec","ignoreBOM","_encoder","_fatal","encoders","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","end_of_stream","finished","prepend","UTF8Encoder","isASCIICodePoint","temp","SingleByteDecoder","SingleByteEncoder","GB18030Decoder","gb18030_first","gb18030_second","gb18030_third","lead","GB18030Encoder","gbk_flag","trail","byte1","byte2","byte3","byte4","Big5Decoder","Big5_lead","Big5Encoder","EUCJPDecoder","eucjp_jis0212_flag","eucjp_lead","EUCJPEncoder","ISO2022JPDecoder","states","ASCII","Roman","Katakana","LeadByte","TrailByte","EscapeStart","Escape","iso2022jp_decoder_state","iso2022jp_decoder_output_state","iso2022jp_lead","iso2022jp_output_flag","output_flag","ISO2022JPEncoder","jis0208","iso2022jp_state","ShiftJISDecoder","Shift_JIS_lead","lead_offset","ShiftJISEncoder","EUCKRDecoder","euckr_lead","EUCKREncoder","convertCodeUnitToBytes","code_unit","utf16be","UTF16Decoder","utf16_be","utf16_lead_byte","utf16_lead_surrogate","lead_surrogate","UTF16Encoder","XUserDefinedDecoder","XUserDefinedEncoder","endOfStream","read","token","encodings","labels","heading","category","serializeStream","byteOffset","byteLength","input_stream","opt_string","EncodingIndexes","big5","euc-kr","gb18030","gb18030-ranges","jis0212","ibm866","iso-8859-2","iso-8859-3","iso-8859-4","iso-8859-5","iso-8859-6","iso-8859-7","iso-8859-8","iso-8859-10","iso-8859-13","iso-8859-14","iso-8859-15","iso-8859-16","koi8-r","koi8-u","macintosh","windows-874","windows-1250","windows-1251","windows-1252","windows-1253","windows-1254","windows-1255","windows-1256","windows-1257","windows-1258","x-mac-cyrillic","_PickingShader","_PickingShader2","linePadding","setPointSize","setPointScale","PickingShader","_earcut3","_utilExtrudePolygon","_utilExtrudePolygon2","_coordinates","isSingle","_setCoordinates","_setPickingId","_addPickingEvents","SetBufferAttributes","_projectedCoordinates","_bufferAttributes","outlineAttributes","_outlineBufferAttributes","_flat","tops","getPickingId","point2d","point3d","_bounds","_convertCoordinates","_projectedBounds","_projectCoordinates","_offset","ToEarcut","Triangulate","_tops","outlineColour","Set2DOutline","pickingId","ToAttributes","_ring","verticeCount","first","Material","vertexColors","VertexColors","envMapIntensity","MeshPhongMaterial","ignoreDepth","t1","t2","t3","lineHeight","_PolygonLayer","pointColor","pointHeight","Geometry","geometryWidth","geometryHeight","_geometry","fromGeometry","_normals","normal","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","_utilStringify","_utilStringify2","onEachFeatureWorker","onAddAttributes","onClick","_process","functionToString","_execWorker","RequestGeoJSON","fc","originPoint","processPromises","_processPolygonResults","polylines","_processPolylineResults","_processPointResults","splitOutlinePositions","splitOutlineColors","splitPositions","splitNormals","splitColors","splitTops","splitProperties","flats","outlineObjects","polygonOutlineAttributeLengths","_addPicking","customAttribute","customAttributes","bufferAttributes","outputPromises","_results","_results2","polygonResult","outlineResult","_this4","_this5","_this6","_style","_properties","_pointGeometry","ProcessGeoJSON","stringToFunction","converted","polyline","polygonBufferPromises","polylineBufferPromises","pointBufferPromises","ProcessPolygons","ProcessPolylines","ProcessPoints","polygonPromises","outlinePositions","outlineColors","mergedOutlineAttributes","mergedProperties","polylinePromises","pointPromises","Stringify","_GeoJSONTileLayer2","_GeoJSONTileLayer3","_GeoJSONTileLayer","_GeoJSONLayer2","_GeoJSONLayer3","_GeoJSONWorkerLayer2","_GeoJSONWorkerLayer3","_wrapNum","_wrapNum2","_GeoJSON","_GeoJSON2","_Buffer","_Buffer2","_Worker","_Worker2","_Stringify","_Stringify2","wrapNum","range","includeMax"],"mappings":"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,WACA,aACA,mBAEA/rE,KAAA,eAGA+rE,QACA,kBACA,WACA,WACA,QACA,SACA,aACA,aACA,YACA,WACA,aACA,kBACA,gBAEA/rE,KAAA,eAGA+rE,QACA,cACA,mBACA,SACA,aACA,eACA,aACA,YACA,WACA,aACA,kBACA,UAEA/rE,KAAA,eAGA+rE,QACA,cACA,eACA,WAEA/rE,KAAA,iBAGA+rE,QACA,cACA,cACA,aACA,aACA,YACA,KACA,UAEA/rE,KAAA,gBAGA+rE,QACA,cACA,aACA,aAEA/rE,KAAA,gBAGA+rE,QACA,cACA,aACA,aAEA/rE,KAAA,gBAGA+rE,QACA,cACA,cACA,aACA,YACA,cACA,MAEA/rE,KAAA,gBAGA+rE,QACA,eAEA/rE,KAAA,gBAGA+rE,QACA,UACA,MACA,OACA,SACA,UAEA/rE,KAAA,WAGA+rE,QACA,UACA,UAEA/rE,KAAA,WAGA+rE,QACA,cACA,MACA,YACA,eAEA/rE,KAAA,cAGA+rE,QACA,UACA,cACA,aACA,YACA,UACA,eAEA/rE,KAAA,gBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,iBACA,QACA,SACA,QACA,cACA,SACA,aACA,aACA,YACA,WACA,aACA,kBACA,KACA,SACA,WACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,cACA,aACA,aACA,YACA,WACA,aACA,kBACA,KACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,SACA,eACA,YAEA/rE,KAAA,iBAGA+rE,QACA,iBACA,mBAEA/rE,KAAA,mBAGAgsE,QAAA,iCAGAF,YAEAC,QACA,UACA,WACA,kBACA,SACA,UACA,aACA,MACA,YACA,SAEA/rE,KAAA,QAGA+rE,QACA,WAEA/rE,KAAA,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,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,MACAC,ccceeeAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,IAAA,IAAA,IAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,IAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACAC,eeegggggggggBAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,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","file":"vizicities.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"THREE\"), require(\"TweenLite\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"THREE\", \"TweenLite\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VIZI\"] = factory(require(\"THREE\"), require(\"TweenLite\"));\n\telse\n\t\troot[\"VIZI\"] = factory(root[\"THREE\"], root[\"TweenLite\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_51__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"THREE\"), require(\"TweenLite\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"THREE\", \"TweenLite\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VIZI\"] = factory(require(\"THREE\"), require(\"TweenLite\"));\n\telse\n\t\troot[\"VIZI\"] = factory(root[\"THREE\"], root[\"TweenLite\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_51__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _World = __webpack_require__(1);\n\t\n\tvar _World2 = _interopRequireDefault(_World);\n\t\n\tvar _controlsIndex = __webpack_require__(47);\n\t\n\tvar _controlsIndex2 = _interopRequireDefault(_controlsIndex);\n\t\n\tvar _geoGeoJs = __webpack_require__(4);\n\t\n\tvar _geoGeoJs2 = _interopRequireDefault(_geoGeoJs);\n\t\n\tvar _layerLayer = __webpack_require__(31);\n\t\n\tvar _layerLayer2 = _interopRequireDefault(_layerLayer);\n\t\n\tvar _layerLayerGroup = __webpack_require__(52);\n\t\n\tvar _layerLayerGroup2 = _interopRequireDefault(_layerLayerGroup);\n\t\n\tvar _layerEnvironmentEnvironmentLayer = __webpack_require__(30);\n\t\n\tvar _layerEnvironmentEnvironmentLayer2 = _interopRequireDefault(_layerEnvironmentEnvironmentLayer);\n\t\n\tvar _layerTileImageTileLayer = __webpack_require__(53);\n\t\n\tvar _layerTileImageTileLayer2 = _interopRequireDefault(_layerTileImageTileLayer);\n\t\n\tvar _layerTileGeoJSONTileLayer = __webpack_require__(71);\n\t\n\tvar _layerTileGeoJSONTileLayer2 = _interopRequireDefault(_layerTileGeoJSONTileLayer);\n\t\n\tvar _layerTileTopoJSONTileLayer = __webpack_require__(93);\n\t\n\tvar _layerTileTopoJSONTileLayer2 = _interopRequireDefault(_layerTileTopoJSONTileLayer);\n\t\n\tvar _layerTileGeoJSONTile = __webpack_require__(72);\n\t\n\tvar _layerTileGeoJSONTile2 = _interopRequireDefault(_layerTileGeoJSONTile);\n\t\n\tvar _layerGeoJSONLayer = __webpack_require__(73);\n\t\n\tvar _layerGeoJSONLayer2 = _interopRequireDefault(_layerGeoJSONLayer);\n\t\n\tvar _layerTopoJSONLayer = __webpack_require__(94);\n\t\n\tvar _layerTopoJSONLayer2 = _interopRequireDefault(_layerTopoJSONLayer);\n\t\n\tvar _layerGeoJSONWorkerLayer = __webpack_require__(91);\n\t\n\tvar _layerGeoJSONWorkerLayer2 = _interopRequireDefault(_layerGeoJSONWorkerLayer);\n\t\n\tvar _layerTopoJSONWorkerLayer = __webpack_require__(95);\n\t\n\tvar _layerTopoJSONWorkerLayer2 = _interopRequireDefault(_layerTopoJSONWorkerLayer);\n\t\n\tvar _layerGeometryPolygonLayer = __webpack_require__(88);\n\t\n\tvar _layerGeometryPolygonLayer2 = _interopRequireDefault(_layerGeometryPolygonLayer);\n\t\n\tvar _layerGeometryPolylineLayer = __webpack_require__(89);\n\t\n\tvar _layerGeometryPolylineLayer2 = _interopRequireDefault(_layerGeometryPolylineLayer);\n\t\n\tvar _layerGeometryPointLayer = __webpack_require__(90);\n\t\n\tvar _layerGeometryPointLayer2 = _interopRequireDefault(_layerGeometryPointLayer);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _geoPoint2 = _interopRequireDefault(_geoPoint);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _geoLatLon2 = _interopRequireDefault(_geoLatLon);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\tvar _utilIndex = __webpack_require__(96);\n\t\n\tvar _utilIndex2 = _interopRequireDefault(_utilIndex);\n\t\n\tvar VIZI = {\n\t  version: '0.3',\n\t\n\t  // Public API\n\t  World: _World2['default'],\n\t  world: _World.world,\n\t  Controls: _controlsIndex2['default'],\n\t  Geo: _geoGeoJs2['default'],\n\t  Layer: _layerLayer2['default'],\n\t  layer: _layerLayer.layer,\n\t  EnvironmentLayer: _layerEnvironmentEnvironmentLayer2['default'],\n\t  environmentLayer: _layerEnvironmentEnvironmentLayer.environmentLayer,\n\t  ImageTileLayer: _layerTileImageTileLayer2['default'],\n\t  imageTileLayer: _layerTileImageTileLayer.imageTileLayer,\n\t  GeoJSONTileLayer: _layerTileGeoJSONTileLayer2['default'],\n\t  geoJSONTileLayer: _layerTileGeoJSONTileLayer.geoJSONTileLayer,\n\t  GeoJSONTile: _layerTileGeoJSONTile2['default'],\n\t  geoJSONTile: _layerTileGeoJSONTile.geoJSONTile,\n\t  TopoJSONTileLayer: _layerTileTopoJSONTileLayer2['default'],\n\t  topoJSONTileLayer: _layerTileTopoJSONTileLayer.topoJSONTileLayer,\n\t  GeoJSONLayer: _layerGeoJSONLayer2['default'],\n\t  geoJSONLayer: _layerGeoJSONLayer.geoJSONLayer,\n\t  TopoJSONLayer: _layerTopoJSONLayer2['default'],\n\t  topoJSONLayer: _layerTopoJSONLayer.topoJSONLayer,\n\t  GeoJSONWorkerLayer: _layerGeoJSONWorkerLayer2['default'],\n\t  geoJSONWorkerLayer: _layerGeoJSONWorkerLayer.geoJSONWorkerLayer,\n\t  TopoJSONWorkerLayer: _layerTopoJSONWorkerLayer2['default'],\n\t  topoJSONWorkerLayer: _layerTopoJSONWorkerLayer.topoJSONWorkerLayer,\n\t  PolygonLayer: _layerGeometryPolygonLayer2['default'],\n\t  polygonLayer: _layerGeometryPolygonLayer.polygonLayer,\n\t  PolylineLayer: _layerGeometryPolylineLayer2['default'],\n\t  polylineLayer: _layerGeometryPolylineLayer.polylineLayer,\n\t  PointLayer: _layerGeometryPointLayer2['default'],\n\t  pointLayer: _layerGeometryPointLayer.pointLayer,\n\t  Point: _geoPoint2['default'],\n\t  point: _geoPoint.point,\n\t  LatLon: _geoLatLon2['default'],\n\t  latLon: _geoLatLon.latLon,\n\t  PickingMaterial: _enginePickingMaterial2['default'],\n\t  Util: _utilIndex2['default']\n\t};\n\t\n\texports['default'] = VIZI;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _eventemitter3 = __webpack_require__(2);\n\t\n\tvar _eventemitter32 = _interopRequireDefault(_eventemitter3);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _geoGeo = __webpack_require__(4);\n\t\n\tvar _geoGeo2 = _interopRequireDefault(_geoGeo);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _engineEngine = __webpack_require__(7);\n\t\n\tvar _engineEngine2 = _interopRequireDefault(_engineEngine);\n\t\n\tvar _layerEnvironmentEnvironmentLayer = __webpack_require__(30);\n\t\n\tvar _layerEnvironmentEnvironmentLayer2 = _interopRequireDefault(_layerEnvironmentEnvironmentLayer);\n\t\n\tvar _utilWorker = __webpack_require__(44);\n\t\n\tvar _utilWorker2 = _interopRequireDefault(_utilWorker);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// Pretty much any event someone using ViziCities would need will be emitted or\n\t// proxied by World (eg. render events, etc)\n\t\n\tvar World = (function (_EventEmitter) {\n\t  _inherits(World, _EventEmitter);\n\t\n\t  function World(domId, options) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, World);\n\t\n\t    _get(Object.getPrototypeOf(World.prototype), 'constructor', this).call(this);\n\t\n\t    var defaults = {\n\t      skybox: false,\n\t      postProcessing: false\n\t    };\n\t\n\t    this.options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    this._layers = [];\n\t    this._controls = [];\n\t\n\t    this._initContainer(domId);\n\t    this._initAttribution();\n\t    this._initEngine();\n\t\n\t    this._initEnvironment().then(function () {\n\t      _this._initEvents();\n\t\n\t      _this._pause = false;\n\t\n\t      // Kick off the update and render loop\n\t      _this._update();\n\t    });\n\t  }\n\t\n\t  _createClass(World, [{\n\t    key: 'createWorkers',\n\t    value: function createWorkers(maxWorkers, workerScript) {\n\t      return _utilWorker2['default'].createWorkers(maxWorkers, workerScript);\n\t    }\n\t  }, {\n\t    key: '_initContainer',\n\t    value: function _initContainer(domId) {\n\t      this._container = document.getElementById(domId);\n\t    }\n\t  }, {\n\t    key: '_initAttribution',\n\t    value: function _initAttribution() {\n\t      var message = '<a href=\"http://vizicities.com\" target=\"_blank\">ViziCities</a> | <a id=\"show-attr\" href=\"#\">Attribution</a>';\n\t\n\t      var element = document.createElement('div');\n\t      element.classList.add('vizicities-attribution');\n\t\n\t      var additionalElem = document.createElement('div');\n\t      additionalElem.id = 'attribution-container';\n\t\n\t      element.innerHTML = message;\n\t      element.appendChild(additionalElem);\n\t\n\t      this._container.appendChild(element);\n\t\n\t      document.getElementById('show-attr').addEventListener('click', function (e) {\n\t        e.currentTarget.parentNode.classList.toggle('is-visible');\n\t      });\n\t    }\n\t  }, {\n\t    key: '_initEngine',\n\t    value: function _initEngine() {\n\t      this._engine = new _engineEngine2['default'](this._container, this);\n\t\n\t      // Engine events\n\t      //\n\t      // Consider proxying these through events on World for public access\n\t      // this._engine.on('preRender', () => {});\n\t      // this._engine.on('postRender', () => {});\n\t    }\n\t  }, {\n\t    key: '_initEnvironment',\n\t    value: function _initEnvironment() {\n\t      // Not sure if I want to keep this as a private API\n\t      //\n\t      // Makes sense to allow others to customise their environment so perhaps\n\t      // add some method of disable / overriding the environment settings\n\t      this._environment = new _layerEnvironmentEnvironmentLayer2['default']({\n\t        skybox: this.options.skybox\n\t      });\n\t\n\t      return this._environment.addTo(this);\n\t    }\n\t  }, {\n\t    key: '_initEvents',\n\t    value: function _initEvents() {\n\t      this.on('controlsMoveEnd', this._onControlsMoveEnd);\n\t    }\n\t  }, {\n\t    key: '_onControlsMoveEnd',\n\t    value: function _onControlsMoveEnd(point) {\n\t      var _point = (0, _geoPoint.point)(point.x, point.z);\n\t      this._resetView(this.pointToLatLon(_point), _point);\n\t    }\n\t\n\t    // Reset world view\n\t  }, {\n\t    key: '_resetView',\n\t    value: function _resetView(latlon, point) {\n\t      this.emit('preResetView');\n\t\n\t      this._moveStart();\n\t      this._move(latlon, point);\n\t      this._moveEnd();\n\t\n\t      this.emit('postResetView');\n\t    }\n\t  }, {\n\t    key: '_moveStart',\n\t    value: function _moveStart() {\n\t      this.emit('moveStart');\n\t    }\n\t  }, {\n\t    key: '_move',\n\t    value: function _move(latlon, point) {\n\t      this._lastPosition = latlon;\n\t      this.emit('move', latlon, point);\n\t    }\n\t  }, {\n\t    key: '_moveEnd',\n\t    value: function _moveEnd() {\n\t      this.emit('moveEnd');\n\t    }\n\t  }, {\n\t    key: '_update',\n\t    value: function _update() {\n\t      if (this._pause) {\n\t        return;\n\t      }\n\t\n\t      var delta = this._engine.clock.getDelta();\n\t\n\t      // Once _update is called it will run forever, for now\n\t      window.requestAnimationFrame(this._update.bind(this));\n\t\n\t      // Update controls\n\t      // this._controls.forEach(controls => {\n\t      //   controls.update(delta);\n\t      // });\n\t\n\t      this.emit('preUpdate', delta);\n\t      this._engine.update(delta);\n\t      this.emit('postUpdate', delta);\n\t    }\n\t  }, {\n\t    key: '_addAttribution',\n\t    value: function _addAttribution(id, message) {\n\t      var container = document.getElementById('attribution-container');\n\t\n\t      var span = document.createElement('p');\n\t      span.dataset.layer = id;\n\t      span.innerHTML = message;\n\t\n\t      container.appendChild(span);\n\t    }\n\t  }, {\n\t    key: '_removeAttribution',\n\t    value: function _removeAttribution(id) {\n\t      var elem = document.querySelectorAll('#attribution-container [data-layer=\"' + id + '\"]')[0];\n\t      if (elem) {\n\t        elem.remove();\n\t      }\n\t    }\n\t\n\t    // Set world view\n\t  }, {\n\t    key: 'setView',\n\t    value: function setView(latlon) {\n\t      // Store initial geographic coordinate for the [0,0,0] world position\n\t      //\n\t      // The origin point doesn't move in three.js / 3D space so only set it once\n\t      // here instead of every time _resetView is called\n\t      //\n\t      // If it was updated every time then coorindates would shift over time and\n\t      // would be out of place / context with previously-placed points (0,0 would\n\t      // refer to a different point each time)\n\t      this._originLatlon = latlon;\n\t      this._originPoint = this.project(latlon);\n\t\n\t      this._resetView(latlon);\n\t      return this;\n\t    }\n\t\n\t    // Return world geographic position\n\t  }, {\n\t    key: 'getPosition',\n\t    value: function getPosition() {\n\t      return this._lastPosition;\n\t    }\n\t\n\t    // Transform geographic coordinate to world point\n\t    //\n\t    // This doesn't take into account the origin offset\n\t    //\n\t    // For example, this takes a geographic coordinate and returns a point\n\t    // relative to the origin point of the projection (not the world)\n\t  }, {\n\t    key: 'project',\n\t    value: function project(latlon) {\n\t      return _geoGeo2['default'].latLonToPoint((0, _geoLatLon.latLon)(latlon));\n\t    }\n\t\n\t    // Transform world point to geographic coordinate\n\t    //\n\t    // This doesn't take into account the origin offset\n\t    //\n\t    // For example, this takes a point relative to the origin point of the\n\t    // projection (not the world) and returns a geographic coordinate\n\t  }, {\n\t    key: 'unproject',\n\t    value: function unproject(point) {\n\t      return _geoGeo2['default'].pointToLatLon((0, _geoPoint.point)(point));\n\t    }\n\t\n\t    // Takes into account the origin offset\n\t    //\n\t    // For example, this takes a geographic coordinate and returns a point\n\t    // relative to the three.js / 3D origin (0,0)\n\t  }, {\n\t    key: 'latLonToPoint',\n\t    value: function latLonToPoint(latlon) {\n\t      var projectedPoint = this.project((0, _geoLatLon.latLon)(latlon));\n\t      return projectedPoint._subtract(this._originPoint);\n\t    }\n\t\n\t    // Takes into account the origin offset\n\t    //\n\t    // For example, this takes a point relative to the three.js / 3D origin (0,0)\n\t    // and returns the exact geographic coordinate at that point\n\t  }, {\n\t    key: 'pointToLatLon',\n\t    value: function pointToLatLon(point) {\n\t      var projectedPoint = (0, _geoPoint.point)(point).add(this._originPoint);\n\t      return this.unproject(projectedPoint);\n\t    }\n\t\n\t    // Return pointscale for a given geographic coordinate\n\t  }, {\n\t    key: 'pointScale',\n\t    value: function pointScale(latlon, accurate) {\n\t      return _geoGeo2['default'].pointScale(latlon, accurate);\n\t    }\n\t\n\t    // Convert from real meters to world units\n\t    //\n\t    // TODO: Would be nice not to have to pass in a pointscale here\n\t  }, {\n\t    key: 'metresToWorld',\n\t    value: function metresToWorld(metres, pointScale, zoom) {\n\t      return _geoGeo2['default'].metresToWorld(metres, pointScale, zoom);\n\t    }\n\t\n\t    // Convert from real meters to world units\n\t    //\n\t    // TODO: Would be nice not to have to pass in a pointscale here\n\t  }, {\n\t    key: 'worldToMetres',\n\t    value: function worldToMetres(worldUnits, pointScale, zoom) {\n\t      return _geoGeo2['default'].worldToMetres(worldUnits, pointScale, zoom);\n\t    }\n\t\n\t    // Unsure if it's a good idea to expose this here for components like\n\t    // GridLayer to use (eg. to keep track of a frustum)\n\t  }, {\n\t    key: 'getCamera',\n\t    value: function getCamera() {\n\t      return this._engine._camera;\n\t    }\n\t  }, {\n\t    key: 'addLayer',\n\t    value: function addLayer(layer) {\n\t      var _this2 = this;\n\t\n\t      // Is is right to assume that there will always be some other layer\n\t      // managing layers with output set to false?\n\t      this._layers.push(layer);\n\t\n\t      if (layer.isOutput() && layer.isOutputToScene()) {\n\t        // Could move this into Layer but it'll do here for now\n\t        this._engine._scene.add(layer._object3D);\n\t        this._engine._domScene3D.add(layer._domObject3D);\n\t        this._engine._domScene2D.add(layer._domObject2D);\n\t      }\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        layer._addToWorld(_this2).then(function () {\n\t          if (layer._options.attribution) {\n\t            _this2._addAttribution(layer._options.id, layer._options.attribution);\n\t          }\n\t\n\t          // TODO: Consider moving this so it doesn't fire for layers that are\n\t          // actually managed by a parent layer (eg. tiles)\n\t          _this2.emit('layerAdded', layer);\n\t\n\t          resolve(_this2);\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // Remove layer from world and scene but don't destroy it entirely\n\t  }, {\n\t    key: 'removeLayer',\n\t    value: function removeLayer(layer) {\n\t      var layerIndex = this._layers.indexOf(layer);\n\t\n\t      if (layerIndex > -1) {\n\t        // Remove from this._layers\n\t        this._layers.splice(layerIndex, 1);\n\t      };\n\t\n\t      if (layer._options.attribution) {\n\t        this._removeAttribution(layer._options.id);\n\t      }\n\t\n\t      if (layer.isOutput() && layer.isOutputToScene()) {\n\t        this._engine._scene.remove(layer._object3D);\n\t        this._engine._domScene3D.remove(layer._domObject3D);\n\t        this._engine._domScene2D.remove(layer._domObject2D);\n\t      }\n\t\n\t      this.emit('layerRemoved');\n\t\n\t      return Promise.resolve(this);\n\t    }\n\t  }, {\n\t    key: 'addControls',\n\t    value: function addControls(controls) {\n\t      controls._addToWorld(this);\n\t\n\t      this._controls.push(controls);\n\t\n\t      this.emit('controlsAdded', controls);\n\t\n\t      return Promise.resolve(this);\n\t    }\n\t\n\t    // Remove controls from world but don't destroy them entirely\n\t  }, {\n\t    key: 'removeControls',\n\t    value: function removeControls(controls) {\n\t      var controlsIndex = this._controls.indexOf(controlsIndex);\n\t\n\t      if (controlsIndex > -1) {\n\t        this._controls.splice(controlsIndex, 1);\n\t      };\n\t\n\t      this.emit('controlsRemoved', controls);\n\t\n\t      return Promise.resolve(this);\n\t    }\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      this._pause = true;\n\t    }\n\t  }, {\n\t    key: 'start',\n\t    value: function start() {\n\t      this._pause = false;\n\t      this._update();\n\t    }\n\t\n\t    // Destroys the world(!) and removes it from the scene and memory\n\t    //\n\t    // TODO: World out why so much three.js stuff is left in the heap after this\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this.stop();\n\t\n\t      // Remove listeners\n\t      this.off('controlsMoveEnd', this._onControlsMoveEnd);\n\t\n\t      var i;\n\t\n\t      // Remove all controls\n\t      var controls;\n\t      for (i = this._controls.length - 1; i >= 0; i--) {\n\t        controls = this._controls[0];\n\t        this.removeControls(controls);\n\t        controls.destroy();\n\t      };\n\t\n\t      // Remove all layers\n\t      var layer;\n\t      for (i = this._layers.length - 1; i >= 0; i--) {\n\t        layer = this._layers[0];\n\t        this.removeLayer(layer);\n\t        layer.destroy();\n\t      };\n\t\n\t      // Environment layer is removed with the other layers\n\t      this._environment = null;\n\t\n\t      this._engine.destroy();\n\t      this._engine = null;\n\t\n\t      // Clean the container / remove the canvas\n\t      while (this._container.firstChild) {\n\t        this._container.removeChild(this._container.firstChild);\n\t      }\n\t\n\t      this._container = null;\n\t    }\n\t  }]);\n\t\n\t  return World;\n\t})(_eventemitter32['default']);\n\t\n\texports['default'] = World;\n\t\n\tvar noNew = function noNew(domId, options) {\n\t  return new World(domId, options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.world = noNew;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar has = Object.prototype.hasOwnProperty;\n\t\n\t//\n\t// We store our EE objects in a plain object whose properties are event names.\n\t// If `Object.create(null)` is not supported we prefix the event names with a\n\t// `~` to make sure that the built-in object properties are not overridden or\n\t// used as an attack vector.\n\t// We also assume that `Object.create(null)` is available when the event name\n\t// is an ES6 Symbol.\n\t//\n\tvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\t\n\t/**\n\t * Representation of a single EventEmitter function.\n\t *\n\t * @param {Function} fn Event handler to be called.\n\t * @param {Mixed} context Context for function execution.\n\t * @param {Boolean} [once=false] Only emit once\n\t * @api private\n\t */\n\tfunction EE(fn, context, once) {\n\t  this.fn = fn;\n\t  this.context = context;\n\t  this.once = once || false;\n\t}\n\t\n\t/**\n\t * Minimal EventEmitter interface that is molded against the Node.js\n\t * EventEmitter interface.\n\t *\n\t * @constructor\n\t * @api public\n\t */\n\tfunction EventEmitter() { /* Nothing to set */ }\n\t\n\t/**\n\t * Hold the assigned EventEmitters by name.\n\t *\n\t * @type {Object}\n\t * @private\n\t */\n\tEventEmitter.prototype._events = undefined;\n\t\n\t/**\n\t * Return an array listing the events for which the emitter has registered\n\t * listeners.\n\t *\n\t * @returns {Array}\n\t * @api public\n\t */\n\tEventEmitter.prototype.eventNames = function eventNames() {\n\t  var events = this._events\n\t    , names = []\n\t    , name;\n\t\n\t  if (!events) return names;\n\t\n\t  for (name in events) {\n\t    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n\t  }\n\t\n\t  if (Object.getOwnPropertySymbols) {\n\t    return names.concat(Object.getOwnPropertySymbols(events));\n\t  }\n\t\n\t  return names;\n\t};\n\t\n\t/**\n\t * Return a list of assigned event listeners.\n\t *\n\t * @param {String} event The events that should be listed.\n\t * @param {Boolean} exists We only need to know if there are listeners.\n\t * @returns {Array|Boolean}\n\t * @api public\n\t */\n\tEventEmitter.prototype.listeners = function listeners(event, exists) {\n\t  var evt = prefix ? prefix + event : event\n\t    , available = this._events && this._events[evt];\n\t\n\t  if (exists) return !!available;\n\t  if (!available) return [];\n\t  if (available.fn) return [available.fn];\n\t\n\t  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n\t    ee[i] = available[i].fn;\n\t  }\n\t\n\t  return ee;\n\t};\n\t\n\t/**\n\t * Emit an event to all registered event listeners.\n\t *\n\t * @param {String} event The name of the event.\n\t * @returns {Boolean} Indication if we've emitted an event.\n\t * @api public\n\t */\n\tEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n\t  var evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events || !this._events[evt]) return false;\n\t\n\t  var listeners = this._events[evt]\n\t    , len = arguments.length\n\t    , args\n\t    , i;\n\t\n\t  if ('function' === typeof listeners.fn) {\n\t    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\t\n\t    switch (len) {\n\t      case 1: return listeners.fn.call(listeners.context), true;\n\t      case 2: return listeners.fn.call(listeners.context, a1), true;\n\t      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n\t      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n\t      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n\t      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n\t    }\n\t\n\t    for (i = 1, args = new Array(len -1); i < len; i++) {\n\t      args[i - 1] = arguments[i];\n\t    }\n\t\n\t    listeners.fn.apply(listeners.context, args);\n\t  } else {\n\t    var length = listeners.length\n\t      , j;\n\t\n\t    for (i = 0; i < length; i++) {\n\t      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\t\n\t      switch (len) {\n\t        case 1: listeners[i].fn.call(listeners[i].context); break;\n\t        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n\t        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n\t        default:\n\t          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n\t            args[j - 1] = arguments[j];\n\t          }\n\t\n\t          listeners[i].fn.apply(listeners[i].context, args);\n\t      }\n\t    }\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\t/**\n\t * Register a new EventListener for the given event.\n\t *\n\t * @param {String} event Name of the event.\n\t * @param {Function} fn Callback function.\n\t * @param {Mixed} [context=this] The context of the function.\n\t * @api public\n\t */\n\tEventEmitter.prototype.on = function on(event, fn, context) {\n\t  var listener = new EE(fn, context || this)\n\t    , evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events) this._events = prefix ? {} : Object.create(null);\n\t  if (!this._events[evt]) this._events[evt] = listener;\n\t  else {\n\t    if (!this._events[evt].fn) this._events[evt].push(listener);\n\t    else this._events[evt] = [\n\t      this._events[evt], listener\n\t    ];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Add an EventListener that's only called once.\n\t *\n\t * @param {String} event Name of the event.\n\t * @param {Function} fn Callback function.\n\t * @param {Mixed} [context=this] The context of the function.\n\t * @api public\n\t */\n\tEventEmitter.prototype.once = function once(event, fn, context) {\n\t  var listener = new EE(fn, context || this, true)\n\t    , evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events) this._events = prefix ? {} : Object.create(null);\n\t  if (!this._events[evt]) this._events[evt] = listener;\n\t  else {\n\t    if (!this._events[evt].fn) this._events[evt].push(listener);\n\t    else this._events[evt] = [\n\t      this._events[evt], listener\n\t    ];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove event listeners.\n\t *\n\t * @param {String} event The event we want to remove.\n\t * @param {Function} fn The listener that we need to find.\n\t * @param {Mixed} context Only remove listeners matching this context.\n\t * @param {Boolean} once Only remove once listeners.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n\t  var evt = prefix ? prefix + event : event;\n\t\n\t  if (!this._events || !this._events[evt]) return this;\n\t\n\t  var listeners = this._events[evt]\n\t    , events = [];\n\t\n\t  if (fn) {\n\t    if (listeners.fn) {\n\t      if (\n\t           listeners.fn !== fn\n\t        || (once && !listeners.once)\n\t        || (context && listeners.context !== context)\n\t      ) {\n\t        events.push(listeners);\n\t      }\n\t    } else {\n\t      for (var i = 0, length = listeners.length; i < length; i++) {\n\t        if (\n\t             listeners[i].fn !== fn\n\t          || (once && !listeners[i].once)\n\t          || (context && listeners[i].context !== context)\n\t        ) {\n\t          events.push(listeners[i]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  //\n\t  // Reset the array, or remove it completely if we have no more listeners.\n\t  //\n\t  if (events.length) {\n\t    this._events[evt] = events.length === 1 ? events[0] : events;\n\t  } else {\n\t    delete this._events[evt];\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Remove all listeners or only the listeners for the specified event.\n\t *\n\t * @param {String} event The event want to remove all listeners for.\n\t * @api public\n\t */\n\tEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n\t  if (!this._events) return this;\n\t\n\t  if (event) delete this._events[prefix ? prefix + event : event];\n\t  else this._events = prefix ? {} : Object.create(null);\n\t\n\t  return this;\n\t};\n\t\n\t//\n\t// Alias methods names because people roll like that.\n\t//\n\tEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\tEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t//\n\t// This function doesn't apply anymore.\n\t//\n\tEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n\t  return this;\n\t};\n\t\n\t//\n\t// Expose the prefix.\n\t//\n\tEventEmitter.prefixed = prefix;\n\t\n\t//\n\t// Expose the module.\n\t//\n\tif (true) {\n\t  module.exports = EventEmitter;\n\t}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar MAX_SAFE_INTEGER = 9007199254740991;\n\t\n\t/** `Object#toString` result references. */\n\tvar argsTag = '[object Arguments]',\n\t    funcTag = '[object Function]',\n\t    genTag = '[object GeneratorFunction]';\n\t\n\t/** Used to detect unsigned integer values. */\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\t\n\t/**\n\t * A faster alternative to `Function#apply`, this function invokes `func`\n\t * with the `this` binding of `thisArg` and the arguments of `args`.\n\t *\n\t * @private\n\t * @param {Function} func The function to invoke.\n\t * @param {*} thisArg The `this` binding of `func`.\n\t * @param {Array} args The arguments to invoke `func` with.\n\t * @returns {*} Returns the result of `func`.\n\t */\n\tfunction apply(func, thisArg, args) {\n\t  switch (args.length) {\n\t    case 0: return func.call(thisArg);\n\t    case 1: return func.call(thisArg, args[0]);\n\t    case 2: return func.call(thisArg, args[0], args[1]);\n\t    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n\t  }\n\t  return func.apply(thisArg, args);\n\t}\n\t\n\t/**\n\t * The base implementation of `_.times` without support for iteratee shorthands\n\t * or max array length checks.\n\t *\n\t * @private\n\t * @param {number} n The number of times to invoke `iteratee`.\n\t * @param {Function} iteratee The function invoked per iteration.\n\t * @returns {Array} Returns the array of results.\n\t */\n\tfunction baseTimes(n, iteratee) {\n\t  var index = -1,\n\t      result = Array(n);\n\t\n\t  while (++index < n) {\n\t    result[index] = iteratee(index);\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Creates a unary function that invokes `func` with its argument transformed.\n\t *\n\t * @private\n\t * @param {Function} func The function to wrap.\n\t * @param {Function} transform The argument transform.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction overArg(func, transform) {\n\t  return function(arg) {\n\t    return func(transform(arg));\n\t  };\n\t}\n\t\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/** Used to check objects for own properties. */\n\tvar hasOwnProperty = objectProto.hasOwnProperty;\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\t\n\t/** Built-in value references. */\n\tvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\t\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeKeys = overArg(Object.keys, Object),\n\t    nativeMax = Math.max;\n\t\n\t/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\n\tvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\t\n\t/**\n\t * Creates an array of the enumerable property names of the array-like `value`.\n\t *\n\t * @private\n\t * @param {*} value The value to query.\n\t * @param {boolean} inherited Specify returning inherited property names.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction arrayLikeKeys(value, inherited) {\n\t  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n\t  // Safari 9 makes `arguments.length` enumerable in strict mode.\n\t  var result = (isArray(value) || isArguments(value))\n\t    ? baseTimes(value.length, String)\n\t    : [];\n\t\n\t  var length = result.length,\n\t      skipIndexes = !!length;\n\t\n\t  for (var key in value) {\n\t    if ((inherited || hasOwnProperty.call(value, key)) &&\n\t        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * Assigns `value` to `key` of `object` if the existing value is not equivalent\n\t * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * for equality comparisons.\n\t *\n\t * @private\n\t * @param {Object} object The object to modify.\n\t * @param {string} key The key of the property to assign.\n\t * @param {*} value The value to assign.\n\t */\n\tfunction assignValue(object, key, value) {\n\t  var objValue = object[key];\n\t  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n\t      (value === undefined && !(key in object))) {\n\t    object[key] = value;\n\t  }\n\t}\n\t\n\t/**\n\t * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n\t *\n\t * @private\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t */\n\tfunction baseKeys(object) {\n\t  if (!isPrototype(object)) {\n\t    return nativeKeys(object);\n\t  }\n\t  var result = [];\n\t  for (var key in Object(object)) {\n\t    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n\t      result.push(key);\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\t/**\n\t * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n\t *\n\t * @private\n\t * @param {Function} func The function to apply a rest parameter to.\n\t * @param {number} [start=func.length-1] The start position of the rest parameter.\n\t * @returns {Function} Returns the new function.\n\t */\n\tfunction baseRest(func, start) {\n\t  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n\t  return function() {\n\t    var args = arguments,\n\t        index = -1,\n\t        length = nativeMax(args.length - start, 0),\n\t        array = Array(length);\n\t\n\t    while (++index < length) {\n\t      array[index] = args[start + index];\n\t    }\n\t    index = -1;\n\t    var otherArgs = Array(start + 1);\n\t    while (++index < start) {\n\t      otherArgs[index] = args[index];\n\t    }\n\t    otherArgs[start] = array;\n\t    return apply(func, this, otherArgs);\n\t  };\n\t}\n\t\n\t/**\n\t * Copies properties of `source` to `object`.\n\t *\n\t * @private\n\t * @param {Object} source The object to copy properties from.\n\t * @param {Array} props The property identifiers to copy.\n\t * @param {Object} [object={}] The object to copy properties to.\n\t * @param {Function} [customizer] The function to customize copied values.\n\t * @returns {Object} Returns `object`.\n\t */\n\tfunction copyObject(source, props, object, customizer) {\n\t  object || (object = {});\n\t\n\t  var index = -1,\n\t      length = props.length;\n\t\n\t  while (++index < length) {\n\t    var key = props[index];\n\t\n\t    var newValue = customizer\n\t      ? customizer(object[key], source[key], key, object, source)\n\t      : undefined;\n\t\n\t    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n\t  }\n\t  return object;\n\t}\n\t\n\t/**\n\t * Creates a function like `_.assign`.\n\t *\n\t * @private\n\t * @param {Function} assigner The function to assign values.\n\t * @returns {Function} Returns the new assigner function.\n\t */\n\tfunction createAssigner(assigner) {\n\t  return baseRest(function(object, sources) {\n\t    var index = -1,\n\t        length = sources.length,\n\t        customizer = length > 1 ? sources[length - 1] : undefined,\n\t        guard = length > 2 ? sources[2] : undefined;\n\t\n\t    customizer = (assigner.length > 3 && typeof customizer == 'function')\n\t      ? (length--, customizer)\n\t      : undefined;\n\t\n\t    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n\t      customizer = length < 3 ? undefined : customizer;\n\t      length = 1;\n\t    }\n\t    object = Object(object);\n\t    while (++index < length) {\n\t      var source = sources[index];\n\t      if (source) {\n\t        assigner(object, source, index, customizer);\n\t      }\n\t    }\n\t    return object;\n\t  });\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like index.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n\t */\n\tfunction isIndex(value, length) {\n\t  length = length == null ? MAX_SAFE_INTEGER : length;\n\t  return !!length &&\n\t    (typeof value == 'number' || reIsUint.test(value)) &&\n\t    (value > -1 && value % 1 == 0 && value < length);\n\t}\n\t\n\t/**\n\t * Checks if the given arguments are from an iteratee call.\n\t *\n\t * @private\n\t * @param {*} value The potential iteratee value argument.\n\t * @param {*} index The potential iteratee index or key argument.\n\t * @param {*} object The potential iteratee object argument.\n\t * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n\t *  else `false`.\n\t */\n\tfunction isIterateeCall(value, index, object) {\n\t  if (!isObject(object)) {\n\t    return false;\n\t  }\n\t  var type = typeof index;\n\t  if (type == 'number'\n\t        ? (isArrayLike(object) && isIndex(index, object.length))\n\t        : (type == 'string' && index in object)\n\t      ) {\n\t    return eq(object[index], value);\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * Checks if `value` is likely a prototype object.\n\t *\n\t * @private\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n\t */\n\tfunction isPrototype(value) {\n\t  var Ctor = value && value.constructor,\n\t      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\t\n\t  return value === proto;\n\t}\n\t\n\t/**\n\t * Performs a\n\t * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n\t * comparison between two values to determine if they are equivalent.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to compare.\n\t * @param {*} other The other value to compare.\n\t * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n\t * @example\n\t *\n\t * var object = { 'a': 1 };\n\t * var other = { 'a': 1 };\n\t *\n\t * _.eq(object, object);\n\t * // => true\n\t *\n\t * _.eq(object, other);\n\t * // => false\n\t *\n\t * _.eq('a', 'a');\n\t * // => true\n\t *\n\t * _.eq('a', Object('a'));\n\t * // => false\n\t *\n\t * _.eq(NaN, NaN);\n\t * // => true\n\t */\n\tfunction eq(value, other) {\n\t  return value === other || (value !== value && other !== other);\n\t}\n\t\n\t/**\n\t * Checks if `value` is likely an `arguments` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArguments(function() { return arguments; }());\n\t * // => true\n\t *\n\t * _.isArguments([1, 2, 3]);\n\t * // => false\n\t */\n\tfunction isArguments(value) {\n\t  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n\t  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n\t    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as an `Array` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n\t * @example\n\t *\n\t * _.isArray([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArray(document.body.children);\n\t * // => false\n\t *\n\t * _.isArray('abc');\n\t * // => false\n\t *\n\t * _.isArray(_.noop);\n\t * // => false\n\t */\n\tvar isArray = Array.isArray;\n\t\n\t/**\n\t * Checks if `value` is array-like. A value is considered array-like if it's\n\t * not a function and has a `value.length` that's an integer greater than or\n\t * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n\t * @example\n\t *\n\t * _.isArrayLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLike(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLike('abc');\n\t * // => true\n\t *\n\t * _.isArrayLike(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLike(value) {\n\t  return value != null && isLength(value.length) && !isFunction(value);\n\t}\n\t\n\t/**\n\t * This method is like `_.isArrayLike` except that it also checks if `value`\n\t * is an object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an array-like object,\n\t *  else `false`.\n\t * @example\n\t *\n\t * _.isArrayLikeObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject(document.body.children);\n\t * // => true\n\t *\n\t * _.isArrayLikeObject('abc');\n\t * // => false\n\t *\n\t * _.isArrayLikeObject(_.noop);\n\t * // => false\n\t */\n\tfunction isArrayLikeObject(value) {\n\t  return isObjectLike(value) && isArrayLike(value);\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Function` object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n\t * @example\n\t *\n\t * _.isFunction(_);\n\t * // => true\n\t *\n\t * _.isFunction(/abc/);\n\t * // => false\n\t */\n\tfunction isFunction(value) {\n\t  // The use of `Object#toString` avoids issues with the `typeof` operator\n\t  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n\t  var tag = isObject(value) ? objectToString.call(value) : '';\n\t  return tag == funcTag || tag == genTag;\n\t}\n\t\n\t/**\n\t * Checks if `value` is a valid array-like length.\n\t *\n\t * **Note:** This method is loosely based on\n\t * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n\t * @example\n\t *\n\t * _.isLength(3);\n\t * // => true\n\t *\n\t * _.isLength(Number.MIN_VALUE);\n\t * // => false\n\t *\n\t * _.isLength(Infinity);\n\t * // => false\n\t *\n\t * _.isLength('3');\n\t * // => false\n\t */\n\tfunction isLength(value) {\n\t  return typeof value == 'number' &&\n\t    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/**\n\t * Assigns own enumerable string keyed properties of source objects to the\n\t * destination object. Source objects are applied from left to right.\n\t * Subsequent sources overwrite property assignments of previous sources.\n\t *\n\t * **Note:** This method mutates `object` and is loosely based on\n\t * [`Object.assign`](https://mdn.io/Object/assign).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.10.0\n\t * @category Object\n\t * @param {Object} object The destination object.\n\t * @param {...Object} [sources] The source objects.\n\t * @returns {Object} Returns `object`.\n\t * @see _.assignIn\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t * }\n\t *\n\t * function Bar() {\n\t *   this.c = 3;\n\t * }\n\t *\n\t * Foo.prototype.b = 2;\n\t * Bar.prototype.d = 4;\n\t *\n\t * _.assign({ 'a': 0 }, new Foo, new Bar);\n\t * // => { 'a': 1, 'c': 3 }\n\t */\n\tvar assign = createAssigner(function(object, source) {\n\t  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n\t    copyObject(source, keys(source), object);\n\t    return;\n\t  }\n\t  for (var key in source) {\n\t    if (hasOwnProperty.call(source, key)) {\n\t      assignValue(object, key, source[key]);\n\t    }\n\t  }\n\t});\n\t\n\t/**\n\t * Creates an array of the own enumerable property names of `object`.\n\t *\n\t * **Note:** Non-object values are coerced to objects. See the\n\t * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n\t * for more details.\n\t *\n\t * @static\n\t * @since 0.1.0\n\t * @memberOf _\n\t * @category Object\n\t * @param {Object} object The object to query.\n\t * @returns {Array} Returns the array of property names.\n\t * @example\n\t *\n\t * function Foo() {\n\t *   this.a = 1;\n\t *   this.b = 2;\n\t * }\n\t *\n\t * Foo.prototype.c = 3;\n\t *\n\t * _.keys(new Foo);\n\t * // => ['a', 'b'] (iteration order is not guaranteed)\n\t *\n\t * _.keys('hi');\n\t * // => ['0', '1']\n\t */\n\tfunction keys(object) {\n\t  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n\t}\n\t\n\tmodule.exports = assign;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _LatLon = __webpack_require__(5);\n\t\n\tvar _Point = __webpack_require__(6);\n\t\n\tvar Geo = {};\n\t\n\t// Radius / WGS84 semi-major axis\n\tGeo.R = 6378137;\n\tGeo.MAX_LATITUDE = 85.0511287798;\n\t\n\t// WGS84 eccentricity\n\tGeo.ECC = 0.081819191;\n\tGeo.ECC2 = 0.081819191 * 0.081819191;\n\t\n\t// Multiplier is used to expand or compress the WebGL coordinate space relative\n\t// to the EPSG:3857 / Pseudo-Mercator coordinate space (metres).\n\t//\n\t// This is useful for keeping coordinate calculations to smaller numbers and\n\t// helps increase accuracy of things like the z-buffer, object intersection,\n\t// and camera near and far clipping.\n\t//\n\t// A multiplier of 1 would mean a 1:1 mapping between WebGL and EPSG:3857\n\t// coordinates (1 EPSG:3857 metre === 1 WebGL unit)\n\t//\n\t// A multiplier of 0.1 would mean a 1:0.1 mapping between WebGL and EPSG:3857\n\t// coordinates (1 EPSG:3857 metre === 0.1 WebGL units)\n\tGeo.multiplier = 0.1;\n\t\n\tGeo.project = function (latlon) {\n\t  var d = Math.PI / 180;\n\t  var max = Geo.MAX_LATITUDE;\n\t  var lat = Math.max(Math.min(max, latlon.lat), -max);\n\t  var sin = Math.sin(lat * d);\n\t\n\t  return (0, _Point.point)(Geo.R * latlon.lon * d, Geo.R * Math.log((1 + sin) / (1 - sin)) / 2);\n\t}, Geo.unproject = function (point) {\n\t  var d = 180 / Math.PI;\n\t\n\t  return (0, _LatLon.latLon)((2 * Math.atan(Math.exp(point.y / Geo.R)) - Math.PI / 2) * d, point.x * d / Geo.R);\n\t};\n\t\n\t// Converts geo coords to pixel / WebGL ones\n\t// This just reverses the Y axis to match WebGL\n\tGeo.latLonToPoint = function (latlon) {\n\t  var projected = Geo.project(latlon);\n\t  projected.y *= -1;\n\t\n\t  projected.x *= Geo.multiplier;\n\t  projected.y *= Geo.multiplier;\n\t\n\t  return projected;\n\t};\n\t\n\t// Converts pixel / WebGL coords to geo coords\n\t// This just reverses the Y axis to match WebGL\n\tGeo.pointToLatLon = function (point) {\n\t  var _point = (0, _Point.point)(point.x, point.y * -1);\n\t\n\t  _point.x /= Geo.multiplier;\n\t  _point.y /= Geo.multiplier;\n\t\n\t  return Geo.unproject(_point);\n\t};\n\t\n\t// Scale factor for converting between real metres and projected metres\n\t//\n\t// projectedMetres = realMetres * pointScale\n\t// realMetres = projectedMetres / pointScale\n\t//\n\t// Accurate scale factor uses proper Web Mercator scaling\n\t// See pg.9: http://www.hydrometronics.com/downloads/Web%20Mercator%20-%20Non-Conformal,%20Non-Mercator%20(notes).pdf\n\t// See: http://jsfiddle.net/robhawkes/yws924cf/\n\tGeo.pointScale = function (latlon, accurate) {\n\t  var rad = Math.PI / 180;\n\t\n\t  var k;\n\t\n\t  if (!accurate) {\n\t    k = 1 / Math.cos(latlon.lat * rad);\n\t\n\t    // [scaleX, scaleY]\n\t    return [k, k];\n\t  } else {\n\t    var lat = latlon.lat * rad;\n\t    var lon = latlon.lon * rad;\n\t\n\t    var a = Geo.R;\n\t\n\t    var sinLat = Math.sin(lat);\n\t    var sinLat2 = sinLat * sinLat;\n\t\n\t    var cosLat = Math.cos(lat);\n\t\n\t    // Radius meridian\n\t    var p = a * (1 - Geo.ECC2) / Math.pow(1 - Geo.ECC2 * sinLat2, 3 / 2);\n\t\n\t    // Radius prime meridian\n\t    var v = a / Math.sqrt(1 - Geo.ECC2 * sinLat2);\n\t\n\t    // Scale N/S\n\t    var h = a / p / cosLat;\n\t\n\t    // Scale E/W\n\t    k = a / v / cosLat;\n\t\n\t    // [scaleX, scaleY]\n\t    return [k, h];\n\t  }\n\t};\n\t\n\t// Convert real metres to projected units\n\t//\n\t// Latitude scale is chosen because it fluctuates more than longitude\n\tGeo.metresToProjected = function (metres, pointScale) {\n\t  return metres * pointScale[1];\n\t};\n\t\n\t// Convert projected units to real metres\n\t//\n\t// Latitude scale is chosen because it fluctuates more than longitude\n\tGeo.projectedToMetres = function (projectedUnits, pointScale) {\n\t  return projectedUnits / pointScale[1];\n\t};\n\t\n\t// Convert real metres to a value in world (WebGL) units\n\tGeo.metresToWorld = function (metres, pointScale) {\n\t  // Transform metres to projected metres using the latitude point scale\n\t  //\n\t  // Latitude scale is chosen because it fluctuates more than longitude\n\t  var projectedMetres = Geo.metresToProjected(metres, pointScale);\n\t  return projectedMetres * Geo.multiplier;\n\t};\n\t\n\t// Convert world (WebGL) units to a value in real metres\n\tGeo.worldToMetres = function (worldUnits, pointScale) {\n\t  var projectedUnits = worldUnits;\n\t  var realMetres = Geo.projectedToMetres(projectedUnits, pointScale);\n\t\n\t  return realMetres / Geo.multiplier;\n\t};\n\t\n\t// Returns the world width in pixels for a given zoom, assuming tile dimensions\n\t// of 256x256 pixels\n\tGeo.scale = function (zoom) {\n\t  return 256 * Math.pow(2, zoom);\n\t};\n\t\n\t// Returns zoom level for a given scale value\n\t// This only works with a scale value that is based on map pixel width\n\tGeo.zoom = function (scale) {\n\t  return Math.log(scale / 256) / Math.LN2;\n\t};\n\t\n\t// Distance between two geographical points using spherical law of cosines\n\t// approximation or Haversine\n\t//\n\t// See: http://www.movable-type.co.uk/scripts/latlong.html\n\tGeo.distance = function (latlon1, latlon2, accurate) {\n\t  var rad = Math.PI / 180;\n\t\n\t  var lat1;\n\t  var lat2;\n\t\n\t  var a;\n\t\n\t  if (!accurate) {\n\t    lat1 = latlon1.lat * rad;\n\t    lat2 = latlon2.lat * rad;\n\t\n\t    a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((latlon2.lon - latlon1.lon) * rad);\n\t\n\t    return Geo.R * Math.acos(Math.min(a, 1));\n\t  } else {\n\t    lat1 = latlon1.lat * rad;\n\t    lat2 = latlon2.lat * rad;\n\t\n\t    var lon1 = latlon1.lon * rad;\n\t    var lon2 = latlon2.lon * rad;\n\t\n\t    var deltaLat = lat2 - lat1;\n\t    var deltaLon = lon2 - lon1;\n\t\n\t    var halfDeltaLat = deltaLat / 2;\n\t    var halfDeltaLon = deltaLon / 2;\n\t\n\t    a = Math.sin(halfDeltaLat) * Math.sin(halfDeltaLat) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(halfDeltaLon) * Math.sin(halfDeltaLon);\n\t\n\t    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\n\t    return Geo.R * c;\n\t  }\n\t};\n\t\n\tGeo.bounds = (function () {\n\t  var d = Geo.R * Math.PI * Geo.multiplier;\n\t  return [[-d, -d], [d, d]];\n\t})();\n\t\n\texports['default'] = Geo;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\t/*\r\n\t * LatLon is a helper class for ensuring consistent geographic coordinates.\r\n\t *\r\n\t * Based on:\r\n\t * https://github.com/Leaflet/Leaflet/blob/master/src/geo/LatLng.js\r\n\t */\n\t\n\tvar LatLon = (function () {\n\t  function LatLon(lat, lon, alt) {\n\t    _classCallCheck(this, LatLon);\n\t\n\t    if (isNaN(lat) || isNaN(lon)) {\n\t      throw new Error('Invalid LatLon object: (' + lat + ', ' + lon + ')');\n\t    }\n\t\n\t    this.lat = +lat;\n\t    this.lon = +lon;\n\t\n\t    if (alt !== undefined) {\n\t      this.alt = +alt;\n\t    }\n\t  }\n\t\n\t  _createClass(LatLon, [{\n\t    key: 'clone',\n\t    value: function clone() {\n\t      return new LatLon(this.lat, this.lon, this.alt);\n\t    }\n\t  }]);\n\t\n\t  return LatLon;\n\t})();\n\t\n\texports['default'] = LatLon;\n\t\n\t// Accepts (LatLon), ([lat, lon, alt]), ([lat, lon]) and (lat, lon, alt)\n\t// Also converts between lng and lon\n\tvar noNew = function noNew(a, b, c) {\n\t  if (a instanceof LatLon) {\n\t    return a;\n\t  }\n\t  if (Array.isArray(a) && typeof a[0] !== 'object') {\n\t    if (a.length === 3) {\n\t      return new LatLon(a[0], a[1], a[2]);\n\t    }\n\t    if (a.length === 2) {\n\t      return new LatLon(a[0], a[1]);\n\t    }\n\t    return null;\n\t  }\n\t  if (a === undefined || a === null) {\n\t    return a;\n\t  }\n\t  if (typeof a === 'object' && 'lat' in a) {\n\t    return new LatLon(a.lat, 'lng' in a ? a.lng : a.lon, a.alt);\n\t  }\n\t  if (b === undefined) {\n\t    return null;\n\t  }\n\t  return new LatLon(a, b, c);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.latLon = noNew;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\r\n\t * Point is a helper class for ensuring consistent world positions.\r\n\t *\r\n\t * Based on:\r\n\t * https://github.com/Leaflet/Leaflet/blob/master/src/geo/Point.js\r\n\t */\n\t\n\tvar Point = (function () {\n\t  function Point(x, y, round) {\n\t    _classCallCheck(this, Point);\n\t\n\t    this.x = round ? Math.round(x) : x;\n\t    this.y = round ? Math.round(y) : y;\n\t  }\n\t\n\t  _createClass(Point, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Point(this.x, this.y);\n\t    }\n\t\n\t    // Non-destructive\n\t  }, {\n\t    key: \"add\",\n\t    value: function add(point) {\n\t      return this.clone()._add(_point(point));\n\t    }\n\t\n\t    // Destructive\n\t  }, {\n\t    key: \"_add\",\n\t    value: function _add(point) {\n\t      this.x += point.x;\n\t      this.y += point.y;\n\t      return this;\n\t    }\n\t\n\t    // Non-destructive\n\t  }, {\n\t    key: \"subtract\",\n\t    value: function subtract(point) {\n\t      return this.clone()._subtract(_point(point));\n\t    }\n\t\n\t    // Destructive\n\t  }, {\n\t    key: \"_subtract\",\n\t    value: function _subtract(point) {\n\t      this.x -= point.x;\n\t      this.y -= point.y;\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return Point;\n\t})();\n\t\n\texports[\"default\"] = Point;\n\t\n\t// Accepts (point), ([x, y]) and (x, y, round)\n\tvar _point = function _point(x, y, round) {\n\t  if (x instanceof Point) {\n\t    return x;\n\t  }\n\t  if (Array.isArray(x)) {\n\t    return new Point(x[0], x[1]);\n\t  }\n\t  if (x === undefined || x === null) {\n\t    return x;\n\t  }\n\t  return new Point(x, y, round);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.point = _point;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _eventemitter3 = __webpack_require__(2);\n\t\n\tvar _eventemitter32 = _interopRequireDefault(_eventemitter3);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Scene = __webpack_require__(9);\n\t\n\tvar _Scene2 = _interopRequireDefault(_Scene);\n\t\n\tvar _DOMScene3D = __webpack_require__(10);\n\t\n\tvar _DOMScene3D2 = _interopRequireDefault(_DOMScene3D);\n\t\n\tvar _DOMScene2D = __webpack_require__(11);\n\t\n\tvar _DOMScene2D2 = _interopRequireDefault(_DOMScene2D);\n\t\n\tvar _Renderer = __webpack_require__(12);\n\t\n\tvar _Renderer2 = _interopRequireDefault(_Renderer);\n\t\n\tvar _DOMRenderer3D = __webpack_require__(13);\n\t\n\tvar _DOMRenderer3D2 = _interopRequireDefault(_DOMRenderer3D);\n\t\n\tvar _DOMRenderer2D = __webpack_require__(15);\n\t\n\tvar _DOMRenderer2D2 = _interopRequireDefault(_DOMRenderer2D);\n\t\n\tvar _Camera = __webpack_require__(17);\n\t\n\tvar _Camera2 = _interopRequireDefault(_Camera);\n\t\n\tvar _Picking = __webpack_require__(18);\n\t\n\tvar _Picking2 = _interopRequireDefault(_Picking);\n\t\n\tvar _EffectComposer = __webpack_require__(21);\n\t\n\tvar _EffectComposer2 = _interopRequireDefault(_EffectComposer);\n\t\n\tvar _vendorRenderPass = __webpack_require__(26);\n\t\n\tvar _vendorRenderPass2 = _interopRequireDefault(_vendorRenderPass);\n\t\n\tvar _vendorShaderPass = __webpack_require__(24);\n\t\n\tvar _vendorShaderPass2 = _interopRequireDefault(_vendorShaderPass);\n\t\n\tvar _vendorCopyShader = __webpack_require__(23);\n\t\n\tvar _vendorCopyShader2 = _interopRequireDefault(_vendorCopyShader);\n\t\n\tvar _vendorHorizontalTiltShiftShader = __webpack_require__(27);\n\t\n\tvar _vendorHorizontalTiltShiftShader2 = _interopRequireDefault(_vendorHorizontalTiltShiftShader);\n\t\n\tvar _vendorVerticalTiltShiftShader = __webpack_require__(28);\n\t\n\tvar _vendorVerticalTiltShiftShader2 = _interopRequireDefault(_vendorVerticalTiltShiftShader);\n\t\n\tvar _vendorFXAAShader = __webpack_require__(29);\n\t\n\tvar _vendorFXAAShader2 = _interopRequireDefault(_vendorFXAAShader);\n\t\n\tvar Engine = (function (_EventEmitter) {\n\t    _inherits(Engine, _EventEmitter);\n\t\n\t    function Engine(container, world) {\n\t        _classCallCheck(this, Engine);\n\t\n\t        console.log('Init Engine');\n\t\n\t        _get(Object.getPrototypeOf(Engine.prototype), 'constructor', this).call(this);\n\t\n\t        this._world = world;\n\t\n\t        this._scene = _Scene2['default'];\n\t        this._domScene3D = _DOMScene3D2['default'];\n\t        this._domScene2D = _DOMScene2D2['default'];\n\t\n\t        var antialias = this._world.options.postProcessing ? false : true;\n\t        this._renderer = (0, _Renderer2['default'])(container, antialias);\n\t        this._domRenderer3D = (0, _DOMRenderer3D2['default'])(container);\n\t        this._domRenderer2D = (0, _DOMRenderer2D2['default'])(container);\n\t\n\t        this._camera = (0, _Camera2['default'])(container);\n\t\n\t        this._container = container;\n\t\n\t        // TODO: Make this optional\n\t        this._picking = (0, _Picking2['default'])(this._world, this._renderer, this._camera);\n\t\n\t        this.clock = new _three2['default'].Clock();\n\t\n\t        this._frustum = new _three2['default'].Frustum();\n\t\n\t        if (this._world.options.postProcessing) {\n\t            this._initPostProcessing();\n\t        }\n\t    }\n\t\n\t    // TODO: Set up composer to automatically resize on viewport change\n\t    // TODO: Update passes that rely on width / height on resize\n\t    // TODO: Merge default passes into a single shader / pass for performance\n\t\n\t    _createClass(Engine, [{\n\t        key: '_initPostProcessing',\n\t        value: function _initPostProcessing() {\n\t            var renderPass = new _vendorRenderPass2['default'](this._scene, this._camera);\n\t\n\t            // TODO: Look at using @mattdesl's optimised FXAA shader\n\t            // https://github.com/mattdesl/three-shader-fxaa\n\t            var fxaaPass = new _vendorShaderPass2['default'](_vendorFXAAShader2['default']);\n\t\n\t            var hblurPass = new _vendorShaderPass2['default'](_vendorHorizontalTiltShiftShader2['default']);\n\t            var vblurPass = new _vendorShaderPass2['default'](_vendorVerticalTiltShiftShader2['default']);\n\t            var bluriness = 5;\n\t\n\t            hblurPass.uniforms.r.value = vblurPass.uniforms.r.value = 0.6;\n\t\n\t            var copyPass = new _vendorShaderPass2['default'](_vendorCopyShader2['default']);\n\t            copyPass.renderToScreen = true;\n\t\n\t            this._composer = (0, _EffectComposer2['default'])(this._renderer, this._container);\n\t\n\t            this._composer.addPass(renderPass);\n\t            this._composer.addPass(fxaaPass);\n\t            this._composer.addPass(hblurPass);\n\t            this._composer.addPass(vblurPass);\n\t            this._composer.addPass(copyPass);\n\t\n\t            var self = this;\n\t            var updatePostProcessingSize = function updatePostProcessingSize() {\n\t                var width = self._container.clientWidth;\n\t                var height = self._container.clientHeight;\n\t\n\t                // TODO: Re-enable this when perf issues can be solved\n\t                //\n\t                // Rendering double the resolution of the screen can be really slow\n\t                // var pixelRatio = window.devicePixelRatio;\n\t                var pixelRatio = 1;\n\t\n\t                fxaaPass.uniforms.resolution.value.set(1 / (width * pixelRatio), 1 / (height * pixelRatio));\n\t\n\t                hblurPass.uniforms.h.value = bluriness / (width * pixelRatio);\n\t                vblurPass.uniforms.v.value = bluriness / (height * pixelRatio);\n\t            };\n\t\n\t            updatePostProcessingSize();\n\t            window.addEventListener('resize', updatePostProcessingSize, false);\n\t        }\n\t    }, {\n\t        key: 'update',\n\t        value: function update(delta) {\n\t            this.emit('preRender');\n\t\n\t            if (this._world.options.postProcessing) {\n\t                this._composer.render(delta);\n\t            } else {\n\t                this._renderer.render(this._scene, this._camera);\n\t            }\n\t\n\t            // Render picking scene\n\t            // this._renderer.render(this._picking._pickingScene, this._camera);\n\t\n\t            // Render DOM scenes\n\t            this._domRenderer3D.render(this._domScene3D, this._camera);\n\t            this._domRenderer2D.render(this._domScene2D, this._camera);\n\t\n\t            this.emit('postRender');\n\t        }\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy() {\n\t            // Remove any remaining objects from scene\n\t            var child;\n\t            for (var i = this._scene.children.length - 1; i >= 0; i--) {\n\t                child = this._scene.children[i];\n\t\n\t                if (!child) {\n\t                    continue;\n\t                }\n\t\n\t                this._scene.remove(child);\n\t\n\t                if (child.geometry) {\n\t                    // Dispose of mesh and materials\n\t                    child.geometry.dispose();\n\t                    child.geometry = null;\n\t                }\n\t\n\t                if (child.material) {\n\t                    if (child.material.map) {\n\t                        child.material.map.dispose();\n\t                        child.material.map = null;\n\t                    }\n\t\n\t                    child.material.dispose();\n\t                    child.material = null;\n\t                }\n\t            };\n\t\n\t            for (var i = this._domScene3D.children.length - 1; i >= 0; i--) {\n\t                child = this._domScene3D.children[i];\n\t\n\t                if (!child) {\n\t                    continue;\n\t                }\n\t\n\t                this._domScene3D.remove(child);\n\t            };\n\t\n\t            for (var i = this._domScene2D.children.length - 1; i >= 0; i--) {\n\t                child = this._domScene2D.children[i];\n\t\n\t                if (!child) {\n\t                    continue;\n\t                }\n\t\n\t                this._domScene2D.remove(child);\n\t            };\n\t\n\t            this._picking.destroy();\n\t            this._picking = null;\n\t\n\t            this._world = null;\n\t            this._scene = null;\n\t            this._domScene3D = null;\n\t            this._domScene2D = null;\n\t\n\t            this._composer = null;\n\t            this._renderer = null;\n\t\n\t            this._domRenderer3D = null;\n\t            this._domRenderer2D = null;\n\t            this._camera = null;\n\t            this._clock = null;\n\t            this._frustum = null;\n\t        }\n\t    }]);\n\t\n\t    return Engine;\n\t})(_eventemitter32['default']);\n\t\n\texports['default'] = Engine;\n\t\n\t// // Initialise without requiring new keyword\n\t// export default function(container, world) {\n\t//   return new Engine(container, world);\n\t// };\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can be imported from anywhere and will still reference the same scene,\n\t// though there is a helper reference in Engine.scene\n\t\n\texports['default'] = (function () {\n\t  var scene = new _three2['default'].Scene();\n\t\n\t  // TODO: Re-enable when this works with the skybox\n\t  // scene.fog = new THREE.Fog(0xffffff, 1, 15000);\n\t  return scene;\n\t})();\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can be imported from anywhere and will still reference the same scene,\n\t// though there is a helper reference in Engine.scene\n\t\n\texports['default'] = (function () {\n\t  var scene = new _three2['default'].Scene();\n\t  return scene;\n\t})();\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can be imported from anywhere and will still reference the same scene,\n\t// though there is a helper reference in Engine.scene\n\t\n\texports['default'] = (function () {\n\t  var scene = new _three2['default'].Scene();\n\t  return scene;\n\t})();\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Scene = __webpack_require__(9);\n\t\n\tvar _Scene2 = _interopRequireDefault(_Scene);\n\t\n\t// This can only be accessed from Engine.renderer if you want to reference the\n\t// same scene in multiple places\n\t\n\texports['default'] = function (container, antialias) {\n\t  var renderer = new _three2['default'].WebGLRenderer({\n\t    antialias: antialias\n\t\n\t    // Enabling this removes a lot of z-index intersecting but it also removes\n\t    // shadows due to a bug in three.js\n\t    //\n\t    // See: https://github.com/mrdoob/three.js/issues/7815\n\t    // logarithmicDepthBuffer: true\n\t  });\n\t\n\t  // TODO: Re-enable when this works with the skybox\n\t  // renderer.setClearColor(Scene.fog.color, 1);\n\t\n\t  renderer.setClearColor(0xffffff, 1);\n\t\n\t  // TODO: Re-enable this when perf issues can be solved\n\t  //\n\t  // Rendering double the resolution of the screen can be really slow\n\t  // var pixelRatio = window.devicePixelRatio;\n\t  var pixelRatio = 1;\n\t\n\t  renderer.setPixelRatio(pixelRatio);\n\t\n\t  // Gamma settings make things look nicer\n\t  renderer.gammaInput = true;\n\t  renderer.gammaOutput = true;\n\t\n\t  renderer.shadowMap.enabled = true;\n\t\n\t  // TODO: Work out which of the shadowmap types is best\n\t  // https://github.com/mrdoob/three.js/blob/r56/src/Three.js#L107\n\t  // renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\t\n\t  // TODO: Check that leaving this as default (CullFrontFace) is right\n\t  // renderer.shadowMap.cullFace = THREE.CullFaceBack;\n\t\n\t  container.appendChild(renderer.domElement);\n\t\n\t  var updateSize = function updateSize() {\n\t    renderer.setSize(container.clientWidth, container.clientHeight);\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return renderer;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _vendorCSS3DRenderer = __webpack_require__(14);\n\t\n\tvar _DOMScene3D = __webpack_require__(10);\n\t\n\tvar _DOMScene3D2 = _interopRequireDefault(_DOMScene3D);\n\t\n\t// This can only be accessed from Engine.renderer if you want to reference the\n\t// same scene in multiple places\n\t\n\texports['default'] = function (container) {\n\t  var renderer = new _vendorCSS3DRenderer.CSS3DRenderer();\n\t\n\t  renderer.domElement.style.position = 'absolute';\n\t  renderer.domElement.style.top = 0;\n\t\n\t  container.appendChild(renderer.domElement);\n\t\n\t  var updateSize = function updateSize() {\n\t    renderer.setSize(container.clientWidth, container.clientHeight);\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return renderer;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\t/**\r\n\t * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar CSS3DObject = function CSS3DObject(element) {\n\t\n\t\t_three2['default'].Object3D.call(this);\n\t\n\t\tthis.element = element;\n\t\tthis.element.style.position = 'absolute';\n\t\n\t\tthis.addEventListener('removed', function (event) {\n\t\n\t\t\tif (this.element.parentNode !== null) {\n\t\n\t\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\t}\n\t\t});\n\t};\n\t\n\tCSS3DObject.prototype = Object.create(_three2['default'].Object3D.prototype);\n\tCSS3DObject.prototype.constructor = CSS3DObject;\n\t\n\tvar CSS3DSprite = function CSS3DSprite(element) {\n\t\n\t\tCSS3DObject.call(this, element);\n\t};\n\t\n\tCSS3DSprite.prototype = Object.create(CSS3DObject.prototype);\n\tCSS3DSprite.prototype.constructor = CSS3DSprite;\n\t\n\t//\n\t\n\tvar CSS3DRenderer = function CSS3DRenderer() {\n\t\n\t\tconsole.log('THREE.CSS3DRenderer', _three2['default'].REVISION);\n\t\n\t\tvar _width, _height;\n\t\tvar _widthHalf, _heightHalf;\n\t\n\t\tvar matrix = new _three2['default'].Matrix4();\n\t\n\t\tvar cache = {\n\t\t\tcamera: { fov: 0, style: '' },\n\t\t\tobjects: {}\n\t\t};\n\t\n\t\tvar domElement = document.createElement('div');\n\t\tdomElement.style.overflow = 'hidden';\n\t\n\t\tdomElement.style.WebkitTransformStyle = 'preserve-3d';\n\t\tdomElement.style.MozTransformStyle = 'preserve-3d';\n\t\tdomElement.style.oTransformStyle = 'preserve-3d';\n\t\tdomElement.style.transformStyle = 'preserve-3d';\n\t\n\t\tthis.domElement = domElement;\n\t\n\t\tvar cameraElement = document.createElement('div');\n\t\n\t\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.MozTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.oTransformStyle = 'preserve-3d';\n\t\tcameraElement.style.transformStyle = 'preserve-3d';\n\t\n\t\tdomElement.appendChild(cameraElement);\n\t\n\t\tthis.setClearColor = function () {};\n\t\n\t\tthis.getSize = function () {\n\t\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\t\t};\n\t\n\t\tthis.setSize = function (width, height) {\n\t\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\t\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\t\n\t\t\tcameraElement.style.width = width + 'px';\n\t\t\tcameraElement.style.height = height + 'px';\n\t\t};\n\t\n\t\tvar epsilon = function epsilon(value) {\n\t\n\t\t\treturn Math.abs(value) < Number.EPSILON ? 0 : value;\n\t\t};\n\t\n\t\tvar getCameraCSSMatrix = function getCameraCSSMatrix(matrix) {\n\t\n\t\t\tvar elements = matrix.elements;\n\t\n\t\t\treturn 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(-elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(elements[6]) + ',' + epsilon(elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(-elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(-elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';\n\t\t};\n\t\n\t\tvar getObjectCSSMatrix = function getObjectCSSMatrix(matrix) {\n\t\n\t\t\tvar elements = matrix.elements;\n\t\n\t\t\treturn 'translate3d(-50%,-50%,0) matrix3d(' + epsilon(elements[0]) + ',' + epsilon(elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(-elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(-elements[6]) + ',' + epsilon(-elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';\n\t\t};\n\t\n\t\tvar renderObject = function renderObject(object, camera) {\n\t\n\t\t\tif (object instanceof CSS3DObject) {\n\t\n\t\t\t\tvar style;\n\t\n\t\t\t\tif (object instanceof CSS3DSprite) {\n\t\n\t\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\t\n\t\t\t\t\tmatrix.copy(camera.matrixWorldInverse);\n\t\t\t\t\tmatrix.transpose();\n\t\t\t\t\tmatrix.copyPosition(object.matrixWorld);\n\t\t\t\t\tmatrix.scale(object.scale);\n\t\n\t\t\t\t\tmatrix.elements[3] = 0;\n\t\t\t\t\tmatrix.elements[7] = 0;\n\t\t\t\t\tmatrix.elements[11] = 0;\n\t\t\t\t\tmatrix.elements[15] = 1;\n\t\n\t\t\t\t\tstyle = getObjectCSSMatrix(matrix);\n\t\t\t\t} else {\n\t\n\t\t\t\t\tstyle = getObjectCSSMatrix(object.matrixWorld);\n\t\t\t\t}\n\t\n\t\t\t\tvar element = object.element;\n\t\t\t\tvar cachedStyle = cache.objects[object.id];\n\t\n\t\t\t\tif (cachedStyle === undefined || cachedStyle !== style) {\n\t\n\t\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\t\telement.style.MozTransform = style;\n\t\t\t\t\telement.style.oTransform = style;\n\t\t\t\t\telement.style.transform = style;\n\t\n\t\t\t\t\tcache.objects[object.id] = style;\n\t\t\t\t}\n\t\n\t\t\t\tif (element.parentNode !== cameraElement) {\n\t\n\t\t\t\t\tcameraElement.appendChild(element);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 0, l = object.children.length; i < l; i++) {\n\t\n\t\t\t\trenderObject(object.children[i], camera);\n\t\t\t}\n\t\t};\n\t\n\t\tthis.render = function (scene, camera) {\n\t\n\t\t\tvar fov = 0.5 / Math.tan(_three2['default'].Math.degToRad(camera.fov * 0.5)) * _height;\n\t\n\t\t\tif (cache.camera.fov !== fov) {\n\t\n\t\t\t\tdomElement.style.WebkitPerspective = fov + 'px';\n\t\t\t\tdomElement.style.MozPerspective = fov + 'px';\n\t\t\t\tdomElement.style.oPerspective = fov + 'px';\n\t\t\t\tdomElement.style.perspective = fov + 'px';\n\t\n\t\t\t\tcache.camera.fov = fov;\n\t\t\t}\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\t\n\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\n\t\t\tvar style = 'translate3d(0,0,' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse) + ' translate3d(' + _widthHalf + 'px,' + _heightHalf + 'px, 0)';\n\t\n\t\t\tif (cache.camera.style !== style) {\n\t\n\t\t\t\tcameraElement.style.WebkitTransform = style;\n\t\t\t\tcameraElement.style.MozTransform = style;\n\t\t\t\tcameraElement.style.oTransform = style;\n\t\t\t\tcameraElement.style.transform = style;\n\t\n\t\t\t\tcache.camera.style = style;\n\t\t\t}\n\t\n\t\t\trenderObject(scene, camera);\n\t\t};\n\t};\n\t\n\texports.CSS3DObject = CSS3DObject;\n\texports.CSS3DSprite = CSS3DSprite;\n\texports.CSS3DRenderer = CSS3DRenderer;\n\t\n\t_three2['default'].CSS3DObject = CSS3DObject;\n\t_three2['default'].CSS3DSprite = CSS3DSprite;\n\t_three2['default'].CSS3DRenderer = CSS3DRenderer;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _vendorCSS2DRenderer = __webpack_require__(16);\n\t\n\tvar _DOMScene2D = __webpack_require__(11);\n\t\n\tvar _DOMScene2D2 = _interopRequireDefault(_DOMScene2D);\n\t\n\t// This can only be accessed from Engine.renderer if you want to reference the\n\t// same scene in multiple places\n\t\n\texports['default'] = function (container) {\n\t  var renderer = new _vendorCSS2DRenderer.CSS2DRenderer();\n\t\n\t  renderer.domElement.style.position = 'absolute';\n\t  renderer.domElement.style.top = 0;\n\t\n\t  container.appendChild(renderer.domElement);\n\t\n\t  var updateSize = function updateSize() {\n\t    renderer.setSize(container.clientWidth, container.clientHeight);\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return renderer;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar CSS2DObject = function CSS2DObject(element) {\n\t\n\t\t_three2['default'].Object3D.call(this);\n\t\n\t\tthis.element = element;\n\t\tthis.element.style.position = 'absolute';\n\t\n\t\tthis.addEventListener('removed', function (event) {\n\t\n\t\t\tif (this.element.parentNode !== null) {\n\t\n\t\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\t}\n\t\t});\n\t};\n\t\n\tCSS2DObject.prototype = Object.create(_three2['default'].Object3D.prototype);\n\tCSS2DObject.prototype.constructor = CSS2DObject;\n\t\n\t//\n\t\n\tvar CSS2DRenderer = function CSS2DRenderer() {\n\t\n\t\tconsole.log('THREE.CSS2DRenderer', _three2['default'].REVISION);\n\t\n\t\tvar _width, _height;\n\t\tvar _widthHalf, _heightHalf;\n\t\n\t\tvar vector = new _three2['default'].Vector3();\n\t\tvar viewMatrix = new _three2['default'].Matrix4();\n\t\tvar viewProjectionMatrix = new _three2['default'].Matrix4();\n\t\n\t\tvar frustum = new _three2['default'].Frustum();\n\t\n\t\tvar domElement = document.createElement('div');\n\t\tdomElement.style.overflow = 'hidden';\n\t\n\t\tthis.domElement = domElement;\n\t\n\t\tthis.setSize = function (width, height) {\n\t\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\t\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\t\t};\n\t\n\t\tvar renderObject = function renderObject(object, camera) {\n\t\n\t\t\tif (object instanceof CSS2DObject) {\n\t\n\t\t\t\tvector.setFromMatrixPosition(object.matrixWorld);\n\t\t\t\tvector.applyProjection(viewProjectionMatrix);\n\t\n\t\t\t\tvar element = object.element;\n\t\t\t\tvar style = 'translate(-50%,-50%) translate(' + (vector.x * _widthHalf + _widthHalf) + 'px,' + (-vector.y * _heightHalf + _heightHalf) + 'px)';\n\t\n\t\t\t\telement.style.WebkitTransform = style;\n\t\t\t\telement.style.MozTransform = style;\n\t\t\t\telement.style.oTransform = style;\n\t\t\t\telement.style.transform = style;\n\t\n\t\t\t\tif (element.parentNode !== domElement) {\n\t\n\t\t\t\t\tdomElement.appendChild(element);\n\t\t\t\t}\n\t\n\t\t\t\t// Hide if outside view frustum\n\t\t\t\tif (!frustum.containsPoint(object.position)) {\n\t\t\t\t\telement.style.display = 'none';\n\t\t\t\t} else {\n\t\t\t\t\telement.style.display = 'block';\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor (var i = 0, l = object.children.length; i < l; i++) {\n\t\n\t\t\t\trenderObject(object.children[i], camera);\n\t\t\t}\n\t\t};\n\t\n\t\tthis.render = function (scene, camera) {\n\t\n\t\t\tscene.updateMatrixWorld();\n\t\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\t\n\t\t\tcamera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\t\n\t\t\tviewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t\t\tviewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, viewMatrix);\n\t\n\t\t\tfrustum.setFromMatrix(new _three2['default'].Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));\n\t\n\t\t\trenderObject(scene, camera);\n\t\t};\n\t};\n\t\n\texports.CSS2DObject = CSS2DObject;\n\texports.CSS2DRenderer = CSS2DRenderer;\n\t\n\t_three2['default'].CSS2DObject = CSS2DObject;\n\t_three2['default'].CSS2DRenderer = CSS2DRenderer;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can only be accessed from Engine.camera if you want to reference the\n\t// same scene in multiple places\n\t\n\t// TODO: Ensure that FOV looks natural on all aspect ratios\n\t// http://stackoverflow.com/q/26655930/997339\n\t\n\texports['default'] = function (container) {\n\t  var camera = new _three2['default'].PerspectiveCamera(45, 1, 1, 2000000);\n\t  camera.position.y = 4000;\n\t  camera.position.z = 4000;\n\t\n\t  var updateSize = function updateSize() {\n\t    camera.aspect = container.clientWidth / container.clientHeight;\n\t    camera.updateProjectionMatrix();\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return camera;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _PickingScene = __webpack_require__(19);\n\t\n\tvar _PickingScene2 = _interopRequireDefault(_PickingScene);\n\t\n\tvar _lodashThrottle = __webpack_require__(20);\n\t\n\tvar _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);\n\t\n\t// TODO: Look into a way of setting this up without passing in a renderer and\n\t// camera from the engine\n\t\n\t// TODO: Add a basic indicator on or around the mouse pointer when it is over\n\t// something pickable / clickable\n\t//\n\t// A simple transparent disc or ring at the mouse point should work to start, or\n\t// even just changing the cursor to the CSS 'pointer' style\n\t//\n\t// Probably want this on mousemove with a throttled update as not to spam the\n\t// picking method\n\t//\n\t// Relies upon the picking method not redrawing the scene every call due to\n\t// the way TileLayer invalidates the picking scene\n\t\n\tvar nextId = 1;\n\t\n\tvar Picking = (function () {\n\t  function Picking(world, renderer, camera) {\n\t    _classCallCheck(this, Picking);\n\t\n\t    this._world = world;\n\t    this._renderer = renderer;\n\t    this._camera = camera;\n\t\n\t    this._raycaster = new _three2['default'].Raycaster();\n\t\n\t    // TODO: Match this with the line width used in the picking layers\n\t    this._raycaster.linePrecision = 3;\n\t\n\t    this._pickingScene = _PickingScene2['default'];\n\t    this._pickingTexture = new _three2['default'].WebGLRenderTarget();\n\t    this._pickingTexture.texture.minFilter = _three2['default'].LinearFilter;\n\t    this._pickingTexture.texture.generateMipmaps = false;\n\t\n\t    this._nextId = 1;\n\t\n\t    this._resizeTexture();\n\t    this._initEvents();\n\t  }\n\t\n\t  // Initialise without requiring new keyword\n\t\n\t  _createClass(Picking, [{\n\t    key: '_initEvents',\n\t    value: function _initEvents() {\n\t      this._resizeHandler = this._resizeTexture.bind(this);\n\t      window.addEventListener('resize', this._resizeHandler, false);\n\t\n\t      this._throttledMouseMoveHandler = (0, _lodashThrottle2['default'])(this._onMouseMove.bind(this), 50);\n\t      this._mouseUpHandler = this._onMouseUp.bind(this);\n\t      this._world._container.addEventListener('mouseup', this._mouseUpHandler, false);\n\t      this._world._container.addEventListener('mousemove', this._throttledMouseMoveHandler, false);\n\t\n\t      this._world.on('move', this._onWorldMove, this);\n\t    }\n\t  }, {\n\t    key: '_onMouseUp',\n\t    value: function _onMouseUp(event) {\n\t      // Only react to main button click\n\t      if (event.button !== 0) {\n\t        return;\n\t      }\n\t\n\t      var point = (0, _geoPoint.point)(event.clientX - this._world._container.offsetLeft, event.clientY - this._world._container.offsetTop);\n\t\n\t      var normalisedPoint = (0, _geoPoint.point)(0, 0);\n\t      normalisedPoint.x = point.x / this._width * 2 - 1;\n\t      normalisedPoint.y = -(point.y / this._height) * 2 + 1;\n\t\n\t      this._pick(point, normalisedPoint);\n\t    }\n\t  }, {\n\t    key: '_onMouseMove',\n\t    value: function _onMouseMove(event) {\n\t      var point = (0, _geoPoint.point)(event.clientX - this._world._container.offsetLeft, event.clientY - this._world._container.offsetTop);\n\t\n\t      var normalisedPoint = (0, _geoPoint.point)(0, 0);\n\t      normalisedPoint.x = point.x / this._width * 2 - 1;\n\t      normalisedPoint.y = -(point.y / this._height) * 2 + 1;\n\t\n\t      this._pick(point, normalisedPoint, true);\n\t    }\n\t  }, {\n\t    key: '_onWorldMove',\n\t    value: function _onWorldMove() {\n\t      this._needUpdate = true;\n\t    }\n\t\n\t    // TODO: Ensure this doesn't get out of sync issue with the renderer resize\n\t  }, {\n\t    key: '_resizeTexture',\n\t    value: function _resizeTexture() {\n\t      var size = this._renderer.getSize();\n\t\n\t      this._width = size.width;\n\t      this._height = size.height;\n\t\n\t      this._pickingTexture.setSize(this._width, this._height);\n\t      this._pixelBuffer = new Uint8Array(4 * this._width * this._height);\n\t\n\t      this._needUpdate = true;\n\t    }\n\t\n\t    // TODO: Make this only re-draw the scene if both an update is needed and the\n\t    // camera has moved since the last update\n\t    //\n\t    // Otherwise it re-draws the scene on every click due to the way LOD updates\n\t    // work in TileLayer – spamming this.add() and this.remove()\n\t    //\n\t    // TODO: Pause updates during map move / orbit / zoom as this is unlikely to\n\t    // be a point in time where the user cares for picking functionality\n\t  }, {\n\t    key: '_update',\n\t    value: function _update() {\n\t      if (this._needUpdate) {\n\t        var texture = this._pickingTexture;\n\t\n\t        this._renderer.render(this._pickingScene, this._camera, this._pickingTexture);\n\t\n\t        // Read the rendering texture\n\t        this._renderer.readRenderTargetPixels(texture, 0, 0, texture.width, texture.height, this._pixelBuffer);\n\t\n\t        this._needUpdate = false;\n\t      }\n\t    }\n\t  }, {\n\t    key: '_pick',\n\t    value: function _pick(point, normalisedPoint, hover) {\n\t      this._update();\n\t\n\t      var index = point.x + (this._pickingTexture.height - point.y) * this._pickingTexture.width;\n\t\n\t      // Interpret the pixel as an ID\n\t      var id = this._pixelBuffer[index * 4 + 2] * 255 * 255 + this._pixelBuffer[index * 4 + 1] * 255 + this._pixelBuffer[index * 4 + 0];\n\t\n\t      // Skip if ID is 16646655 (white) as the background returns this\n\t      if (id === 16646655) {\n\t        if (hover) {\n\t          this._world.emit('pick-hover-reset');\n\t        } else {\n\t          this._world.emit('pick-click-reset');\n\t        }\n\t\n\t        return;\n\t      }\n\t\n\t      this._raycaster.setFromCamera(normalisedPoint, this._camera);\n\t\n\t      // Perform ray intersection on picking scene\n\t      //\n\t      // TODO: Only perform intersection test on the relevant picking mesh\n\t      var intersects = this._raycaster.intersectObjects(this._pickingScene.children, true);\n\t\n\t      var _point2d = point.clone();\n\t\n\t      var _point3d;\n\t      if (intersects.length > 0) {\n\t        _point3d = intersects[0].point.clone();\n\t      }\n\t\n\t      // Pass along as much data as possible for now until we know more about how\n\t      // people use the picking API and what the returned data should be\n\t      //\n\t      // TODO: Look into the leak potential for passing so much by reference here\n\t      // this._world.emit('pick', id, _point2d, _point3d, intersects);\n\t      // this._world.emit('pick-' + id, _point2d, _point3d, intersects);\n\t\n\t      if (hover) {\n\t        this._world.emit('pick-hover', id, _point2d, _point3d, intersects);\n\t        this._world.emit('pick-hover-' + id, _point2d, _point3d, intersects);\n\t      } else {\n\t        this._world.emit('pick-click', id, _point2d, _point3d, intersects);\n\t        this._world.emit('pick-click-' + id, _point2d, _point3d, intersects);\n\t      }\n\t    }\n\t\n\t    // Add mesh to picking scene\n\t    //\n\t    // Picking ID should already be added as an attribute\n\t  }, {\n\t    key: 'add',\n\t    value: function add(mesh) {\n\t      this._pickingScene.add(mesh);\n\t      this._needUpdate = true;\n\t    }\n\t\n\t    // Remove mesh from picking scene\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove(mesh) {\n\t      this._pickingScene.remove(mesh);\n\t      this._needUpdate = true;\n\t    }\n\t\n\t    // Returns next ID to use for picking\n\t  }, {\n\t    key: 'getNextId',\n\t    value: function getNextId() {\n\t      return nextId++;\n\t    }\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // TODO: Find a way to properly remove these listeners as they stay\n\t      // active at the moment\n\t      window.removeEventListener('resize', this._resizeHandler, false);\n\t      this._world._container.removeEventListener('mouseup', this._mouseUpHandler, false);\n\t      this._world._container.removeEventListener('mousemove', this._throttledMouseMoveHandler, false);\n\t\n\t      this._world.off('move', this._onWorldMove);\n\t\n\t      if (this._pickingScene.children) {\n\t        // Remove everything else in the layer\n\t        var child;\n\t        for (var i = this._pickingScene.children.length - 1; i >= 0; i--) {\n\t          child = this._pickingScene.children[i];\n\t\n\t          if (!child) {\n\t            continue;\n\t          }\n\t\n\t          this._pickingScene.remove(child);\n\t\n\t          // Probably not a good idea to dispose of geometry due to it being\n\t          // shared with the non-picking scene\n\t          // if (child.geometry) {\n\t          //   // Dispose of mesh and materials\n\t          //   child.geometry.dispose();\n\t          //   child.geometry = null;\n\t          // }\n\t\n\t          if (child.material) {\n\t            if (child.material.map) {\n\t              child.material.map.dispose();\n\t              child.material.map = null;\n\t            }\n\t\n\t            child.material.dispose();\n\t            child.material = null;\n\t          }\n\t        }\n\t      }\n\t\n\t      this._pickingScene = null;\n\t      this._pickingTexture = null;\n\t      this._pixelBuffer = null;\n\t\n\t      this._world = null;\n\t      this._renderer = null;\n\t      this._camera = null;\n\t    }\n\t  }]);\n\t\n\t  return Picking;\n\t})();\n\t\n\texports['default'] = function (world, renderer, camera) {\n\t  return new Picking(world, renderer, camera);\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// This can be imported from anywhere and will still reference the same scene,\n\t// though there is a helper reference in Engine.pickingScene\n\t\n\texports['default'] = (function () {\n\t  var scene = new _three2['default'].Scene();\n\t  return scene;\n\t})();\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as the `TypeError` message for \"Functions\" methods. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar NAN = 0 / 0;\n\t\n\t/** `Object#toString` result references. */\n\tvar symbolTag = '[object Symbol]';\n\t\n\t/** Used to match leading and trailing whitespace. */\n\tvar reTrim = /^\\s+|\\s+$/g;\n\t\n\t/** Used to detect bad signed hexadecimal string values. */\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\t\n\t/** Used to detect binary string values. */\n\tvar reIsBinary = /^0b[01]+$/i;\n\t\n\t/** Used to detect octal string values. */\n\tvar reIsOctal = /^0o[0-7]+$/i;\n\t\n\t/** Built-in method references without a dependency on `root`. */\n\tvar freeParseInt = parseInt;\n\t\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\t\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\t\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\t\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\t\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max,\n\t    nativeMin = Math.min;\n\t\n\t/**\n\t * Gets the timestamp of the number of milliseconds that have elapsed since\n\t * the Unix epoch (1 January 1970 00:00:00 UTC).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 2.4.0\n\t * @category Date\n\t * @returns {number} Returns the timestamp.\n\t * @example\n\t *\n\t * _.defer(function(stamp) {\n\t *   console.log(_.now() - stamp);\n\t * }, _.now());\n\t * // => Logs the number of milliseconds it took for the deferred invocation.\n\t */\n\tvar now = function() {\n\t  return root.Date.now();\n\t};\n\t\n\t/**\n\t * Creates a debounced function that delays invoking `func` until after `wait`\n\t * milliseconds have elapsed since the last time the debounced function was\n\t * invoked. The debounced function comes with a `cancel` method to cancel\n\t * delayed `func` invocations and a `flush` method to immediately invoke them.\n\t * Provide `options` to indicate whether `func` should be invoked on the\n\t * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n\t * with the last arguments provided to the debounced function. Subsequent\n\t * calls to the debounced function return the result of the last `func`\n\t * invocation.\n\t *\n\t * **Note:** If `leading` and `trailing` options are `true`, `func` is\n\t * invoked on the trailing edge of the timeout only if the debounced function\n\t * is invoked more than once during the `wait` timeout.\n\t *\n\t * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n\t * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n\t *\n\t * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\t * for details over the differences between `_.debounce` and `_.throttle`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to debounce.\n\t * @param {number} [wait=0] The number of milliseconds to delay.\n\t * @param {Object} [options={}] The options object.\n\t * @param {boolean} [options.leading=false]\n\t *  Specify invoking on the leading edge of the timeout.\n\t * @param {number} [options.maxWait]\n\t *  The maximum time `func` is allowed to be delayed before it's invoked.\n\t * @param {boolean} [options.trailing=true]\n\t *  Specify invoking on the trailing edge of the timeout.\n\t * @returns {Function} Returns the new debounced function.\n\t * @example\n\t *\n\t * // Avoid costly calculations while the window size is in flux.\n\t * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\t *\n\t * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n\t * jQuery(element).on('click', _.debounce(sendMail, 300, {\n\t *   'leading': true,\n\t *   'trailing': false\n\t * }));\n\t *\n\t * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n\t * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n\t * var source = new EventSource('/stream');\n\t * jQuery(source).on('message', debounced);\n\t *\n\t * // Cancel the trailing debounced invocation.\n\t * jQuery(window).on('popstate', debounced.cancel);\n\t */\n\tfunction debounce(func, wait, options) {\n\t  var lastArgs,\n\t      lastThis,\n\t      maxWait,\n\t      result,\n\t      timerId,\n\t      lastCallTime,\n\t      lastInvokeTime = 0,\n\t      leading = false,\n\t      maxing = false,\n\t      trailing = true;\n\t\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  wait = toNumber(wait) || 0;\n\t  if (isObject(options)) {\n\t    leading = !!options.leading;\n\t    maxing = 'maxWait' in options;\n\t    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n\t    trailing = 'trailing' in options ? !!options.trailing : trailing;\n\t  }\n\t\n\t  function invokeFunc(time) {\n\t    var args = lastArgs,\n\t        thisArg = lastThis;\n\t\n\t    lastArgs = lastThis = undefined;\n\t    lastInvokeTime = time;\n\t    result = func.apply(thisArg, args);\n\t    return result;\n\t  }\n\t\n\t  function leadingEdge(time) {\n\t    // Reset any `maxWait` timer.\n\t    lastInvokeTime = time;\n\t    // Start the timer for the trailing edge.\n\t    timerId = setTimeout(timerExpired, wait);\n\t    // Invoke the leading edge.\n\t    return leading ? invokeFunc(time) : result;\n\t  }\n\t\n\t  function remainingWait(time) {\n\t    var timeSinceLastCall = time - lastCallTime,\n\t        timeSinceLastInvoke = time - lastInvokeTime,\n\t        result = wait - timeSinceLastCall;\n\t\n\t    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n\t  }\n\t\n\t  function shouldInvoke(time) {\n\t    var timeSinceLastCall = time - lastCallTime,\n\t        timeSinceLastInvoke = time - lastInvokeTime;\n\t\n\t    // Either this is the first call, activity has stopped and we're at the\n\t    // trailing edge, the system time has gone backwards and we're treating\n\t    // it as the trailing edge, or we've hit the `maxWait` limit.\n\t    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n\t      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n\t  }\n\t\n\t  function timerExpired() {\n\t    var time = now();\n\t    if (shouldInvoke(time)) {\n\t      return trailingEdge(time);\n\t    }\n\t    // Restart the timer.\n\t    timerId = setTimeout(timerExpired, remainingWait(time));\n\t  }\n\t\n\t  function trailingEdge(time) {\n\t    timerId = undefined;\n\t\n\t    // Only invoke if we have `lastArgs` which means `func` has been\n\t    // debounced at least once.\n\t    if (trailing && lastArgs) {\n\t      return invokeFunc(time);\n\t    }\n\t    lastArgs = lastThis = undefined;\n\t    return result;\n\t  }\n\t\n\t  function cancel() {\n\t    if (timerId !== undefined) {\n\t      clearTimeout(timerId);\n\t    }\n\t    lastInvokeTime = 0;\n\t    lastArgs = lastCallTime = lastThis = timerId = undefined;\n\t  }\n\t\n\t  function flush() {\n\t    return timerId === undefined ? result : trailingEdge(now());\n\t  }\n\t\n\t  function debounced() {\n\t    var time = now(),\n\t        isInvoking = shouldInvoke(time);\n\t\n\t    lastArgs = arguments;\n\t    lastThis = this;\n\t    lastCallTime = time;\n\t\n\t    if (isInvoking) {\n\t      if (timerId === undefined) {\n\t        return leadingEdge(lastCallTime);\n\t      }\n\t      if (maxing) {\n\t        // Handle invocations in a tight loop.\n\t        timerId = setTimeout(timerExpired, wait);\n\t        return invokeFunc(lastCallTime);\n\t      }\n\t    }\n\t    if (timerId === undefined) {\n\t      timerId = setTimeout(timerExpired, wait);\n\t    }\n\t    return result;\n\t  }\n\t  debounced.cancel = cancel;\n\t  debounced.flush = flush;\n\t  return debounced;\n\t}\n\t\n\t/**\n\t * Creates a throttled function that only invokes `func` at most once per\n\t * every `wait` milliseconds. The throttled function comes with a `cancel`\n\t * method to cancel delayed `func` invocations and a `flush` method to\n\t * immediately invoke them. Provide `options` to indicate whether `func`\n\t * should be invoked on the leading and/or trailing edge of the `wait`\n\t * timeout. The `func` is invoked with the last arguments provided to the\n\t * throttled function. Subsequent calls to the throttled function return the\n\t * result of the last `func` invocation.\n\t *\n\t * **Note:** If `leading` and `trailing` options are `true`, `func` is\n\t * invoked on the trailing edge of the timeout only if the throttled function\n\t * is invoked more than once during the `wait` timeout.\n\t *\n\t * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n\t * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n\t *\n\t * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\t * for details over the differences between `_.throttle` and `_.debounce`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to throttle.\n\t * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n\t * @param {Object} [options={}] The options object.\n\t * @param {boolean} [options.leading=true]\n\t *  Specify invoking on the leading edge of the timeout.\n\t * @param {boolean} [options.trailing=true]\n\t *  Specify invoking on the trailing edge of the timeout.\n\t * @returns {Function} Returns the new throttled function.\n\t * @example\n\t *\n\t * // Avoid excessively updating the position while scrolling.\n\t * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\t *\n\t * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n\t * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n\t * jQuery(element).on('click', throttled);\n\t *\n\t * // Cancel the trailing throttled invocation.\n\t * jQuery(window).on('popstate', throttled.cancel);\n\t */\n\tfunction throttle(func, wait, options) {\n\t  var leading = true,\n\t      trailing = true;\n\t\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  if (isObject(options)) {\n\t    leading = 'leading' in options ? !!options.leading : leading;\n\t    trailing = 'trailing' in options ? !!options.trailing : trailing;\n\t  }\n\t  return debounce(func, wait, {\n\t    'leading': leading,\n\t    'maxWait': wait,\n\t    'trailing': trailing\n\t  });\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Symbol` primitive or object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t * @example\n\t *\n\t * _.isSymbol(Symbol.iterator);\n\t * // => true\n\t *\n\t * _.isSymbol('abc');\n\t * // => false\n\t */\n\tfunction isSymbol(value) {\n\t  return typeof value == 'symbol' ||\n\t    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n\t}\n\t\n\t/**\n\t * Converts `value` to a number.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to process.\n\t * @returns {number} Returns the number.\n\t * @example\n\t *\n\t * _.toNumber(3.2);\n\t * // => 3.2\n\t *\n\t * _.toNumber(Number.MIN_VALUE);\n\t * // => 5e-324\n\t *\n\t * _.toNumber(Infinity);\n\t * // => Infinity\n\t *\n\t * _.toNumber('3.2');\n\t * // => 3.2\n\t */\n\tfunction toNumber(value) {\n\t  if (typeof value == 'number') {\n\t    return value;\n\t  }\n\t  if (isSymbol(value)) {\n\t    return NAN;\n\t  }\n\t  if (isObject(value)) {\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n\t    value = isObject(other) ? (other + '') : other;\n\t  }\n\t  if (typeof value != 'string') {\n\t    return value === 0 ? value : +value;\n\t  }\n\t  value = value.replace(reTrim, '');\n\t  var isBinary = reIsBinary.test(value);\n\t  return (isBinary || reIsOctal.test(value))\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n\t    : (reIsBadHex.test(value) ? NAN : +value);\n\t}\n\t\n\tmodule.exports = throttle;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _vendorEffectComposer = __webpack_require__(22);\n\t\n\tvar _vendorEffectComposer2 = _interopRequireDefault(_vendorEffectComposer);\n\t\n\texports['default'] = function (renderer, container) {\n\t  var composer = new _vendorEffectComposer2['default'](renderer);\n\t\n\t  var updateSize = function updateSize() {\n\t    // TODO: Re-enable this when perf issues can be solved\n\t    //\n\t    // Rendering double the resolution of the screen can be really slow\n\t    // var pixelRatio = window.devicePixelRatio;\n\t    var pixelRatio = 1;\n\t\n\t    composer.setSize(container.clientWidth * pixelRatio, container.clientHeight * pixelRatio);\n\t  };\n\t\n\t  window.addEventListener('resize', updateSize, false);\n\t  updateSize();\n\t\n\t  return composer;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _CopyShader = __webpack_require__(23);\n\t\n\tvar _CopyShader2 = _interopRequireDefault(_CopyShader);\n\t\n\tvar _ShaderPass = __webpack_require__(24);\n\t\n\tvar _ShaderPass2 = _interopRequireDefault(_ShaderPass);\n\t\n\tvar _MaskPass = __webpack_require__(25);\n\t\n\tvar _MaskPass2 = _interopRequireDefault(_MaskPass);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\n\t\n\tvar EffectComposer = function EffectComposer(renderer, renderTarget) {\n\t\n\t\tthis.renderer = renderer;\n\t\n\t\tif (renderTarget === undefined) {\n\t\n\t\t\tvar pixelRatio = renderer.getPixelRatio();\n\t\n\t\t\tvar width = Math.floor(renderer.context.canvas.width / pixelRatio) || 1;\n\t\t\tvar height = Math.floor(renderer.context.canvas.height / pixelRatio) || 1;\n\t\t\tvar parameters = { minFilter: _three2['default'].LinearFilter, magFilter: _three2['default'].LinearFilter, format: _three2['default'].RGBAFormat, stencilBuffer: false };\n\t\n\t\t\trenderTarget = new _three2['default'].WebGLRenderTarget(width, height, parameters);\n\t\t}\n\t\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\t\n\t\tthis.passes = [];\n\t\n\t\tif (_CopyShader2['default'] === undefined) console.error(\"EffectComposer relies on THREE.CopyShader\");\n\t\n\t\tthis.copyPass = new _ShaderPass2['default'](_CopyShader2['default']);\n\t};\n\t\n\tEffectComposer.prototype = {\n\t\n\t\tswapBuffers: function swapBuffers() {\n\t\n\t\t\tvar tmp = this.readBuffer;\n\t\t\tthis.readBuffer = this.writeBuffer;\n\t\t\tthis.writeBuffer = tmp;\n\t\t},\n\t\n\t\taddPass: function addPass(pass) {\n\t\n\t\t\tthis.passes.push(pass);\n\t\t},\n\t\n\t\tinsertPass: function insertPass(pass, index) {\n\t\n\t\t\tthis.passes.splice(index, 0, pass);\n\t\t},\n\t\n\t\trender: function render(delta) {\n\t\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\t\n\t\t\tvar maskActive = false;\n\t\n\t\t\tvar pass,\n\t\t\t    i,\n\t\t\t    il = this.passes.length;\n\t\n\t\t\tfor (i = 0; i < il; i++) {\n\t\n\t\t\t\tpass = this.passes[i];\n\t\n\t\t\t\tif (!pass.enabled) continue;\n\t\n\t\t\t\tpass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);\n\t\n\t\t\t\tif (pass.needsSwap) {\n\t\n\t\t\t\t\tif (maskActive) {\n\t\n\t\t\t\t\t\tvar context = this.renderer.context;\n\t\n\t\t\t\t\t\tcontext.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n\t\n\t\t\t\t\t\tthis.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);\n\t\n\t\t\t\t\t\tcontext.stencilFunc(context.EQUAL, 1, 0xffffffff);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.swapBuffers();\n\t\t\t\t}\n\t\n\t\t\t\tif (pass instanceof _MaskPass2['default']) {\n\t\n\t\t\t\t\tmaskActive = true;\n\t\t\t\t} else if (pass instanceof _MaskPass.ClearMaskPass) {\n\t\n\t\t\t\t\tmaskActive = false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\treset: function reset(renderTarget) {\n\t\n\t\t\tif (renderTarget === undefined) {\n\t\n\t\t\t\trenderTarget = this.renderTarget1.clone();\n\t\n\t\t\t\tvar pixelRatio = this.renderer.getPixelRatio();\n\t\n\t\t\t\trenderTarget.setSize(Math.floor(this.renderer.context.canvas.width / pixelRatio), Math.floor(this.renderer.context.canvas.height / pixelRatio));\n\t\t\t}\n\t\n\t\t\tthis.renderTarget1.dispose();\n\t\t\tthis.renderTarget1 = renderTarget;\n\t\t\tthis.renderTarget2.dispose();\n\t\t\tthis.renderTarget2 = renderTarget.clone();\n\t\n\t\t\tthis.writeBuffer = this.renderTarget1;\n\t\t\tthis.readBuffer = this.renderTarget2;\n\t\t},\n\t\n\t\tsetSize: function setSize(width, height) {\n\t\n\t\t\tthis.renderTarget1.setSize(width, height);\n\t\t\tthis.renderTarget2.setSize(width, height);\n\t\t}\n\t\n\t};\n\t\n\texports['default'] = EffectComposer;\n\t\n\t_three2['default'].EffectComposer = EffectComposer;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Full-screen textured quad shader\r\n\t */\n\t\n\tvar CopyShader = {\n\t\n\t\t\tuniforms: {\n\t\n\t\t\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\t\t\"opacity\": { type: \"f\", value: 1.0 }\n\t\n\t\t\t},\n\t\n\t\t\tvertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n\t\n\t\t\tfragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"gl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n\t\n\t};\n\t\n\texports[\"default\"] = CopyShader;\n\t\n\t_three2[\"default\"].CopyShader = CopyShader;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\n\t\n\tvar ShaderPass = function ShaderPass(shader, textureID) {\n\t\n\t\tthis.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\t\n\t\tif (shader instanceof _three2[\"default\"].ShaderMaterial) {\n\t\n\t\t\tthis.uniforms = shader.uniforms;\n\t\n\t\t\tthis.material = shader;\n\t\t} else if (shader) {\n\t\n\t\t\tthis.uniforms = _three2[\"default\"].UniformsUtils.clone(shader.uniforms);\n\t\n\t\t\tthis.material = new _three2[\"default\"].ShaderMaterial({\n\t\n\t\t\t\tdefines: shader.defines || {},\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\t\n\t\t\t});\n\t\t}\n\t\n\t\tthis.renderToScreen = false;\n\t\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = true;\n\t\tthis.clear = false;\n\t\n\t\tthis.camera = new _three2[\"default\"].OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\t\tthis.scene = new _three2[\"default\"].Scene();\n\t\n\t\tthis.quad = new _three2[\"default\"].Mesh(new _three2[\"default\"].PlaneBufferGeometry(2, 2), null);\n\t\tthis.scene.add(this.quad);\n\t};\n\t\n\tShaderPass.prototype = {\n\t\n\t\trender: function render(renderer, writeBuffer, readBuffer, delta) {\n\t\n\t\t\tif (this.uniforms[this.textureID]) {\n\t\n\t\t\t\tthis.uniforms[this.textureID].value = readBuffer;\n\t\t\t}\n\t\n\t\t\tthis.quad.material = this.material;\n\t\n\t\t\tif (this.renderToScreen) {\n\t\n\t\t\t\trenderer.render(this.scene, this.camera);\n\t\t\t} else {\n\t\n\t\t\t\trenderer.render(this.scene, this.camera, writeBuffer, this.clear);\n\t\t\t}\n\t\t}\n\t\n\t};\n\t\n\texports[\"default\"] = ShaderPass;\n\t\n\t_three2[\"default\"].ShaderPass = ShaderPass;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\n\t\n\tvar MaskPass = function MaskPass(scene, camera) {\n\t\n\t\t\tthis.scene = scene;\n\t\t\tthis.camera = camera;\n\t\n\t\t\tthis.enabled = true;\n\t\t\tthis.clear = true;\n\t\t\tthis.needsSwap = false;\n\t\n\t\t\tthis.inverse = false;\n\t};\n\t\n\tMaskPass.prototype = {\n\t\n\t\t\trender: function render(renderer, writeBuffer, readBuffer, delta) {\n\t\n\t\t\t\t\tvar context = renderer.context;\n\t\n\t\t\t\t\t// don't update color or depth\n\t\n\t\t\t\t\tcontext.colorMask(false, false, false, false);\n\t\t\t\t\tcontext.depthMask(false);\n\t\n\t\t\t\t\t// set up stencil\n\t\n\t\t\t\t\tvar writeValue, clearValue;\n\t\n\t\t\t\t\tif (this.inverse) {\n\t\n\t\t\t\t\t\t\twriteValue = 0;\n\t\t\t\t\t\t\tclearValue = 1;\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\twriteValue = 1;\n\t\t\t\t\t\t\tclearValue = 0;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tcontext.enable(context.STENCIL_TEST);\n\t\t\t\t\tcontext.stencilOp(context.REPLACE, context.REPLACE, context.REPLACE);\n\t\t\t\t\tcontext.stencilFunc(context.ALWAYS, writeValue, 0xffffffff);\n\t\t\t\t\tcontext.clearStencil(clearValue);\n\t\n\t\t\t\t\t// draw into the stencil buffer\n\t\n\t\t\t\t\trenderer.render(this.scene, this.camera, readBuffer, this.clear);\n\t\t\t\t\trenderer.render(this.scene, this.camera, writeBuffer, this.clear);\n\t\n\t\t\t\t\t// re-enable update of color and depth\n\t\n\t\t\t\t\tcontext.colorMask(true, true, true, true);\n\t\t\t\t\tcontext.depthMask(true);\n\t\n\t\t\t\t\t// only render where stencil is set to 1\n\t\n\t\t\t\t\tcontext.stencilFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\t\t\t\t\tcontext.stencilOp(context.KEEP, context.KEEP, context.KEEP);\n\t\t\t}\n\t\n\t};\n\t\n\tvar ClearMaskPass = function ClearMaskPass() {\n\t\n\t\t\tthis.enabled = true;\n\t};\n\t\n\tClearMaskPass.prototype = {\n\t\n\t\t\trender: function render(renderer, writeBuffer, readBuffer, delta) {\n\t\n\t\t\t\t\tvar context = renderer.context;\n\t\n\t\t\t\t\tcontext.disable(context.STENCIL_TEST);\n\t\t\t}\n\t\n\t};\n\t\n\texports['default'] = MaskPass;\n\texports.ClearMaskPass = ClearMaskPass;\n\t\n\t_three2['default'].MaskPass = MaskPass;\n\t_three2['default'].ClearMaskPass = ClearMaskPass;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\n\t\n\tvar RenderPass = function RenderPass(scene, camera, overrideMaterial, clearColor, clearAlpha) {\n\t\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\n\t\tthis.overrideMaterial = overrideMaterial;\n\t\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = clearAlpha !== undefined ? clearAlpha : 1;\n\t\n\t\tthis.oldClearColor = new _three2['default'].Color();\n\t\tthis.oldClearAlpha = 1;\n\t\n\t\tthis.enabled = true;\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\t};\n\t\n\tRenderPass.prototype = {\n\t\n\t\trender: function render(renderer, writeBuffer, readBuffer, delta) {\n\t\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\t\n\t\t\tif (this.clearColor) {\n\t\n\t\t\t\tthis.oldClearColor.copy(renderer.getClearColor());\n\t\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\n\t\t\t\trenderer.setClearColor(this.clearColor, this.clearAlpha);\n\t\t\t}\n\t\n\t\t\trenderer.render(this.scene, this.camera, readBuffer, this.clear);\n\t\n\t\t\tif (this.clearColor) {\n\t\n\t\t\t\trenderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n\t\t\t}\n\t\n\t\t\tthis.scene.overrideMaterial = null;\n\t\t}\n\t\n\t};\n\t\n\texports['default'] = RenderPass;\n\t\n\t_three2['default'].RenderPass = RenderPass;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\r\n\t *\r\n\t * - 9 samples per pass\r\n\t * - standard deviation 2.7\r\n\t * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n\t * - \"r\" parameter control where \"focused\" horizontal line lies\r\n\t */\n\t\n\tvar HorizontalTiltShiftShader = {\n\t\n\t\t\tuniforms: {\n\t\n\t\t\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\t\t\"h\": { type: \"f\", value: 1.0 / 512.0 },\n\t\t\t\t\t\"r\": { type: \"f\", value: 0.35 }\n\t\n\t\t\t},\n\t\n\t\t\tvertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n\t\n\t\t\tfragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float h;\", \"uniform float r;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 sum = vec4( 0.0 );\", \"float hh = h * abs( r - vUv.y );\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\")\n\t\n\t};\n\t\n\texports[\"default\"] = HorizontalTiltShiftShader;\n\t\n\t_three2[\"default\"].HorizontalTiltShiftShader = HorizontalTiltShiftShader;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\r\n\t *\r\n\t * - 9 samples per pass\r\n\t * - standard deviation 2.7\r\n\t * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n\t * - \"r\" parameter control where \"focused\" horizontal line lies\r\n\t */\n\t\n\tvar VerticalTiltShiftShader = {\n\t\n\t\t\tuniforms: {\n\t\n\t\t\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\t\t\"v\": { type: \"f\", value: 1.0 / 512.0 },\n\t\t\t\t\t\"r\": { type: \"f\", value: 0.35 }\n\t\n\t\t\t},\n\t\n\t\t\tvertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n\t\n\t\t\tfragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float v;\", \"uniform float r;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 sum = vec4( 0.0 );\", \"float vv = v * abs( r - vUv.y );\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\")\n\t\n\t};\n\t\n\texports[\"default\"] = VerticalTiltShiftShader;\n\t\n\t_three2[\"default\"].VerticalTiltShiftShader = VerticalTiltShiftShader;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author davidedc / http://www.sketchpatch.net/\r\n\t *\r\n\t * NVIDIA FXAA by Timothy Lottes\r\n\t * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\r\n\t * - WebGL port by @supereggbert\r\n\t * http://www.glge.org/demos/fxaa/\r\n\t */\n\t\n\tvar FXAAShader = {\n\t\n\t\t\t\tuniforms: {\n\t\n\t\t\t\t\t\t\t\"tDiffuse\": { type: \"t\", value: null },\n\t\t\t\t\t\t\t\"resolution\": { type: \"v2\", value: new _three2[\"default\"].Vector2(1 / 1024, 1 / 512) }\n\t\n\t\t\t\t},\n\t\n\t\t\t\tvertexShader: [\"void main() {\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n\t\n\t\t\t\tfragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec2 resolution;\", \"#define FXAA_REDUCE_MIN   (1.0/128.0)\", \"#define FXAA_REDUCE_MUL   (1.0/8.0)\", \"#define FXAA_SPAN_MAX     8.0\", \"void main() {\", \"vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;\", \"vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;\", \"vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;\", \"vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;\", \"vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );\", \"vec3 rgbM  = rgbaM.xyz;\", \"vec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"float lumaNW = dot( rgbNW, luma );\", \"float lumaNE = dot( rgbNE, luma );\", \"float lumaSW = dot( rgbSW, luma );\", \"float lumaSE = dot( rgbSE, luma );\", \"float lumaM  = dot( rgbM,  luma );\", \"float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\", \"float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\", \"vec2 dir;\", \"dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\", \"dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\", \"float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\", \"float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\", \"dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\", \"max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\", \"dir * rcpDirMin)) * resolution;\", \"vec4 rgbA = (1.0/2.0) * (\", \"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (1.0/3.0 - 0.5)) +\", \"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (2.0/3.0 - 0.5)));\", \"vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\", \"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (0.0/3.0 - 0.5)) +\", \"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (3.0/3.0 - 0.5)));\", \"float lumaB = dot(rgbB, vec4(luma, 0.0));\", \"if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\", \"gl_FragColor = rgbA;\", \"} else {\", \"gl_FragColor = rgbB;\", \"}\", \"}\"].join(\"\\n\")\n\t\n\t};\n\t\n\texports[\"default\"] = FXAAShader;\n\t\n\t_three2[\"default\"].FXAAShader = FXAAShader;\n\tmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Skybox = __webpack_require__(42);\n\t\n\tvar _Skybox2 = _interopRequireDefault(_Skybox);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\tvar EnvironmentLayer = (function (_Layer) {\n\t  _inherits(EnvironmentLayer, _Layer);\n\t\n\t  function EnvironmentLayer(options) {\n\t    _classCallCheck(this, EnvironmentLayer);\n\t\n\t    var defaults = {\n\t      skybox: false\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(EnvironmentLayer.prototype), 'constructor', this).call(this, _options);\n\t  }\n\t\n\t  _createClass(EnvironmentLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd() {\n\t      this._initLights();\n\t\n\t      if (this._options.skybox) {\n\t        this._initSkybox();\n\t      }\n\t\n\t      // this._initGrid();\n\t\n\t      return Promise.resolve(this);\n\t    }\n\t\n\t    // Not fleshed out or thought through yet\n\t    //\n\t    // Lights could potentially be put it their own 'layer' to keep this class\n\t    // much simpler and less messy\n\t  }, {\n\t    key: '_initLights',\n\t    value: function _initLights() {\n\t      // Position doesn't really matter (the angle is important), however it's\n\t      // used here so the helpers look more natural.\n\t\n\t      if (!this._options.skybox) {\n\t        var directionalLight = new _three2['default'].DirectionalLight(0xffffff, 1);\n\t        directionalLight.position.x = 10000;\n\t        directionalLight.position.y = 10000;\n\t        directionalLight.position.z = 10000;\n\t\n\t        // TODO: Get shadows working in non-PBR scenes\n\t\n\t        // directionalLight.castShadow = true;\n\t        //\n\t        // var d = 100;\n\t        // directionalLight.shadow.camera.left = -d;\n\t        // directionalLight.shadow.camera.right = d;\n\t        // directionalLight.shadow.camera.top = d;\n\t        // directionalLight.shadow.camera.bottom = -d;\n\t        //\n\t        // directionalLight.shadow.camera.near = 10;\n\t        // directionalLight.shadow.camera.far = 100;\n\t        //\n\t        // // TODO: Need to dial in on a good shadowmap size\n\t        // directionalLight.shadow.mapSize.width = 2048;\n\t        // directionalLight.shadow.mapSize.height = 2048;\n\t        //\n\t        // // directionalLight.shadowBias = -0.0010;\n\t        // // directionalLight.shadow.darkness = 0.15;\n\t\n\t        var directionalLight2 = new _three2['default'].DirectionalLight(0xffffff, 0.5);\n\t        directionalLight2.position.x = -10000;\n\t        directionalLight2.position.y = 10000;\n\t        directionalLight2.position.z = 0;\n\t\n\t        var directionalLight3 = new _three2['default'].DirectionalLight(0xffffff, 0.5);\n\t        directionalLight3.position.x = 10000;\n\t        directionalLight3.position.y = 10000;\n\t        directionalLight3.position.z = -10000;\n\t\n\t        this.add(directionalLight);\n\t        this.add(directionalLight2);\n\t        this.add(directionalLight3);\n\t\n\t        // var helper = new THREE.DirectionalLightHelper(directionalLight, 10);\n\t        // var helper2 = new THREE.DirectionalLightHelper(directionalLight2, 10);\n\t        // var helper3 = new THREE.DirectionalLightHelper(directionalLight3, 10);\n\t        //\n\t        // this.add(helper);\n\t        // this.add(helper2);\n\t        // this.add(helper3);\n\t      } else {\n\t          // Directional light that will be projected from the sun\n\t          this._skyboxLight = new _three2['default'].DirectionalLight(0xffffff, 1);\n\t\n\t          this._skyboxLight.castShadow = true;\n\t\n\t          var d = 10000;\n\t          this._skyboxLight.shadow.camera.left = -d;\n\t          this._skyboxLight.shadow.camera.right = d;\n\t          this._skyboxLight.shadow.camera.top = d;\n\t          this._skyboxLight.shadow.camera.bottom = -d;\n\t\n\t          this._skyboxLight.shadow.camera.near = 10000;\n\t          this._skyboxLight.shadow.camera.far = 70000;\n\t\n\t          // TODO: Need to dial in on a good shadowmap size\n\t          this._skyboxLight.shadow.mapSize.width = 2048;\n\t          this._skyboxLight.shadow.mapSize.height = 2048;\n\t\n\t          // this._skyboxLight.shadowBias = -0.0010;\n\t          // this._skyboxLight.shadow.darkness = 0.15;\n\t\n\t          // this._object3D.add(new THREE.CameraHelper(this._skyboxLight.shadow.camera));\n\t\n\t          this.add(this._skyboxLight);\n\t        }\n\t    }\n\t  }, {\n\t    key: '_initSkybox',\n\t    value: function _initSkybox() {\n\t      this._skybox = new _Skybox2['default'](this._world, this._skyboxLight);\n\t      this.add(this._skybox._mesh);\n\t    }\n\t\n\t    // Add grid helper for context during initial development\n\t  }, {\n\t    key: '_initGrid',\n\t    value: function _initGrid() {\n\t      var size = 4000;\n\t      var step = 100;\n\t\n\t      var gridHelper = new _three2['default'].GridHelper(size, step);\n\t      this.add(gridHelper);\n\t    }\n\t\n\t    // Clean up environment\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this._skyboxLight = null;\n\t\n\t      if (this._skybox) {\n\t        this.remove(this._skybox._mesh);\n\t        this._skybox.destroy();\n\t        this._skybox = null;\n\t      }\n\t\n\t      _get(Object.getPrototypeOf(EnvironmentLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return EnvironmentLayer;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = EnvironmentLayer;\n\t\n\tvar noNew = function noNew(options) {\n\t  return new EnvironmentLayer(options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.environmentLayer = noNew;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _eventemitter3 = __webpack_require__(2);\n\t\n\tvar _eventemitter32 = _interopRequireDefault(_eventemitter3);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _shortid = __webpack_require__(32);\n\t\n\tvar _shortid2 = _interopRequireDefault(_shortid);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _engineScene = __webpack_require__(9);\n\t\n\tvar _engineScene2 = _interopRequireDefault(_engineScene);\n\t\n\tvar _vendorCSS3DRenderer = __webpack_require__(14);\n\t\n\tvar _vendorCSS2DRenderer = __webpack_require__(16);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// TODO: Need a single move method that handles moving all the various object\n\t// layers so that the DOM layers stay in sync with the 3D layer\n\t\n\t// TODO: Double check that objects within the _object3D Object3D parent are frustum\n\t// culled even if the layer position stays at the default (0,0,0) and the child\n\t// objects are positioned much further away\n\t//\n\t// Or does the layer being at (0,0,0) prevent the child objects from being\n\t// culled because the layer parent is effectively always in view even if the\n\t// child is actually out of camera\n\t\n\tvar Layer = (function (_EventEmitter) {\n\t  _inherits(Layer, _EventEmitter);\n\t\n\t  function Layer(options) {\n\t    _classCallCheck(this, Layer);\n\t\n\t    _get(Object.getPrototypeOf(Layer.prototype), 'constructor', this).call(this);\n\t\n\t    var defaults = {\n\t      id: _shortid2['default'].generate(),\n\t      output: true,\n\t      outputToScene: true\n\t    };\n\t\n\t    this._options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    if (this.isOutput()) {\n\t      this._object3D = new _three2['default'].Object3D();\n\t\n\t      this._dom3D = document.createElement('div');\n\t      this._domObject3D = new _vendorCSS3DRenderer.CSS3DObject(this._dom3D);\n\t\n\t      this._dom2D = document.createElement('div');\n\t      this._domObject2D = new _vendorCSS2DRenderer.CSS2DObject(this._dom2D);\n\t    }\n\t  }\n\t\n\t  // Add THREE object directly to layer\n\t\n\t  _createClass(Layer, [{\n\t    key: 'add',\n\t    value: function add(object) {\n\t      this._object3D.add(object);\n\t    }\n\t\n\t    // Remove THREE object from to layer\n\t  }, {\n\t    key: 'remove',\n\t    value: function remove(object) {\n\t      this._object3D.remove(object);\n\t    }\n\t  }, {\n\t    key: 'addDOM3D',\n\t    value: function addDOM3D(object) {\n\t      this._domObject3D.add(object);\n\t    }\n\t  }, {\n\t    key: 'removeDOM3D',\n\t    value: function removeDOM3D(object) {\n\t      this._domObject3D.remove(object);\n\t    }\n\t  }, {\n\t    key: 'addDOM2D',\n\t    value: function addDOM2D(object) {\n\t      this._domObject2D.add(object);\n\t    }\n\t  }, {\n\t    key: 'removeDOM2D',\n\t    value: function removeDOM2D(object) {\n\t      this._domObject2D.remove(object);\n\t    }\n\t\n\t    // Add layer to world instance and store world reference\n\t  }, {\n\t    key: 'addTo',\n\t    value: function addTo(world) {\n\t      return world.addLayer(this);\n\t    }\n\t\n\t    // Internal method called by World.addLayer to actually add the layer\n\t  }, {\n\t    key: '_addToWorld',\n\t    value: function _addToWorld(world) {\n\t      var _this = this;\n\t\n\t      this._world = world;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this._onAdd(world).then(function () {\n\t          _this.emit('added');\n\t          resolve(_this);\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // Must return a promise\n\t  }, {\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      return Promise.resolve(this);\n\t    }\n\t  }, {\n\t    key: 'getPickingId',\n\t    value: function getPickingId() {\n\t      if (this._world._engine._picking) {\n\t        return this._world._engine._picking.getNextId();\n\t      }\n\t\n\t      return false;\n\t    }\n\t\n\t    // TODO: Tidy this up and don't access so many private properties to work\n\t  }, {\n\t    key: 'addToPicking',\n\t    value: function addToPicking(object) {\n\t      if (!this._world._engine._picking) {\n\t        return;\n\t      }\n\t\n\t      this._world._engine._picking.add(object);\n\t    }\n\t  }, {\n\t    key: 'removeFromPicking',\n\t    value: function removeFromPicking(object) {\n\t      if (!this._world._engine._picking) {\n\t        return;\n\t      }\n\t\n\t      this._world._engine._picking.remove(object);\n\t    }\n\t  }, {\n\t    key: 'isOutput',\n\t    value: function isOutput() {\n\t      return this._options.output;\n\t    }\n\t  }, {\n\t    key: 'isOutputToScene',\n\t    value: function isOutputToScene() {\n\t      return this._options.outputToScene;\n\t    }\n\t\n\t    // TODO: Also hide any attached DOM layers\n\t  }, {\n\t    key: 'hide',\n\t    value: function hide() {\n\t      this._object3D.visible = false;\n\t\n\t      if (this._pickingMesh) {\n\t        this._pickingMesh.visible = false;\n\t      }\n\t    }\n\t\n\t    // TODO: Also show any attached DOM layers\n\t  }, {\n\t    key: 'show',\n\t    value: function show() {\n\t      this._object3D.visible = true;\n\t\n\t      if (this._pickingMesh) {\n\t        this._pickingMesh.visible = true;\n\t      }\n\t    }\n\t\n\t    // Destroys the layer and removes it from the scene and memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      if (this._object3D && this._object3D.children) {\n\t        // Remove everything else in the layer\n\t        var child;\n\t        for (var i = this._object3D.children.length - 1; i >= 0; i--) {\n\t          child = this._object3D.children[i];\n\t\n\t          if (!child) {\n\t            continue;\n\t          }\n\t\n\t          this.remove(child);\n\t\n\t          if (child.geometry) {\n\t            // Dispose of mesh and materials\n\t            child.geometry.dispose();\n\t            child.geometry = null;\n\t          }\n\t\n\t          if (child.material) {\n\t            if (child.material.map) {\n\t              child.material.map.dispose();\n\t              child.material.map = null;\n\t            }\n\t\n\t            child.material.dispose();\n\t            child.material = null;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this._domObject3D && this._domObject3D.children) {\n\t        // Remove everything else in the layer\n\t        var child;\n\t        for (var i = this._domObject3D.children.length - 1; i >= 0; i--) {\n\t          child = this._domObject3D.children[i];\n\t\n\t          if (!child) {\n\t            continue;\n\t          }\n\t\n\t          this.removeDOM3D(child);\n\t        }\n\t      }\n\t\n\t      if (this._domObject2D && this._domObject2D.children) {\n\t        // Remove everything else in the layer\n\t        var child;\n\t        for (var i = this._domObject2D.children.length - 1; i >= 0; i--) {\n\t          child = this._domObject2D.children[i];\n\t\n\t          if (!child) {\n\t            continue;\n\t          }\n\t\n\t          this.removeDOM2D(child);\n\t        }\n\t      }\n\t\n\t      this._domObject3D = null;\n\t      this._domObject2D = null;\n\t\n\t      this._world = null;\n\t      this._object3D = null;\n\t    }\n\t  }]);\n\t\n\t  return Layer;\n\t})(_eventemitter32['default']);\n\t\n\texports['default'] = Layer;\n\t\n\tvar noNew = function noNew(options) {\n\t  return new Layer(options);\n\t};\n\t\n\texports.layer = noNew;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tmodule.exports = __webpack_require__(33);\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar alphabet = __webpack_require__(34);\n\tvar build = __webpack_require__(36);\n\tvar isValid = __webpack_require__(40);\n\t\n\t// if you are using cluster or multiple servers use this to make each instance\n\t// has a unique value for worker\n\t// Note: I don't know if this is automatically set when using third\n\t// party cluster solutions such as pm2.\n\tvar clusterWorkerId = __webpack_require__(41) || 0;\n\t\n\t/**\n\t * Set the seed.\n\t * Highly recommended if you don't want people to try to figure out your id schema.\n\t * exposed as shortid.seed(int)\n\t * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n\t */\n\tfunction seed(seedValue) {\n\t    alphabet.seed(seedValue);\n\t    return module.exports;\n\t}\n\t\n\t/**\n\t * Set the cluster worker or machine id\n\t * exposed as shortid.worker(int)\n\t * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n\t * returns shortid module so it can be chained.\n\t */\n\tfunction worker(workerId) {\n\t    clusterWorkerId = workerId;\n\t    return module.exports;\n\t}\n\t\n\t/**\n\t *\n\t * sets new characters to use in the alphabet\n\t * returns the shuffled alphabet\n\t */\n\tfunction characters(newCharacters) {\n\t    if (newCharacters !== undefined) {\n\t        alphabet.characters(newCharacters);\n\t    }\n\t\n\t    return alphabet.shuffled();\n\t}\n\t\n\t/**\n\t * Generate unique id\n\t * Returns string id\n\t */\n\tfunction generate() {\n\t  return build(clusterWorkerId);\n\t}\n\t\n\t// Export all other functions as properties of the generate function\n\tmodule.exports = generate;\n\tmodule.exports.generate = generate;\n\tmodule.exports.seed = seed;\n\tmodule.exports.worker = worker;\n\tmodule.exports.characters = characters;\n\tmodule.exports.isValid = isValid;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar randomFromSeed = __webpack_require__(35);\n\t\n\tvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\n\tvar alphabet;\n\tvar previousSeed;\n\t\n\tvar shuffled;\n\t\n\tfunction reset() {\n\t    shuffled = false;\n\t}\n\t\n\tfunction setCharacters(_alphabet_) {\n\t    if (!_alphabet_) {\n\t        if (alphabet !== ORIGINAL) {\n\t            alphabet = ORIGINAL;\n\t            reset();\n\t        }\n\t        return;\n\t    }\n\t\n\t    if (_alphabet_ === alphabet) {\n\t        return;\n\t    }\n\t\n\t    if (_alphabet_.length !== ORIGINAL.length) {\n\t        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n\t    }\n\t\n\t    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n\t       return ind !== arr.lastIndexOf(item);\n\t    });\n\t\n\t    if (unique.length) {\n\t        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n\t    }\n\t\n\t    alphabet = _alphabet_;\n\t    reset();\n\t}\n\t\n\tfunction characters(_alphabet_) {\n\t    setCharacters(_alphabet_);\n\t    return alphabet;\n\t}\n\t\n\tfunction setSeed(seed) {\n\t    randomFromSeed.seed(seed);\n\t    if (previousSeed !== seed) {\n\t        reset();\n\t        previousSeed = seed;\n\t    }\n\t}\n\t\n\tfunction shuffle() {\n\t    if (!alphabet) {\n\t        setCharacters(ORIGINAL);\n\t    }\n\t\n\t    var sourceArray = alphabet.split('');\n\t    var targetArray = [];\n\t    var r = randomFromSeed.nextValue();\n\t    var characterIndex;\n\t\n\t    while (sourceArray.length > 0) {\n\t        r = randomFromSeed.nextValue();\n\t        characterIndex = Math.floor(r * sourceArray.length);\n\t        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n\t    }\n\t    return targetArray.join('');\n\t}\n\t\n\tfunction getShuffled() {\n\t    if (shuffled) {\n\t        return shuffled;\n\t    }\n\t    shuffled = shuffle();\n\t    return shuffled;\n\t}\n\t\n\t/**\n\t * lookup shuffled letter\n\t * @param index\n\t * @returns {string}\n\t */\n\tfunction lookup(index) {\n\t    var alphabetShuffled = getShuffled();\n\t    return alphabetShuffled[index];\n\t}\n\t\n\tfunction get () {\n\t  return alphabet || ORIGINAL;\n\t}\n\t\n\tmodule.exports = {\n\t    get: get,\n\t    characters: characters,\n\t    seed: setSeed,\n\t    lookup: lookup,\n\t    shuffled: getShuffled\n\t};\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\t// Found this seed-based random generator somewhere\n\t// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\t\n\tvar seed = 1;\n\t\n\t/**\n\t * return a random number based on a seed\n\t * @param seed\n\t * @returns {number}\n\t */\n\tfunction getNextValue() {\n\t    seed = (seed * 9301 + 49297) % 233280;\n\t    return seed/(233280.0);\n\t}\n\t\n\tfunction setSeed(_seed_) {\n\t    seed = _seed_;\n\t}\n\t\n\tmodule.exports = {\n\t    nextValue: getNextValue,\n\t    seed: setSeed\n\t};\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar generate = __webpack_require__(37);\n\tvar alphabet = __webpack_require__(34);\n\t\n\t// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n\t// This number should be updated every year or so to keep the generated id short.\n\t// To regenerate `new Date() - 0` and bump the version. Always bump the version!\n\tvar REDUCE_TIME = 1459707606518;\n\t\n\t// don't change unless we change the algos or REDUCE_TIME\n\t// must be an integer and less than 16\n\tvar version = 6;\n\t\n\t// Counter is used when shortid is called multiple times in one second.\n\tvar counter;\n\t\n\t// Remember the last time shortid was called in case counter is needed.\n\tvar previousSeconds;\n\t\n\t/**\n\t * Generate unique id\n\t * Returns string id\n\t */\n\tfunction build(clusterWorkerId) {\n\t    var str = '';\n\t\n\t    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\t\n\t    if (seconds === previousSeconds) {\n\t        counter++;\n\t    } else {\n\t        counter = 0;\n\t        previousSeconds = seconds;\n\t    }\n\t\n\t    str = str + generate(version);\n\t    str = str + generate(clusterWorkerId);\n\t    if (counter > 0) {\n\t        str = str + generate(counter);\n\t    }\n\t    str = str + generate(seconds);\n\t    return str;\n\t}\n\t\n\tmodule.exports = build;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar alphabet = __webpack_require__(34);\n\tvar random = __webpack_require__(38);\n\tvar format = __webpack_require__(39);\n\t\n\tfunction generate(number) {\n\t    var loopCounter = 0;\n\t    var done;\n\t\n\t    var str = '';\n\t\n\t    while (!done) {\n\t        str = str + format(random, alphabet.get(), 1);\n\t        done = number < (Math.pow(16, loopCounter + 1 ) );\n\t        loopCounter++;\n\t    }\n\t    return str;\n\t}\n\t\n\tmodule.exports = generate;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\t\n\tvar randomByte;\n\t\n\tif (!crypto || !crypto.getRandomValues) {\n\t    randomByte = function(size) {\n\t        var bytes = [];\n\t        for (var i = 0; i < size; i++) {\n\t            bytes.push(Math.floor(Math.random() * 256));\n\t        }\n\t        return bytes;\n\t    };\n\t} else {\n\t    randomByte = function(size) {\n\t        return crypto.getRandomValues(new Uint8Array(size));\n\t    };\n\t}\n\t\n\tmodule.exports = randomByte;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Secure random string generator with custom alphabet.\n\t *\n\t * Alphabet must contain 256 symbols or less. Otherwise, the generator\n\t * will not be secure.\n\t *\n\t * @param {generator} random The random bytes generator.\n\t * @param {string} alphabet Symbols to be used in new random string.\n\t * @param {size} size The number of symbols in new random string.\n\t *\n\t * @return {string} Random string.\n\t *\n\t * @example\n\t * const format = require('nanoid/format')\n\t *\n\t * function random (size) {\n\t *   const result = []\n\t *   for (let i = 0; i < size; i++) {\n\t *     result.push(randomByte())\n\t *   }\n\t *   return result\n\t * }\n\t *\n\t * format(random, \"abcdef\", 5) //=> \"fbaef\"\n\t *\n\t * @name format\n\t * @function\n\t */\n\tmodule.exports = function (random, alphabet, size) {\n\t  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n\t  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n\t  size = +size\n\t\n\t  var id = ''\n\t  while (true) {\n\t    var bytes = random(step)\n\t    for (var i = 0; i < step; i++) {\n\t      var byte = bytes[i] & mask\n\t      if (alphabet[byte]) {\n\t        id += alphabet[byte]\n\t        if (id.length === size) return id\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * @callback generator\n\t * @param {number} bytes The number of bytes to generate.\n\t * @return {number[]} Random bytes.\n\t */\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar alphabet = __webpack_require__(34);\n\t\n\tfunction isShortId(id) {\n\t    if (!id || typeof id !== 'string' || id.length < 6 ) {\n\t        return false;\n\t    }\n\t\n\t    var nonAlphabetic = new RegExp('[^' +\n\t      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n\t    ']');\n\t    return !nonAlphabetic.test(id);\n\t}\n\t\n\tmodule.exports = isShortId;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = 0;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _Sky = __webpack_require__(43);\n\t\n\tvar _Sky2 = _interopRequireDefault(_Sky);\n\t\n\tvar _lodashThrottle = __webpack_require__(20);\n\t\n\tvar _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\tvar cubemap = {\n\t    vertexShader: ['varying vec3 vPosition;', 'void main() {', 'vPosition = position;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n\t\n\t    fragmentShader: ['uniform samplerCube cubemap;', 'varying vec3 vPosition;', 'void main() {', 'gl_FragColor = textureCube(cubemap, normalize(vPosition));', '}'].join('\\n')\n\t};\n\t\n\tvar Skybox = (function () {\n\t    function Skybox(world, light) {\n\t        _classCallCheck(this, Skybox);\n\t\n\t        this._world = world;\n\t        this._light = light;\n\t\n\t        this._settings = {\n\t            distance: 38000,\n\t            turbidity: 10,\n\t            reileigh: 2,\n\t            mieCoefficient: 0.005,\n\t            mieDirectionalG: 0.8,\n\t            luminance: 1,\n\t            // 0.48 is a cracking dusk / sunset\n\t            // 0.4 is a beautiful early-morning / late-afternoon\n\t            // 0.2 is a nice day time\n\t            inclination: 0.48, // Elevation / inclination\n\t            azimuth: 0.25 };\n\t\n\t        // Facing front\n\t        this._initSkybox();\n\t        this._updateUniforms();\n\t        this._initEvents();\n\t    }\n\t\n\t    _createClass(Skybox, [{\n\t        key: '_initEvents',\n\t        value: function _initEvents() {\n\t            // Throttled to 1 per 100ms\n\t            this._throttledWorldUpdate = (0, _lodashThrottle2['default'])(this._update, 100);\n\t            this._world.on('preUpdate', this._throttledWorldUpdate, this);\n\t        }\n\t    }, {\n\t        key: '_initSkybox',\n\t        value: function _initSkybox() {\n\t            // Cube camera for skybox\n\t            this._cubeCamera = new _three2['default'].CubeCamera(1, 20000000, 128);\n\t\n\t            // Cube material\n\t            var cubeTarget = this._cubeCamera.renderTarget;\n\t\n\t            // Add Sky Mesh\n\t            this._sky = new _Sky2['default']();\n\t            this._skyScene = new _three2['default'].Scene();\n\t            this._skyScene.add(this._sky.mesh);\n\t\n\t            // Add Sun Helper\n\t            this._sunSphere = new _three2['default'].Mesh(new _three2['default'].SphereBufferGeometry(2000, 16, 8), new _three2['default'].MeshBasicMaterial({\n\t                color: 0xffffff\n\t            }));\n\t\n\t            // TODO: This isn't actually visible because it's not added to the layer\n\t            // this._sunSphere.visible = true;\n\t\n\t            var skyboxUniforms = {\n\t                cubemap: { type: 't', value: cubeTarget }\n\t            };\n\t\n\t            var skyboxMat = new _three2['default'].ShaderMaterial({\n\t                uniforms: skyboxUniforms,\n\t                vertexShader: cubemap.vertexShader,\n\t                fragmentShader: cubemap.fragmentShader,\n\t                side: _three2['default'].BackSide\n\t            });\n\t\n\t            this._mesh = new _three2['default'].Mesh(new _three2['default'].BoxGeometry(1900000, 1900000, 1900000), skyboxMat);\n\t\n\t            this._updateSkybox = true;\n\t        }\n\t    }, {\n\t        key: '_updateUniforms',\n\t        value: function _updateUniforms() {\n\t            var settings = this._settings;\n\t            var uniforms = this._sky.uniforms;\n\t            uniforms.turbidity.value = settings.turbidity;\n\t            uniforms.reileigh.value = settings.reileigh;\n\t            uniforms.luminance.value = settings.luminance;\n\t            uniforms.mieCoefficient.value = settings.mieCoefficient;\n\t            uniforms.mieDirectionalG.value = settings.mieDirectionalG;\n\t\n\t            var theta = Math.PI * (settings.inclination - 0.5);\n\t            var phi = 2 * Math.PI * (settings.azimuth - 0.5);\n\t\n\t            this._sunSphere.position.x = settings.distance * Math.cos(phi);\n\t            this._sunSphere.position.y = settings.distance * Math.sin(phi) * Math.sin(theta);\n\t            this._sunSphere.position.z = settings.distance * Math.sin(phi) * Math.cos(theta);\n\t\n\t            // Move directional light to sun position\n\t            this._light.position.copy(this._sunSphere.position);\n\t\n\t            this._sky.uniforms.sunPosition.value.copy(this._sunSphere.position);\n\t        }\n\t    }, {\n\t        key: '_update',\n\t        value: function _update(delta) {\n\t            if (this._updateSkybox) {\n\t                this._updateSkybox = false;\n\t            } else {\n\t                return;\n\t            }\n\t\n\t            // if (!this._angle) {\n\t            //   this._angle = 0;\n\t            // }\n\t            //\n\t            // // Animate inclination\n\t            // this._angle += Math.PI * delta;\n\t            // this._settings.inclination = 0.5 * (Math.sin(this._angle) / 2 + 0.5);\n\t\n\t            // Update light intensity depending on elevation of sun (day to night)\n\t            this._light.intensity = 1 - 0.95 * (this._settings.inclination / 0.5);\n\t\n\t            // // console.log(delta, this._angle, this._settings.inclination);\n\t            //\n\t            // TODO: Only do this when the uniforms have been changed\n\t            this._updateUniforms();\n\t\n\t            // TODO: Only do this when the cubemap has actually changed\n\t            this._cubeCamera.updateCubeMap(this._world._engine._renderer, this._skyScene);\n\t        }\n\t    }, {\n\t        key: 'getRenderTarget',\n\t        value: function getRenderTarget() {\n\t            return this._cubeCamera.renderTarget;\n\t        }\n\t    }, {\n\t        key: 'setInclination',\n\t        value: function setInclination(inclination) {\n\t            this._settings.inclination = inclination;\n\t            this._updateSkybox = true;\n\t        }\n\t\n\t        // Destroy the skybox and remove it from memory\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy() {\n\t            this._world.off('preUpdate', this._throttledWorldUpdate);\n\t            this._throttledWorldUpdate = null;\n\t\n\t            this._world = null;\n\t            this._light = null;\n\t\n\t            this._cubeCamera = null;\n\t\n\t            this._sky.mesh.geometry.dispose();\n\t            this._sky.mesh.geometry = null;\n\t\n\t            if (this._sky.mesh.material.map) {\n\t                this._sky.mesh.material.map.dispose();\n\t                this._sky.mesh.material.map = null;\n\t            }\n\t\n\t            this._sky.mesh.material.dispose();\n\t            this._sky.mesh.material = null;\n\t\n\t            this._sky.mesh = null;\n\t            this._sky = null;\n\t\n\t            this._skyScene = null;\n\t\n\t            this._sunSphere.geometry.dispose();\n\t            this._sunSphere.geometry = null;\n\t\n\t            if (this._sunSphere.material.map) {\n\t                this._sunSphere.material.map.dispose();\n\t                this._sunSphere.material.map = null;\n\t            }\n\t\n\t            this._sunSphere.material.dispose();\n\t            this._sunSphere.material = null;\n\t\n\t            this._sunSphere = null;\n\t\n\t            this._mesh.geometry.dispose();\n\t            this._mesh.geometry = null;\n\t\n\t            if (this._mesh.material.map) {\n\t                this._mesh.material.map.dispose();\n\t                this._mesh.material.map = null;\n\t            }\n\t\n\t            this._mesh.material.dispose();\n\t            this._mesh.material = null;\n\t        }\n\t    }]);\n\t\n\t    return Skybox;\n\t})();\n\t\n\texports['default'] = Skybox;\n\t\n\tvar noNew = function noNew(world, light) {\n\t    return new Skybox(world, light);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.skybox = noNew;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/*eslint eqeqeq:0*/\n\t\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t *\r\n\t * Based on 'A Practical Analytic Model for Daylight'\r\n\t * aka The Preetham Model, the de facto standard analytic skydome model\r\n\t * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\r\n\t *\r\n\t * First implemented by Simon Wallner\r\n\t * http://www.simonwallner.at/projects/atmospheric-scattering\r\n\t *\r\n\t * Improved by Martin Upitis\r\n\t * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\r\n\t *\r\n\t * Three.js integration by zz85 http://twitter.com/blurspline\r\n\t*/\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t_three2['default'].ShaderLib['sky'] = {\n\t\n\t\t\t\tuniforms: {\n\t\n\t\t\t\t\t\t\tluminance: { type: 'f', value: 1 },\n\t\t\t\t\t\t\tturbidity: { type: 'f', value: 2 },\n\t\t\t\t\t\t\treileigh: { type: 'f', value: 1 },\n\t\t\t\t\t\t\tmieCoefficient: { type: 'f', value: 0.005 },\n\t\t\t\t\t\t\tmieDirectionalG: { type: 'f', value: 0.8 },\n\t\t\t\t\t\t\tsunPosition: { type: 'v3', value: new _three2['default'].Vector3() }\n\t\n\t\t\t\t},\n\t\n\t\t\t\tvertexShader: ['varying vec3 vWorldPosition;', 'void main() {', 'vec4 worldPosition = modelMatrix * vec4( position, 1.0 );', 'vWorldPosition = worldPosition.xyz;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n\t\n\t\t\t\tfragmentShader: ['uniform sampler2D skySampler;', 'uniform vec3 sunPosition;', 'varying vec3 vWorldPosition;', 'vec3 cameraPos = vec3(0., 0., 0.);', '// uniform sampler2D sDiffuse;', '// const float turbidity = 10.0; //', '// const float reileigh = 2.; //', '// const float luminance = 1.0; //', '// const float mieCoefficient = 0.005;', '// const float mieDirectionalG = 0.8;', 'uniform float luminance;', 'uniform float turbidity;', 'uniform float reileigh;', 'uniform float mieCoefficient;', 'uniform float mieDirectionalG;', '// constants for atmospheric scattering', 'const float e = 2.71828182845904523536028747135266249775724709369995957;', 'const float pi = 3.141592653589793238462643383279502884197169;', 'const float n = 1.0003; // refractive index of air', 'const float N = 2.545E25; // number of molecules per unit volume for air at', '// 288.15K and 1013mb (sea level -45 celsius)', 'const float pn = 0.035;\t// depolatization factor for standard air', '// wavelength of used primaries, according to preetham', 'const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);', '// mie stuff', '// K coefficient for the primaries', 'const vec3 K = vec3(0.686, 0.678, 0.666);', 'const float v = 4.0;', '// optical length at zenith for molecules', 'const float rayleighZenithLength = 8.4E3;', 'const float mieZenithLength = 1.25E3;', 'const vec3 up = vec3(0.0, 1.0, 0.0);', 'const float EE = 1000.0;', 'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;', '// 66 arc seconds -> degrees, and the cosine of that', '// earth shadow hack', 'const float cutoffAngle = pi/1.95;', 'const float steepness = 1.5;', 'vec3 totalRayleigh(vec3 lambda)', '{', 'return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));', '}',\n\t\n\t\t\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n\t\t\t\t'// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE', 'vec3 simplifiedRayleigh()', '{', 'return 0.0005 / vec3(94, 40, 18);',\n\t\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n\t\t\t\t'}', 'float rayleighPhase(float cosTheta)', '{\t ', 'return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));', '//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));', '//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));', '}', 'vec3 totalMie(vec3 lambda, vec3 K, float T)', '{', 'float c = (0.2 * T ) * 10E-18;', 'return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;', '}', 'float hgPhase(float cosTheta, float g)', '{', 'return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));', '}', 'float sunIntensity(float zenithAngleCos)', '{', 'return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));', '}', '// float logLuminance(vec3 c)', '// {', '// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);', '// }', '// Filmic ToneMapping http://filmicgames.com/archives/75', 'float A = 0.15;', 'float B = 0.50;', 'float C = 0.10;', 'float D = 0.20;', 'float E = 0.02;', 'float F = 0.30;', 'float W = 1000.0;', 'vec3 Uncharted2Tonemap(vec3 x)', '{', 'return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;', '}', 'void main() ', '{', 'float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);', '// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;', '// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);', 'float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));', 'vec3 sunDirection = normalize(sunPosition);', 'float sunE = sunIntensity(dot(sunDirection, up));', '// extinction (absorbtion + out scattering) ', '// rayleigh coefficients',\n\t\n\t\t\t\t// 'vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;',\n\t\t\t\t'vec3 betaR = simplifiedRayleigh() * reileighCoefficient;', '// mie coefficients', 'vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;', '// optical length', '// cutoff angle at 90 to avoid singularity in next formula.', 'float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));', 'float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));', 'float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));', '// combined extinction factor\t', 'vec3 Fex = exp(-(betaR * sR + betaM * sM));', '// in scattering', 'float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);', 'float rPhase = rayleighPhase(cosTheta*0.5+0.5);', 'vec3 betaRTheta = betaR * rPhase;', 'float mPhase = hgPhase(cosTheta, mieDirectionalG);', 'vec3 betaMTheta = betaM * mPhase;', 'vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));', 'Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));', '//nightsky', 'vec3 direction = normalize(vWorldPosition - cameraPos);', 'float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]', 'float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]', 'vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);', '// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;', 'vec3 L0 = vec3(0.1) * Fex;', '// composition + solar disc', '//if (cosTheta > sunAngularDiameterCos)', 'float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);', '// if (normalize(vWorldPosition - cameraPos).y>0.0)', 'L0 += (sunE * 19000.0 * Fex)*sundisk;', 'vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));', 'vec3 texColor = (Lin+L0);   ', 'texColor *= 0.04 ;', 'texColor += vec3(0.0,0.001,0.0025)*0.3;', 'float g_fMaxLuminance = 1.0;', 'float fLumScaled = 0.1 / luminance;     ', 'float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); ', 'float ExposureBias = fLumCompressed;', 'vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);', 'vec3 color = curr*whiteScale;', 'vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));', 'gl_FragColor.rgb = retColor;', 'gl_FragColor.a = 1.0;', '}'].join('\\n')\n\t\n\t};\n\t\n\tvar Sky = function Sky() {\n\t\n\t\t\t\tvar skyShader = _three2['default'].ShaderLib['sky'];\n\t\t\t\tvar skyUniforms = _three2['default'].UniformsUtils.clone(skyShader.uniforms);\n\t\n\t\t\t\tvar skyMat = new _three2['default'].ShaderMaterial({\n\t\t\t\t\t\t\tfragmentShader: skyShader.fragmentShader,\n\t\t\t\t\t\t\tvertexShader: skyShader.vertexShader,\n\t\t\t\t\t\t\tuniforms: skyUniforms,\n\t\t\t\t\t\t\tside: _three2['default'].BackSide\n\t\t\t\t});\n\t\n\t\t\t\tvar skyGeo = new _three2['default'].SphereBufferGeometry(450000, 32, 15);\n\t\t\t\tvar skyMesh = new _three2['default'].Mesh(skyGeo, skyMat);\n\t\n\t\t\t\t// Expose variables\n\t\t\t\tthis.mesh = skyMesh;\n\t\t\t\tthis.uniforms = skyUniforms;\n\t};\n\t\n\texports['default'] = Sky;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _WorkerPool = __webpack_require__(45);\n\t\n\tvar _WorkerPool2 = _interopRequireDefault(_WorkerPool);\n\t\n\tvar Worker = (function () {\n\t  var _maxWorkers = 2;\n\t  var pool;\n\t\n\t  var createWorkers = function createWorkers(maxWorkers, workerScript) {\n\t    pool = new _WorkerPool2['default']({\n\t      numThreads: maxWorkers ? maxWorkers : _maxWorkers,\n\t      workerScript: workerScript ? workerScript : 'vizicities-worker.js'\n\t    });\n\t\n\t    return pool.createWorkers();\n\t  };\n\t\n\t  var exec = function exec(method, args, transferrables) {\n\t    return pool.exec(method, args, transferrables);\n\t  };\n\t\n\t  return {\n\t    createWorkers: createWorkers,\n\t    exec: exec\n\t  };\n\t})();\n\t\n\texports['default'] = Worker;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _WorkerPoolWorker = __webpack_require__(46);\n\t\n\tvar _WorkerPoolWorker2 = _interopRequireDefault(_WorkerPoolWorker);\n\t\n\tvar DEBUG = false;\n\t\n\t// Polyfill for Array.find\n\tif (!Array.prototype.find) {\n\t  Object.defineProperty(Array.prototype, 'find', {\n\t    value: function value(predicate) {\n\t      'use strict';\n\t      if (this == null) {\n\t        throw new TypeError('Array.prototype.find called on null or undefined');\n\t      }\n\t      if (typeof predicate !== 'function') {\n\t        throw new TypeError('predicate must be a function');\n\t      }\n\t      var list = Object(this);\n\t      var length = list.length >>> 0;\n\t      var thisArg = arguments[1];\n\t      var value;\n\t\n\t      for (var i = 0; i < length; i++) {\n\t        value = list[i];\n\t        if (predicate.call(thisArg, value, i, list)) {\n\t          return value;\n\t        }\n\t      }\n\t      return undefined;\n\t    }\n\t  });\n\t}\n\t\n\tvar WorkerPool = (function () {\n\t  function WorkerPool(options) {\n\t    _classCallCheck(this, WorkerPool);\n\t\n\t    this.numThreads = options.numThreads || 2;\n\t    this.workerScript = options.workerScript;\n\t\n\t    this.workers = [];\n\t    this.tasks = [];\n\t  }\n\t\n\t  _createClass(WorkerPool, [{\n\t    key: 'createWorkers',\n\t    value: function createWorkers() {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var workerPromises = [];\n\t\n\t        for (var i = 0; i < _this.numThreads; i++) {\n\t          workerPromises.push(_this.createWorker());\n\t        }\n\t\n\t        Promise.all(workerPromises).then(function () {\n\t          if (DEBUG) {\n\t            console.log('All workers ready', (performance || Date).now());\n\t          }\n\t          resolve();\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'createWorker',\n\t    value: function createWorker() {\n\t      var _this2 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        // Initialise worker\n\t        var worker = new _WorkerPoolWorker2['default']({\n\t          workerScript: _this2.workerScript\n\t        });\n\t\n\t        // Start worker and wait for it to be ready\n\t        return worker.start().then(function () {\n\t          if (DEBUG) {\n\t            console.log('Worker ready', (performance || Date).now());\n\t          }\n\t\n\t          // Add worker to pool\n\t          _this2.workers.push(worker);\n\t\n\t          resolve();\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'getFreeWorker',\n\t    value: function getFreeWorker() {\n\t      return this.workers.find(function (worker) {\n\t        return !worker.busy;\n\t      });\n\t    }\n\t\n\t    // Execute task on a worker\n\t  }, {\n\t    key: 'exec',\n\t    value: function exec(method, args, transferrables) {\n\t      var deferred = Promise.deferred();\n\t\n\t      // Create task\n\t      var task = {\n\t        method: method,\n\t        args: args,\n\t        transferrables: transferrables,\n\t        deferred: deferred\n\t      };\n\t\n\t      // Add task to queue\n\t      this.tasks.push(task);\n\t\n\t      // Trigger task processing\n\t      this.processTasks();\n\t\n\t      // Return task promise\n\t      return task.deferred.promise;\n\t    }\n\t  }, {\n\t    key: 'processTasks',\n\t    value: function processTasks() {\n\t      var _this3 = this;\n\t\n\t      if (DEBUG) {\n\t        console.log('Processing tasks');\n\t      }\n\t\n\t      if (this.tasks.length === 0) {\n\t        return;\n\t      }\n\t\n\t      // Find free worker\n\t      var worker = this.getFreeWorker();\n\t\n\t      if (!worker) {\n\t        if (DEBUG) {\n\t          console.log('No workers free');\n\t        }\n\t        return;\n\t      }\n\t\n\t      // Get oldest task\n\t      var task = this.tasks.shift();\n\t\n\t      // Execute task on worker\n\t      worker.exec(task.method, task.args, task.transferrables).then(function (result) {\n\t        // Trigger task processing\n\t        _this3.processTasks();\n\t\n\t        // Return result in deferred task promise\n\t        task.deferred.resolve(result);\n\t      })['catch'](function (err) {\n\t        // Trigger task processing\n\t        _this3.processTasks();\n\t\n\t        task.deferred.reject(err);\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return WorkerPool;\n\t})();\n\t\n\texports['default'] = WorkerPool;\n\t\n\t// Quick shim to create deferred native promises\n\tPromise.deferred = function () {\n\t  var result = {};\n\t\n\t  result.promise = new Promise(function (resolve, reject) {\n\t    result.resolve = resolve;\n\t    result.reject = reject;\n\t  });\n\t\n\t  return result;\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar DEBUG = false;\n\t\n\tvar WorkerPoolWorker = (function () {\n\t  function WorkerPoolWorker(options) {\n\t    _classCallCheck(this, WorkerPoolWorker);\n\t\n\t    this.workerScript = options.workerScript;\n\t\n\t    this.ready = false;\n\t    this.busy = false;\n\t    this.deferred = null;\n\t  }\n\t\n\t  _createClass(WorkerPoolWorker, [{\n\t    key: 'start',\n\t    value: function start() {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this.worker = new Worker(_this.workerScript);\n\t\n\t        var onStartup = function onStartup(event) {\n\t          if (!event.data || event.data.type !== 'startup') {\n\t            reject();\n\t            return;\n\t          }\n\t\n\t          _this.ready = true;\n\t\n\t          // Remove temporary message handler\n\t          _this.worker.removeEventListener('message', onStartup);\n\t\n\t          // Set up listener to respond to normal events now\n\t          _this.worker.addEventListener('message', function (event) {\n\t            _this.onMessage(event);\n\t          });\n\t\n\t          // Resolve once worker is ready\n\t          resolve();\n\t        };\n\t\n\t        // Set up temporary event listener for warmup\n\t        _this.worker.addEventListener('message', onStartup);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'exec',\n\t    value: function exec(method, args, transferrables) {\n\t      if (DEBUG) {\n\t        console.log('Execute', method, args, transferrables);\n\t      }\n\t\n\t      var deferred = Promise.deferred();\n\t\n\t      this.busy = true;\n\t      this.deferred = deferred;\n\t\n\t      this.worker.postMessage({\n\t        method: method,\n\t        args: args\n\t      }, transferrables);\n\t\n\t      return deferred.promise;\n\t    }\n\t  }, {\n\t    key: 'onMessage',\n\t    value: function onMessage(event) {\n\t      if (DEBUG) {\n\t        console.log('Message received from worker', (performance || Date).now());\n\t      }\n\t\n\t      this.busy = false;\n\t\n\t      if (!event.data || event.data.type === 'error' || event.data.type !== 'result') {\n\t        this.deferred.reject(event.data.payload);\n\t        return;\n\t      }\n\t\n\t      this.deferred.resolve(event.data.payload);\n\t    }\n\t  }]);\n\t\n\t  return WorkerPoolWorker;\n\t})();\n\t\n\texports['default'] = WorkerPoolWorker;\n\t\n\t// Quick shim to create deferred native promises\n\tPromise.deferred = function () {\n\t  var result = {};\n\t\n\t  result.promise = new Promise(function (resolve, reject) {\n\t    result.resolve = resolve;\n\t    result.reject = reject;\n\t  });\n\t\n\t  return result;\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _ControlsOrbit = __webpack_require__(48);\n\t\n\tvar _ControlsOrbit2 = _interopRequireDefault(_ControlsOrbit);\n\t\n\tvar Controls = {\n\t  Orbit: _ControlsOrbit2['default'],\n\t  orbit: _ControlsOrbit.orbit, orbit: _ControlsOrbit.orbit\n\t};\n\t\n\texports['default'] = Controls;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _eventemitter3 = __webpack_require__(2);\n\t\n\tvar _eventemitter32 = _interopRequireDefault(_eventemitter3);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _vendorOrbitControls = __webpack_require__(49);\n\t\n\tvar _vendorOrbitControls2 = _interopRequireDefault(_vendorOrbitControls);\n\t\n\tvar _TweenLite = __webpack_require__(51);\n\t\n\tvar _TweenLite2 = _interopRequireDefault(_TweenLite);\n\t\n\tvar Orbit = (function (_EventEmitter) {\n\t  _inherits(Orbit, _EventEmitter);\n\t\n\t  function Orbit() {\n\t    _classCallCheck(this, Orbit);\n\t\n\t    _get(Object.getPrototypeOf(Orbit.prototype), 'constructor', this).call(this);\n\t\n\t    // Prevent animation from pausing when tab is inactive\n\t    _TweenLite2['default'].lagSmoothing(0);\n\t  }\n\t\n\t  // Proxy control events\n\t  //\n\t  // There's currently no distinction between pan, orbit and zoom events\n\t\n\t  _createClass(Orbit, [{\n\t    key: '_initEvents',\n\t    value: function _initEvents() {\n\t      var _this = this;\n\t\n\t      this._controls.addEventListener('start', function (event) {\n\t        _this.startPosition = _this._controls.target.clone();\n\t        _this.startPolar = _this._controls.getPolarAngle();\n\t        _this.startAzimuth = _this._controls.getAzimuthalAngle();\n\t\n\t        _this._world.emit('controlsMoveStart', event.target.target);\n\t      });\n\t\n\t      this._controls.addEventListener('change', function (event) {\n\t        _this._world.emit('controlsMove', event.target.target);\n\t      });\n\t\n\t      this._controls.addEventListener('end', function (event) {\n\t        var endPosition = _this._controls.target.clone();\n\t        var endPolar = _this._controls.getPolarAngle();\n\t        var endAzimuth = _this._controls.getAzimuthalAngle();\n\t\n\t        // Did controls change?\n\t        var changed = false;\n\t\n\t        // Panned\n\t        if (Math.abs(endPosition.distanceTo(_this.startPosition)) > 0) {\n\t          changed = true;\n\t        }\n\t\n\t        // Tilted\n\t        if (Math.abs(endPolar - _this.startPolar) > 0) {\n\t          changed = true;\n\t        }\n\t\n\t        // Obited\n\t        if (Math.abs(endAzimuth - _this.startAzimuth) > 0) {\n\t          changed = true;\n\t        }\n\t\n\t        _this._world.emit('controlsMoveEnd', event.target.target, changed);\n\t      });\n\t    }\n\t\n\t    // Moving the camera along the [x,y] axis based on a target position\n\t    // Positive x and y goes up and right\n\t  }, {\n\t    key: 'panTo',\n\t    value: function panTo(point, animate) {\n\t      var controls = this._controls;\n\t      var target = controls.target;\n\t\n\t      var deltaX = point.x - target.x;\n\t      var deltaY = point.y - target.z;\n\t\n\t      controls.panLeft(-deltaX, controls.object.matrix);\n\t      controls.panUp(-deltaY, controls.object.matrix);\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t  }, {\n\t    key: 'panBy',\n\t    value: function panBy(pointDelta, animate) {\n\t      this._controls.pan(-pointDelta.x, pointDelta.y);\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t\n\t    // Zooming the camera in and out\n\t  }, {\n\t    key: 'zoomTo',\n\t    value: function zoomTo(metres, animate) {}\n\t  }, {\n\t    key: 'zoomBy',\n\t    value: function zoomBy(metresDelta, animate) {\n\t      var controls = this._controls;\n\t\n\t      if (metresDelta < 0) {\n\t        controls.dollyIn(Math.abs(metresDelta));\n\t      } else {\n\t        controls.dollyOut(metresDelta);\n\t      }\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t\n\t    // Force camera to look at something other than the target\n\t  }, {\n\t    key: 'lookAt',\n\t    value: function lookAt(point, animate) {}\n\t\n\t    // Make camera look at the target\n\t  }, {\n\t    key: 'lookAtTarget',\n\t    value: function lookAtTarget() {}\n\t\n\t    // Tilt (up and down)\n\t    // 0 is straight down\n\t    // Math.PI / 180 * 90 is flat on the ground\n\t  }, {\n\t    key: 'tiltTo',\n\t    value: function tiltTo(angle, animate) {\n\t      var controls = this._controls;\n\t      var theta = controls.getPolarAngle();\n\t      var delta = angle - theta;\n\t      controls.rotateUp(-delta);\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t  }, {\n\t    key: 'tiltBy',\n\t    value: function tiltBy(angleDelta, animate) {\n\t      var controls = this._controls;\n\t      controls.rotateUp(-angleDelta);\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t\n\t    // Rotate (left and right)\n\t    // Right is positive, left negative\n\t  }, {\n\t    key: 'rotateTo',\n\t    value: function rotateTo(angle, animate) {\n\t      var controls = this._controls;\n\t      var theta = controls.getAzimuthalAngle();\n\t      var delta = angle - theta;\n\t      controls.rotateLeft(-delta);\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t\n\t    // Right is positive, left negative\n\t  }, {\n\t    key: 'rotateBy',\n\t    value: function rotateBy(angleDelta, animate) {\n\t      var controls = this._controls;\n\t      controls.rotateLeft(-angleDelta);\n\t\n\t      this.update();\n\t      this._world.emit('controlsMoveEnd', this._controls.target);\n\t    }\n\t\n\t    // Fly to the given point, animating pan and tilt/rotation to final position\n\t    // with nice zoom out and in\n\t    //\n\t    // TODO: Calling flyTo a second time before the previous animation has\n\t    // completed should immediately start the new animation from wherever the\n\t    // previous one has got to\n\t    //\n\t    // TODO: Long-distance pans should prevent the quadtree grid from trying to\n\t    // update by not firing the control update events every frame until the\n\t    // pan velocity calms down a bit\n\t    //\n\t    // TODO: Long-distance plans should zoom out further\n\t    //\n\t    // TODO: Return a promise?\n\t  }, {\n\t    key: 'flyToPoint',\n\t    value: function flyToPoint(point, duration, zoom) {\n\t      // Animation time in seconds\n\t      var animationTime = duration || 2;\n\t\n\t      this._flyTarget = new _three2['default'].Vector3(point.x, 0, point.y);\n\t\n\t      // Calculate delta from current position to fly target\n\t      var diff = new _three2['default'].Vector3().subVectors(this._controls.target, this._flyTarget);\n\t\n\t      this._flyTween = new _TweenLite2['default']({\n\t        x: 0,\n\t        z: 0,\n\t        // zoom: 0,\n\t        prev: {\n\t          x: 0,\n\t          z: 0\n\t        }\n\t      }, animationTime, {\n\t        x: diff.x,\n\t        z: diff.z,\n\t        // zoom: 1,\n\t        onUpdate: function onUpdate(tween) {\n\t          var controls = this._controls;\n\t\n\t          // Work out difference since last frame\n\t          var deltaX = tween.target.x - tween.target.prev.x;\n\t          var deltaZ = tween.target.z - tween.target.prev.z;\n\t\n\t          // Move some fraction toward the target point\n\t          controls.panLeft(deltaX, controls.object.matrix);\n\t          controls.panUp(deltaZ, controls.object.matrix);\n\t\n\t          tween.target.prev.x = tween.target.x;\n\t          tween.target.prev.z = tween.target.z;\n\t\n\t          // console.log(Math.sin((tween.target.zoom - 0.5) * Math.PI));\n\t\n\t          // TODO: Get zoom to dolly in and out on pan\n\t          // controls.object.zoom -= Math.sin((tween.target.zoom - 0.5) * Math.PI);\n\t          // controls.object.updateProjectionMatrix();\n\t        },\n\t        onComplete: function onComplete(tween) {\n\t          // console.log(`Arrived at flyTarget`);\n\t          this._flyTarget = null;\n\t        },\n\t        onUpdateParams: ['{self}'],\n\t        onCompleteParams: ['{self}'],\n\t        callbackScope: this,\n\t        ease: Power1.easeInOut\n\t      });\n\t\n\t      if (!zoom) {\n\t        return;\n\t      }\n\t\n\t      var zoomTime = animationTime / 2;\n\t\n\t      this._zoomTweenIn = new _TweenLite2['default']({\n\t        zoom: 0\n\t      }, zoomTime, {\n\t        zoom: 1,\n\t        onUpdate: function onUpdate(tween) {\n\t          var controls = this._controls;\n\t          controls.dollyIn(1 - 0.01 * tween.target.zoom);\n\t        },\n\t        onComplete: function onComplete(tween) {},\n\t        onUpdateParams: ['{self}'],\n\t        onCompleteParams: ['{self}'],\n\t        callbackScope: this,\n\t        ease: Power1.easeInOut\n\t      });\n\t\n\t      this._zoomTweenOut = new _TweenLite2['default']({\n\t        zoom: 0\n\t      }, zoomTime, {\n\t        zoom: 1,\n\t        delay: zoomTime,\n\t        onUpdate: function onUpdate(tween) {\n\t          var controls = this._controls;\n\t          controls.dollyOut(0.99 + 0.01 * tween.target.zoom);\n\t        },\n\t        onComplete: function onComplete(tween) {},\n\t        onUpdateParams: ['{self}'],\n\t        onCompleteParams: ['{self}'],\n\t        callbackScope: this,\n\t        ease: Power1.easeInOut\n\t      });\n\t    }\n\t\n\t    // TODO: Return a promise?\n\t  }, {\n\t    key: 'flyToLatLon',\n\t    value: function flyToLatLon(latlon, duration, noZoom) {\n\t      var point = this._world.latLonToPoint(latlon);\n\t      this.flyToPoint(point, duration, noZoom);\n\t    }\n\t\n\t    // TODO: Make this animate over a user-defined period of time\n\t    //\n\t    // Perhaps use TweenMax for now and implement as a more lightweight solution\n\t    // later on once it all works\n\t    // _animateFlyTo(delta) {\n\t    //   var controls = this._controls;\n\t    //\n\t    //   // this._controls.panLeft(50, controls._controls.object.matrix);\n\t    //   // this._controls.panUp(50, controls._controls.object.matrix);\n\t    //   // this._controls.dollyIn(this._controls.getZoomScale());\n\t    //   // this._controls.dollyOut(this._controls.getZoomScale());\n\t    //\n\t    //   // Calculate delta from current position to fly target\n\t    //   var diff = new THREE.Vector3().subVectors(this._controls.target, this._flyTarget);\n\t    //\n\t    //   // 1000 units per second\n\t    //   var speed = 1000 * (delta / 1000);\n\t    //\n\t    //   // Remove fly target after arrival and snap to target\n\t    //   if (diff.length() < 0.01) {\n\t    //     console.log(`Arrived at flyTarget`);\n\t    //     this._flyTarget = null;\n\t    //     speed = 1;\n\t    //   }\n\t    //\n\t    //   // Move some fraction toward the target point\n\t    //   controls.panLeft(diff.x * speed, controls.object.matrix);\n\t    //   controls.panUp(diff.z * speed, controls.object.matrix);\n\t    // }\n\t\n\t    // Proxy to OrbitControls.update()\n\t  }, {\n\t    key: 'update',\n\t    value: function update(delta) {\n\t      this._controls.update(delta);\n\t    }\n\t\n\t    // Add controls to world instance and store world reference\n\t  }, {\n\t    key: 'addTo',\n\t    value: function addTo(world) {\n\t      return world.addControls(this);\n\t    }\n\t\n\t    // Internal method called by World.addControls to actually add the controls\n\t  }, {\n\t    key: '_addToWorld',\n\t    value: function _addToWorld(world) {\n\t      this._world = world;\n\t\n\t      // TODO: Override panLeft and panUp methods to prevent panning on Y axis\n\t      // See: http://stackoverflow.com/a/26188674/997339\n\t      this._controls = new _vendorOrbitControls2['default'](world._engine._camera, world._container);\n\t\n\t      // 89 degrees\n\t      this._controls.maxPolarAngle = 1.5533;\n\t\n\t      // this._controls.enableDamping = true;\n\t      // this._controls.dampingFactor = 0.25;\n\t\n\t      this._initEvents();\n\t\n\t      // TODO: Remove now that this is a promise?\n\t      this.emit('added');\n\t\n\t      return Promise.resolve(this);\n\t    }\n\t\n\t    // Destroys the controls and removes them from memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // TODO: Remove event listeners\n\t\n\t      this._controls.dispose();\n\t\n\t      this._world = null;\n\t      this._controls = null;\n\t    }\n\t  }]);\n\t\n\t  return Orbit;\n\t})(_eventemitter32['default']);\n\t\n\texports['default'] = Orbit;\n\t\n\tvar noNew = function noNew() {\n\t  return new Orbit();\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.orbit = noNew;\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _hammerjs = __webpack_require__(50);\n\t\n\tvar _hammerjs2 = _interopRequireDefault(_hammerjs);\n\t\n\t/**\r\n\t * @author qiao / https://github.com/qiao\r\n\t * @author mrdoob / http://mrdoob.com\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author erich666 / http://erichaines.com\r\n\t */\n\t\n\t// This set of controls performs orbiting, dollying (zooming), and panning.\n\t// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\t\n\tvar OrbitControls = function OrbitControls(object, domElement) {\n\t\n\t\t\tthis.object = object;\n\t\n\t\t\tthis.domElement = domElement !== undefined ? domElement : document;\n\t\n\t\t\t// Set to false to disable this control\n\t\t\tthis.enabled = true;\n\t\n\t\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\t\tthis.target = new _three2['default'].Vector3();\n\t\n\t\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\t\tthis.minDistance = 0;\n\t\t\tthis.maxDistance = Infinity;\n\t\n\t\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\t\tthis.minZoom = 0;\n\t\t\tthis.maxZoom = Infinity;\n\t\n\t\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t\t// Range is 0 to Math.PI radians.\n\t\t\tthis.minPolarAngle = 0; // radians\n\t\t\tthis.maxPolarAngle = Math.PI; // radians\n\t\n\t\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\t\tthis.minAzimuthAngle = -Infinity; // radians\n\t\t\tthis.maxAzimuthAngle = Infinity; // radians\n\t\n\t\t\t// Set to true to enable damping (inertia)\n\t\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\t\tthis.enableDamping = false;\n\t\t\tthis.dampingFactor = 0.25;\n\t\n\t\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t\t// Set to false to disable zooming\n\t\t\tthis.enableZoom = true;\n\t\t\tthis.zoomSpeed = 1.0;\n\t\n\t\t\t// Set to false to disable rotating\n\t\t\tthis.enableRotate = true;\n\t\t\tthis.rotateSpeed = 1.0;\n\t\n\t\t\t// Set to false to disable panning\n\t\t\tthis.enablePan = true;\n\t\t\tthis.keyPanSpeed = 7.0; // pixels moved per arrow key push\n\t\n\t\t\t// Set to true to automatically rotate around the target\n\t\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\t\tthis.autoRotate = false;\n\t\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\t\n\t\t\t// Set to false to disable use of the keys\n\t\t\tthis.enableKeys = true;\n\t\n\t\t\t// The four arrow keys\n\t\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, CTRL: 17 };\n\t\n\t\t\t// Mouse buttons\n\t\t\tthis.mouseButtons = { ORBIT: _three2['default'].MOUSE.LEFT, ZOOM: _three2['default'].MOUSE.MIDDLE, PAN: _three2['default'].MOUSE.RIGHT };\n\t\n\t\t\t// for reset\n\t\t\tthis.target0 = this.target.clone();\n\t\t\tthis.position0 = this.object.position.clone();\n\t\t\tthis.zoom0 = this.object.zoom;\n\t\n\t\t\t//\n\t\t\t// public methods\n\t\t\t//\n\t\n\t\t\tthis.getPolarAngle = function () {\n\t\n\t\t\t\t\treturn phi;\n\t\t\t};\n\t\n\t\t\tthis.getAzimuthalAngle = function () {\n\t\n\t\t\t\t\treturn theta;\n\t\t\t};\n\t\n\t\t\tthis.reset = function () {\n\t\n\t\t\t\t\tscope.target.copy(scope.target0);\n\t\t\t\t\tscope.object.position.copy(scope.position0);\n\t\t\t\t\tscope.object.zoom = scope.zoom0;\n\t\n\t\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\t\tscope.dispatchEvent(changeEvent);\n\t\n\t\t\t\t\tscope.update();\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t};\n\t\n\t\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\t\tthis.update = (function () {\n\t\n\t\t\t\t\tvar offset = new _three2['default'].Vector3();\n\t\n\t\t\t\t\t// so camera.up is the orbit axis\n\t\t\t\t\tvar quat = new _three2['default'].Quaternion().setFromUnitVectors(object.up, new _three2['default'].Vector3(0, 1, 0));\n\t\t\t\t\tvar quatInverse = quat.clone().inverse();\n\t\n\t\t\t\t\tvar lastPosition = new _three2['default'].Vector3();\n\t\t\t\t\tvar lastQuaternion = new _three2['default'].Quaternion();\n\t\n\t\t\t\t\treturn function () {\n\t\n\t\t\t\t\t\t\tvar position = scope.object.position;\n\t\n\t\t\t\t\t\t\toffset.copy(position).sub(scope.target);\n\t\n\t\t\t\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\t\t\t\toffset.applyQuaternion(quat);\n\t\n\t\t\t\t\t\t\t// angle from z-axis around y-axis\n\t\n\t\t\t\t\t\t\ttheta = Math.atan2(offset.x, offset.z);\n\t\n\t\t\t\t\t\t\t// angle from y-axis\n\t\n\t\t\t\t\t\t\tphi = Math.atan2(Math.sqrt(offset.x * offset.x + offset.z * offset.z), offset.y);\n\t\n\t\t\t\t\t\t\tif (scope.autoRotate && state === STATE.NONE) {\n\t\n\t\t\t\t\t\t\t\t\trotateLeft(getAutoRotationAngle());\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\ttheta += thetaDelta;\n\t\t\t\t\t\t\tphi += phiDelta;\n\t\n\t\t\t\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\t\t\t\ttheta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, theta));\n\t\n\t\t\t\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\t\t\t\tphi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, phi));\n\t\n\t\t\t\t\t\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\t\t\t\t\t\tphi = Math.max(EPS, Math.min(Math.PI - EPS, phi));\n\t\n\t\t\t\t\t\t\tvar radius = offset.length() * scale;\n\t\n\t\t\t\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\t\t\t\tradius = Math.max(scope.minDistance, Math.min(scope.maxDistance, radius));\n\t\n\t\t\t\t\t\t\t// move target to panned location\n\t\t\t\t\t\t\tscope.target.add(panOffset);\n\t\n\t\t\t\t\t\t\toffset.x = radius * Math.sin(phi) * Math.sin(theta);\n\t\t\t\t\t\t\toffset.y = radius * Math.cos(phi);\n\t\t\t\t\t\t\toffset.z = radius * Math.sin(phi) * Math.cos(theta);\n\t\n\t\t\t\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\t\t\t\toffset.applyQuaternion(quatInverse);\n\t\n\t\t\t\t\t\t\tposition.copy(scope.target).add(offset);\n\t\n\t\t\t\t\t\t\tscope.object.lookAt(scope.target);\n\t\n\t\t\t\t\t\t\tif (scope.enableDamping === true) {\n\t\n\t\t\t\t\t\t\t\t\tthetaDelta *= 1 - scope.dampingFactor;\n\t\t\t\t\t\t\t\t\tphiDelta *= 1 - scope.dampingFactor;\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tthetaDelta = 0;\n\t\t\t\t\t\t\t\t\tphiDelta = 0;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tscale = 1;\n\t\t\t\t\t\t\tpanOffset.set(0, 0, 0);\n\t\n\t\t\t\t\t\t\t// update condition is:\n\t\t\t\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\t\n\t\t\t\t\t\t\tif (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n\t\n\t\t\t\t\t\t\t\t\tscope.dispatchEvent(changeEvent);\n\t\n\t\t\t\t\t\t\t\t\tlastPosition.copy(scope.object.position);\n\t\t\t\t\t\t\t\t\tlastQuaternion.copy(scope.object.quaternion);\n\t\t\t\t\t\t\t\t\tzoomChanged = false;\n\t\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t})();\n\t\n\t\t\tthis.dispose = function () {\n\t\n\t\t\t\t\tscope.domElement.removeEventListener('contextmenu', onContextMenu, false);\n\t\t\t\t\tscope.domElement.removeEventListener('mousedown', onMouseDown, false);\n\t\t\t\t\tscope.domElement.removeEventListener('mousewheel', onMouseWheel, false);\n\t\t\t\t\tscope.domElement.removeEventListener('MozMousePixelScroll', onMouseWheel, false); // firefox\n\t\n\t\t\t\t\tscope.domElement.removeEventListener('touchstart', onTouchStart, false);\n\t\t\t\t\tscope.domElement.removeEventListener('touchend', onTouchEnd, false);\n\t\t\t\t\tscope.domElement.removeEventListener('touchmove', onTouchMove, false);\n\t\n\t\t\t\t\tdocument.removeEventListener('mousemove', onMouseMove, false);\n\t\t\t\t\tdocument.removeEventListener('mouseup', onMouseUp, false);\n\t\t\t\t\tdocument.removeEventListener('mouseout', onMouseUp, false);\n\t\n\t\t\t\t\twindow.removeEventListener('keydown', onKeyDown, false);\n\t\t\t\t\twindow.removeEventListener('keyup', onKeyUp, false);\n\t\n\t\t\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\t\t\t};\n\t\n\t\t\t//\n\t\t\t// internals\n\t\t\t//\n\t\n\t\t\tvar scope = this;\n\t\n\t\t\tvar changeEvent = { type: 'change' };\n\t\t\tvar startEvent = { type: 'start' };\n\t\t\tvar endEvent = { type: 'end' };\n\t\n\t\t\tvar STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };\n\t\n\t\t\tvar KEY_STATE = { CTRL: false };\n\t\n\t\t\tvar state = STATE.NONE;\n\t\n\t\t\tvar EPS = 0.000001;\n\t\n\t\t\t// current position in spherical coordinates\n\t\t\tvar theta;\n\t\t\tvar phi;\n\t\n\t\t\tvar phiDelta = 0;\n\t\t\tvar thetaDelta = 0;\n\t\t\tvar scale = 1;\n\t\t\tvar panOffset = new _three2['default'].Vector3();\n\t\t\tvar zoomChanged = false;\n\t\n\t\t\tvar rotateStart = new _three2['default'].Vector2();\n\t\t\tvar rotateEnd = new _three2['default'].Vector2();\n\t\t\tvar rotateDelta = new _three2['default'].Vector2();\n\t\n\t\t\tvar panStart = new _three2['default'].Vector2();\n\t\t\tvar panEnd = new _three2['default'].Vector2();\n\t\t\tvar panDelta = new _three2['default'].Vector2();\n\t\n\t\t\tvar dollyStart = new _three2['default'].Vector2();\n\t\t\tvar dollyEnd = new _three2['default'].Vector2();\n\t\t\tvar dollyDelta = new _three2['default'].Vector2();\n\t\n\t\t\tfunction getAutoRotationAngle() {\n\t\n\t\t\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\t\t\t}\n\t\n\t\t\tfunction getZoomScale() {\n\t\n\t\t\t\t\treturn Math.pow(0.95, scope.zoomSpeed);\n\t\t\t}\n\t\n\t\t\tfunction rotateLeft(angle) {\n\t\n\t\t\t\t\tthetaDelta -= angle;\n\t\t\t}\n\t\n\t\t\tfunction rotateUp(angle) {\n\t\n\t\t\t\t\tphiDelta -= angle;\n\t\t\t}\n\t\n\t\t\tvar panLeft = (function () {\n\t\n\t\t\t\t\tvar v = new _three2['default'].Vector3();\n\t\n\t\t\t\t\t// return function panLeft( distance, objectMatrix ) {\n\t\t\t\t\t//\n\t\t\t\t\t// \tvar te = objectMatrix.elements;\n\t\t\t\t\t//\n\t\t\t\t\t// \t// get X column of objectMatrix\n\t\t\t\t\t// \tv.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\t\t\t\t//\n\t\t\t\t\t// \tv.multiplyScalar( - distance );\n\t\t\t\t\t//\n\t\t\t\t\t// \tpanOffset.add( v );\n\t\t\t\t\t//\n\t\t\t\t\t// };\n\t\n\t\t\t\t\t// Fixed panning to x/y plane\n\t\t\t\t\treturn function panLeft(distance, objectMatrix) {\n\t\t\t\t\t\t\tvar te = objectMatrix.elements;\n\t\t\t\t\t\t\t// var adjDist = distance / Math.cos(phi);\n\t\n\t\t\t\t\t\t\tv.set(te[0], 0, te[2]);\n\t\t\t\t\t\t\tv.multiplyScalar(-distance);\n\t\n\t\t\t\t\t\t\tpanOffset.add(v);\n\t\t\t\t\t};\n\t\t\t})();\n\t\n\t\t\t// Fixed panning to x/y plane\n\t\t\tvar panUp = (function () {\n\t\n\t\t\t\t\tvar v = new _three2['default'].Vector3();\n\t\n\t\t\t\t\t// return function panUp( distance, objectMatrix ) {\n\t\t\t\t\t//\n\t\t\t\t\t// \tvar te = objectMatrix.elements;\n\t\t\t\t\t//\n\t\t\t\t\t// \t// get Y column of objectMatrix\n\t\t\t\t\t// \tv.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\t\t\t\t//\n\t\t\t\t\t// \tv.multiplyScalar( distance );\n\t\t\t\t\t//\n\t\t\t\t\t// \tpanOffset.add( v );\n\t\t\t\t\t//\n\t\t\t\t\t// };\n\t\n\t\t\t\t\treturn function panUp(distance, objectMatrix) {\n\t\t\t\t\t\t\tvar te = objectMatrix.elements;\n\t\t\t\t\t\t\tvar adjDist = distance / Math.cos(phi);\n\t\n\t\t\t\t\t\t\tv.set(te[4], 0, te[6]);\n\t\t\t\t\t\t\tv.multiplyScalar(adjDist);\n\t\n\t\t\t\t\t\t\tpanOffset.add(v);\n\t\t\t\t\t};\n\t\t\t})();\n\t\n\t\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\t\tvar pan = (function () {\n\t\n\t\t\t\t\tvar offset = new _three2['default'].Vector3();\n\t\n\t\t\t\t\treturn function (deltaX, deltaY) {\n\t\n\t\t\t\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\t\t\t\tif (scope.object instanceof _three2['default'].PerspectiveCamera) {\n\t\n\t\t\t\t\t\t\t\t\t// perspective\n\t\t\t\t\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\t\t\t\t\toffset.copy(position).sub(scope.target);\n\t\t\t\t\t\t\t\t\tvar targetDistance = offset.length();\n\t\n\t\t\t\t\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\t\t\t\t\ttargetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);\n\t\n\t\t\t\t\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\t\t\t\t\tpanLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n\t\t\t\t\t\t\t\t\tpanUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n\t\t\t\t\t\t\t} else if (scope.object instanceof _three2['default'].OrthographicCamera) {\n\t\n\t\t\t\t\t\t\t\t\t// orthographic\n\t\t\t\t\t\t\t\t\tpanLeft(deltaX * (scope.object.right - scope.object.left) / element.clientWidth, scope.object.matrix);\n\t\t\t\t\t\t\t\t\tpanUp(deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight, scope.object.matrix);\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\t\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n\t\t\t\t\t\t\t\t\tscope.enablePan = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t})();\n\t\n\t\t\tfunction dollyIn(dollyScale) {\n\t\n\t\t\t\t\tif (scope.object instanceof _three2['default'].PerspectiveCamera) {\n\t\n\t\t\t\t\t\t\tscale /= dollyScale;\n\t\t\t\t\t} else if (scope.object instanceof _three2['default'].OrthographicCamera) {\n\t\n\t\t\t\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n\t\t\t\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\t\t\t\tzoomChanged = true;\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\t\t\t\tscope.enableZoom = false;\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction dollyOut(dollyScale) {\n\t\n\t\t\t\t\tif (scope.object instanceof _three2['default'].PerspectiveCamera) {\n\t\n\t\t\t\t\t\t\tscale *= dollyScale;\n\t\t\t\t\t} else if (scope.object instanceof _three2['default'].OrthographicCamera) {\n\t\n\t\t\t\t\t\t\tscope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n\t\t\t\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\t\t\t\tzoomChanged = true;\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\tconsole.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n\t\t\t\t\t\t\tscope.enableZoom = false;\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t//\n\t\t\t// event callbacks - update the object state\n\t\t\t//\n\t\n\t\t\tfunction handleMouseDownRotate(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseDownRotate' );\n\t\n\t\t\t\t\trotateStart.set(event.clientX, event.clientY);\n\t\t\t}\n\t\n\t\t\tfunction handleMouseDownDolly(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseDownDolly' );\n\t\n\t\t\t\t\tdollyStart.set(event.clientX, event.clientY);\n\t\t\t}\n\t\n\t\t\tfunction handleMouseDownPan(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseDownPan' );\n\t\n\t\t\t\t\tpanStart.set(event.clientX, event.clientY);\n\t\t\t}\n\t\n\t\t\tfunction handleMouseMoveRotate(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseMoveRotate' );\n\t\n\t\t\t\t\trotateEnd.set(event.clientX, event.clientY);\n\t\t\t\t\trotateDelta.subVectors(rotateEnd, rotateStart);\n\t\n\t\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\t\trotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\t\n\t\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\t\trotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\t\n\t\t\t\t\trotateStart.copy(rotateEnd);\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleMouseMoveDolly(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseMoveDolly' );\n\t\n\t\t\t\t\tdollyEnd.set(event.clientX, event.clientY);\n\t\n\t\t\t\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\t\n\t\t\t\t\tif (dollyDelta.y > 0) {\n\t\n\t\t\t\t\t\t\tdollyIn(getZoomScale());\n\t\t\t\t\t} else if (dollyDelta.y < 0) {\n\t\n\t\t\t\t\t\t\tdollyOut(getZoomScale());\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdollyStart.copy(dollyEnd);\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleMouseMovePan(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseMovePan' );\n\t\n\t\t\t\t\tpanEnd.set(event.clientX, event.clientY);\n\t\n\t\t\t\t\tpanDelta.subVectors(panEnd, panStart);\n\t\n\t\t\t\t\tpan(panDelta.x, panDelta.y);\n\t\n\t\t\t\t\tpanStart.copy(panEnd);\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleMouseUp(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseUp' );\n\t\n\t\t\t}\n\t\n\t\t\tfunction handleMouseWheel(event) {\n\t\n\t\t\t\t\t//console.log( 'handleMouseWheel' );\n\t\n\t\t\t\t\tvar delta = 0;\n\t\n\t\t\t\t\tif (event.wheelDelta !== undefined) {\n\t\n\t\t\t\t\t\t\t// WebKit / Opera / Explorer 9\n\t\n\t\t\t\t\t\t\tdelta = event.wheelDelta;\n\t\t\t\t\t} else if (event.detail !== undefined) {\n\t\n\t\t\t\t\t\t\t// Firefox\n\t\n\t\t\t\t\t\t\tdelta = -event.detail;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (delta > 0) {\n\t\n\t\t\t\t\t\t\tdollyOut(getZoomScale());\n\t\t\t\t\t} else if (delta < 0) {\n\t\n\t\t\t\t\t\t\tdollyIn(getZoomScale());\n\t\t\t\t\t}\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleKeyDown(event) {\n\t\n\t\t\t\t\t//console.log( 'handleKeyDown' );\n\t\n\t\t\t\t\tswitch (event.keyCode) {\n\t\n\t\t\t\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\t\t\t\t\tpan(0, scope.keyPanSpeed);\n\t\t\t\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\t\t\t\t\tpan(0, -scope.keyPanSpeed);\n\t\t\t\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\t\t\t\t\tpan(scope.keyPanSpeed, 0);\n\t\t\t\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\t\t\t\t\tpan(-scope.keyPanSpeed, 0);\n\t\t\t\t\t\t\t\t\tscope.update();\n\t\t\t\t\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase scope.keys.CTRL:\n\t\t\t\t\t\t\t\t\tKEY_STATE.CTRL = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction handleKeyUp(event) {\n\t\n\t\t\t\t\tswitch (event.keyCode) {\n\t\t\t\t\t\t\tcase scope.keys.CTRL:\n\t\t\t\t\t\t\t\t\tKEY_STATE.CTRL = false;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction handleTouchStartRotate(event) {\n\t\n\t\t\t\t\t//console.log( 'handleTouchStartRotate' );\n\t\n\t\t\t\t\trotateStart.set(event.pointers[0].pageX, event.pointers[0].pageY);\n\t\t\t}\n\t\n\t\t\tfunction handleTouchStartDolly(event) {\n\t\n\t\t\t\t\t//console.log( 'handleTouchStartDolly' );\n\t\n\t\t\t\t\tvar dx = event.pointers[0].pageX - event.pointers[1].pageX;\n\t\t\t\t\tvar dy = event.pointers[0].pageY - event.pointers[1].pageY;\n\t\n\t\t\t\t\tvar distance = Math.sqrt(dx * dx + dy * dy);\n\t\n\t\t\t\t\tdollyStart.set(0, distance);\n\t\t\t}\n\t\n\t\t\tfunction handleTouchStartPan(event) {\n\t\n\t\t\t\t\t//console.log( 'handleTouchStartPan' );\n\t\n\t\t\t\t\tpanStart.set(event.deltaX, event.deltaY);\n\t\t\t}\n\t\n\t\t\tfunction handleTouchMoveRotate(event) {\n\t\n\t\t\t\t\t//console.log( 'handleTouchMoveRotate' );\n\t\n\t\t\t\t\trotateEnd.set(event.pointers[0].pageX, event.pointers[0].pageY);\n\t\t\t\t\trotateDelta.subVectors(rotateEnd, rotateStart);\n\t\n\t\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\t\n\t\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\t\trotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed);\n\t\n\t\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\t\trotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n\t\n\t\t\t\t\trotateStart.copy(rotateEnd);\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleTouchMoveDolly(event) {\n\t\n\t\t\t\t\t//console.log( 'handleTouchMoveDolly' );\n\t\n\t\t\t\t\tvar dx = event.pointers[0].pageX - event.pointers[1].pageX;\n\t\t\t\t\tvar dy = event.pointers[0].pageY - event.pointers[1].pageY;\n\t\n\t\t\t\t\tvar distance = Math.sqrt(dx * dx + dy * dy);\n\t\n\t\t\t\t\tdollyEnd.set(0, distance);\n\t\n\t\t\t\t\tdollyDelta.subVectors(dollyEnd, dollyStart);\n\t\n\t\t\t\t\tif (dollyDelta.y > 0) {\n\t\n\t\t\t\t\t\t\tdollyOut(getZoomScale());\n\t\t\t\t\t} else if (dollyDelta.y < 0) {\n\t\n\t\t\t\t\t\t\tdollyIn(getZoomScale());\n\t\t\t\t\t}\n\t\n\t\t\t\t\tdollyStart.copy(dollyEnd);\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleTouchMovePan(event) {\n\t\n\t\t\t\t\t//console.log( 'handleTouchMovePan' );\n\t\n\t\t\t\t\tpanEnd.set(event.deltaX, event.deltaY);\n\t\n\t\t\t\t\tpanDelta.subVectors(panEnd, panStart);\n\t\n\t\t\t\t\tpan(panDelta.x, panDelta.y);\n\t\n\t\t\t\t\tpanStart.copy(panEnd);\n\t\n\t\t\t\t\tscope.update();\n\t\t\t}\n\t\n\t\t\tfunction handleTouchEnd(event) {}\n\t\n\t\t\t//console.log( 'handleTouchEnd' );\n\t\n\t\t\t//\n\t\t\t// event handlers - FSM: listen for events and reset state\n\t\t\t//\n\t\n\t\t\tfunction onMouseDown(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tevent.preventDefault();\n\t\n\t\t\t\t\tif (event.button === scope.mouseButtons.ORBIT) {\n\t\n\t\t\t\t\t\t\tif (KEY_STATE.CTRL) {\n\t\t\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\t\t\t\t\t\thandleMouseDownPan(event);\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.PAN;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\t\t\t\t\t\thandleMouseDownRotate(event);\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} else if (event.button === scope.mouseButtons.ZOOM) {\n\t\n\t\t\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\t\t\t\thandleMouseDownDolly(event);\n\t\n\t\t\t\t\t\t\tstate = STATE.DOLLY;\n\t\t\t\t\t} else if (event.button === scope.mouseButtons.PAN) {\n\t\n\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\t\t\t\thandleMouseDownPan(event);\n\t\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (state !== STATE.NONE) {\n\t\n\t\t\t\t\t\t\tdocument.addEventListener('mousemove', onMouseMove, false);\n\t\t\t\t\t\t\tdocument.addEventListener('mouseup', onMouseUp, false);\n\t\t\t\t\t\t\tdocument.addEventListener('mouseout', onMouseUp, false);\n\t\n\t\t\t\t\t\t\tscope.dispatchEvent(startEvent);\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction onMouseMove(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tevent.preventDefault();\n\t\n\t\t\t\t\tif (state === STATE.ROTATE) {\n\t\n\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\t\t\t\thandleMouseMoveRotate(event);\n\t\t\t\t\t} else if (state === STATE.DOLLY) {\n\t\n\t\t\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\t\t\t\thandleMouseMoveDolly(event);\n\t\t\t\t\t} else if (state === STATE.PAN) {\n\t\n\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\t\t\t\thandleMouseMovePan(event);\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction onMouseUp(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\thandleMouseUp(event);\n\t\n\t\t\t\t\tdocument.removeEventListener('mousemove', onMouseMove, false);\n\t\t\t\t\tdocument.removeEventListener('mouseup', onMouseUp, false);\n\t\t\t\t\tdocument.removeEventListener('mouseout', onMouseUp, false);\n\t\n\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\t\n\t\t\tfunction onMouseWheel(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;\n\t\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\n\t\t\t\t\thandleMouseWheel(event);\n\t\n\t\t\t\t\tscope.dispatchEvent(startEvent); // not sure why these are here...\n\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\t\t}\n\t\n\t\t\tfunction onKeyDown(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n\t\n\t\t\t\t\thandleKeyDown(event);\n\t\t\t}\n\t\n\t\t\tfunction onKeyUp(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n\t\n\t\t\t\t\thandleKeyUp(event);\n\t\t\t}\n\t\n\t\t\tfunction onTouchStart(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tswitch (event.touches.length) {\n\t\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t// one-fingered touch: rotate\n\t\n\t\t\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\t\t\t\t\t\thandleTouchStartRotate(event);\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t// two-fingered touch: dolly\n\t\n\t\t\t\t\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\t\t\t\t\t\thandleTouchStartDolly(event);\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t// three-fingered touch: pan\n\t\n\t\t\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\n\t\t\t\t\t\t\t\t\thandleTouchStartPan(event);\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (state !== STATE.NONE) {\n\t\n\t\t\t\t\t\t\tscope.dispatchEvent(startEvent);\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction onTouchMove(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\n\t\t\t\t\tswitch (event.touches.length) {\n\t\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t// one-fingered touch: rotate\n\t\n\t\t\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\t\t\t\tif (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\n\t\n\t\t\t\t\t\t\t\t\thandleTouchMoveRotate(event);\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t// two-fingered touch: dolly\n\t\n\t\t\t\t\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\t\t\t\t\tif (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\n\t\n\t\t\t\t\t\t\t\t\thandleTouchMoveDolly(event);\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t// three-fingered touch: pan\n\t\n\t\t\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\t\t\t\tif (state !== STATE.TOUCH_PAN) return; // is this needed?...\n\t\n\t\t\t\t\t\t\t\t\thandleTouchMovePan(event);\n\t\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\tdefault:\n\t\n\t\t\t\t\t\t\t\t\tstate = STATE.NONE;\n\t\n\t\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction onTouchEnd(event) {\n\t\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\thandleTouchEnd(event);\n\t\n\t\t\t\t\tscope.dispatchEvent(endEvent);\n\t\n\t\t\t\t\tstate = STATE.NONE;\n\t\t\t}\n\t\n\t\t\tfunction onContextMenu(event) {\n\t\n\t\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\n\t\t\t//\n\t\n\t\t\tscope.domElement.addEventListener('contextmenu', onContextMenu, false);\n\t\n\t\t\tscope.domElement.addEventListener('mousedown', onMouseDown, false);\n\t\t\tscope.domElement.addEventListener('mousewheel', onMouseWheel, false);\n\t\t\tscope.domElement.addEventListener('MozMousePixelScroll', onMouseWheel, false); // firefox\n\t\n\t\t\t// scope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\t\t// scope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\t\t// scope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\t\n\t\t\tscope.hammer = new _hammerjs2['default'](scope.domElement);\n\t\n\t\t\tscope.hammer.get('pan').set({\n\t\t\t\t\tpointers: 0,\n\t\t\t\t\tdirection: _hammerjs2['default'].DIRECTION_ALL\n\t\t\t});\n\t\n\t\t\tscope.hammer.get('pinch').set({\n\t\t\t\t\tenable: true,\n\t\t\t\t\tthreshold: 0.1\n\t\t\t});\n\t\n\t\t\tscope.hammer.on('panstart', function (event) {\n\t\t\t\t\tif (scope.enabled === false) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (event.pointerType === 'mouse') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (event.pointers.length === 1) {\n\t\t\t\t\t\t\tif (scope.enablePan === false) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\thandleTouchStartPan(event);\n\t\t\t\t\t\t\t// panStart.set(event.deltaX, event.deltaY);\n\t\n\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\t\t\t\t\t} else if (event.pointers.length === 2) {\n\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\n\t\t\t\t\t\t\thandleTouchStartRotate(event);\n\t\n\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (state !== STATE.NONE) {\n\t\t\t\t\t\t\tscope.dispatchEvent(startEvent);\n\t\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tscope.hammer.on('panend', function (event) {\n\t\t\t\t\tif (event.pointerType === 'mouse') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tonTouchEnd(event);\n\t\t\t});\n\t\n\t\t\tscope.hammer.on('panmove', function (event) {\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tif (event.pointerType === 'mouse') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// event.preventDefault();\n\t\t\t\t\t// event.stopPropagation();\n\t\n\t\t\t\t\tif (event.pointers.length === 1) {\n\t\t\t\t\t\t\tif (scope.enablePan === false) return;\n\t\t\t\t\t\t\tif (state !== STATE.TOUCH_PAN) return; // is this needed?...\n\t\n\t\t\t\t\t\t\thandleTouchMovePan(event);\n\t\n\t\t\t\t\t\t\t// panEnd.set( event.deltaX, event.deltaY );\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// panDelta.subVectors( panEnd, panStart );\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// pan( panDelta.x, panDelta.y );\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// panStart.copy( panEnd );\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// scope.update();\n\t\t\t\t\t} else if (event.pointers.length === 2) {\n\t\t\t\t\t\t\t\t\tif (scope.enableRotate === false) return;\n\t\t\t\t\t\t\t\t\tif (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\n\t\n\t\t\t\t\t\t\t\t\thandleTouchMoveRotate(event);\n\t\t\t\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tscope.hammer.on('pinchstart', function (event) {\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tif (event.pointerType === 'mouse') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\n\t\t\t\t\thandleTouchStartDolly(event);\n\t\n\t\t\t\t\t// var dx = event.pointers[ 0 ].pageX - event.pointers[ 1 ].pageX;\n\t\t\t\t\t// var dy = event.pointers[ 0 ].pageY - event.pointers[ 1 ].pageY;\n\t\t\t\t\t//\n\t\t\t\t\t// var distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\t\t//\n\t\t\t\t\t// dollyStart.set( 0, distance );\n\t\t\t\t\t//\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\t\n\t\t\t\t\tif (state !== STATE.NONE) {\n\t\t\t\t\t\t\tscope.dispatchEvent(startEvent);\n\t\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tscope.hammer.on('pinchend', function (event) {\n\t\t\t\t\tif (event.pointerType === 'mouse') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tonTouchEnd(event);\n\t\t\t});\n\t\n\t\t\tscope.hammer.on('pinchmove', function (event) {\n\t\t\t\t\tif (scope.enabled === false) return;\n\t\n\t\t\t\t\tif (event.pointerType === 'mouse') {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// event.preventDefault();\n\t\t\t\t\t// event.stopPropagation();\n\t\n\t\t\t\t\tif (scope.enableZoom === false) return;\n\t\t\t\t\tif (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\n\t\n\t\t\t\t\thandleTouchMoveDolly(event);\n\t\n\t\t\t\t\t// var dx = event.pointers[ 0 ].pageX - event.pointers[ 1 ].pageX;\n\t\t\t\t\t// var dy = event.pointers[ 0 ].pageY - event.pointers[ 1 ].pageY;\n\t\t\t\t\t//\n\t\t\t\t\t// var distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\t\t//\n\t\t\t\t\t// dollyEnd.set( 0, distance );\n\t\t\t\t\t//\n\t\t\t\t\t// dollyDelta.subVectors( dollyEnd, dollyStart );\n\t\t\t\t\t//\n\t\t\t\t\t// if ( dollyDelta.y > 0 ) {\n\t\t\t\t\t//\n\t\t\t\t\t// \tdollyOut( getZoomScale() );\n\t\t\t\t\t//\n\t\t\t\t\t// } else if ( dollyDelta.y < 0 ) {\n\t\t\t\t\t//\n\t\t\t\t\t// \tdollyIn( getZoomScale() );\n\t\t\t\t\t//\n\t\t\t\t\t// }\n\t\t\t\t\t//\n\t\t\t\t\t// dollyStart.copy( dollyEnd );\n\t\t\t\t\t//\n\t\t\t\t\t// scope.update();\n\t\t\t});\n\t\n\t\t\twindow.addEventListener('keydown', onKeyDown, false);\n\t\t\twindow.addEventListener('keyup', onKeyUp, false);\n\t\n\t\t\t// Expose controls methods for programmatic control\n\t\t\tthis.panLeft = panLeft;\n\t\t\tthis.panUp = panUp;\n\t\t\tthis.pan = pan;\n\t\t\tthis.dollyIn = dollyIn;\n\t\t\tthis.dollyOut = dollyOut;\n\t\t\tthis.getZoomScale = getZoomScale;\n\t\t\tthis.rotateLeft = rotateLeft;\n\t\t\tthis.rotateUp = rotateUp;\n\t\n\t\t\t// force an update at start\n\t\n\t\t\tthis.update();\n\t};\n\t\n\tOrbitControls.prototype = Object.create(_three2['default'].EventDispatcher.prototype);\n\tOrbitControls.prototype.constructor = _three2['default'].OrbitControls;\n\t\n\tObject.defineProperties(OrbitControls.prototype, {\n\t\n\t\t\tcenter: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .center has been renamed to .target');\n\t\t\t\t\t\t\treturn this.target;\n\t\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\t// backward compatibility\n\t\n\t\t\tnoZoom: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n\t\t\t\t\t\t\treturn !this.enableZoom;\n\t\t\t\t\t},\n\t\n\t\t\t\t\tset: function set(value) {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n\t\t\t\t\t\t\tthis.enableZoom = !value;\n\t\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tnoRotate: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n\t\t\t\t\t\t\treturn !this.enableRotate;\n\t\t\t\t\t},\n\t\n\t\t\t\t\tset: function set(value) {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n\t\t\t\t\t\t\tthis.enableRotate = !value;\n\t\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tnoPan: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n\t\t\t\t\t\t\treturn !this.enablePan;\n\t\t\t\t\t},\n\t\n\t\t\t\t\tset: function set(value) {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n\t\t\t\t\t\t\tthis.enablePan = !value;\n\t\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tnoKeys: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n\t\t\t\t\t\t\treturn !this.enableKeys;\n\t\t\t\t\t},\n\t\n\t\t\t\t\tset: function set(value) {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n\t\t\t\t\t\t\tthis.enableKeys = !value;\n\t\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tstaticMoving: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n\t\t\t\t\t\t\treturn !this.constraint.enableDamping;\n\t\t\t\t\t},\n\t\n\t\t\t\t\tset: function set(value) {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n\t\t\t\t\t\t\tthis.constraint.enableDamping = !value;\n\t\t\t\t\t}\n\t\n\t\t\t},\n\t\n\t\t\tdynamicDampingFactor: {\n\t\n\t\t\t\t\tget: function get() {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n\t\t\t\t\t\t\treturn this.constraint.dampingFactor;\n\t\t\t\t\t},\n\t\n\t\t\t\t\tset: function set(value) {\n\t\n\t\t\t\t\t\t\tconsole.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n\t\t\t\t\t\t\tthis.constraint.dampingFactor = value;\n\t\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t});\n\t\n\texports['default'] = OrbitControls;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n\t * http://hammerjs.github.io/\n\t *\n\t * Copyright (c) 2016 Jorik Tangelder;\n\t * Licensed under the MIT license */\n\t(function(window, document, exportName, undefined) {\n\t  'use strict';\n\t\n\tvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n\tvar TEST_ELEMENT = document.createElement('div');\n\t\n\tvar TYPE_FUNCTION = 'function';\n\t\n\tvar round = Math.round;\n\tvar abs = Math.abs;\n\tvar now = Date.now;\n\t\n\t/**\n\t * set a timeout with a given scope\n\t * @param {Function} fn\n\t * @param {Number} timeout\n\t * @param {Object} context\n\t * @returns {number}\n\t */\n\tfunction setTimeoutContext(fn, timeout, context) {\n\t    return setTimeout(bindFn(fn, context), timeout);\n\t}\n\t\n\t/**\n\t * if the argument is an array, we want to execute the fn on each entry\n\t * if it aint an array we don't want to do a thing.\n\t * this is used by all the methods that accept a single and array argument.\n\t * @param {*|Array} arg\n\t * @param {String} fn\n\t * @param {Object} [context]\n\t * @returns {Boolean}\n\t */\n\tfunction invokeArrayArg(arg, fn, context) {\n\t    if (Array.isArray(arg)) {\n\t        each(arg, context[fn], context);\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * walk objects and arrays\n\t * @param {Object} obj\n\t * @param {Function} iterator\n\t * @param {Object} context\n\t */\n\tfunction each(obj, iterator, context) {\n\t    var i;\n\t\n\t    if (!obj) {\n\t        return;\n\t    }\n\t\n\t    if (obj.forEach) {\n\t        obj.forEach(iterator, context);\n\t    } else if (obj.length !== undefined) {\n\t        i = 0;\n\t        while (i < obj.length) {\n\t            iterator.call(context, obj[i], i, obj);\n\t            i++;\n\t        }\n\t    } else {\n\t        for (i in obj) {\n\t            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * wrap a method with a deprecation warning and stack trace\n\t * @param {Function} method\n\t * @param {String} name\n\t * @param {String} message\n\t * @returns {Function} A new function wrapping the supplied method.\n\t */\n\tfunction deprecate(method, name, message) {\n\t    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n\t    return function() {\n\t        var e = new Error('get-stack-trace');\n\t        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n\t            .replace(/^\\s+at\\s+/gm, '')\n\t            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\t\n\t        var log = window.console && (window.console.warn || window.console.log);\n\t        if (log) {\n\t            log.call(window.console, deprecationMessage, stack);\n\t        }\n\t        return method.apply(this, arguments);\n\t    };\n\t}\n\t\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} target\n\t * @param {...Object} objects_to_assign\n\t * @returns {Object} target\n\t */\n\tvar assign;\n\tif (typeof Object.assign !== 'function') {\n\t    assign = function assign(target) {\n\t        if (target === undefined || target === null) {\n\t            throw new TypeError('Cannot convert undefined or null to object');\n\t        }\n\t\n\t        var output = Object(target);\n\t        for (var index = 1; index < arguments.length; index++) {\n\t            var source = arguments[index];\n\t            if (source !== undefined && source !== null) {\n\t                for (var nextKey in source) {\n\t                    if (source.hasOwnProperty(nextKey)) {\n\t                        output[nextKey] = source[nextKey];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return output;\n\t    };\n\t} else {\n\t    assign = Object.assign;\n\t}\n\t\n\t/**\n\t * extend object.\n\t * means that properties in dest will be overwritten by the ones in src.\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @param {Boolean} [merge=false]\n\t * @returns {Object} dest\n\t */\n\tvar extend = deprecate(function extend(dest, src, merge) {\n\t    var keys = Object.keys(src);\n\t    var i = 0;\n\t    while (i < keys.length) {\n\t        if (!merge || (merge && dest[keys[i]] === undefined)) {\n\t            dest[keys[i]] = src[keys[i]];\n\t        }\n\t        i++;\n\t    }\n\t    return dest;\n\t}, 'extend', 'Use `assign`.');\n\t\n\t/**\n\t * merge the values from src in the dest.\n\t * means that properties that exist in dest will not be overwritten by src\n\t * @param {Object} dest\n\t * @param {Object} src\n\t * @returns {Object} dest\n\t */\n\tvar merge = deprecate(function merge(dest, src) {\n\t    return extend(dest, src, true);\n\t}, 'merge', 'Use `assign`.');\n\t\n\t/**\n\t * simple class inheritance\n\t * @param {Function} child\n\t * @param {Function} base\n\t * @param {Object} [properties]\n\t */\n\tfunction inherit(child, base, properties) {\n\t    var baseP = base.prototype,\n\t        childP;\n\t\n\t    childP = child.prototype = Object.create(baseP);\n\t    childP.constructor = child;\n\t    childP._super = baseP;\n\t\n\t    if (properties) {\n\t        assign(childP, properties);\n\t    }\n\t}\n\t\n\t/**\n\t * simple function bind\n\t * @param {Function} fn\n\t * @param {Object} context\n\t * @returns {Function}\n\t */\n\tfunction bindFn(fn, context) {\n\t    return function boundFn() {\n\t        return fn.apply(context, arguments);\n\t    };\n\t}\n\t\n\t/**\n\t * let a boolean value also be a function that must return a boolean\n\t * this first item in args will be used as the context\n\t * @param {Boolean|Function} val\n\t * @param {Array} [args]\n\t * @returns {Boolean}\n\t */\n\tfunction boolOrFn(val, args) {\n\t    if (typeof val == TYPE_FUNCTION) {\n\t        return val.apply(args ? args[0] || undefined : undefined, args);\n\t    }\n\t    return val;\n\t}\n\t\n\t/**\n\t * use the val2 when val1 is undefined\n\t * @param {*} val1\n\t * @param {*} val2\n\t * @returns {*}\n\t */\n\tfunction ifUndefined(val1, val2) {\n\t    return (val1 === undefined) ? val2 : val1;\n\t}\n\t\n\t/**\n\t * addEventListener with multiple events at once\n\t * @param {EventTarget} target\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction addEventListeners(target, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        target.addEventListener(type, handler, false);\n\t    });\n\t}\n\t\n\t/**\n\t * removeEventListener with multiple events at once\n\t * @param {EventTarget} target\n\t * @param {String} types\n\t * @param {Function} handler\n\t */\n\tfunction removeEventListeners(target, types, handler) {\n\t    each(splitStr(types), function(type) {\n\t        target.removeEventListener(type, handler, false);\n\t    });\n\t}\n\t\n\t/**\n\t * find if a node is in the given parent\n\t * @method hasParent\n\t * @param {HTMLElement} node\n\t * @param {HTMLElement} parent\n\t * @return {Boolean} found\n\t */\n\tfunction hasParent(node, parent) {\n\t    while (node) {\n\t        if (node == parent) {\n\t            return true;\n\t        }\n\t        node = node.parentNode;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * small indexOf wrapper\n\t * @param {String} str\n\t * @param {String} find\n\t * @returns {Boolean} found\n\t */\n\tfunction inStr(str, find) {\n\t    return str.indexOf(find) > -1;\n\t}\n\t\n\t/**\n\t * split string on whitespace\n\t * @param {String} str\n\t * @returns {Array} words\n\t */\n\tfunction splitStr(str) {\n\t    return str.trim().split(/\\s+/g);\n\t}\n\t\n\t/**\n\t * find if a array contains the object using indexOf or a simple polyFill\n\t * @param {Array} src\n\t * @param {String} find\n\t * @param {String} [findByKey]\n\t * @return {Boolean|Number} false when not found, or the index\n\t */\n\tfunction inArray(src, find, findByKey) {\n\t    if (src.indexOf && !findByKey) {\n\t        return src.indexOf(find);\n\t    } else {\n\t        var i = 0;\n\t        while (i < src.length) {\n\t            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n\t                return i;\n\t            }\n\t            i++;\n\t        }\n\t        return -1;\n\t    }\n\t}\n\t\n\t/**\n\t * convert array-like objects to real arrays\n\t * @param {Object} obj\n\t * @returns {Array}\n\t */\n\tfunction toArray(obj) {\n\t    return Array.prototype.slice.call(obj, 0);\n\t}\n\t\n\t/**\n\t * unique array with objects based on a key (like 'id') or just by the array's value\n\t * @param {Array} src [{id:1},{id:2},{id:1}]\n\t * @param {String} [key]\n\t * @param {Boolean} [sort=False]\n\t * @returns {Array} [{id:1},{id:2}]\n\t */\n\tfunction uniqueArray(src, key, sort) {\n\t    var results = [];\n\t    var values = [];\n\t    var i = 0;\n\t\n\t    while (i < src.length) {\n\t        var val = key ? src[i][key] : src[i];\n\t        if (inArray(values, val) < 0) {\n\t            results.push(src[i]);\n\t        }\n\t        values[i] = val;\n\t        i++;\n\t    }\n\t\n\t    if (sort) {\n\t        if (!key) {\n\t            results = results.sort();\n\t        } else {\n\t            results = results.sort(function sortUniqueArray(a, b) {\n\t                return a[key] > b[key];\n\t            });\n\t        }\n\t    }\n\t\n\t    return results;\n\t}\n\t\n\t/**\n\t * get the prefixed property\n\t * @param {Object} obj\n\t * @param {String} property\n\t * @returns {String|Undefined} prefixed\n\t */\n\tfunction prefixed(obj, property) {\n\t    var prefix, prop;\n\t    var camelProp = property[0].toUpperCase() + property.slice(1);\n\t\n\t    var i = 0;\n\t    while (i < VENDOR_PREFIXES.length) {\n\t        prefix = VENDOR_PREFIXES[i];\n\t        prop = (prefix) ? prefix + camelProp : property;\n\t\n\t        if (prop in obj) {\n\t            return prop;\n\t        }\n\t        i++;\n\t    }\n\t    return undefined;\n\t}\n\t\n\t/**\n\t * get a unique id\n\t * @returns {number} uniqueId\n\t */\n\tvar _uniqueId = 1;\n\tfunction uniqueId() {\n\t    return _uniqueId++;\n\t}\n\t\n\t/**\n\t * get the window object of an element\n\t * @param {HTMLElement} element\n\t * @returns {DocumentView|Window}\n\t */\n\tfunction getWindowForElement(element) {\n\t    var doc = element.ownerDocument || element;\n\t    return (doc.defaultView || doc.parentWindow || window);\n\t}\n\t\n\tvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\t\n\tvar SUPPORT_TOUCH = ('ontouchstart' in window);\n\tvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n\tvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\t\n\tvar INPUT_TYPE_TOUCH = 'touch';\n\tvar INPUT_TYPE_PEN = 'pen';\n\tvar INPUT_TYPE_MOUSE = 'mouse';\n\tvar INPUT_TYPE_KINECT = 'kinect';\n\t\n\tvar COMPUTE_INTERVAL = 25;\n\t\n\tvar INPUT_START = 1;\n\tvar INPUT_MOVE = 2;\n\tvar INPUT_END = 4;\n\tvar INPUT_CANCEL = 8;\n\t\n\tvar DIRECTION_NONE = 1;\n\tvar DIRECTION_LEFT = 2;\n\tvar DIRECTION_RIGHT = 4;\n\tvar DIRECTION_UP = 8;\n\tvar DIRECTION_DOWN = 16;\n\t\n\tvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n\tvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n\tvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\t\n\tvar PROPS_XY = ['x', 'y'];\n\tvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\t\n\t/**\n\t * create new input type manager\n\t * @param {Manager} manager\n\t * @param {Function} callback\n\t * @returns {Input}\n\t * @constructor\n\t */\n\tfunction Input(manager, callback) {\n\t    var self = this;\n\t    this.manager = manager;\n\t    this.callback = callback;\n\t    this.element = manager.element;\n\t    this.target = manager.options.inputTarget;\n\t\n\t    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n\t    // so when disabled the input events are completely bypassed.\n\t    this.domHandler = function(ev) {\n\t        if (boolOrFn(manager.options.enable, [manager])) {\n\t            self.handler(ev);\n\t        }\n\t    };\n\t\n\t    this.init();\n\t\n\t}\n\t\n\tInput.prototype = {\n\t    /**\n\t     * should handle the inputEvent data and trigger the callback\n\t     * @virtual\n\t     */\n\t    handler: function() { },\n\t\n\t    /**\n\t     * bind the events\n\t     */\n\t    init: function() {\n\t        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n\t        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n\t        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n\t    },\n\t\n\t    /**\n\t     * unbind the events\n\t     */\n\t    destroy: function() {\n\t        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n\t        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n\t        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n\t    }\n\t};\n\t\n\t/**\n\t * create new input type manager\n\t * called by the Manager constructor\n\t * @param {Hammer} manager\n\t * @returns {Input}\n\t */\n\tfunction createInputInstance(manager) {\n\t    var Type;\n\t    var inputClass = manager.options.inputClass;\n\t\n\t    if (inputClass) {\n\t        Type = inputClass;\n\t    } else if (SUPPORT_POINTER_EVENTS) {\n\t        Type = PointerEventInput;\n\t    } else if (SUPPORT_ONLY_TOUCH) {\n\t        Type = TouchInput;\n\t    } else if (!SUPPORT_TOUCH) {\n\t        Type = MouseInput;\n\t    } else {\n\t        Type = TouchMouseInput;\n\t    }\n\t    return new (Type)(manager, inputHandler);\n\t}\n\t\n\t/**\n\t * handle input events\n\t * @param {Manager} manager\n\t * @param {String} eventType\n\t * @param {Object} input\n\t */\n\tfunction inputHandler(manager, eventType, input) {\n\t    var pointersLen = input.pointers.length;\n\t    var changedPointersLen = input.changedPointers.length;\n\t    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n\t    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\t\n\t    input.isFirst = !!isFirst;\n\t    input.isFinal = !!isFinal;\n\t\n\t    if (isFirst) {\n\t        manager.session = {};\n\t    }\n\t\n\t    // source event is the normalized value of the domEvents\n\t    // like 'touchstart, mouseup, pointerdown'\n\t    input.eventType = eventType;\n\t\n\t    // compute scale, rotation etc\n\t    computeInputData(manager, input);\n\t\n\t    // emit secret event\n\t    manager.emit('hammer.input', input);\n\t\n\t    manager.recognize(input);\n\t    manager.session.prevInput = input;\n\t}\n\t\n\t/**\n\t * extend the data with some usable properties like scale, rotate, velocity etc\n\t * @param {Object} manager\n\t * @param {Object} input\n\t */\n\tfunction computeInputData(manager, input) {\n\t    var session = manager.session;\n\t    var pointers = input.pointers;\n\t    var pointersLength = pointers.length;\n\t\n\t    // store the first input to calculate the distance and direction\n\t    if (!session.firstInput) {\n\t        session.firstInput = simpleCloneInputData(input);\n\t    }\n\t\n\t    // to compute scale and rotation we need to store the multiple touches\n\t    if (pointersLength > 1 && !session.firstMultiple) {\n\t        session.firstMultiple = simpleCloneInputData(input);\n\t    } else if (pointersLength === 1) {\n\t        session.firstMultiple = false;\n\t    }\n\t\n\t    var firstInput = session.firstInput;\n\t    var firstMultiple = session.firstMultiple;\n\t    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\t\n\t    var center = input.center = getCenter(pointers);\n\t    input.timeStamp = now();\n\t    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\t\n\t    input.angle = getAngle(offsetCenter, center);\n\t    input.distance = getDistance(offsetCenter, center);\n\t\n\t    computeDeltaXY(session, input);\n\t    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\t\n\t    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n\t    input.overallVelocityX = overallVelocity.x;\n\t    input.overallVelocityY = overallVelocity.y;\n\t    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\t\n\t    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n\t    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\t\n\t    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n\t        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\t\n\t    computeIntervalInputData(session, input);\n\t\n\t    // find the correct target\n\t    var target = manager.element;\n\t    if (hasParent(input.srcEvent.target, target)) {\n\t        target = input.srcEvent.target;\n\t    }\n\t    input.target = target;\n\t}\n\t\n\tfunction computeDeltaXY(session, input) {\n\t    var center = input.center;\n\t    var offset = session.offsetDelta || {};\n\t    var prevDelta = session.prevDelta || {};\n\t    var prevInput = session.prevInput || {};\n\t\n\t    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n\t        prevDelta = session.prevDelta = {\n\t            x: prevInput.deltaX || 0,\n\t            y: prevInput.deltaY || 0\n\t        };\n\t\n\t        offset = session.offsetDelta = {\n\t            x: center.x,\n\t            y: center.y\n\t        };\n\t    }\n\t\n\t    input.deltaX = prevDelta.x + (center.x - offset.x);\n\t    input.deltaY = prevDelta.y + (center.y - offset.y);\n\t}\n\t\n\t/**\n\t * velocity is calculated every x ms\n\t * @param {Object} session\n\t * @param {Object} input\n\t */\n\tfunction computeIntervalInputData(session, input) {\n\t    var last = session.lastInterval || input,\n\t        deltaTime = input.timeStamp - last.timeStamp,\n\t        velocity, velocityX, velocityY, direction;\n\t\n\t    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n\t        var deltaX = input.deltaX - last.deltaX;\n\t        var deltaY = input.deltaY - last.deltaY;\n\t\n\t        var v = getVelocity(deltaTime, deltaX, deltaY);\n\t        velocityX = v.x;\n\t        velocityY = v.y;\n\t        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n\t        direction = getDirection(deltaX, deltaY);\n\t\n\t        session.lastInterval = input;\n\t    } else {\n\t        // use latest velocity info if it doesn't overtake a minimum period\n\t        velocity = last.velocity;\n\t        velocityX = last.velocityX;\n\t        velocityY = last.velocityY;\n\t        direction = last.direction;\n\t    }\n\t\n\t    input.velocity = velocity;\n\t    input.velocityX = velocityX;\n\t    input.velocityY = velocityY;\n\t    input.direction = direction;\n\t}\n\t\n\t/**\n\t * create a simple clone from the input used for storage of firstInput and firstMultiple\n\t * @param {Object} input\n\t * @returns {Object} clonedInputData\n\t */\n\tfunction simpleCloneInputData(input) {\n\t    // make a simple copy of the pointers because we will get a reference if we don't\n\t    // we only need clientXY for the calculations\n\t    var pointers = [];\n\t    var i = 0;\n\t    while (i < input.pointers.length) {\n\t        pointers[i] = {\n\t            clientX: round(input.pointers[i].clientX),\n\t            clientY: round(input.pointers[i].clientY)\n\t        };\n\t        i++;\n\t    }\n\t\n\t    return {\n\t        timeStamp: now(),\n\t        pointers: pointers,\n\t        center: getCenter(pointers),\n\t        deltaX: input.deltaX,\n\t        deltaY: input.deltaY\n\t    };\n\t}\n\t\n\t/**\n\t * get the center of all the pointers\n\t * @param {Array} pointers\n\t * @return {Object} center contains `x` and `y` properties\n\t */\n\tfunction getCenter(pointers) {\n\t    var pointersLength = pointers.length;\n\t\n\t    // no need to loop when only one touch\n\t    if (pointersLength === 1) {\n\t        return {\n\t            x: round(pointers[0].clientX),\n\t            y: round(pointers[0].clientY)\n\t        };\n\t    }\n\t\n\t    var x = 0, y = 0, i = 0;\n\t    while (i < pointersLength) {\n\t        x += pointers[i].clientX;\n\t        y += pointers[i].clientY;\n\t        i++;\n\t    }\n\t\n\t    return {\n\t        x: round(x / pointersLength),\n\t        y: round(y / pointersLength)\n\t    };\n\t}\n\t\n\t/**\n\t * calculate the velocity between two points. unit is in px per ms.\n\t * @param {Number} deltaTime\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Object} velocity `x` and `y`\n\t */\n\tfunction getVelocity(deltaTime, x, y) {\n\t    return {\n\t        x: x / deltaTime || 0,\n\t        y: y / deltaTime || 0\n\t    };\n\t}\n\t\n\t/**\n\t * get the direction between two points\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Number} direction\n\t */\n\tfunction getDirection(x, y) {\n\t    if (x === y) {\n\t        return DIRECTION_NONE;\n\t    }\n\t\n\t    if (abs(x) >= abs(y)) {\n\t        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t    }\n\t    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n\t}\n\t\n\t/**\n\t * calculate the absolute distance between two points\n\t * @param {Object} p1 {x, y}\n\t * @param {Object} p2 {x, y}\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} distance\n\t */\n\tfunction getDistance(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t\n\t    return Math.sqrt((x * x) + (y * y));\n\t}\n\t\n\t/**\n\t * calculate the angle between two coordinates\n\t * @param {Object} p1\n\t * @param {Object} p2\n\t * @param {Array} [props] containing x and y keys\n\t * @return {Number} angle\n\t */\n\tfunction getAngle(p1, p2, props) {\n\t    if (!props) {\n\t        props = PROPS_XY;\n\t    }\n\t    var x = p2[props[0]] - p1[props[0]],\n\t        y = p2[props[1]] - p1[props[1]];\n\t    return Math.atan2(y, x) * 180 / Math.PI;\n\t}\n\t\n\t/**\n\t * calculate the rotation degrees between two pointersets\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} rotation\n\t */\n\tfunction getRotation(start, end) {\n\t    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n\t}\n\t\n\t/**\n\t * calculate the scale factor between two pointersets\n\t * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n\t * @param {Array} start array of pointers\n\t * @param {Array} end array of pointers\n\t * @return {Number} scale\n\t */\n\tfunction getScale(start, end) {\n\t    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n\t}\n\t\n\tvar MOUSE_INPUT_MAP = {\n\t    mousedown: INPUT_START,\n\t    mousemove: INPUT_MOVE,\n\t    mouseup: INPUT_END\n\t};\n\t\n\tvar MOUSE_ELEMENT_EVENTS = 'mousedown';\n\tvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\t\n\t/**\n\t * Mouse events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction MouseInput() {\n\t    this.evEl = MOUSE_ELEMENT_EVENTS;\n\t    this.evWin = MOUSE_WINDOW_EVENTS;\n\t\n\t    this.pressed = false; // mousedown state\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(MouseInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function MEhandler(ev) {\n\t        var eventType = MOUSE_INPUT_MAP[ev.type];\n\t\n\t        // on start we want to have the left mouse button down\n\t        if (eventType & INPUT_START && ev.button === 0) {\n\t            this.pressed = true;\n\t        }\n\t\n\t        if (eventType & INPUT_MOVE && ev.which !== 1) {\n\t            eventType = INPUT_END;\n\t        }\n\t\n\t        // mouse must be down\n\t        if (!this.pressed) {\n\t            return;\n\t        }\n\t\n\t        if (eventType & INPUT_END) {\n\t            this.pressed = false;\n\t        }\n\t\n\t        this.callback(this.manager, eventType, {\n\t            pointers: [ev],\n\t            changedPointers: [ev],\n\t            pointerType: INPUT_TYPE_MOUSE,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\tvar POINTER_INPUT_MAP = {\n\t    pointerdown: INPUT_START,\n\t    pointermove: INPUT_MOVE,\n\t    pointerup: INPUT_END,\n\t    pointercancel: INPUT_CANCEL,\n\t    pointerout: INPUT_CANCEL\n\t};\n\t\n\t// in IE10 the pointer types is defined as an enum\n\tvar IE10_POINTER_TYPE_ENUM = {\n\t    2: INPUT_TYPE_TOUCH,\n\t    3: INPUT_TYPE_PEN,\n\t    4: INPUT_TYPE_MOUSE,\n\t    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\t};\n\t\n\tvar POINTER_ELEMENT_EVENTS = 'pointerdown';\n\tvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\t\n\t// IE10 has prefixed support, and case-sensitive\n\tif (window.MSPointerEvent && !window.PointerEvent) {\n\t    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n\t    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n\t}\n\t\n\t/**\n\t * Pointer events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction PointerEventInput() {\n\t    this.evEl = POINTER_ELEMENT_EVENTS;\n\t    this.evWin = POINTER_WINDOW_EVENTS;\n\t\n\t    Input.apply(this, arguments);\n\t\n\t    this.store = (this.manager.session.pointerEvents = []);\n\t}\n\t\n\tinherit(PointerEventInput, Input, {\n\t    /**\n\t     * handle mouse events\n\t     * @param {Object} ev\n\t     */\n\t    handler: function PEhandler(ev) {\n\t        var store = this.store;\n\t        var removePointer = false;\n\t\n\t        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n\t        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n\t        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\t\n\t        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\t\n\t        // get index of the event in the store\n\t        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\t\n\t        // start and mouse must be down\n\t        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n\t            if (storeIndex < 0) {\n\t                store.push(ev);\n\t                storeIndex = store.length - 1;\n\t            }\n\t        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t            removePointer = true;\n\t        }\n\t\n\t        // it not found, so the pointer hasn't been down (so it's probably a hover)\n\t        if (storeIndex < 0) {\n\t            return;\n\t        }\n\t\n\t        // update the event in the store\n\t        store[storeIndex] = ev;\n\t\n\t        this.callback(this.manager, eventType, {\n\t            pointers: store,\n\t            changedPointers: [ev],\n\t            pointerType: pointerType,\n\t            srcEvent: ev\n\t        });\n\t\n\t        if (removePointer) {\n\t            // remove from the store\n\t            store.splice(storeIndex, 1);\n\t        }\n\t    }\n\t});\n\t\n\tvar SINGLE_TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\t\n\tvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n\tvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\t\n\t/**\n\t * Touch events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction SingleTouchInput() {\n\t    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n\t    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n\t    this.started = false;\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(SingleTouchInput, Input, {\n\t    handler: function TEhandler(ev) {\n\t        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\t\n\t        // should we handle the touch events?\n\t        if (type === INPUT_START) {\n\t            this.started = true;\n\t        }\n\t\n\t        if (!this.started) {\n\t            return;\n\t        }\n\t\n\t        var touches = normalizeSingleTouches.call(this, ev, type);\n\t\n\t        // when done, reset the started state\n\t        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n\t            this.started = false;\n\t        }\n\t\n\t        this.callback(this.manager, type, {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * @this {TouchInput}\n\t * @param {Object} ev\n\t * @param {Number} type flag\n\t * @returns {undefined|Array} [all, changed]\n\t */\n\tfunction normalizeSingleTouches(ev, type) {\n\t    var all = toArray(ev.touches);\n\t    var changed = toArray(ev.changedTouches);\n\t\n\t    if (type & (INPUT_END | INPUT_CANCEL)) {\n\t        all = uniqueArray(all.concat(changed), 'identifier', true);\n\t    }\n\t\n\t    return [all, changed];\n\t}\n\t\n\tvar TOUCH_INPUT_MAP = {\n\t    touchstart: INPUT_START,\n\t    touchmove: INPUT_MOVE,\n\t    touchend: INPUT_END,\n\t    touchcancel: INPUT_CANCEL\n\t};\n\t\n\tvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\t\n\t/**\n\t * Multi-user touch events input\n\t * @constructor\n\t * @extends Input\n\t */\n\tfunction TouchInput() {\n\t    this.evTarget = TOUCH_TARGET_EVENTS;\n\t    this.targetIds = {};\n\t\n\t    Input.apply(this, arguments);\n\t}\n\t\n\tinherit(TouchInput, Input, {\n\t    handler: function MTEhandler(ev) {\n\t        var type = TOUCH_INPUT_MAP[ev.type];\n\t        var touches = getTouches.call(this, ev, type);\n\t        if (!touches) {\n\t            return;\n\t        }\n\t\n\t        this.callback(this.manager, type, {\n\t            pointers: touches[0],\n\t            changedPointers: touches[1],\n\t            pointerType: INPUT_TYPE_TOUCH,\n\t            srcEvent: ev\n\t        });\n\t    }\n\t});\n\t\n\t/**\n\t * @this {TouchInput}\n\t * @param {Object} ev\n\t * @param {Number} type flag\n\t * @returns {undefined|Array} [all, changed]\n\t */\n\tfunction getTouches(ev, type) {\n\t    var allTouches = toArray(ev.touches);\n\t    var targetIds = this.targetIds;\n\t\n\t    // when there is only one touch, the process can be simplified\n\t    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n\t        targetIds[allTouches[0].identifier] = true;\n\t        return [allTouches, allTouches];\n\t    }\n\t\n\t    var i,\n\t        targetTouches,\n\t        changedTouches = toArray(ev.changedTouches),\n\t        changedTargetTouches = [],\n\t        target = this.target;\n\t\n\t    // get target touches from touches\n\t    targetTouches = allTouches.filter(function(touch) {\n\t        return hasParent(touch.target, target);\n\t    });\n\t\n\t    // collect touches\n\t    if (type === INPUT_START) {\n\t        i = 0;\n\t        while (i < targetTouches.length) {\n\t            targetIds[targetTouches[i].identifier] = true;\n\t            i++;\n\t        }\n\t    }\n\t\n\t    // filter changed touches to only contain touches that exist in the collected target ids\n\t    i = 0;\n\t    while (i < changedTouches.length) {\n\t        if (targetIds[changedTouches[i].identifier]) {\n\t            changedTargetTouches.push(changedTouches[i]);\n\t        }\n\t\n\t        // cleanup removed touches\n\t        if (type & (INPUT_END | INPUT_CANCEL)) {\n\t            delete targetIds[changedTouches[i].identifier];\n\t        }\n\t        i++;\n\t    }\n\t\n\t    if (!changedTargetTouches.length) {\n\t        return;\n\t    }\n\t\n\t    return [\n\t        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n\t        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n\t        changedTargetTouches\n\t    ];\n\t}\n\t\n\t/**\n\t * Combined touch and mouse input\n\t *\n\t * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n\t * This because touch devices also emit mouse events while doing a touch.\n\t *\n\t * @constructor\n\t * @extends Input\n\t */\n\t\n\tvar DEDUP_TIMEOUT = 2500;\n\tvar DEDUP_DISTANCE = 25;\n\t\n\tfunction TouchMouseInput() {\n\t    Input.apply(this, arguments);\n\t\n\t    var handler = bindFn(this.handler, this);\n\t    this.touch = new TouchInput(this.manager, handler);\n\t    this.mouse = new MouseInput(this.manager, handler);\n\t\n\t    this.primaryTouch = null;\n\t    this.lastTouches = [];\n\t}\n\t\n\tinherit(TouchMouseInput, Input, {\n\t    /**\n\t     * handle mouse and touch events\n\t     * @param {Hammer} manager\n\t     * @param {String} inputEvent\n\t     * @param {Object} inputData\n\t     */\n\t    handler: function TMEhandler(manager, inputEvent, inputData) {\n\t        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n\t            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\t\n\t        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n\t            return;\n\t        }\n\t\n\t        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\t        if (isTouch) {\n\t            recordTouches.call(this, inputEvent, inputData);\n\t        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n\t            return;\n\t        }\n\t\n\t        this.callback(manager, inputEvent, inputData);\n\t    },\n\t\n\t    /**\n\t     * remove the event listeners\n\t     */\n\t    destroy: function destroy() {\n\t        this.touch.destroy();\n\t        this.mouse.destroy();\n\t    }\n\t});\n\t\n\tfunction recordTouches(eventType, eventData) {\n\t    if (eventType & INPUT_START) {\n\t        this.primaryTouch = eventData.changedPointers[0].identifier;\n\t        setLastTouch.call(this, eventData);\n\t    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n\t        setLastTouch.call(this, eventData);\n\t    }\n\t}\n\t\n\tfunction setLastTouch(eventData) {\n\t    var touch = eventData.changedPointers[0];\n\t\n\t    if (touch.identifier === this.primaryTouch) {\n\t        var lastTouch = {x: touch.clientX, y: touch.clientY};\n\t        this.lastTouches.push(lastTouch);\n\t        var lts = this.lastTouches;\n\t        var removeLastTouch = function() {\n\t            var i = lts.indexOf(lastTouch);\n\t            if (i > -1) {\n\t                lts.splice(i, 1);\n\t            }\n\t        };\n\t        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n\t    }\n\t}\n\t\n\tfunction isSyntheticEvent(eventData) {\n\t    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n\t    for (var i = 0; i < this.lastTouches.length; i++) {\n\t        var t = this.lastTouches[i];\n\t        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n\t        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\t\n\tvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n\tvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\t\n\t// magical touchAction value\n\tvar TOUCH_ACTION_COMPUTE = 'compute';\n\tvar TOUCH_ACTION_AUTO = 'auto';\n\tvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\tvar TOUCH_ACTION_NONE = 'none';\n\tvar TOUCH_ACTION_PAN_X = 'pan-x';\n\tvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\tvar TOUCH_ACTION_MAP = getTouchActionProps();\n\t\n\t/**\n\t * Touch Action\n\t * sets the touchAction property or uses the js alternative\n\t * @param {Manager} manager\n\t * @param {String} value\n\t * @constructor\n\t */\n\tfunction TouchAction(manager, value) {\n\t    this.manager = manager;\n\t    this.set(value);\n\t}\n\t\n\tTouchAction.prototype = {\n\t    /**\n\t     * set the touchAction value on the element or enable the polyfill\n\t     * @param {String} value\n\t     */\n\t    set: function(value) {\n\t        // find out the touch-action by the event handlers\n\t        if (value == TOUCH_ACTION_COMPUTE) {\n\t            value = this.compute();\n\t        }\n\t\n\t        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n\t            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n\t        }\n\t        this.actions = value.toLowerCase().trim();\n\t    },\n\t\n\t    /**\n\t     * just re-set the touchAction value\n\t     */\n\t    update: function() {\n\t        this.set(this.manager.options.touchAction);\n\t    },\n\t\n\t    /**\n\t     * compute the value for the touchAction property based on the recognizer's settings\n\t     * @returns {String} value\n\t     */\n\t    compute: function() {\n\t        var actions = [];\n\t        each(this.manager.recognizers, function(recognizer) {\n\t            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n\t                actions = actions.concat(recognizer.getTouchAction());\n\t            }\n\t        });\n\t        return cleanTouchActions(actions.join(' '));\n\t    },\n\t\n\t    /**\n\t     * this method is called on each input cycle and provides the preventing of the browser behavior\n\t     * @param {Object} input\n\t     */\n\t    preventDefaults: function(input) {\n\t        var srcEvent = input.srcEvent;\n\t        var direction = input.offsetDirection;\n\t\n\t        // if the touch action did prevented once this session\n\t        if (this.manager.session.prevented) {\n\t            srcEvent.preventDefault();\n\t            return;\n\t        }\n\t\n\t        var actions = this.actions;\n\t        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n\t        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n\t        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\t\n\t        if (hasNone) {\n\t            //do not prevent defaults if this is a tap gesture\n\t\n\t            var isTapPointer = input.pointers.length === 1;\n\t            var isTapMovement = input.distance < 2;\n\t            var isTapTouchTime = input.deltaTime < 250;\n\t\n\t            if (isTapPointer && isTapMovement && isTapTouchTime) {\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (hasPanX && hasPanY) {\n\t            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n\t            return;\n\t        }\n\t\n\t        if (hasNone ||\n\t            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n\t            (hasPanX && direction & DIRECTION_VERTICAL)) {\n\t            return this.preventSrc(srcEvent);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n\t     * @param {Object} srcEvent\n\t     */\n\t    preventSrc: function(srcEvent) {\n\t        this.manager.session.prevented = true;\n\t        srcEvent.preventDefault();\n\t    }\n\t};\n\t\n\t/**\n\t * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n\t * @param {String} actions\n\t * @returns {*}\n\t */\n\tfunction cleanTouchActions(actions) {\n\t    // none\n\t    if (inStr(actions, TOUCH_ACTION_NONE)) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\t\n\t    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\t    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\t\n\t    // if both pan-x and pan-y are set (different recognizers\n\t    // for different directions, e.g. horizontal pan but vertical swipe?)\n\t    // we need none (as otherwise with pan-x pan-y combined none of these\n\t    // recognizers will work, since the browser would handle all panning\n\t    if (hasPanX && hasPanY) {\n\t        return TOUCH_ACTION_NONE;\n\t    }\n\t\n\t    // pan-x OR pan-y\n\t    if (hasPanX || hasPanY) {\n\t        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n\t    }\n\t\n\t    // manipulation\n\t    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n\t        return TOUCH_ACTION_MANIPULATION;\n\t    }\n\t\n\t    return TOUCH_ACTION_AUTO;\n\t}\n\t\n\tfunction getTouchActionProps() {\n\t    if (!NATIVE_TOUCH_ACTION) {\n\t        return false;\n\t    }\n\t    var touchMap = {};\n\t    var cssSupports = window.CSS && window.CSS.supports;\n\t    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\t\n\t        // If css.supports is not supported but there is native touch-action assume it supports\n\t        // all values. This is the case for IE 10 and 11.\n\t        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n\t    });\n\t    return touchMap;\n\t}\n\t\n\t/**\n\t * Recognizer flow explained; *\n\t * All recognizers have the initial state of POSSIBLE when a input session starts.\n\t * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n\t * Example session for mouse-input: mousedown -> mousemove -> mouseup\n\t *\n\t * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n\t * which determines with state it should be.\n\t *\n\t * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n\t * POSSIBLE to give it another change on the next cycle.\n\t *\n\t *               Possible\n\t *                  |\n\t *            +-----+---------------+\n\t *            |                     |\n\t *      +-----+-----+               |\n\t *      |           |               |\n\t *   Failed      Cancelled          |\n\t *                          +-------+------+\n\t *                          |              |\n\t *                      Recognized       Began\n\t *                                         |\n\t *                                      Changed\n\t *                                         |\n\t *                                  Ended/Recognized\n\t */\n\tvar STATE_POSSIBLE = 1;\n\tvar STATE_BEGAN = 2;\n\tvar STATE_CHANGED = 4;\n\tvar STATE_ENDED = 8;\n\tvar STATE_RECOGNIZED = STATE_ENDED;\n\tvar STATE_CANCELLED = 16;\n\tvar STATE_FAILED = 32;\n\t\n\t/**\n\t * Recognizer\n\t * Every recognizer needs to extend from this class.\n\t * @constructor\n\t * @param {Object} options\n\t */\n\tfunction Recognizer(options) {\n\t    this.options = assign({}, this.defaults, options || {});\n\t\n\t    this.id = uniqueId();\n\t\n\t    this.manager = null;\n\t\n\t    // default is enable true\n\t    this.options.enable = ifUndefined(this.options.enable, true);\n\t\n\t    this.state = STATE_POSSIBLE;\n\t\n\t    this.simultaneous = {};\n\t    this.requireFail = [];\n\t}\n\t\n\tRecognizer.prototype = {\n\t    /**\n\t     * @virtual\n\t     * @type {Object}\n\t     */\n\t    defaults: {},\n\t\n\t    /**\n\t     * set options\n\t     * @param {Object} options\n\t     * @return {Recognizer}\n\t     */\n\t    set: function(options) {\n\t        assign(this.options, options);\n\t\n\t        // also update the touchAction, in case something changed about the directions/enabled state\n\t        this.manager && this.manager.touchAction.update();\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * recognize simultaneous with an other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    recognizeWith: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n\t            return this;\n\t        }\n\t\n\t        var simultaneous = this.simultaneous;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (!simultaneous[otherRecognizer.id]) {\n\t            simultaneous[otherRecognizer.id] = otherRecognizer;\n\t            otherRecognizer.recognizeWith(this);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRecognizeWith: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n\t            return this;\n\t        }\n\t\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        delete this.simultaneous[otherRecognizer.id];\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * recognizer can only run when an other is failing\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    requireFailure: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n\t            return this;\n\t        }\n\t\n\t        var requireFail = this.requireFail;\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        if (inArray(requireFail, otherRecognizer) === -1) {\n\t            requireFail.push(otherRecognizer);\n\t            otherRecognizer.requireFailure(this);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * drop the requireFailure link. it does not remove the link on the other recognizer.\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Recognizer} this\n\t     */\n\t    dropRequireFailure: function(otherRecognizer) {\n\t        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n\t            return this;\n\t        }\n\t\n\t        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\t        var index = inArray(this.requireFail, otherRecognizer);\n\t        if (index > -1) {\n\t            this.requireFail.splice(index, 1);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * has require failures boolean\n\t     * @returns {boolean}\n\t     */\n\t    hasRequireFailures: function() {\n\t        return this.requireFail.length > 0;\n\t    },\n\t\n\t    /**\n\t     * if the recognizer can recognize simultaneous with an other recognizer\n\t     * @param {Recognizer} otherRecognizer\n\t     * @returns {Boolean}\n\t     */\n\t    canRecognizeWith: function(otherRecognizer) {\n\t        return !!this.simultaneous[otherRecognizer.id];\n\t    },\n\t\n\t    /**\n\t     * You should use `tryEmit` instead of `emit` directly to check\n\t     * that all the needed recognizers has failed before emitting.\n\t     * @param {Object} input\n\t     */\n\t    emit: function(input) {\n\t        var self = this;\n\t        var state = this.state;\n\t\n\t        function emit(event) {\n\t            self.manager.emit(event, input);\n\t        }\n\t\n\t        // 'panstart' and 'panmove'\n\t        if (state < STATE_ENDED) {\n\t            emit(self.options.event + stateStr(state));\n\t        }\n\t\n\t        emit(self.options.event); // simple 'eventName' events\n\t\n\t        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n\t            emit(input.additionalEvent);\n\t        }\n\t\n\t        // panend and pancancel\n\t        if (state >= STATE_ENDED) {\n\t            emit(self.options.event + stateStr(state));\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Check that all the require failure recognizers has failed,\n\t     * if true, it emits a gesture event,\n\t     * otherwise, setup the state to FAILED.\n\t     * @param {Object} input\n\t     */\n\t    tryEmit: function(input) {\n\t        if (this.canEmit()) {\n\t            return this.emit(input);\n\t        }\n\t        // it's failing anyway\n\t        this.state = STATE_FAILED;\n\t    },\n\t\n\t    /**\n\t     * can we emit?\n\t     * @returns {boolean}\n\t     */\n\t    canEmit: function() {\n\t        var i = 0;\n\t        while (i < this.requireFail.length) {\n\t            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n\t                return false;\n\t            }\n\t            i++;\n\t        }\n\t        return true;\n\t    },\n\t\n\t    /**\n\t     * update the recognizer\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        // make a new copy of the inputData\n\t        // so we can change the inputData without messing up the other recognizers\n\t        var inputDataClone = assign({}, inputData);\n\t\n\t        // is is enabled and allow recognizing?\n\t        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n\t            this.reset();\n\t            this.state = STATE_FAILED;\n\t            return;\n\t        }\n\t\n\t        // reset when we've reached the end\n\t        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n\t            this.state = STATE_POSSIBLE;\n\t        }\n\t\n\t        this.state = this.process(inputDataClone);\n\t\n\t        // the recognizer has recognized a gesture\n\t        // so trigger an event\n\t        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n\t            this.tryEmit(inputDataClone);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * return the state of the recognizer\n\t     * the actual recognizing happens in this method\n\t     * @virtual\n\t     * @param {Object} inputData\n\t     * @returns {Const} STATE\n\t     */\n\t    process: function(inputData) { }, // jshint ignore:line\n\t\n\t    /**\n\t     * return the preferred touch-action\n\t     * @virtual\n\t     * @returns {Array}\n\t     */\n\t    getTouchAction: function() { },\n\t\n\t    /**\n\t     * called when the gesture isn't allowed to recognize\n\t     * like when another is being recognized or it is disabled\n\t     * @virtual\n\t     */\n\t    reset: function() { }\n\t};\n\t\n\t/**\n\t * get a usable string, used as event postfix\n\t * @param {Const} state\n\t * @returns {String} state\n\t */\n\tfunction stateStr(state) {\n\t    if (state & STATE_CANCELLED) {\n\t        return 'cancel';\n\t    } else if (state & STATE_ENDED) {\n\t        return 'end';\n\t    } else if (state & STATE_CHANGED) {\n\t        return 'move';\n\t    } else if (state & STATE_BEGAN) {\n\t        return 'start';\n\t    }\n\t    return '';\n\t}\n\t\n\t/**\n\t * direction cons to string\n\t * @param {Const} direction\n\t * @returns {String}\n\t */\n\tfunction directionStr(direction) {\n\t    if (direction == DIRECTION_DOWN) {\n\t        return 'down';\n\t    } else if (direction == DIRECTION_UP) {\n\t        return 'up';\n\t    } else if (direction == DIRECTION_LEFT) {\n\t        return 'left';\n\t    } else if (direction == DIRECTION_RIGHT) {\n\t        return 'right';\n\t    }\n\t    return '';\n\t}\n\t\n\t/**\n\t * get a recognizer by name if it is bound to a manager\n\t * @param {Recognizer|String} otherRecognizer\n\t * @param {Recognizer} recognizer\n\t * @returns {Recognizer}\n\t */\n\tfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n\t    var manager = recognizer.manager;\n\t    if (manager) {\n\t        return manager.get(otherRecognizer);\n\t    }\n\t    return otherRecognizer;\n\t}\n\t\n\t/**\n\t * This recognizer is just used as a base for the simple attribute recognizers.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction AttrRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(AttrRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof AttrRecognizer\n\t     */\n\t    defaults: {\n\t        /**\n\t         * @type {Number}\n\t         * @default 1\n\t         */\n\t        pointers: 1\n\t    },\n\t\n\t    /**\n\t     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n\t     * @memberof AttrRecognizer\n\t     * @param {Object} input\n\t     * @returns {Boolean} recognized\n\t     */\n\t    attrTest: function(input) {\n\t        var optionPointers = this.options.pointers;\n\t        return optionPointers === 0 || input.pointers.length === optionPointers;\n\t    },\n\t\n\t    /**\n\t     * Process the input and return the state for the recognizer\n\t     * @memberof AttrRecognizer\n\t     * @param {Object} input\n\t     * @returns {*} State\n\t     */\n\t    process: function(input) {\n\t        var state = this.state;\n\t        var eventType = input.eventType;\n\t\n\t        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n\t        var isValid = this.attrTest(input);\n\t\n\t        // on cancel input and we've recognized before, return STATE_CANCELLED\n\t        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n\t            return state | STATE_CANCELLED;\n\t        } else if (isRecognized || isValid) {\n\t            if (eventType & INPUT_END) {\n\t                return state | STATE_ENDED;\n\t            } else if (!(state & STATE_BEGAN)) {\n\t                return STATE_BEGAN;\n\t            }\n\t            return state | STATE_CHANGED;\n\t        }\n\t        return STATE_FAILED;\n\t    }\n\t});\n\t\n\t/**\n\t * Pan\n\t * Recognized when the pointer is down and moved in the allowed direction.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction PanRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t\n\t    this.pX = null;\n\t    this.pY = null;\n\t}\n\t\n\tinherit(PanRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PanRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'pan',\n\t        threshold: 10,\n\t        pointers: 1,\n\t        direction: DIRECTION_ALL\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        var direction = this.options.direction;\n\t        var actions = [];\n\t        if (direction & DIRECTION_HORIZONTAL) {\n\t            actions.push(TOUCH_ACTION_PAN_Y);\n\t        }\n\t        if (direction & DIRECTION_VERTICAL) {\n\t            actions.push(TOUCH_ACTION_PAN_X);\n\t        }\n\t        return actions;\n\t    },\n\t\n\t    directionTest: function(input) {\n\t        var options = this.options;\n\t        var hasMoved = true;\n\t        var distance = input.distance;\n\t        var direction = input.direction;\n\t        var x = input.deltaX;\n\t        var y = input.deltaY;\n\t\n\t        // lock to axis?\n\t        if (!(direction & options.direction)) {\n\t            if (options.direction & DIRECTION_HORIZONTAL) {\n\t                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n\t                hasMoved = x != this.pX;\n\t                distance = Math.abs(input.deltaX);\n\t            } else {\n\t                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n\t                hasMoved = y != this.pY;\n\t                distance = Math.abs(input.deltaY);\n\t            }\n\t        }\n\t        input.direction = direction;\n\t        return hasMoved && distance > options.threshold && direction & options.direction;\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n\t            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n\t    },\n\t\n\t    emit: function(input) {\n\t\n\t        this.pX = input.deltaX;\n\t        this.pY = input.deltaY;\n\t\n\t        var direction = directionStr(input.direction);\n\t\n\t        if (direction) {\n\t            input.additionalEvent = this.options.event + direction;\n\t        }\n\t        this._super.emit.call(this, input);\n\t    }\n\t});\n\t\n\t/**\n\t * Pinch\n\t * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction PinchRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(PinchRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PinchRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'pinch',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n\t    },\n\t\n\t    emit: function(input) {\n\t        if (input.scale !== 1) {\n\t            var inOut = input.scale < 1 ? 'in' : 'out';\n\t            input.additionalEvent = this.options.event + inOut;\n\t        }\n\t        this._super.emit.call(this, input);\n\t    }\n\t});\n\t\n\t/**\n\t * Press\n\t * Recognized when the pointer is down for x ms without any movement.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction PressRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t\n\t    this._timer = null;\n\t    this._input = null;\n\t}\n\t\n\tinherit(PressRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PressRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'press',\n\t        pointers: 1,\n\t        time: 251, // minimal time of the pointer to be pressed\n\t        threshold: 9 // a minimal movement is ok, but keep it low\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_AUTO];\n\t    },\n\t\n\t    process: function(input) {\n\t        var options = this.options;\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTime = input.deltaTime > options.time;\n\t\n\t        this._input = input;\n\t\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n\t            this.reset();\n\t        } else if (input.eventType & INPUT_START) {\n\t            this.reset();\n\t            this._timer = setTimeoutContext(function() {\n\t                this.state = STATE_RECOGNIZED;\n\t                this.tryEmit();\n\t            }, options.time, this);\n\t        } else if (input.eventType & INPUT_END) {\n\t            return STATE_RECOGNIZED;\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\t\n\t    emit: function(input) {\n\t        if (this.state !== STATE_RECOGNIZED) {\n\t            return;\n\t        }\n\t\n\t        if (input && (input.eventType & INPUT_END)) {\n\t            this.manager.emit(this.options.event + 'up', input);\n\t        } else {\n\t            this._input.timeStamp = now();\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * Rotate\n\t * Recognized when two or more pointer are moving in a circular motion.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction RotateRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(RotateRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof RotateRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'rotate',\n\t        threshold: 0,\n\t        pointers: 2\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_NONE];\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        return this._super.attrTest.call(this, input) &&\n\t            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n\t    }\n\t});\n\t\n\t/**\n\t * Swipe\n\t * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n\t * @constructor\n\t * @extends AttrRecognizer\n\t */\n\tfunction SwipeRecognizer() {\n\t    AttrRecognizer.apply(this, arguments);\n\t}\n\t\n\tinherit(SwipeRecognizer, AttrRecognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof SwipeRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'swipe',\n\t        threshold: 10,\n\t        velocity: 0.3,\n\t        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n\t        pointers: 1\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return PanRecognizer.prototype.getTouchAction.call(this);\n\t    },\n\t\n\t    attrTest: function(input) {\n\t        var direction = this.options.direction;\n\t        var velocity;\n\t\n\t        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n\t            velocity = input.overallVelocity;\n\t        } else if (direction & DIRECTION_HORIZONTAL) {\n\t            velocity = input.overallVelocityX;\n\t        } else if (direction & DIRECTION_VERTICAL) {\n\t            velocity = input.overallVelocityY;\n\t        }\n\t\n\t        return this._super.attrTest.call(this, input) &&\n\t            direction & input.offsetDirection &&\n\t            input.distance > this.options.threshold &&\n\t            input.maxPointers == this.options.pointers &&\n\t            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n\t    },\n\t\n\t    emit: function(input) {\n\t        var direction = directionStr(input.offsetDirection);\n\t        if (direction) {\n\t            this.manager.emit(this.options.event + direction, input);\n\t        }\n\t\n\t        this.manager.emit(this.options.event, input);\n\t    }\n\t});\n\t\n\t/**\n\t * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n\t * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n\t * a single tap.\n\t *\n\t * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n\t * multi-taps being recognized.\n\t * @constructor\n\t * @extends Recognizer\n\t */\n\tfunction TapRecognizer() {\n\t    Recognizer.apply(this, arguments);\n\t\n\t    // previous time and center,\n\t    // used for tap counting\n\t    this.pTime = false;\n\t    this.pCenter = false;\n\t\n\t    this._timer = null;\n\t    this._input = null;\n\t    this.count = 0;\n\t}\n\t\n\tinherit(TapRecognizer, Recognizer, {\n\t    /**\n\t     * @namespace\n\t     * @memberof PinchRecognizer\n\t     */\n\t    defaults: {\n\t        event: 'tap',\n\t        pointers: 1,\n\t        taps: 1,\n\t        interval: 300, // max time between the multi-tap taps\n\t        time: 250, // max time of the pointer to be down (like finger on the screen)\n\t        threshold: 9, // a minimal movement is ok, but keep it low\n\t        posThreshold: 10 // a multi-tap can be a bit off the initial position\n\t    },\n\t\n\t    getTouchAction: function() {\n\t        return [TOUCH_ACTION_MANIPULATION];\n\t    },\n\t\n\t    process: function(input) {\n\t        var options = this.options;\n\t\n\t        var validPointers = input.pointers.length === options.pointers;\n\t        var validMovement = input.distance < options.threshold;\n\t        var validTouchTime = input.deltaTime < options.time;\n\t\n\t        this.reset();\n\t\n\t        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n\t            return this.failTimeout();\n\t        }\n\t\n\t        // we only allow little movement\n\t        // and we've reached an end event, so a tap is possible\n\t        if (validMovement && validTouchTime && validPointers) {\n\t            if (input.eventType != INPUT_END) {\n\t                return this.failTimeout();\n\t            }\n\t\n\t            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n\t            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\t\n\t            this.pTime = input.timeStamp;\n\t            this.pCenter = input.center;\n\t\n\t            if (!validMultiTap || !validInterval) {\n\t                this.count = 1;\n\t            } else {\n\t                this.count += 1;\n\t            }\n\t\n\t            this._input = input;\n\t\n\t            // if tap count matches we have recognized it,\n\t            // else it has began recognizing...\n\t            var tapCount = this.count % options.taps;\n\t            if (tapCount === 0) {\n\t                // no failing requirements, immediately trigger the tap event\n\t                // or wait as long as the multitap interval to trigger\n\t                if (!this.hasRequireFailures()) {\n\t                    return STATE_RECOGNIZED;\n\t                } else {\n\t                    this._timer = setTimeoutContext(function() {\n\t                        this.state = STATE_RECOGNIZED;\n\t                        this.tryEmit();\n\t                    }, options.interval, this);\n\t                    return STATE_BEGAN;\n\t                }\n\t            }\n\t        }\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    failTimeout: function() {\n\t        this._timer = setTimeoutContext(function() {\n\t            this.state = STATE_FAILED;\n\t        }, this.options.interval, this);\n\t        return STATE_FAILED;\n\t    },\n\t\n\t    reset: function() {\n\t        clearTimeout(this._timer);\n\t    },\n\t\n\t    emit: function() {\n\t        if (this.state == STATE_RECOGNIZED) {\n\t            this._input.tapCount = this.count;\n\t            this.manager.emit(this.options.event, this._input);\n\t        }\n\t    }\n\t});\n\t\n\t/**\n\t * Simple way to create a manager with a default set of recognizers.\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Hammer(element, options) {\n\t    options = options || {};\n\t    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n\t    return new Manager(element, options);\n\t}\n\t\n\t/**\n\t * @const {string}\n\t */\n\tHammer.VERSION = '2.0.7';\n\t\n\t/**\n\t * default settings\n\t * @namespace\n\t */\n\tHammer.defaults = {\n\t    /**\n\t     * set if DOM events are being triggered.\n\t     * But this is slower and unused by simple implementations, so disabled by default.\n\t     * @type {Boolean}\n\t     * @default false\n\t     */\n\t    domEvents: false,\n\t\n\t    /**\n\t     * The value for the touchAction property/fallback.\n\t     * When set to `compute` it will magically set the correct value based on the added recognizers.\n\t     * @type {String}\n\t     * @default compute\n\t     */\n\t    touchAction: TOUCH_ACTION_COMPUTE,\n\t\n\t    /**\n\t     * @type {Boolean}\n\t     * @default true\n\t     */\n\t    enable: true,\n\t\n\t    /**\n\t     * EXPERIMENTAL FEATURE -- can be removed/changed\n\t     * Change the parent input target element.\n\t     * If Null, then it is being set the to main element.\n\t     * @type {Null|EventTarget}\n\t     * @default null\n\t     */\n\t    inputTarget: null,\n\t\n\t    /**\n\t     * force an input class\n\t     * @type {Null|Function}\n\t     * @default null\n\t     */\n\t    inputClass: null,\n\t\n\t    /**\n\t     * Default recognizer setup when calling `Hammer()`\n\t     * When creating a new Manager these will be skipped.\n\t     * @type {Array}\n\t     */\n\t    preset: [\n\t        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n\t        [RotateRecognizer, {enable: false}],\n\t        [PinchRecognizer, {enable: false}, ['rotate']],\n\t        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n\t        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n\t        [TapRecognizer],\n\t        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n\t        [PressRecognizer]\n\t    ],\n\t\n\t    /**\n\t     * Some CSS properties can be used to improve the working of Hammer.\n\t     * Add them to this method and they will be set when creating a new Manager.\n\t     * @namespace\n\t     */\n\t    cssProps: {\n\t        /**\n\t         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        userSelect: 'none',\n\t\n\t        /**\n\t         * Disable the Windows Phone grippers when pressing an element.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        touchSelect: 'none',\n\t\n\t        /**\n\t         * Disables the default callout shown when you touch and hold a touch target.\n\t         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n\t         * a callout containing information about the link. This property allows you to disable that callout.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        touchCallout: 'none',\n\t\n\t        /**\n\t         * Specifies whether zooming is enabled. Used by IE10>\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        contentZooming: 'none',\n\t\n\t        /**\n\t         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n\t         * @type {String}\n\t         * @default 'none'\n\t         */\n\t        userDrag: 'none',\n\t\n\t        /**\n\t         * Overrides the highlight color shown when the user taps a link or a JavaScript\n\t         * clickable element in iOS. This property obeys the alpha value, if specified.\n\t         * @type {String}\n\t         * @default 'rgba(0,0,0,0)'\n\t         */\n\t        tapHighlightColor: 'rgba(0,0,0,0)'\n\t    }\n\t};\n\t\n\tvar STOP = 1;\n\tvar FORCED_STOP = 2;\n\t\n\t/**\n\t * Manager\n\t * @param {HTMLElement} element\n\t * @param {Object} [options]\n\t * @constructor\n\t */\n\tfunction Manager(element, options) {\n\t    this.options = assign({}, Hammer.defaults, options || {});\n\t\n\t    this.options.inputTarget = this.options.inputTarget || element;\n\t\n\t    this.handlers = {};\n\t    this.session = {};\n\t    this.recognizers = [];\n\t    this.oldCssProps = {};\n\t\n\t    this.element = element;\n\t    this.input = createInputInstance(this);\n\t    this.touchAction = new TouchAction(this, this.options.touchAction);\n\t\n\t    toggleCssProps(this, true);\n\t\n\t    each(this.options.recognizers, function(item) {\n\t        var recognizer = this.add(new (item[0])(item[1]));\n\t        item[2] && recognizer.recognizeWith(item[2]);\n\t        item[3] && recognizer.requireFailure(item[3]);\n\t    }, this);\n\t}\n\t\n\tManager.prototype = {\n\t    /**\n\t     * set options\n\t     * @param {Object} options\n\t     * @returns {Manager}\n\t     */\n\t    set: function(options) {\n\t        assign(this.options, options);\n\t\n\t        // Options that need a little more setup\n\t        if (options.touchAction) {\n\t            this.touchAction.update();\n\t        }\n\t        if (options.inputTarget) {\n\t            // Clean up existing event listeners and reinitialize\n\t            this.input.destroy();\n\t            this.input.target = options.inputTarget;\n\t            this.input.init();\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * stop recognizing for this session.\n\t     * This session will be discarded, when a new [input]start event is fired.\n\t     * When forced, the recognizer cycle is stopped immediately.\n\t     * @param {Boolean} [force]\n\t     */\n\t    stop: function(force) {\n\t        this.session.stopped = force ? FORCED_STOP : STOP;\n\t    },\n\t\n\t    /**\n\t     * run the recognizers!\n\t     * called by the inputHandler function on every movement of the pointers (touches)\n\t     * it walks through all the recognizers and tries to detect the gesture that is being made\n\t     * @param {Object} inputData\n\t     */\n\t    recognize: function(inputData) {\n\t        var session = this.session;\n\t        if (session.stopped) {\n\t            return;\n\t        }\n\t\n\t        // run the touch-action polyfill\n\t        this.touchAction.preventDefaults(inputData);\n\t\n\t        var recognizer;\n\t        var recognizers = this.recognizers;\n\t\n\t        // this holds the recognizer that is being recognized.\n\t        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n\t        // if no recognizer is detecting a thing, it is set to `null`\n\t        var curRecognizer = session.curRecognizer;\n\t\n\t        // reset when the last recognizer is recognized\n\t        // or when we're in a new session\n\t        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n\t            curRecognizer = session.curRecognizer = null;\n\t        }\n\t\n\t        var i = 0;\n\t        while (i < recognizers.length) {\n\t            recognizer = recognizers[i];\n\t\n\t            // find out if we are allowed try to recognize the input for this one.\n\t            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n\t            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n\t            //      that is being recognized.\n\t            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n\t            //      this can be setup with the `recognizeWith()` method on the recognizer.\n\t            if (session.stopped !== FORCED_STOP && ( // 1\n\t                    !curRecognizer || recognizer == curRecognizer || // 2\n\t                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n\t                recognizer.recognize(inputData);\n\t            } else {\n\t                recognizer.reset();\n\t            }\n\t\n\t            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n\t            // current active recognizer. but only if we don't already have an active recognizer\n\t            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n\t                curRecognizer = session.curRecognizer = recognizer;\n\t            }\n\t            i++;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * get a recognizer by its event name.\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Recognizer|Null}\n\t     */\n\t    get: function(recognizer) {\n\t        if (recognizer instanceof Recognizer) {\n\t            return recognizer;\n\t        }\n\t\n\t        var recognizers = this.recognizers;\n\t        for (var i = 0; i < recognizers.length; i++) {\n\t            if (recognizers[i].options.event == recognizer) {\n\t                return recognizers[i];\n\t            }\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * add a recognizer to the manager\n\t     * existing recognizers with the same event name will be removed\n\t     * @param {Recognizer} recognizer\n\t     * @returns {Recognizer|Manager}\n\t     */\n\t    add: function(recognizer) {\n\t        if (invokeArrayArg(recognizer, 'add', this)) {\n\t            return this;\n\t        }\n\t\n\t        // remove existing\n\t        var existing = this.get(recognizer.options.event);\n\t        if (existing) {\n\t            this.remove(existing);\n\t        }\n\t\n\t        this.recognizers.push(recognizer);\n\t        recognizer.manager = this;\n\t\n\t        this.touchAction.update();\n\t        return recognizer;\n\t    },\n\t\n\t    /**\n\t     * remove a recognizer by name or instance\n\t     * @param {Recognizer|String} recognizer\n\t     * @returns {Manager}\n\t     */\n\t    remove: function(recognizer) {\n\t        if (invokeArrayArg(recognizer, 'remove', this)) {\n\t            return this;\n\t        }\n\t\n\t        recognizer = this.get(recognizer);\n\t\n\t        // let's make sure this recognizer exists\n\t        if (recognizer) {\n\t            var recognizers = this.recognizers;\n\t            var index = inArray(recognizers, recognizer);\n\t\n\t            if (index !== -1) {\n\t                recognizers.splice(index, 1);\n\t                this.touchAction.update();\n\t            }\n\t        }\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * bind event\n\t     * @param {String} events\n\t     * @param {Function} handler\n\t     * @returns {EventEmitter} this\n\t     */\n\t    on: function(events, handler) {\n\t        if (events === undefined) {\n\t            return;\n\t        }\n\t        if (handler === undefined) {\n\t            return;\n\t        }\n\t\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            handlers[event] = handlers[event] || [];\n\t            handlers[event].push(handler);\n\t        });\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * unbind event, leave emit blank to remove all handlers\n\t     * @param {String} events\n\t     * @param {Function} [handler]\n\t     * @returns {EventEmitter} this\n\t     */\n\t    off: function(events, handler) {\n\t        if (events === undefined) {\n\t            return;\n\t        }\n\t\n\t        var handlers = this.handlers;\n\t        each(splitStr(events), function(event) {\n\t            if (!handler) {\n\t                delete handlers[event];\n\t            } else {\n\t                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n\t            }\n\t        });\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * emit event to the listeners\n\t     * @param {String} event\n\t     * @param {Object} data\n\t     */\n\t    emit: function(event, data) {\n\t        // we also want to trigger dom events\n\t        if (this.options.domEvents) {\n\t            triggerDomEvent(event, data);\n\t        }\n\t\n\t        // no handlers, so skip it all\n\t        var handlers = this.handlers[event] && this.handlers[event].slice();\n\t        if (!handlers || !handlers.length) {\n\t            return;\n\t        }\n\t\n\t        data.type = event;\n\t        data.preventDefault = function() {\n\t            data.srcEvent.preventDefault();\n\t        };\n\t\n\t        var i = 0;\n\t        while (i < handlers.length) {\n\t            handlers[i](data);\n\t            i++;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * destroy the manager and unbinds all events\n\t     * it doesn't unbind dom events, that is the user own responsibility\n\t     */\n\t    destroy: function() {\n\t        this.element && toggleCssProps(this, false);\n\t\n\t        this.handlers = {};\n\t        this.session = {};\n\t        this.input.destroy();\n\t        this.element = null;\n\t    }\n\t};\n\t\n\t/**\n\t * add/remove the css properties as defined in manager.options.cssProps\n\t * @param {Manager} manager\n\t * @param {Boolean} add\n\t */\n\tfunction toggleCssProps(manager, add) {\n\t    var element = manager.element;\n\t    if (!element.style) {\n\t        return;\n\t    }\n\t    var prop;\n\t    each(manager.options.cssProps, function(value, name) {\n\t        prop = prefixed(element.style, name);\n\t        if (add) {\n\t            manager.oldCssProps[prop] = element.style[prop];\n\t            element.style[prop] = value;\n\t        } else {\n\t            element.style[prop] = manager.oldCssProps[prop] || '';\n\t        }\n\t    });\n\t    if (!add) {\n\t        manager.oldCssProps = {};\n\t    }\n\t}\n\t\n\t/**\n\t * trigger dom event\n\t * @param {String} event\n\t * @param {Object} data\n\t */\n\tfunction triggerDomEvent(event, data) {\n\t    var gestureEvent = document.createEvent('Event');\n\t    gestureEvent.initEvent(event, true, true);\n\t    gestureEvent.gesture = data;\n\t    data.target.dispatchEvent(gestureEvent);\n\t}\n\t\n\tassign(Hammer, {\n\t    INPUT_START: INPUT_START,\n\t    INPUT_MOVE: INPUT_MOVE,\n\t    INPUT_END: INPUT_END,\n\t    INPUT_CANCEL: INPUT_CANCEL,\n\t\n\t    STATE_POSSIBLE: STATE_POSSIBLE,\n\t    STATE_BEGAN: STATE_BEGAN,\n\t    STATE_CHANGED: STATE_CHANGED,\n\t    STATE_ENDED: STATE_ENDED,\n\t    STATE_RECOGNIZED: STATE_RECOGNIZED,\n\t    STATE_CANCELLED: STATE_CANCELLED,\n\t    STATE_FAILED: STATE_FAILED,\n\t\n\t    DIRECTION_NONE: DIRECTION_NONE,\n\t    DIRECTION_LEFT: DIRECTION_LEFT,\n\t    DIRECTION_RIGHT: DIRECTION_RIGHT,\n\t    DIRECTION_UP: DIRECTION_UP,\n\t    DIRECTION_DOWN: DIRECTION_DOWN,\n\t    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n\t    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n\t    DIRECTION_ALL: DIRECTION_ALL,\n\t\n\t    Manager: Manager,\n\t    Input: Input,\n\t    TouchAction: TouchAction,\n\t\n\t    TouchInput: TouchInput,\n\t    MouseInput: MouseInput,\n\t    PointerEventInput: PointerEventInput,\n\t    TouchMouseInput: TouchMouseInput,\n\t    SingleTouchInput: SingleTouchInput,\n\t\n\t    Recognizer: Recognizer,\n\t    AttrRecognizer: AttrRecognizer,\n\t    Tap: TapRecognizer,\n\t    Pan: PanRecognizer,\n\t    Swipe: SwipeRecognizer,\n\t    Pinch: PinchRecognizer,\n\t    Rotate: RotateRecognizer,\n\t    Press: PressRecognizer,\n\t\n\t    on: addEventListeners,\n\t    off: removeEventListeners,\n\t    each: each,\n\t    merge: merge,\n\t    extend: extend,\n\t    assign: assign,\n\t    inherit: inherit,\n\t    bindFn: bindFn,\n\t    prefixed: prefixed\n\t});\n\t\n\t// this prevents errors when Hammer is loaded in the presence of an AMD\n\t//  style loader but by script tag, not by the loader.\n\tvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\n\tfreeGlobal.Hammer = Hammer;\n\t\n\tif (true) {\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t        return Hammer;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t    module.exports = Hammer;\n\t} else {\n\t    window[exportName] = Hammer;\n\t}\n\t\n\t})(window, document, 'Hammer');\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_51__;\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar LayerGroup = (function (_Layer) {\n\t  _inherits(LayerGroup, _Layer);\n\t\n\t  function LayerGroup(options) {\n\t    _classCallCheck(this, LayerGroup);\n\t\n\t    var defaults = {\n\t      output: false\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(LayerGroup.prototype), 'constructor', this).call(this, _options);\n\t\n\t    this._layers = [];\n\t  }\n\t\n\t  _createClass(LayerGroup, [{\n\t    key: 'addLayer',\n\t    value: function addLayer(layer) {\n\t      this._layers.push(layer);\n\t      return this._world.addLayer(layer);\n\t    }\n\t  }, {\n\t    key: 'removeLayer',\n\t    value: function removeLayer(layer) {\n\t      var layerIndex = this._layers.indexOf(layer);\n\t\n\t      if (layerIndex > -1) {\n\t        // Remove from this._layers\n\t        this._layers.splice(layerIndex, 1);\n\t      };\n\t\n\t      this._world.removeLayer(layer);\n\t    }\n\t  }, {\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      return Promise.resolve(this);\n\t    }\n\t\n\t    // Destroy the layers and remove them from the scene and memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // TODO: Sometimes this is already null, find out why\n\t      if (this._layers) {\n\t        for (var i = 0; i < this._layers.length; i++) {\n\t          this._layers[i].destroy();\n\t        }\n\t\n\t        this._layers = null;\n\t      }\n\t\n\t      _get(Object.getPrototypeOf(LayerGroup.prototype), 'destroy', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return LayerGroup;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = LayerGroup;\n\t\n\tvar noNew = function noNew(options) {\n\t  return new LayerGroup(options);\n\t};\n\t\n\texports.layerGroup = noNew;\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _TileLayer2 = __webpack_require__(54);\n\t\n\tvar _TileLayer3 = _interopRequireDefault(_TileLayer2);\n\t\n\tvar _ImageTile = __webpack_require__(67);\n\t\n\tvar _ImageTile2 = _interopRequireDefault(_ImageTile);\n\t\n\tvar _ImageTileLayerBaseMaterial = __webpack_require__(70);\n\t\n\tvar _ImageTileLayerBaseMaterial2 = _interopRequireDefault(_ImageTileLayerBaseMaterial);\n\t\n\tvar _lodashThrottle = __webpack_require__(20);\n\t\n\tvar _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// DONE: Find a way to avoid the flashing caused by the gap between old tiles\n\t// being removed and the new tiles being ready for display\n\t//\n\t// DONE: Simplest first step for MVP would be to give each tile mesh the colour\n\t// of the basemap ground so it blends in a little more, or have a huge ground\n\t// plane underneath all the tiles that shows through between tile updates.\n\t//\n\t// Could keep the old tiles around until the new ones are ready, though they'd\n\t// probably need to be layered in a way so the old tiles don't overlap new ones,\n\t// which is similar to how Leaflet approaches this (it has 2 layers)\n\t//\n\t// Could keep the tile from the previous quadtree level visible until all 4\n\t// tiles at the new / current level have finished loading and are displayed.\n\t// Perhaps by keeping a map of tiles by quadcode and a boolean for each of the\n\t// child quadcodes showing whether they are loaded and in view. If all true then\n\t// remove the parent tile, otherwise keep it on a lower layer.\n\t\n\t// TODO: Load and display a base layer separate to the LOD grid that is at a low\n\t// resolution – used as a backup / background to fill in empty areas / distance\n\t\n\t// DONE: Fix the issue where some tiles just don't load, or at least the texture\n\t// never shows up – tends to happen if you quickly zoom in / out past it while\n\t// it's still loading, leaving a blank space\n\t\n\t// TODO: Optimise the request of many image tiles – look at how Leaflet and\n\t// OpenWebGlobe approach this (eg. batching, queues, etc)\n\t\n\t// TODO: Cancel pending tile requests if they get removed from view before they\n\t// reach a ready state (eg. cancel image requests, etc). Need to ensure that the\n\t// images are re-requested when the tile is next in scene (even if from cache)\n\t\n\t// TODO: Consider not performing an LOD calculation on every frame, instead only\n\t// on move end so panning, orbiting and zooming stays smooth. Otherwise it's\n\t// possible for performance to tank if you pan, orbit or zoom rapidly while all\n\t// the LOD calculations are being made and new tiles requested.\n\t//\n\t// Pending tiles should continue to be requested and output to the scene on each\n\t// frame, but no new LOD calculations should be made.\n\t\n\t// This tile layer both updates the quadtree and outputs tiles on every frame\n\t// (throttled to some amount)\n\t//\n\t// This is because the computational complexity of image tiles is generally low\n\t// and so there isn't much jank when running these calculations and outputs in\n\t// realtime\n\t//\n\t// The benefit to doing this is that the underlying map layer continues to\n\t// refresh and update during movement, which is an arguably better experience\n\t\n\tvar ImageTileLayer = (function (_TileLayer) {\n\t  _inherits(ImageTileLayer, _TileLayer);\n\t\n\t  function ImageTileLayer(path, options) {\n\t    _classCallCheck(this, ImageTileLayer);\n\t\n\t    var defaults = {\n\t      distance: 300000\n\t    };\n\t\n\t    options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(ImageTileLayer.prototype), 'constructor', this).call(this, options);\n\t\n\t    this._path = path;\n\t  }\n\t\n\t  _createClass(ImageTileLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _get(Object.getPrototypeOf(ImageTileLayer.prototype), '_onAdd', _this).call(_this, world).then(function () {\n\t          // TODO: Removed because it causes depth buffer intersection issues\n\t          // with layer on top for some reason. Need to work out why and fix.\n\t          //\n\t          // Add base layer\n\t          // var geom = new THREE.PlaneBufferGeometry(2000000, 2000000, 1);\n\t\n\t          // var baseMaterial;\n\t          // if (this._world._environment._skybox) {\n\t          //   baseMaterial = ImageTileLayerBaseMaterial('#f5f5f3', this._world._environment._skybox.getRenderTarget());\n\t          // } else {\n\t          //   baseMaterial = ImageTileLayerBaseMaterial('#f5f5f3');\n\t          // }\n\t\n\t          // var mesh = new THREE.Mesh(geom, baseMaterial);\n\t\n\t          // // Setting this causes a depth-buffer intersection issue on the\n\t          // // all-the-things example\n\t          // // mesh.renderOrder = -1;\n\t\n\t          // mesh.rotation.x = -90 * Math.PI / 180;\n\t\n\t          // // TODO: It might be overkill to receive a shadow on the base layer as it's\n\t          // // rarely seen (good to have if performance difference is negligible)\n\t          // mesh.receiveShadow = true;\n\t\n\t          // this._baseLayer = mesh;\n\t          // this.add(mesh);\n\t\n\t          // Trigger initial quadtree calculation on the next frame\n\t          //\n\t          // TODO: This is a hack to ensure the camera is all set up - a better\n\t          // solution should be found\n\t          setTimeout(function () {\n\t            _this._calculateLOD();\n\t            _this._initEvents();\n\t            resolve(_this);\n\t          }, 0);\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: '_initEvents',\n\t    value: function _initEvents() {\n\t      // Run LOD calculations based on render calls\n\t      //\n\t      // Throttled to 1 LOD calculation per 100ms\n\t      this._throttledWorldUpdate = (0, _lodashThrottle2['default'])(this._onWorldUpdate, 100);\n\t\n\t      this._world.on('preUpdate', this._throttledWorldUpdate, this);\n\t      // this._world.on('move', this._onWorldMove, this);\n\t    }\n\t  }, {\n\t    key: '_onWorldUpdate',\n\t    value: function _onWorldUpdate() {\n\t      this._calculateLOD();\n\t      this._outputTiles();\n\t    }\n\t  }, {\n\t    key: '_onWorldMove',\n\t    value: function _onWorldMove(latlon, point) {\n\t      // this._moveBaseLayer(point);\n\t    }\n\t  }, {\n\t    key: '_moveBaseLayer',\n\t    value: function _moveBaseLayer(point) {\n\t      this._baseLayer.position.x = point.x;\n\t      this._baseLayer.position.z = point.y;\n\t    }\n\t  }, {\n\t    key: '_createTile',\n\t    value: function _createTile(quadcode, layer) {\n\t      return new _ImageTile2['default'](quadcode, this._path, layer);\n\t    }\n\t\n\t    // Destroys the layer and removes it from the scene and memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this._world.off('preUpdate', this._throttledWorldUpdate);\n\t      this._world.off('move', this._onWorldMove);\n\t\n\t      this._throttledWorldUpdate = null;\n\t\n\t      // Dispose of mesh and materials\n\t      // this._baseLayer.geometry.dispose();\n\t      // this._baseLayer.geometry = null;\n\t\n\t      // if (this._baseLayer.material.map) {\n\t      //   this._baseLayer.material.map.dispose();\n\t      //   this._baseLayer.material.map = null;\n\t      // }\n\t\n\t      // this._baseLayer.material.dispose();\n\t      // this._baseLayer.material = null;\n\t\n\t      // this._baseLayer = null;\n\t\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(ImageTileLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return ImageTileLayer;\n\t})(_TileLayer3['default']);\n\t\n\texports['default'] = ImageTileLayer;\n\t\n\tvar noNew = function noNew(path, options) {\n\t  return new ImageTileLayer(path, options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.imageTileLayer = noNew;\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _TileCache = __webpack_require__(55);\n\t\n\tvar _TileCache2 = _interopRequireDefault(_TileCache);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// TODO: Consider removing picking from TileLayer instances as there aren't\n\t// (m)any situations where it would be practical\n\t//\n\t// For example, how would you even know what picking IDs to listen to and what\n\t// to do with them?\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// TODO: Consider keeping a single TileLayer / LOD instance running by default\n\t// that keeps a standard LOD grid for other layers to utilise, rather than\n\t// having to create their own, unique LOD grid and duplicate calculations when\n\t// they're going to use the same grid setup anyway\n\t//\n\t// It still makes sense to be able to have a custom LOD grid for some layers as\n\t// they may want to customise things, maybe not even using a quadtree at all!\n\t//\n\t// Perhaps it makes sense to split out the quadtree stuff into a singleton and\n\t// pass in the necessary parameters each time for the calculation step.\n\t//\n\t// Either way, it seems silly to force layers to have to create a new LOD grid\n\t// each time and create extra, duplicated processing every frame.\n\t\n\t// TODO: Allow passing in of options to define min/max LOD and a distance to use\n\t// for culling tiles beyond that distance.\n\t\n\t// DONE: Prevent tiles from being loaded if they are further than a certain\n\t// distance from the camera and are unlikely to be seen anyway\n\t\n\t// TODO: Avoid performing LOD calculation when it isn't required. For example,\n\t// when nothing has changed since the last frame and there are no tiles to be\n\t// loaded or in need of rendering\n\t\n\t// TODO: Only remove tiles from the layer that aren't to be rendered in the\n\t// current frame – it seems excessive to remove all tiles and re-add them on\n\t// every single frame, even if it's just array manipulation\n\t\n\t// TODO: Fix LOD calculation so min and max LOD can be changed without causing\n\t// problems (eg. making min above 5 causes all sorts of issues)\n\t\n\t// TODO: Reuse THREE objects where possible instead of creating new instances\n\t// on every LOD calculation\n\t\n\t// TODO: Consider not using THREE or LatLon / Point objects in LOD calculations\n\t// to avoid creating unnecessary memory for garbage collection\n\t\n\t// TODO: Prioritise loading of tiles at highest level in the quadtree (those\n\t// closest to the camera) so visual inconsistancies during loading are minimised\n\t\n\tvar TileLayer = (function (_Layer) {\n\t  _inherits(TileLayer, _Layer);\n\t\n\t  function TileLayer(options) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, TileLayer);\n\t\n\t    var defaults = {\n\t      picking: false,\n\t      maxCache: 1000,\n\t      maxLOD: 18\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(TileLayer.prototype), 'constructor', this).call(this, _options);\n\t\n\t    this._destroy = false;\n\t\n\t    this._tileCache = new _TileCache2['default'](this._options.maxCache, function (tile) {\n\t      _this._destroyTile(tile);\n\t    });\n\t\n\t    // List of tiles from the previous LOD calculation\n\t    this._tileList = [];\n\t\n\t    // TODO: Work out why changing the minLOD causes loads of issues\n\t    this._minLOD = 3;\n\t    this._maxLOD = this._options.maxLOD;\n\t\n\t    this._frustum = new _three2['default'].Frustum();\n\t    this._tiles = new _three2['default'].Object3D();\n\t    this._tilesPicking = new _three2['default'].Object3D();\n\t  }\n\t\n\t  _createClass(TileLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      this.addToPicking(this._tilesPicking);\n\t      this.add(this._tiles);\n\t\n\t      return Promise.resolve();\n\t    }\n\t  }, {\n\t    key: '_updateFrustum',\n\t    value: function _updateFrustum() {\n\t      var camera = this._world.getCamera();\n\t      var projScreenMatrix = new _three2['default'].Matrix4();\n\t      projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\t\n\t      this._frustum.setFromMatrix(camera.projectionMatrix);\n\t      this._frustum.setFromMatrix(new _three2['default'].Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));\n\t    }\n\t  }, {\n\t    key: '_tileInFrustum',\n\t    value: function _tileInFrustum(tile) {\n\t      var bounds = tile.getBounds();\n\t      return this._frustum.intersectsBox(new _three2['default'].Box3(new _three2['default'].Vector3(bounds[0], 0, bounds[3]), new _three2['default'].Vector3(bounds[2], 0, bounds[1])));\n\t    }\n\t\n\t    // Update and output tiles from the previous LOD checklist\n\t  }, {\n\t    key: '_outputTiles',\n\t    value: function _outputTiles() {\n\t      var _this2 = this;\n\t\n\t      if (!this._tiles || this._destroy) {\n\t        return;\n\t      }\n\t\n\t      // Remove all tiles from layer\n\t      this._removeTiles();\n\t\n\t      // Add / re-add tiles\n\t      this._tileList.forEach(function (tile) {\n\t        // Are the mesh and texture ready?\n\t        //\n\t        // If yes, continue\n\t        // If no, skip\n\t        if (!tile.isReady()) {\n\t          return;\n\t        }\n\t\n\t        // Add tile to layer (and to scene) if not already there\n\t        _this2._tiles.add(tile.getMesh());\n\t\n\t        if (tile.getPickingMesh()) {\n\t          _this2._tilesPicking.add(tile.getPickingMesh());\n\t        }\n\t      });\n\t\n\t      // Emit event notifying of new tiles\n\t      this.emit('tilesList', this._tileList.map(function (tile) {\n\t        return tile;\n\t      }));\n\t    }\n\t\n\t    // Works out tiles in the view frustum and stores them in an array\n\t    //\n\t    // Does not output the tiles, deferring this to _outputTiles()\n\t  }, {\n\t    key: '_calculateLOD',\n\t    value: function _calculateLOD() {\n\t      var _this3 = this;\n\t\n\t      if (this._stop || !this._world || this._destroy) {\n\t        return;\n\t      }\n\t\n\t      // var start = (performance || Date).now();\n\t\n\t      var camera = this._world.getCamera();\n\t\n\t      // 1. Update and retrieve camera frustum\n\t      this._updateFrustum(this._frustum, camera);\n\t\n\t      // 2. Add the four root items of the quadtree to a check list\n\t      var checkList = this._checklist;\n\t      checkList = [];\n\t      checkList.push(this._requestTile('0', this));\n\t      checkList.push(this._requestTile('1', this));\n\t      checkList.push(this._requestTile('2', this));\n\t      checkList.push(this._requestTile('3', this));\n\t\n\t      // 3. Call Divide, passing in the check list\n\t      this._divide(checkList);\n\t\n\t      // // 4. Remove all tiles from layer\n\t      //\n\t      // Moved to _outputTiles() for now\n\t      // this._removeTiles();\n\t\n\t      // Order tile-list by zoom so nearest tiles are requested first\n\t      checkList.sort(function (a, b) {\n\t        return a._quadcode.length < b._quadcode.length;\n\t      });\n\t\n\t      // 5. Filter the tiles remaining in the check list\n\t      var tileList = checkList.filter(function (tile, index) {\n\t        // Skip tile if it's not in the current view frustum\n\t        if (!_this3._tileInFrustum(tile)) {\n\t          return false;\n\t        }\n\t\n\t        if (_this3._options.distance && _this3._options.distance > 0) {\n\t          // TODO: Can probably speed this up\n\t          var center = tile.getCenter();\n\t          var dist = new _three2['default'].Vector3(center[0], 0, center[1]).sub(camera.position).length();\n\t\n\t          // Manual distance limit to cut down on tiles so far away\n\t          if (dist > _this3._options.distance) {\n\t            return false;\n\t          }\n\t        }\n\t\n\t        // Does the tile have a mesh?\n\t        //\n\t        // If yes, continue\n\t        // If no, generate tile mesh, request texture and skip\n\t        if (!tile.getMesh() || tile.isAborted()) {\n\t          tile.requestTileAsync();\n\t        }\n\t\n\t        return true;\n\t\n\t        // Are the mesh and texture ready?\n\t        //\n\t        // If yes, continue\n\t        // If no, skip\n\t        // if (!tile.isReady()) {\n\t        //   return;\n\t        // }\n\t        //\n\t        // // Add tile to layer (and to scene)\n\t        // this._tiles.add(tile.getMesh());\n\t      });\n\t\n\t      // Get list of tiles that were in the previous update but not the\n\t      // current one (for aborting requests, etc)\n\t      var missingTiles = this._tileList.filter(function (item) {\n\t        return tileList.indexOf(item) < 0;\n\t      });\n\t\n\t      // Abort tiles that are no longer in view\n\t      missingTiles.forEach(function (tile) {\n\t        return tile._abortRequest();\n\t      });\n\t\n\t      this._tileList = tileList;\n\t\n\t      // console.log((performance || Date).now() - start);\n\t    }\n\t  }, {\n\t    key: '_divide',\n\t    value: function _divide(checkList) {\n\t      var count = 0;\n\t      var currentItem;\n\t      var quadcode;\n\t\n\t      // 1. Loop until count equals check list length\n\t      while (count != checkList.length) {\n\t        currentItem = checkList[count];\n\t        quadcode = currentItem.getQuadcode();\n\t\n\t        // 2. Increase count and continue loop if quadcode equals max LOD / zoom\n\t        if (currentItem.length === this._maxLOD) {\n\t          count++;\n\t          continue;\n\t        }\n\t\n\t        // 3. Else, calculate screen-space error metric for quadcode\n\t        if (this._screenSpaceError(currentItem)) {\n\t          // 4. If error is sufficient...\n\t\n\t          // 4a. Remove parent item from the check list\n\t          checkList.splice(count, 1);\n\t\n\t          // 4b. Add 4 child items to the check list\n\t          checkList.push(this._requestTile(quadcode + '0', this));\n\t          checkList.push(this._requestTile(quadcode + '1', this));\n\t          checkList.push(this._requestTile(quadcode + '2', this));\n\t          checkList.push(this._requestTile(quadcode + '3', this));\n\t\n\t          // 4d. Continue the loop without increasing count\n\t          continue;\n\t        } else {\n\t          // 5. Else, increase count and continue loop\n\t          count++;\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: '_screenSpaceError',\n\t    value: function _screenSpaceError(tile) {\n\t      var minDepth = this._minLOD;\n\t      var maxDepth = this._maxLOD;\n\t\n\t      var quadcode = tile.getQuadcode();\n\t\n\t      var camera = this._world.getCamera();\n\t\n\t      // Tweak this value to refine specific point that each quad is subdivided\n\t      //\n\t      // It's used to multiple the dimensions of the tile sides before\n\t      // comparing against the tile distance from camera\n\t      var quality = 3.0;\n\t\n\t      // 1. Return false if quadcode length equals maxDepth (stop dividing)\n\t      if (quadcode.length === maxDepth) {\n\t        return false;\n\t      }\n\t\n\t      // 2. Return true if quadcode length is less than minDepth\n\t      if (quadcode.length < minDepth) {\n\t        return true;\n\t      }\n\t\n\t      // 3. Return false if quadcode bounds are not in view frustum\n\t      if (!this._tileInFrustum(tile)) {\n\t        return false;\n\t      }\n\t\n\t      var center = tile.getCenter();\n\t\n\t      // 4. Calculate screen-space error metric\n\t      // TODO: Use closest distance to one of the 4 tile corners\n\t      var dist = new _three2['default'].Vector3(center[0], 0, center[1]).sub(camera.position).length();\n\t\n\t      var error = quality * tile.getSide() / dist;\n\t\n\t      // 5. Return true if error is greater than 1.0, else return false\n\t      return error > 1.0;\n\t    }\n\t  }, {\n\t    key: '_removeTiles',\n\t    value: function _removeTiles() {\n\t      if (!this._tiles || !this._tiles.children) {\n\t        return;\n\t      }\n\t\n\t      for (var i = this._tiles.children.length - 1; i >= 0; i--) {\n\t        this._tiles.remove(this._tiles.children[i]);\n\t      }\n\t\n\t      if (!this._tilesPicking || !this._tilesPicking.children) {\n\t        return;\n\t      }\n\t\n\t      for (var i = this._tilesPicking.children.length - 1; i >= 0; i--) {\n\t        this._tilesPicking.remove(this._tilesPicking.children[i]);\n\t      }\n\t    }\n\t\n\t    // Return a new tile instance\n\t  }, {\n\t    key: '_createTile',\n\t    value: function _createTile(quadcode, layer) {}\n\t\n\t    // Get a cached tile or request a new one if not in cache\n\t  }, {\n\t    key: '_requestTile',\n\t    value: function _requestTile(quadcode, layer) {\n\t      var tile = this._tileCache.getTile(quadcode);\n\t\n\t      if (!tile) {\n\t        // Set up a brand new tile\n\t        tile = this._createTile(quadcode, layer);\n\t\n\t        // Add tile to cache, though it won't be ready yet as the data is being\n\t        // requested from various places asynchronously\n\t        this._tileCache.setTile(quadcode, tile);\n\t      }\n\t\n\t      return tile;\n\t    }\n\t  }, {\n\t    key: '_destroyTile',\n\t    value: function _destroyTile(tile) {\n\t      // Remove tile from scene\n\t      this._tiles.remove(tile.getMesh());\n\t\n\t      // Delete any references to the tile within this component\n\t\n\t      // Call destory on tile instance\n\t      tile.destroy();\n\t    }\n\t  }, {\n\t    key: 'show',\n\t    value: function show() {\n\t      this._stop = false;\n\t\n\t      if (this._tilesPicking) {\n\t        this._tilesPicking.visible = true;\n\t      }\n\t\n\t      this._calculateLOD();\n\t      _get(Object.getPrototypeOf(TileLayer.prototype), 'show', this).call(this);\n\t    }\n\t  }, {\n\t    key: 'hide',\n\t    value: function hide() {\n\t      this._stop = true;\n\t\n\t      if (this._tilesPicking) {\n\t        this._tilesPicking.visible = false;\n\t      }\n\t\n\t      _get(Object.getPrototypeOf(TileLayer.prototype), 'hide', this).call(this);\n\t    }\n\t\n\t    // Destroys the layer and removes it from the scene and memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this._destroy = true;\n\t\n\t      if (this._tiles.children) {\n\t        // Remove all tiles\n\t        for (var i = this._tiles.children.length - 1; i >= 0; i--) {\n\t          this._tiles.remove(this._tiles.children[i]);\n\t        }\n\t      }\n\t\n\t      // Remove tile from picking scene\n\t      this.removeFromPicking(this._tilesPicking);\n\t\n\t      if (this._tilesPicking.children) {\n\t        // Remove all tiles\n\t        for (var i = this._tilesPicking.children.length - 1; i >= 0; i--) {\n\t          this._tilesPicking.remove(this._tilesPicking.children[i]);\n\t        }\n\t      }\n\t\n\t      this._tileCache.destroy();\n\t      this._tileCache = null;\n\t\n\t      this._tiles = null;\n\t      this._tilesPicking = null;\n\t      this._frustum = null;\n\t\n\t      _get(Object.getPrototypeOf(TileLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return TileLayer;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = TileLayer;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _lruCache = __webpack_require__(56);\n\t\n\tvar _lruCache2 = _interopRequireDefault(_lruCache);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// This process is based on a similar approach taken by OpenWebGlobe\n\t// See: https://github.com/OpenWebGlobe/WebViewer/blob/master/source/core/globecache.js\n\t\n\tvar TileCache = (function () {\n\t  function TileCache(cacheLimit, onDestroyTile) {\n\t    _classCallCheck(this, TileCache);\n\t\n\t    this._cache = (0, _lruCache2['default'])({\n\t      max: cacheLimit,\n\t      dispose: function dispose(key, tile) {\n\t        onDestroyTile(tile);\n\t      }\n\t    });\n\t  }\n\t\n\t  // Returns true if all specified tile providers are ready to be used\n\t  // Otherwise, returns false\n\t\n\t  _createClass(TileCache, [{\n\t    key: 'isReady',\n\t    value: function isReady() {\n\t      return false;\n\t    }\n\t\n\t    // Get a cached tile without requesting a new one\n\t  }, {\n\t    key: 'getTile',\n\t    value: function getTile(quadcode) {\n\t      return this._cache.get(quadcode);\n\t    }\n\t\n\t    // Add tile to cache\n\t  }, {\n\t    key: 'setTile',\n\t    value: function setTile(quadcode, tile) {\n\t      this._cache.set(quadcode, tile);\n\t    }\n\t\n\t    // Destroy the cache and remove it from memory\n\t    //\n\t    // TODO: Call destroy method on items in cache\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this._cache.reset();\n\t      this._cache = null;\n\t    }\n\t  }]);\n\t\n\t  return TileCache;\n\t})();\n\t\n\texports['default'] = TileCache;\n\t\n\tvar noNew = function noNew(cacheLimit, onDestroyTile) {\n\t  return new TileCache(cacheLimit, onDestroyTile);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.tileCache = noNew;\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict'\n\t\n\tmodule.exports = LRUCache\n\t\n\t// This will be a proper iterable 'Map' in engines that support it,\n\t// or a fakey-fake PseudoMap in older versions.\n\tvar Map = __webpack_require__(58)\n\tvar util = __webpack_require__(60)\n\t\n\t// A linked list to keep track of recently-used-ness\n\tvar Yallist = __webpack_require__(66)\n\t\n\t// use symbols if possible, otherwise just _props\n\tvar hasSymbol = typeof Symbol === 'function' && process.env._nodeLRUCacheForceNoSymbol !== '1'\n\tvar makeSymbol\n\tif (hasSymbol) {\n\t  makeSymbol = function (key) {\n\t    return Symbol(key)\n\t  }\n\t} else {\n\t  makeSymbol = function (key) {\n\t    return '_' + key\n\t  }\n\t}\n\t\n\tvar MAX = makeSymbol('max')\n\tvar LENGTH = makeSymbol('length')\n\tvar LENGTH_CALCULATOR = makeSymbol('lengthCalculator')\n\tvar ALLOW_STALE = makeSymbol('allowStale')\n\tvar MAX_AGE = makeSymbol('maxAge')\n\tvar DISPOSE = makeSymbol('dispose')\n\tvar NO_DISPOSE_ON_SET = makeSymbol('noDisposeOnSet')\n\tvar LRU_LIST = makeSymbol('lruList')\n\tvar CACHE = makeSymbol('cache')\n\t\n\tfunction naiveLength () { return 1 }\n\t\n\t// lruList is a yallist where the head is the youngest\n\t// item, and the tail is the oldest.  the list contains the Hit\n\t// objects as the entries.\n\t// Each Hit object has a reference to its Yallist.Node.  This\n\t// never changes.\n\t//\n\t// cache is a Map (or PseudoMap) that matches the keys to\n\t// the Yallist.Node object.\n\tfunction LRUCache (options) {\n\t  if (!(this instanceof LRUCache)) {\n\t    return new LRUCache(options)\n\t  }\n\t\n\t  if (typeof options === 'number') {\n\t    options = { max: options }\n\t  }\n\t\n\t  if (!options) {\n\t    options = {}\n\t  }\n\t\n\t  var max = this[MAX] = options.max\n\t  // Kind of weird to have a default max of Infinity, but oh well.\n\t  if (!max ||\n\t      !(typeof max === 'number') ||\n\t      max <= 0) {\n\t    this[MAX] = Infinity\n\t  }\n\t\n\t  var lc = options.length || naiveLength\n\t  if (typeof lc !== 'function') {\n\t    lc = naiveLength\n\t  }\n\t  this[LENGTH_CALCULATOR] = lc\n\t\n\t  this[ALLOW_STALE] = options.stale || false\n\t  this[MAX_AGE] = options.maxAge || 0\n\t  this[DISPOSE] = options.dispose\n\t  this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n\t  this.reset()\n\t}\n\t\n\t// resize the cache when the max changes.\n\tObject.defineProperty(LRUCache.prototype, 'max', {\n\t  set: function (mL) {\n\t    if (!mL || !(typeof mL === 'number') || mL <= 0) {\n\t      mL = Infinity\n\t    }\n\t    this[MAX] = mL\n\t    trim(this)\n\t  },\n\t  get: function () {\n\t    return this[MAX]\n\t  },\n\t  enumerable: true\n\t})\n\t\n\tObject.defineProperty(LRUCache.prototype, 'allowStale', {\n\t  set: function (allowStale) {\n\t    this[ALLOW_STALE] = !!allowStale\n\t  },\n\t  get: function () {\n\t    return this[ALLOW_STALE]\n\t  },\n\t  enumerable: true\n\t})\n\t\n\tObject.defineProperty(LRUCache.prototype, 'maxAge', {\n\t  set: function (mA) {\n\t    if (!mA || !(typeof mA === 'number') || mA < 0) {\n\t      mA = 0\n\t    }\n\t    this[MAX_AGE] = mA\n\t    trim(this)\n\t  },\n\t  get: function () {\n\t    return this[MAX_AGE]\n\t  },\n\t  enumerable: true\n\t})\n\t\n\t// resize the cache when the lengthCalculator changes.\n\tObject.defineProperty(LRUCache.prototype, 'lengthCalculator', {\n\t  set: function (lC) {\n\t    if (typeof lC !== 'function') {\n\t      lC = naiveLength\n\t    }\n\t    if (lC !== this[LENGTH_CALCULATOR]) {\n\t      this[LENGTH_CALCULATOR] = lC\n\t      this[LENGTH] = 0\n\t      this[LRU_LIST].forEach(function (hit) {\n\t        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n\t        this[LENGTH] += hit.length\n\t      }, this)\n\t    }\n\t    trim(this)\n\t  },\n\t  get: function () { return this[LENGTH_CALCULATOR] },\n\t  enumerable: true\n\t})\n\t\n\tObject.defineProperty(LRUCache.prototype, 'length', {\n\t  get: function () { return this[LENGTH] },\n\t  enumerable: true\n\t})\n\t\n\tObject.defineProperty(LRUCache.prototype, 'itemCount', {\n\t  get: function () { return this[LRU_LIST].length },\n\t  enumerable: true\n\t})\n\t\n\tLRUCache.prototype.rforEach = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  for (var walker = this[LRU_LIST].tail; walker !== null;) {\n\t    var prev = walker.prev\n\t    forEachStep(this, fn, walker, thisp)\n\t    walker = prev\n\t  }\n\t}\n\t\n\tfunction forEachStep (self, fn, node, thisp) {\n\t  var hit = node.value\n\t  if (isStale(self, hit)) {\n\t    del(self, node)\n\t    if (!self[ALLOW_STALE]) {\n\t      hit = undefined\n\t    }\n\t  }\n\t  if (hit) {\n\t    fn.call(thisp, hit.value, hit.key, self)\n\t  }\n\t}\n\t\n\tLRUCache.prototype.forEach = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  for (var walker = this[LRU_LIST].head; walker !== null;) {\n\t    var next = walker.next\n\t    forEachStep(this, fn, walker, thisp)\n\t    walker = next\n\t  }\n\t}\n\t\n\tLRUCache.prototype.keys = function () {\n\t  return this[LRU_LIST].toArray().map(function (k) {\n\t    return k.key\n\t  }, this)\n\t}\n\t\n\tLRUCache.prototype.values = function () {\n\t  return this[LRU_LIST].toArray().map(function (k) {\n\t    return k.value\n\t  }, this)\n\t}\n\t\n\tLRUCache.prototype.reset = function () {\n\t  if (this[DISPOSE] &&\n\t      this[LRU_LIST] &&\n\t      this[LRU_LIST].length) {\n\t    this[LRU_LIST].forEach(function (hit) {\n\t      this[DISPOSE](hit.key, hit.value)\n\t    }, this)\n\t  }\n\t\n\t  this[CACHE] = new Map() // hash of items by key\n\t  this[LRU_LIST] = new Yallist() // list of items in order of use recency\n\t  this[LENGTH] = 0 // length of items in the list\n\t}\n\t\n\tLRUCache.prototype.dump = function () {\n\t  return this[LRU_LIST].map(function (hit) {\n\t    if (!isStale(this, hit)) {\n\t      return {\n\t        k: hit.key,\n\t        v: hit.value,\n\t        e: hit.now + (hit.maxAge || 0)\n\t      }\n\t    }\n\t  }, this).toArray().filter(function (h) {\n\t    return h\n\t  })\n\t}\n\t\n\tLRUCache.prototype.dumpLru = function () {\n\t  return this[LRU_LIST]\n\t}\n\t\n\t/* istanbul ignore next */\n\tLRUCache.prototype.inspect = function (n, opts) {\n\t  var str = 'LRUCache {'\n\t  var extras = false\n\t\n\t  var as = this[ALLOW_STALE]\n\t  if (as) {\n\t    str += '\\n  allowStale: true'\n\t    extras = true\n\t  }\n\t\n\t  var max = this[MAX]\n\t  if (max && max !== Infinity) {\n\t    if (extras) {\n\t      str += ','\n\t    }\n\t    str += '\\n  max: ' + util.inspect(max, opts)\n\t    extras = true\n\t  }\n\t\n\t  var maxAge = this[MAX_AGE]\n\t  if (maxAge) {\n\t    if (extras) {\n\t      str += ','\n\t    }\n\t    str += '\\n  maxAge: ' + util.inspect(maxAge, opts)\n\t    extras = true\n\t  }\n\t\n\t  var lc = this[LENGTH_CALCULATOR]\n\t  if (lc && lc !== naiveLength) {\n\t    if (extras) {\n\t      str += ','\n\t    }\n\t    str += '\\n  length: ' + util.inspect(this[LENGTH], opts)\n\t    extras = true\n\t  }\n\t\n\t  var didFirst = false\n\t  this[LRU_LIST].forEach(function (item) {\n\t    if (didFirst) {\n\t      str += ',\\n  '\n\t    } else {\n\t      if (extras) {\n\t        str += ',\\n'\n\t      }\n\t      didFirst = true\n\t      str += '\\n  '\n\t    }\n\t    var key = util.inspect(item.key).split('\\n').join('\\n  ')\n\t    var val = { value: item.value }\n\t    if (item.maxAge !== maxAge) {\n\t      val.maxAge = item.maxAge\n\t    }\n\t    if (lc !== naiveLength) {\n\t      val.length = item.length\n\t    }\n\t    if (isStale(this, item)) {\n\t      val.stale = true\n\t    }\n\t\n\t    val = util.inspect(val, opts).split('\\n').join('\\n  ')\n\t    str += key + ' => ' + val\n\t  })\n\t\n\t  if (didFirst || extras) {\n\t    str += '\\n'\n\t  }\n\t  str += '}'\n\t\n\t  return str\n\t}\n\t\n\tLRUCache.prototype.set = function (key, value, maxAge) {\n\t  maxAge = maxAge || this[MAX_AGE]\n\t\n\t  var now = maxAge ? Date.now() : 0\n\t  var len = this[LENGTH_CALCULATOR](value, key)\n\t\n\t  if (this[CACHE].has(key)) {\n\t    if (len > this[MAX]) {\n\t      del(this, this[CACHE].get(key))\n\t      return false\n\t    }\n\t\n\t    var node = this[CACHE].get(key)\n\t    var item = node.value\n\t\n\t    // dispose of the old one before overwriting\n\t    // split out into 2 ifs for better coverage tracking\n\t    if (this[DISPOSE]) {\n\t      if (!this[NO_DISPOSE_ON_SET]) {\n\t        this[DISPOSE](key, item.value)\n\t      }\n\t    }\n\t\n\t    item.now = now\n\t    item.maxAge = maxAge\n\t    item.value = value\n\t    this[LENGTH] += len - item.length\n\t    item.length = len\n\t    this.get(key)\n\t    trim(this)\n\t    return true\n\t  }\n\t\n\t  var hit = new Entry(key, value, len, now, maxAge)\n\t\n\t  // oversized objects fall out of cache automatically.\n\t  if (hit.length > this[MAX]) {\n\t    if (this[DISPOSE]) {\n\t      this[DISPOSE](key, value)\n\t    }\n\t    return false\n\t  }\n\t\n\t  this[LENGTH] += hit.length\n\t  this[LRU_LIST].unshift(hit)\n\t  this[CACHE].set(key, this[LRU_LIST].head)\n\t  trim(this)\n\t  return true\n\t}\n\t\n\tLRUCache.prototype.has = function (key) {\n\t  if (!this[CACHE].has(key)) return false\n\t  var hit = this[CACHE].get(key).value\n\t  if (isStale(this, hit)) {\n\t    return false\n\t  }\n\t  return true\n\t}\n\t\n\tLRUCache.prototype.get = function (key) {\n\t  return get(this, key, true)\n\t}\n\t\n\tLRUCache.prototype.peek = function (key) {\n\t  return get(this, key, false)\n\t}\n\t\n\tLRUCache.prototype.pop = function () {\n\t  var node = this[LRU_LIST].tail\n\t  if (!node) return null\n\t  del(this, node)\n\t  return node.value\n\t}\n\t\n\tLRUCache.prototype.del = function (key) {\n\t  del(this, this[CACHE].get(key))\n\t}\n\t\n\tLRUCache.prototype.load = function (arr) {\n\t  // reset the cache\n\t  this.reset()\n\t\n\t  var now = Date.now()\n\t  // A previous serialized cache has the most recent items first\n\t  for (var l = arr.length - 1; l >= 0; l--) {\n\t    var hit = arr[l]\n\t    var expiresAt = hit.e || 0\n\t    if (expiresAt === 0) {\n\t      // the item was created without expiration in a non aged cache\n\t      this.set(hit.k, hit.v)\n\t    } else {\n\t      var maxAge = expiresAt - now\n\t      // dont add already expired items\n\t      if (maxAge > 0) {\n\t        this.set(hit.k, hit.v, maxAge)\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\tLRUCache.prototype.prune = function () {\n\t  var self = this\n\t  this[CACHE].forEach(function (value, key) {\n\t    get(self, key, false)\n\t  })\n\t}\n\t\n\tfunction get (self, key, doUse) {\n\t  var node = self[CACHE].get(key)\n\t  if (node) {\n\t    var hit = node.value\n\t    if (isStale(self, hit)) {\n\t      del(self, node)\n\t      if (!self[ALLOW_STALE]) hit = undefined\n\t    } else {\n\t      if (doUse) {\n\t        self[LRU_LIST].unshiftNode(node)\n\t      }\n\t    }\n\t    if (hit) hit = hit.value\n\t  }\n\t  return hit\n\t}\n\t\n\tfunction isStale (self, hit) {\n\t  if (!hit || (!hit.maxAge && !self[MAX_AGE])) {\n\t    return false\n\t  }\n\t  var stale = false\n\t  var diff = Date.now() - hit.now\n\t  if (hit.maxAge) {\n\t    stale = diff > hit.maxAge\n\t  } else {\n\t    stale = self[MAX_AGE] && (diff > self[MAX_AGE])\n\t  }\n\t  return stale\n\t}\n\t\n\tfunction trim (self) {\n\t  if (self[LENGTH] > self[MAX]) {\n\t    for (var walker = self[LRU_LIST].tail;\n\t      self[LENGTH] > self[MAX] && walker !== null;) {\n\t      // We know that we're about to delete this one, and also\n\t      // what the next least recently used key will be, so just\n\t      // go ahead and set it now.\n\t      var prev = walker.prev\n\t      del(self, walker)\n\t      walker = prev\n\t    }\n\t  }\n\t}\n\t\n\tfunction del (self, node) {\n\t  if (node) {\n\t    var hit = node.value\n\t    if (self[DISPOSE]) {\n\t      self[DISPOSE](hit.key, hit.value)\n\t    }\n\t    self[LENGTH] -= hit.length\n\t    self[CACHE].delete(hit.key)\n\t    self[LRU_LIST].removeNode(node)\n\t  }\n\t}\n\t\n\t// classy, since V8 prefers predictable objects.\n\tfunction Entry (key, value, length, now, maxAge) {\n\t  this.key = key\n\t  this.value = value\n\t  this.length = length\n\t  this.now = now\n\t  this.maxAge = maxAge || 0\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(57)))\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {if (process.env.npm_package_name === 'pseudomap' &&\n\t    process.env.npm_lifecycle_script === 'test')\n\t  process.env.TEST_PSEUDOMAP = 'true'\n\t\n\tif (typeof Map === 'function' && !process.env.TEST_PSEUDOMAP) {\n\t  module.exports = Map\n\t} else {\n\t  module.exports = __webpack_require__(59)\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(57)))\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports) {\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty\n\t\n\tmodule.exports = PseudoMap\n\t\n\tfunction PseudoMap (set) {\n\t  if (!(this instanceof PseudoMap)) // whyyyyyyy\n\t    throw new TypeError(\"Constructor PseudoMap requires 'new'\")\n\t\n\t  this.clear()\n\t\n\t  if (set) {\n\t    if ((set instanceof PseudoMap) ||\n\t        (typeof Map === 'function' && set instanceof Map))\n\t      set.forEach(function (value, key) {\n\t        this.set(key, value)\n\t      }, this)\n\t    else if (Array.isArray(set))\n\t      set.forEach(function (kv) {\n\t        this.set(kv[0], kv[1])\n\t      }, this)\n\t    else\n\t      throw new TypeError('invalid argument')\n\t  }\n\t}\n\t\n\tPseudoMap.prototype.forEach = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  Object.keys(this._data).forEach(function (k) {\n\t    if (k !== 'size')\n\t      fn.call(thisp, this._data[k].value, this._data[k].key)\n\t  }, this)\n\t}\n\t\n\tPseudoMap.prototype.has = function (k) {\n\t  return !!find(this._data, k)\n\t}\n\t\n\tPseudoMap.prototype.get = function (k) {\n\t  var res = find(this._data, k)\n\t  return res && res.value\n\t}\n\t\n\tPseudoMap.prototype.set = function (k, v) {\n\t  set(this._data, k, v)\n\t}\n\t\n\tPseudoMap.prototype.delete = function (k) {\n\t  var res = find(this._data, k)\n\t  if (res) {\n\t    delete this._data[res._index]\n\t    this._data.size--\n\t  }\n\t}\n\t\n\tPseudoMap.prototype.clear = function () {\n\t  var data = Object.create(null)\n\t  data.size = 0\n\t\n\t  Object.defineProperty(this, '_data', {\n\t    value: data,\n\t    enumerable: false,\n\t    configurable: true,\n\t    writable: false\n\t  })\n\t}\n\t\n\tObject.defineProperty(PseudoMap.prototype, 'size', {\n\t  get: function () {\n\t    return this._data.size\n\t  },\n\t  set: function (n) {},\n\t  enumerable: true,\n\t  configurable: true\n\t})\n\t\n\tPseudoMap.prototype.values =\n\tPseudoMap.prototype.keys =\n\tPseudoMap.prototype.entries = function () {\n\t  throw new Error('iterators are not implemented in this version')\n\t}\n\t\n\t// Either identical, or both NaN\n\tfunction same (a, b) {\n\t  return a === b || a !== a && b !== b\n\t}\n\t\n\tfunction Entry (k, v, i) {\n\t  this.key = k\n\t  this.value = v\n\t  this._index = i\n\t}\n\t\n\tfunction find (data, k) {\n\t  for (var i = 0, s = '_' + k, key = s;\n\t       hasOwnProperty.call(data, key);\n\t       key = s + i++) {\n\t    if (same(data[key].key, k))\n\t      return data[key]\n\t  }\n\t}\n\t\n\tfunction set (data, k, v) {\n\t  for (var i = 0, s = '_' + k, key = s;\n\t       hasOwnProperty.call(data, key);\n\t       key = s + i++) {\n\t    if (same(data[key].key, k)) {\n\t      data[key].value = v\n\t      return\n\t    }\n\t  }\n\t  data.size++\n\t  data[key] = new Entry(k, v, key)\n\t}\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n\t  function getOwnPropertyDescriptors(obj) {\n\t    var keys = Object.keys(obj);\n\t    var descriptors = {};\n\t    for (var i = 0; i < keys.length; i++) {\n\t      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n\t    }\n\t    return descriptors;\n\t  };\n\t\n\tvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n\t\n\t  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\t\n\t\n\t// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n\t    return fn;\n\t  }\n\t\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (typeof process === 'undefined') {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\t\n\t  return deprecated;\n\t};\n\t\n\t\n\tvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\t\n\t\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */\n\t/* legacy: obj, showHidden, depth, colors*/\n\tfunction inspect(obj, opts) {\n\t  // default options\n\t  var ctx = {\n\t    seen: [],\n\t    stylize: stylizeNoColor\n\t  };\n\t  // legacy...\n\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t  if (isBoolean(opts)) {\n\t    // legacy...\n\t    ctx.showHidden = opts;\n\t  } else if (opts) {\n\t    // got an \"options\" object\n\t    exports._extend(ctx, opts);\n\t  }\n\t  // set default options\n\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t  return formatValue(ctx, obj, ctx.depth);\n\t}\n\texports.inspect = inspect;\n\t\n\t\n\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\tinspect.colors = {\n\t  'bold' : [1, 22],\n\t  'italic' : [3, 23],\n\t  'underline' : [4, 24],\n\t  'inverse' : [7, 27],\n\t  'white' : [37, 39],\n\t  'grey' : [90, 39],\n\t  'black' : [30, 39],\n\t  'blue' : [34, 39],\n\t  'cyan' : [36, 39],\n\t  'green' : [32, 39],\n\t  'magenta' : [35, 39],\n\t  'red' : [31, 39],\n\t  'yellow' : [33, 39]\n\t};\n\t\n\t// Don't use 'blue' not visible on cmd.exe\n\tinspect.styles = {\n\t  'special': 'cyan',\n\t  'number': 'yellow',\n\t  'boolean': 'yellow',\n\t  'undefined': 'grey',\n\t  'null': 'bold',\n\t  'string': 'green',\n\t  'date': 'magenta',\n\t  // \"name\": intentionally not styling\n\t  'regexp': 'red'\n\t};\n\t\n\t\n\tfunction stylizeWithColor(str, styleType) {\n\t  var style = inspect.styles[styleType];\n\t\n\t  if (style) {\n\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t  } else {\n\t    return str;\n\t  }\n\t}\n\t\n\t\n\tfunction stylizeNoColor(str, styleType) {\n\t  return str;\n\t}\n\t\n\t\n\tfunction arrayToHash(array) {\n\t  var hash = {};\n\t\n\t  array.forEach(function(val, idx) {\n\t    hash[val] = true;\n\t  });\n\t\n\t  return hash;\n\t}\n\t\n\t\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (ctx.customInspect &&\n\t      value &&\n\t      isFunction(value.inspect) &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes, ctx);\n\t    if (!isString(ret)) {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\t\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\t\n\t  // Look up the keys of the object.\n\t  var keys = Object.keys(value);\n\t  var visibleKeys = arrayToHash(keys);\n\t\n\t  if (ctx.showHidden) {\n\t    keys = Object.getOwnPropertyNames(value);\n\t  }\n\t\n\t  // IE doesn't make error fields non-enumerable\n\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t  if (isError(value)\n\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t    return formatError(value);\n\t  }\n\t\n\t  // Some type of object without properties can be shortcutted.\n\t  if (keys.length === 0) {\n\t    if (isFunction(value)) {\n\t      var name = value.name ? ': ' + value.name : '';\n\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\t\n\t  var base = '', array = false, braces = ['{', '}'];\n\t\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\t\n\t  // Make functions say that they are functions\n\t  if (isFunction(value)) {\n\t    var n = value.name ? ': ' + value.name : '';\n\t    base = ' [Function' + n + ']';\n\t  }\n\t\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\t\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\t\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    base = ' ' + formatError(value);\n\t  }\n\t\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\t\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\t\n\t  ctx.seen.push(value);\n\t\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\t\n\t  ctx.seen.pop();\n\t\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\t\n\t\n\tfunction formatPrimitive(ctx, value) {\n\t  if (isUndefined(value))\n\t    return ctx.stylize('undefined', 'undefined');\n\t  if (isString(value)) {\n\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                             .replace(/'/g, \"\\\\'\")\n\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t    return ctx.stylize(simple, 'string');\n\t  }\n\t  if (isNumber(value))\n\t    return ctx.stylize('' + value, 'number');\n\t  if (isBoolean(value))\n\t    return ctx.stylize('' + value, 'boolean');\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (isNull(value))\n\t    return ctx.stylize('null', 'null');\n\t}\n\t\n\t\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\t\n\t\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (hasOwnProperty(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\t\n\t\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str, desc;\n\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t  if (desc.get) {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t    } else {\n\t      str = ctx.stylize('[Getter]', 'special');\n\t    }\n\t  } else {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Setter]', 'special');\n\t    }\n\t  }\n\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t      if (isNull(recurseTimes)) {\n\t        str = formatValue(ctx, desc.value, null);\n\t      } else {\n\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (isUndefined(name)) {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\t\n\t  return name + ': ' + str;\n\t}\n\t\n\t\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t  }, 0);\n\t\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\t\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\t\n\t\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\texports.types = __webpack_require__(61);\n\t\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar);\n\t}\n\texports.isArray = isArray;\n\t\n\tfunction isBoolean(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\texports.isBoolean = isBoolean;\n\t\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\texports.isNull = isNull;\n\t\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\texports.isNullOrUndefined = isNullOrUndefined;\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\texports.isNumber = isNumber;\n\t\n\tfunction isString(arg) {\n\t  return typeof arg === 'string';\n\t}\n\texports.isString = isString;\n\t\n\tfunction isSymbol(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\texports.isSymbol = isSymbol;\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\texports.isUndefined = isUndefined;\n\t\n\tfunction isRegExp(re) {\n\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t}\n\texports.isRegExp = isRegExp;\n\texports.types.isRegExp = isRegExp;\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\texports.isObject = isObject;\n\t\n\tfunction isDate(d) {\n\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t}\n\texports.isDate = isDate;\n\texports.types.isDate = isDate;\n\t\n\tfunction isError(e) {\n\t  return isObject(e) &&\n\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t}\n\texports.isError = isError;\n\texports.types.isNativeError = isError;\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\texports.isPrimitive = isPrimitive;\n\t\n\texports.isBuffer = __webpack_require__(62);\n\t\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\t\n\t\n\tfunction pad(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\t\n\t\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t              'Oct', 'Nov', 'Dec'];\n\t\n\t// 26 Feb 16:19:34\n\tfunction timestamp() {\n\t  var d = new Date();\n\t  var time = [pad(d.getHours()),\n\t              pad(d.getMinutes()),\n\t              pad(d.getSeconds())].join(':');\n\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t}\n\t\n\t\n\t// log is just a thin wrapper to console.log that prepends a timestamp\n\texports.log = function() {\n\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t};\n\t\n\t\n\t/**\n\t * Inherit the prototype methods from one constructor into another.\n\t *\n\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t * during bootstrapping this function needs to be rewritten using some native\n\t * functions as prototype setup using normal JavaScript does not work as\n\t * expected during bootstrapping (see mirror.js in r114903).\n\t *\n\t * @param {function} ctor Constructor function which needs to inherit the\n\t *     prototype.\n\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t */\n\texports.inherits = __webpack_require__(65);\n\t\n\texports._extend = function(origin, add) {\n\t  // Don't do anything if add isn't an object\n\t  if (!add || !isObject(add)) return origin;\n\t\n\t  var keys = Object.keys(add);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    origin[keys[i]] = add[keys[i]];\n\t  }\n\t  return origin;\n\t};\n\t\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\t\n\tvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\t\n\texports.promisify = function promisify(original) {\n\t  if (typeof original !== 'function')\n\t    throw new TypeError('The \"original\" argument must be of type Function');\n\t\n\t  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n\t    var fn = original[kCustomPromisifiedSymbol];\n\t    if (typeof fn !== 'function') {\n\t      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n\t    }\n\t    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n\t      value: fn, enumerable: false, writable: false, configurable: true\n\t    });\n\t    return fn;\n\t  }\n\t\n\t  function fn() {\n\t    var promiseResolve, promiseReject;\n\t    var promise = new Promise(function (resolve, reject) {\n\t      promiseResolve = resolve;\n\t      promiseReject = reject;\n\t    });\n\t\n\t    var args = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      args.push(arguments[i]);\n\t    }\n\t    args.push(function (err, value) {\n\t      if (err) {\n\t        promiseReject(err);\n\t      } else {\n\t        promiseResolve(value);\n\t      }\n\t    });\n\t\n\t    try {\n\t      original.apply(this, args);\n\t    } catch (err) {\n\t      promiseReject(err);\n\t    }\n\t\n\t    return promise;\n\t  }\n\t\n\t  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\t\n\t  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n\t    value: fn, enumerable: false, writable: false, configurable: true\n\t  });\n\t  return Object.defineProperties(\n\t    fn,\n\t    getOwnPropertyDescriptors(original)\n\t  );\n\t}\n\t\n\texports.promisify.custom = kCustomPromisifiedSymbol\n\t\n\tfunction callbackifyOnRejected(reason, cb) {\n\t  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n\t  // Because `null` is a special error value in callbacks which means \"no error\n\t  // occurred\", we error-wrap so the callback consumer can distinguish between\n\t  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n\t  if (!reason) {\n\t    var newReason = new Error('Promise was rejected with a falsy value');\n\t    newReason.reason = reason;\n\t    reason = newReason;\n\t  }\n\t  return cb(reason);\n\t}\n\t\n\tfunction callbackify(original) {\n\t  if (typeof original !== 'function') {\n\t    throw new TypeError('The \"original\" argument must be of type Function');\n\t  }\n\t\n\t  // We DO NOT return the promise as it gives the user a false sense that\n\t  // the promise is actually somehow related to the callback's execution\n\t  // and that the callback throwing will reject the promise.\n\t  function callbackified() {\n\t    var args = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      args.push(arguments[i]);\n\t    }\n\t\n\t    var maybeCb = args.pop();\n\t    if (typeof maybeCb !== 'function') {\n\t      throw new TypeError('The last argument must be of type Function');\n\t    }\n\t    var self = this;\n\t    var cb = function() {\n\t      return maybeCb.apply(self, arguments);\n\t    };\n\t    // In true node style we process the callback on `nextTick` with all the\n\t    // implications (stack, `uncaughtException`, `async_hooks`)\n\t    original.apply(this, args)\n\t      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n\t            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n\t  }\n\t\n\t  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n\t  Object.defineProperties(callbackified,\n\t                          getOwnPropertyDescriptors(original));\n\t  return callbackified;\n\t}\n\texports.callbackify = callbackify;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(57)))\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Currently in sync with Node.js lib/internal/util/types.js\n\t// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\t\n\t'use strict';\n\t\n\tvar isBuffer = __webpack_require__(62);\n\t\n\tvar isArgumentsObject = __webpack_require__(63);\n\tvar isGeneratorFunction = __webpack_require__(64);\n\t\n\tfunction uncurryThis(f) {\n\t  return f.call.bind(f);\n\t}\n\t\n\tvar BigIntSupported = typeof BigInt !== 'undefined';\n\tvar SymbolSupported = typeof Symbol !== 'undefined';\n\tvar SymbolToStringTagSupported = SymbolSupported && typeof Symbol.toStringTag !== 'undefined';\n\tvar Uint8ArraySupported = typeof Uint8Array !== 'undefined';\n\tvar ArrayBufferSupported = typeof ArrayBuffer !== 'undefined';\n\t\n\tif (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t  var TypedArrayPrototype = Object.getPrototypeOf(Uint8Array.prototype);\n\t\n\t  var TypedArrayProto_toStringTag =\n\t      uncurryThis(\n\t        Object.getOwnPropertyDescriptor(TypedArrayPrototype,\n\t                                        Symbol.toStringTag).get);\n\t\n\t}\n\t\n\tvar ObjectToString = uncurryThis(Object.prototype.toString);\n\t\n\tvar numberValue = uncurryThis(Number.prototype.valueOf);\n\tvar stringValue = uncurryThis(String.prototype.valueOf);\n\tvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\t\n\tif (BigIntSupported) {\n\t  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n\t}\n\t\n\tif (SymbolSupported) {\n\t  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n\t}\n\t\n\tfunction checkBoxedPrimitive(value, prototypeValueOf) {\n\t  if (typeof value !== 'object') {\n\t    return false;\n\t  }\n\t  try {\n\t    prototypeValueOf(value);\n\t    return true;\n\t  } catch(e) {\n\t    return false;\n\t  }\n\t}\n\t\n\texports.isArgumentsObject = isArgumentsObject;\n\t\n\texports.isGeneratorFunction = isGeneratorFunction;\n\t\n\t// Taken from here and modified for better browser support\n\t// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\n\tfunction isPromise(input) {\n\t\treturn (\n\t\t\t(\n\t\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\t\tinput instanceof Promise\n\t\t\t) ||\n\t\t\t(\n\t\t\t\tinput !== null &&\n\t\t\t\ttypeof input === 'object' &&\n\t\t\t\ttypeof input.then === 'function' &&\n\t\t\t\ttypeof input.catch === 'function'\n\t\t\t)\n\t\t);\n\t}\n\texports.isPromise = isPromise;\n\t\n\tfunction isArrayBufferView(value) {\n\t  if (ArrayBufferSupported && ArrayBuffer.isView) {\n\t    return ArrayBuffer.isView(value);\n\t  }\n\t\n\t  return (\n\t    isTypedArray(value) ||\n\t    isDataView(value)\n\t  );\n\t}\n\texports.isArrayBufferView = isArrayBufferView;\n\t\n\tfunction isTypedArray(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) !== undefined;\n\t  } else {\n\t    return (\n\t      isUint8Array(value) ||\n\t      isUint8ClampedArray(value) ||\n\t      isUint16Array(value) ||\n\t      isUint32Array(value) ||\n\t      isInt8Array(value) ||\n\t      isInt16Array(value) ||\n\t      isInt32Array(value) ||\n\t      isFloat32Array(value) ||\n\t      isFloat64Array(value) ||\n\t      isBigInt64Array(value) ||\n\t      isBigUint64Array(value)\n\t    );\n\t  }\n\t}\n\texports.isTypedArray = isTypedArray;\n\t\n\tfunction isUint8Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Uint8Array';\n\t  } else {\n\t    return (\n\t      ObjectToString(value) === '[object Uint8Array]' ||\n\t      // If it's a Buffer instance _and_ has a `.buffer` property,\n\t      // this is an ArrayBuffer based buffer; thus it's an Uint8Array\n\t      // (Old Node.js had a custom non-Uint8Array implementation)\n\t      isBuffer(value) && value.buffer !== undefined\n\t    );\n\t  }\n\t}\n\texports.isUint8Array = isUint8Array;\n\t\n\tfunction isUint8ClampedArray(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Uint8ClampedArray';\n\t  } else {\n\t    return ObjectToString(value) === '[object Uint8ClampedArray]';\n\t  }\n\t}\n\texports.isUint8ClampedArray = isUint8ClampedArray;\n\t\n\tfunction isUint16Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Uint16Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Uint16Array]';\n\t  }\n\t}\n\texports.isUint16Array = isUint16Array;\n\t\n\tfunction isUint32Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Uint32Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Uint32Array]';\n\t  }\n\t}\n\texports.isUint32Array = isUint32Array;\n\t\n\tfunction isInt8Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Int8Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Int8Array]';\n\t  }\n\t}\n\texports.isInt8Array = isInt8Array;\n\t\n\tfunction isInt16Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Int16Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Int16Array]';\n\t  }\n\t}\n\texports.isInt16Array = isInt16Array;\n\t\n\tfunction isInt32Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Int32Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Int32Array]';\n\t  }\n\t}\n\texports.isInt32Array = isInt32Array;\n\t\n\tfunction isFloat32Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Float32Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Float32Array]';\n\t  }\n\t}\n\texports.isFloat32Array = isFloat32Array;\n\t\n\tfunction isFloat64Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'Float64Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object Float64Array]';\n\t  }\n\t}\n\texports.isFloat64Array = isFloat64Array;\n\t\n\tfunction isBigInt64Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'BigInt64Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object BigInt64Array]';\n\t  }\n\t}\n\texports.isBigInt64Array = isBigInt64Array;\n\t\n\tfunction isBigUint64Array(value) {\n\t  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n\t    return TypedArrayProto_toStringTag(value) === 'BigUint64Array';\n\t  } else {\n\t    return ObjectToString(value) === '[object BigUint64Array]';\n\t  }\n\t}\n\texports.isBigUint64Array = isBigUint64Array;\n\t\n\tfunction isMapToString(value) {\n\t  return ObjectToString(value) === '[object Map]';\n\t}\n\tisMapToString.working = (\n\t  typeof Map !== 'undefined' &&\n\t  isMapToString(new Map())\n\t);\n\t\n\tfunction isMap(value) {\n\t  if (typeof Map === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isMapToString.working\n\t    ? isMapToString(value)\n\t    : value instanceof Map;\n\t}\n\texports.isMap = isMap;\n\t\n\tfunction isSetToString(value) {\n\t  return ObjectToString(value) === '[object Set]';\n\t}\n\tisSetToString.working = (\n\t  typeof Set !== 'undefined' &&\n\t  isSetToString(new Set())\n\t);\n\tfunction isSet(value) {\n\t  if (typeof Set === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isSetToString.working\n\t    ? isSetToString(value)\n\t    : value instanceof Set;\n\t}\n\texports.isSet = isSet;\n\t\n\tfunction isWeakMapToString(value) {\n\t  return ObjectToString(value) === '[object WeakMap]';\n\t}\n\tisWeakMapToString.working = (\n\t  typeof WeakMap !== 'undefined' &&\n\t  isWeakMapToString(new WeakMap())\n\t);\n\tfunction isWeakMap(value) {\n\t  if (typeof WeakMap === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isWeakMapToString.working\n\t    ? isWeakMapToString(value)\n\t    : value instanceof WeakMap;\n\t}\n\texports.isWeakMap = isWeakMap;\n\t\n\tfunction isWeakSetToString(value) {\n\t  return ObjectToString(value) === '[object WeakSet]';\n\t}\n\tisWeakSetToString.working = (\n\t  typeof WeakSet !== 'undefined' &&\n\t  isWeakSetToString(new WeakSet())\n\t);\n\tfunction isWeakSet(value) {\n\t  return isWeakSetToString(value);\n\t  if (typeof WeakSet === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isWeakSetToString.working\n\t    ? isWeakSetToString(value)\n\t    : value instanceof WeakSet;\n\t}\n\texports.isWeakSet = isWeakSet;\n\t\n\tfunction isArrayBufferToString(value) {\n\t  return ObjectToString(value) === '[object ArrayBuffer]';\n\t}\n\tisArrayBufferToString.working = (\n\t  typeof ArrayBuffer !== 'undefined' &&\n\t  isArrayBufferToString(new ArrayBuffer())\n\t);\n\tfunction isArrayBuffer(value) {\n\t  if (typeof ArrayBuffer === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isArrayBufferToString.working\n\t    ? isArrayBufferToString(value)\n\t    : value instanceof ArrayBuffer;\n\t}\n\texports.isArrayBuffer = isArrayBuffer;\n\t\n\tfunction isDataViewToString(value) {\n\t  return ObjectToString(value) === '[object DataView]';\n\t}\n\tisDataViewToString.working = (\n\t  typeof ArrayBuffer !== 'undefined' &&\n\t  typeof DataView !== 'undefined' &&\n\t  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n\t);\n\tfunction isDataView(value) {\n\t  if (typeof DataView === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isDataViewToString.working\n\t    ? isDataViewToString(value)\n\t    : value instanceof DataView;\n\t}\n\texports.isDataView = isDataView;\n\t\n\tfunction isSharedArrayBufferToString(value) {\n\t  return ObjectToString(value) === '[object SharedArrayBuffer]';\n\t}\n\tisSharedArrayBufferToString.working = (\n\t  typeof SharedArrayBuffer !== 'undefined' &&\n\t  isSharedArrayBufferToString(new SharedArrayBuffer())\n\t);\n\tfunction isSharedArrayBuffer(value) {\n\t  if (typeof SharedArrayBuffer === 'undefined') {\n\t    return false;\n\t  }\n\t\n\t  return isSharedArrayBufferToString.working\n\t    ? isSharedArrayBufferToString(value)\n\t    : value instanceof SharedArrayBuffer;\n\t}\n\texports.isSharedArrayBuffer = isSharedArrayBuffer;\n\t\n\tfunction isAsyncFunction(value) {\n\t  return ObjectToString(value) === '[object AsyncFunction]';\n\t}\n\texports.isAsyncFunction = isAsyncFunction;\n\t\n\tfunction isMapIterator(value) {\n\t  return ObjectToString(value) === '[object Map Iterator]';\n\t}\n\texports.isMapIterator = isMapIterator;\n\t\n\tfunction isSetIterator(value) {\n\t  return ObjectToString(value) === '[object Set Iterator]';\n\t}\n\texports.isSetIterator = isSetIterator;\n\t\n\tfunction isGeneratorObject(value) {\n\t  return ObjectToString(value) === '[object Generator]';\n\t}\n\texports.isGeneratorObject = isGeneratorObject;\n\t\n\tfunction isWebAssemblyCompiledModule(value) {\n\t  return ObjectToString(value) === '[object WebAssembly.Module]';\n\t}\n\texports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\t\n\tfunction isNumberObject(value) {\n\t  return checkBoxedPrimitive(value, numberValue);\n\t}\n\texports.isNumberObject = isNumberObject;\n\t\n\tfunction isStringObject(value) {\n\t  return checkBoxedPrimitive(value, stringValue);\n\t}\n\texports.isStringObject = isStringObject;\n\t\n\tfunction isBooleanObject(value) {\n\t  return checkBoxedPrimitive(value, booleanValue);\n\t}\n\texports.isBooleanObject = isBooleanObject;\n\t\n\tfunction isBigIntObject(value) {\n\t  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n\t}\n\texports.isBigIntObject = isBigIntObject;\n\t\n\tfunction isSymbolObject(value) {\n\t  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n\t}\n\texports.isSymbolObject = isSymbolObject;\n\t\n\tfunction isBoxedPrimitive(value) {\n\t  return (\n\t    isNumberObject(value) ||\n\t    isStringObject(value) ||\n\t    isBooleanObject(value) ||\n\t    isBigIntObject(value) ||\n\t    isSymbolObject(value)\n\t  );\n\t}\n\texports.isBoxedPrimitive = isBoxedPrimitive;\n\t\n\tfunction isAnyArrayBuffer(value) {\n\t  return Uint8ArraySupported && (\n\t    isArrayBuffer(value) ||\n\t    isSharedArrayBuffer(value)\n\t  );\n\t}\n\texports.isAnyArrayBuffer = isAnyArrayBuffer;\n\t\n\t['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n\t  Object.defineProperty(exports, method, {\n\t    enumerable: false,\n\t    value: function() {\n\t      throw new Error(method + ' is not supported in userland');\n\t    }\n\t  });\n\t});\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isStandardArguments = function isArguments(value) {\n\t\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\t\treturn false;\n\t\t}\n\t\treturn toStr.call(value) === '[object Arguments]';\n\t};\n\t\n\tvar isLegacyArguments = function isArguments(value) {\n\t\tif (isStandardArguments(value)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn value !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value) !== '[object Array]' &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t};\n\t\n\tvar supportsStandardArguments = (function () {\n\t\treturn isStandardArguments(arguments);\n\t}());\n\t\n\tisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\t\n\tmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tvar toStr = Object.prototype.toString;\n\tvar fnToStr = Function.prototype.toString;\n\tvar isFnRegex = /^\\s*(?:function)?\\*/;\n\tvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\tvar getProto = Object.getPrototypeOf;\n\tvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\t\tif (!hasToStringTag) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn Function('return function*() {}')();\n\t\t} catch (e) {\n\t\t}\n\t};\n\tvar generatorFunc = getGeneratorFunc();\n\tvar GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};\n\t\n\tmodule.exports = function isGeneratorFunction(fn) {\n\t\tif (typeof fn !== 'function') {\n\t\t\treturn false;\n\t\t}\n\t\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!hasToStringTag) {\n\t\t\tvar str = toStr.call(fn);\n\t\t\treturn str === '[object GeneratorFunction]';\n\t\t}\n\t\treturn getProto(fn) === GeneratorFunction;\n\t};\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = Yallist\n\t\n\tYallist.Node = Node\n\tYallist.create = Yallist\n\t\n\tfunction Yallist (list) {\n\t  var self = this\n\t  if (!(self instanceof Yallist)) {\n\t    self = new Yallist()\n\t  }\n\t\n\t  self.tail = null\n\t  self.head = null\n\t  self.length = 0\n\t\n\t  if (list && typeof list.forEach === 'function') {\n\t    list.forEach(function (item) {\n\t      self.push(item)\n\t    })\n\t  } else if (arguments.length > 0) {\n\t    for (var i = 0, l = arguments.length; i < l; i++) {\n\t      self.push(arguments[i])\n\t    }\n\t  }\n\t\n\t  return self\n\t}\n\t\n\tYallist.prototype.removeNode = function (node) {\n\t  if (node.list !== this) {\n\t    throw new Error('removing node which does not belong to this list')\n\t  }\n\t\n\t  var next = node.next\n\t  var prev = node.prev\n\t\n\t  if (next) {\n\t    next.prev = prev\n\t  }\n\t\n\t  if (prev) {\n\t    prev.next = next\n\t  }\n\t\n\t  if (node === this.head) {\n\t    this.head = next\n\t  }\n\t  if (node === this.tail) {\n\t    this.tail = prev\n\t  }\n\t\n\t  node.list.length--\n\t  node.next = null\n\t  node.prev = null\n\t  node.list = null\n\t}\n\t\n\tYallist.prototype.unshiftNode = function (node) {\n\t  if (node === this.head) {\n\t    return\n\t  }\n\t\n\t  if (node.list) {\n\t    node.list.removeNode(node)\n\t  }\n\t\n\t  var head = this.head\n\t  node.list = this\n\t  node.next = head\n\t  if (head) {\n\t    head.prev = node\n\t  }\n\t\n\t  this.head = node\n\t  if (!this.tail) {\n\t    this.tail = node\n\t  }\n\t  this.length++\n\t}\n\t\n\tYallist.prototype.pushNode = function (node) {\n\t  if (node === this.tail) {\n\t    return\n\t  }\n\t\n\t  if (node.list) {\n\t    node.list.removeNode(node)\n\t  }\n\t\n\t  var tail = this.tail\n\t  node.list = this\n\t  node.prev = tail\n\t  if (tail) {\n\t    tail.next = node\n\t  }\n\t\n\t  this.tail = node\n\t  if (!this.head) {\n\t    this.head = node\n\t  }\n\t  this.length++\n\t}\n\t\n\tYallist.prototype.push = function () {\n\t  for (var i = 0, l = arguments.length; i < l; i++) {\n\t    push(this, arguments[i])\n\t  }\n\t  return this.length\n\t}\n\t\n\tYallist.prototype.unshift = function () {\n\t  for (var i = 0, l = arguments.length; i < l; i++) {\n\t    unshift(this, arguments[i])\n\t  }\n\t  return this.length\n\t}\n\t\n\tYallist.prototype.pop = function () {\n\t  if (!this.tail) {\n\t    return undefined\n\t  }\n\t\n\t  var res = this.tail.value\n\t  this.tail = this.tail.prev\n\t  if (this.tail) {\n\t    this.tail.next = null\n\t  } else {\n\t    this.head = null\n\t  }\n\t  this.length--\n\t  return res\n\t}\n\t\n\tYallist.prototype.shift = function () {\n\t  if (!this.head) {\n\t    return undefined\n\t  }\n\t\n\t  var res = this.head.value\n\t  this.head = this.head.next\n\t  if (this.head) {\n\t    this.head.prev = null\n\t  } else {\n\t    this.tail = null\n\t  }\n\t  this.length--\n\t  return res\n\t}\n\t\n\tYallist.prototype.forEach = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  for (var walker = this.head, i = 0; walker !== null; i++) {\n\t    fn.call(thisp, walker.value, i, this)\n\t    walker = walker.next\n\t  }\n\t}\n\t\n\tYallist.prototype.forEachReverse = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n\t    fn.call(thisp, walker.value, i, this)\n\t    walker = walker.prev\n\t  }\n\t}\n\t\n\tYallist.prototype.get = function (n) {\n\t  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n\t    // abort out of the list early if we hit a cycle\n\t    walker = walker.next\n\t  }\n\t  if (i === n && walker !== null) {\n\t    return walker.value\n\t  }\n\t}\n\t\n\tYallist.prototype.getReverse = function (n) {\n\t  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n\t    // abort out of the list early if we hit a cycle\n\t    walker = walker.prev\n\t  }\n\t  if (i === n && walker !== null) {\n\t    return walker.value\n\t  }\n\t}\n\t\n\tYallist.prototype.map = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  var res = new Yallist()\n\t  for (var walker = this.head; walker !== null;) {\n\t    res.push(fn.call(thisp, walker.value, this))\n\t    walker = walker.next\n\t  }\n\t  return res\n\t}\n\t\n\tYallist.prototype.mapReverse = function (fn, thisp) {\n\t  thisp = thisp || this\n\t  var res = new Yallist()\n\t  for (var walker = this.tail; walker !== null;) {\n\t    res.push(fn.call(thisp, walker.value, this))\n\t    walker = walker.prev\n\t  }\n\t  return res\n\t}\n\t\n\tYallist.prototype.reduce = function (fn, initial) {\n\t  var acc\n\t  var walker = this.head\n\t  if (arguments.length > 1) {\n\t    acc = initial\n\t  } else if (this.head) {\n\t    walker = this.head.next\n\t    acc = this.head.value\n\t  } else {\n\t    throw new TypeError('Reduce of empty list with no initial value')\n\t  }\n\t\n\t  for (var i = 0; walker !== null; i++) {\n\t    acc = fn(acc, walker.value, i)\n\t    walker = walker.next\n\t  }\n\t\n\t  return acc\n\t}\n\t\n\tYallist.prototype.reduceReverse = function (fn, initial) {\n\t  var acc\n\t  var walker = this.tail\n\t  if (arguments.length > 1) {\n\t    acc = initial\n\t  } else if (this.tail) {\n\t    walker = this.tail.prev\n\t    acc = this.tail.value\n\t  } else {\n\t    throw new TypeError('Reduce of empty list with no initial value')\n\t  }\n\t\n\t  for (var i = this.length - 1; walker !== null; i--) {\n\t    acc = fn(acc, walker.value, i)\n\t    walker = walker.prev\n\t  }\n\t\n\t  return acc\n\t}\n\t\n\tYallist.prototype.toArray = function () {\n\t  var arr = new Array(this.length)\n\t  for (var i = 0, walker = this.head; walker !== null; i++) {\n\t    arr[i] = walker.value\n\t    walker = walker.next\n\t  }\n\t  return arr\n\t}\n\t\n\tYallist.prototype.toArrayReverse = function () {\n\t  var arr = new Array(this.length)\n\t  for (var i = 0, walker = this.tail; walker !== null; i++) {\n\t    arr[i] = walker.value\n\t    walker = walker.prev\n\t  }\n\t  return arr\n\t}\n\t\n\tYallist.prototype.slice = function (from, to) {\n\t  to = to || this.length\n\t  if (to < 0) {\n\t    to += this.length\n\t  }\n\t  from = from || 0\n\t  if (from < 0) {\n\t    from += this.length\n\t  }\n\t  var ret = new Yallist()\n\t  if (to < from || to < 0) {\n\t    return ret\n\t  }\n\t  if (from < 0) {\n\t    from = 0\n\t  }\n\t  if (to > this.length) {\n\t    to = this.length\n\t  }\n\t  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n\t    walker = walker.next\n\t  }\n\t  for (; walker !== null && i < to; i++, walker = walker.next) {\n\t    ret.push(walker.value)\n\t  }\n\t  return ret\n\t}\n\t\n\tYallist.prototype.sliceReverse = function (from, to) {\n\t  to = to || this.length\n\t  if (to < 0) {\n\t    to += this.length\n\t  }\n\t  from = from || 0\n\t  if (from < 0) {\n\t    from += this.length\n\t  }\n\t  var ret = new Yallist()\n\t  if (to < from || to < 0) {\n\t    return ret\n\t  }\n\t  if (from < 0) {\n\t    from = 0\n\t  }\n\t  if (to > this.length) {\n\t    to = this.length\n\t  }\n\t  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n\t    walker = walker.prev\n\t  }\n\t  for (; walker !== null && i > from; i--, walker = walker.prev) {\n\t    ret.push(walker.value)\n\t  }\n\t  return ret\n\t}\n\t\n\tYallist.prototype.reverse = function () {\n\t  var head = this.head\n\t  var tail = this.tail\n\t  for (var walker = head; walker !== null; walker = walker.prev) {\n\t    var p = walker.prev\n\t    walker.prev = walker.next\n\t    walker.next = p\n\t  }\n\t  this.head = tail\n\t  this.tail = head\n\t  return this\n\t}\n\t\n\tfunction push (self, item) {\n\t  self.tail = new Node(item, self.tail, null, self)\n\t  if (!self.head) {\n\t    self.head = self.tail\n\t  }\n\t  self.length++\n\t}\n\t\n\tfunction unshift (self, item) {\n\t  self.head = new Node(item, null, self.head, self)\n\t  if (!self.tail) {\n\t    self.tail = self.head\n\t  }\n\t  self.length++\n\t}\n\t\n\tfunction Node (value, prev, next, list) {\n\t  if (!(this instanceof Node)) {\n\t    return new Node(value, prev, next, list)\n\t  }\n\t\n\t  this.list = list\n\t  this.value = value\n\t\n\t  if (prev) {\n\t    prev.next = this\n\t    this.prev = prev\n\t  } else {\n\t    this.prev = null\n\t  }\n\t\n\t  if (next) {\n\t    next.prev = this\n\t    this.next = next\n\t  } else {\n\t    this.next = null\n\t  }\n\t}\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _Tile2 = __webpack_require__(68);\n\t\n\tvar _Tile3 = _interopRequireDefault(_Tile2);\n\t\n\tvar _vendorBoxHelper = __webpack_require__(69);\n\t\n\tvar _vendorBoxHelper2 = _interopRequireDefault(_vendorBoxHelper);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\tvar ImageTile = (function (_Tile) {\n\t    _inherits(ImageTile, _Tile);\n\t\n\t    function ImageTile(quadcode, path, layer) {\n\t        _classCallCheck(this, ImageTile);\n\t\n\t        _get(Object.getPrototypeOf(ImageTile.prototype), 'constructor', this).call(this, quadcode, path, layer);\n\t    }\n\t\n\t    // Request data for the tile\n\t\n\t    _createClass(ImageTile, [{\n\t        key: 'requestTileAsync',\n\t        value: function requestTileAsync() {\n\t            var _this = this;\n\t\n\t            // Making this asynchronous really speeds up the LOD framerate\n\t            setTimeout(function () {\n\t                if (!_this._mesh) {\n\t                    _this._mesh = _this._createMesh();\n\t                }\n\t\n\t                _this._requestTile();\n\t            }, 0);\n\t        }\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy() {\n\t            // Cancel any pending requests\n\t            this._abortRequest();\n\t\n\t            // Clear image reference\n\t            this._image = null;\n\t\n\t            _get(Object.getPrototypeOf(ImageTile.prototype), 'destroy', this).call(this);\n\t        }\n\t    }, {\n\t        key: '_createMesh',\n\t        value: function _createMesh() {\n\t            // Something went wrong and the tile\n\t            //\n\t            // Possibly removed by the cache before loaded\n\t            if (!this._center) {\n\t                return;\n\t            }\n\t\n\t            var mesh = new _three2['default'].Object3D();\n\t            var geom = new _three2['default'].PlaneBufferGeometry(this._side, this._side, 1);\n\t\n\t            var material;\n\t            if (!this._world._environment._skybox) {\n\t                material = new _three2['default'].MeshBasicMaterial({\n\t                    depthWrite: false\n\t                });\n\t\n\t                // var material = new THREE.MeshPhongMaterial({\n\t                //   depthWrite: false\n\t                // });\n\t            } else {\n\t                    // Other MeshStandardMaterial settings\n\t                    //\n\t                    // material.envMapIntensity will change the amount of colour reflected(?)\n\t                    // from the environment map – can be greater than 1 for more intensity\n\t\n\t                    material = new _three2['default'].MeshStandardMaterial({\n\t                        depthWrite: false\n\t                    });\n\t                    material.roughness = 1;\n\t                    material.metalness = 0.1;\n\t                    material.envMap = this._world._environment._skybox.getRenderTarget();\n\t                }\n\t\n\t            var localMesh = new _three2['default'].Mesh(geom, material);\n\t            localMesh.rotation.x = -90 * Math.PI / 180;\n\t\n\t            localMesh.receiveShadow = true;\n\t\n\t            // Setting this causes a depth-buffer intersection issue on the\n\t            // all-the-things example\n\t            // localMesh.renderOrder = 2;\n\t\n\t            mesh.add(localMesh);\n\t\n\t            // Setting this causes a depth-buffer intersection issue on the\n\t            // all-the-things example\n\t            // mesh.renderOrder = 2;\n\t\n\t            mesh.position.x = this._center[0];\n\t            mesh.position.z = this._center[1];\n\t\n\t            // var box = new BoxHelper(localMesh);\n\t            // mesh.add(box);\n\t            //\n\t            // mesh.add(this._createDebugMesh());\n\t\n\t            return mesh;\n\t        }\n\t    }, {\n\t        key: '_createDebugMesh',\n\t        value: function _createDebugMesh() {\n\t            var canvas = document.createElement('canvas');\n\t            canvas.width = 256;\n\t            canvas.height = 256;\n\t\n\t            var context = canvas.getContext('2d');\n\t            context.font = 'Bold 20px Helvetica Neue, Verdana, Arial';\n\t            context.fillStyle = '#ff0000';\n\t            context.fillText(this._quadcode, 20, canvas.width / 2 - 5);\n\t            context.fillText(this._tile.toString(), 20, canvas.width / 2 + 25);\n\t\n\t            var texture = new _three2['default'].Texture(canvas);\n\t\n\t            // Silky smooth images when tilted\n\t            texture.magFilter = _three2['default'].LinearFilter;\n\t            texture.minFilter = _three2['default'].LinearMipMapLinearFilter;\n\t\n\t            // TODO: Set this to renderer.getMaxAnisotropy() / 4\n\t            texture.anisotropy = 4;\n\t\n\t            texture.needsUpdate = true;\n\t\n\t            var material = new _three2['default'].MeshBasicMaterial({\n\t                map: texture,\n\t                transparent: true,\n\t                depthWrite: false\n\t            });\n\t\n\t            var geom = new _three2['default'].PlaneBufferGeometry(this._side, this._side, 1);\n\t            var mesh = new _three2['default'].Mesh(geom, material);\n\t\n\t            mesh.rotation.x = -90 * Math.PI / 180;\n\t            mesh.position.y = 0.1;\n\t\n\t            return mesh;\n\t        }\n\t    }, {\n\t        key: '_requestTile',\n\t        value: function _requestTile() {\n\t            var _this2 = this;\n\t\n\t            var urlParams = {\n\t                x: this._tile[0],\n\t                y: this._tile[1],\n\t                z: this._tile[2]\n\t            };\n\t\n\t            var url = this._getTileURL(urlParams);\n\t\n\t            var image = document.createElement('img');\n\t\n\t            this._aborted = false;\n\t\n\t            image.addEventListener('load', function (event) {\n\t                if (_this2.isAborted()) {\n\t                    return;\n\t                }\n\t\n\t                var texture = new _three2['default'].Texture();\n\t\n\t                texture.image = image;\n\t                texture.needsUpdate = true;\n\t\n\t                // Silky smooth images when tilted\n\t                texture.magFilter = _three2['default'].LinearFilter;\n\t                texture.minFilter = _three2['default'].LinearMipMapLinearFilter;\n\t\n\t                // TODO: Set this to renderer.getMaxAnisotropy() / 4\n\t                texture.anisotropy = 4;\n\t\n\t                texture.needsUpdate = true;\n\t\n\t                // Something went wrong and the tile or its material is missing\n\t                //\n\t                // Possibly removed by the cache before the image loaded\n\t                if (!_this2._mesh || !_this2._mesh.children[0] || !_this2._mesh.children[0].material) {\n\t                    return;\n\t                }\n\t\n\t                _this2._mesh.children[0].material.map = texture;\n\t                _this2._mesh.children[0].material.needsUpdate = true;\n\t\n\t                _this2._texture = texture;\n\t                _this2._ready = true;\n\t            }, false);\n\t\n\t            // image.addEventListener('progress', event => {}, false);\n\t            // image.addEventListener('error', event => {}, false);\n\t\n\t            image.crossOrigin = '';\n\t\n\t            // Load image\n\t            image.src = url;\n\t\n\t            this._image = image;\n\t        }\n\t    }, {\n\t        key: '_abortRequest',\n\t        value: function _abortRequest() {\n\t            if (!this._image || this._ready) {\n\t                return;\n\t            }\n\t\n\t            this._aborted = true;\n\t\n\t            this._image.src = '';\n\t        }\n\t    }]);\n\t\n\t    return ImageTile;\n\t})(_Tile3['default']);\n\t\n\texports['default'] = ImageTile;\n\t\n\tvar noNew = function noNew(quadcode, path, layer) {\n\t    return new ImageTile(quadcode, path, layer);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.imageTile = noNew;\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// Manages a single tile and its layers\n\t\n\tvar r2d = 180 / Math.PI;\n\t\n\tvar tileURLRegex = /\\{([szxy])\\}/g;\n\t\n\tvar Tile = (function () {\n\t  function Tile(quadcode, path, layer) {\n\t    _classCallCheck(this, Tile);\n\t\n\t    this._layer = layer;\n\t    this._world = layer._world;\n\t    this._quadcode = quadcode;\n\t    this._path = path;\n\t\n\t    this._ready = false;\n\t    this._aborted = false;\n\t\n\t    this._tile = this._quadcodeToTile(quadcode);\n\t\n\t    // Bottom-left and top-right bounds in WGS84 coordinates\n\t    this._boundsLatLon = this._tileBoundsWGS84(this._tile);\n\t\n\t    // Bottom-left and top-right bounds in world coordinates\n\t    this._boundsWorld = this._tileBoundsFromWGS84(this._boundsLatLon);\n\t\n\t    // Tile center in world coordinates\n\t    this._center = this._boundsToCenter(this._boundsWorld);\n\t\n\t    // Tile center in projected coordinates\n\t    this._centerLatlon = this._world.pointToLatLon((0, _geoPoint.point)(this._center[0], this._center[1]));\n\t\n\t    // Length of a tile side in world coorindates\n\t    this._side = this._getSide(this._boundsWorld);\n\t\n\t    // Point scale for tile (for unit conversion)\n\t    this._pointScale = this._world.pointScale(this._centerLatlon);\n\t  }\n\t\n\t  // Returns true if the tile mesh and texture are ready to be used\n\t  // Otherwise, returns false\n\t\n\t  _createClass(Tile, [{\n\t    key: 'isReady',\n\t    value: function isReady() {\n\t      return this._ready;\n\t    }\n\t  }, {\n\t    key: 'isAborted',\n\t    value: function isAborted() {\n\t      return this._aborted;\n\t    }\n\t\n\t    // Request data for the tile\n\t  }, {\n\t    key: 'requestTileAsync',\n\t    value: function requestTileAsync() {}\n\t  }, {\n\t    key: 'getQuadcode',\n\t    value: function getQuadcode() {\n\t      return this._quadcode;\n\t    }\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds() {\n\t      return this._boundsWorld;\n\t    }\n\t  }, {\n\t    key: 'getCenter',\n\t    value: function getCenter() {\n\t      return this._center;\n\t    }\n\t  }, {\n\t    key: 'getSide',\n\t    value: function getSide() {\n\t      return this._side;\n\t    }\n\t  }, {\n\t    key: 'getMesh',\n\t    value: function getMesh() {\n\t      return this._mesh;\n\t    }\n\t  }, {\n\t    key: 'getPickingMesh',\n\t    value: function getPickingMesh() {\n\t      return this._pickingMesh;\n\t    }\n\t\n\t    // Destroys the tile and removes it from the layer and memory\n\t    //\n\t    // Ensure that this leaves no trace of the tile – no textures, no meshes,\n\t    // nothing in memory or the GPU\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // console.log('Destroying tile', this._quadcode);\n\t\n\t      // Delete reference to layer and world\n\t      this._layer = null;\n\t      this._world = null;\n\t\n\t      // Delete location references\n\t      this._boundsLatLon = null;\n\t      this._boundsWorld = null;\n\t      this._center = null;\n\t\n\t      // Done if no mesh\n\t      if (!this._mesh && !this._pickingMesh) {\n\t        return;\n\t      }\n\t\n\t      this.destroyMesh(this._mesh);\n\t      this.destroyMesh(this._pickingMesh);\n\t\n\t      this._mesh = null;\n\t      this._pickingMesh = null;\n\t    }\n\t  }, {\n\t    key: 'destroyMesh',\n\t    value: function destroyMesh(mesh) {\n\t      var _this = this;\n\t\n\t      var dispose = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\t\n\t      if (mesh) {\n\t        if (mesh.children) {\n\t          mesh.children.forEach(function (child) {\n\t            mesh.remove(child);\n\t            _this.destroyMesh(child);\n\t          });\n\t        }\n\t\n\t        if (dispose) {\n\t          if (mesh.geometry) {\n\t            mesh.geometry.dispose();\n\t            mesh.geometry = null;\n\t          }\n\t\n\t          if (mesh.material) {\n\t            if (mesh.material.map) {\n\t              mesh.material.map.dispose();\n\t              mesh.material.map = null;\n\t            }\n\t\n\t            mesh.material.dispose();\n\t            mesh.material = null;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: '_createMesh',\n\t    value: function _createMesh() {}\n\t  }, {\n\t    key: '_createDebugMesh',\n\t    value: function _createDebugMesh() {}\n\t  }, {\n\t    key: '_getTileURL',\n\t    value: function _getTileURL(urlParams) {\n\t      if (!urlParams.s) {\n\t        // Default to a random choice of a, b or c\n\t        urlParams.s = String.fromCharCode(97 + Math.floor(Math.random() * 3));\n\t      }\n\t\n\t      tileURLRegex.lastIndex = 0;\n\t      return this._path.replace(tileURLRegex, function (value, key) {\n\t        // Replace with paramter, otherwise keep existing value\n\t        return urlParams[key];\n\t      });\n\t    }\n\t\n\t    // Convert from quadcode to TMS tile coordinates\n\t  }, {\n\t    key: '_quadcodeToTile',\n\t    value: function _quadcodeToTile(quadcode) {\n\t      var x = 0;\n\t      var y = 0;\n\t      var z = quadcode.length;\n\t\n\t      for (var i = z; i > 0; i--) {\n\t        var mask = 1 << i - 1;\n\t        var q = +quadcode[z - i];\n\t        if (q === 1) {\n\t          x |= mask;\n\t        }\n\t        if (q === 2) {\n\t          y |= mask;\n\t        }\n\t        if (q === 3) {\n\t          x |= mask;\n\t          y |= mask;\n\t        }\n\t      }\n\t\n\t      return [x, y, z];\n\t    }\n\t\n\t    // Convert WGS84 tile bounds to world coordinates\n\t  }, {\n\t    key: '_tileBoundsFromWGS84',\n\t    value: function _tileBoundsFromWGS84(boundsWGS84) {\n\t      var sw = this._layer._world.latLonToPoint((0, _geoLatLon.latLon)(boundsWGS84[1], boundsWGS84[0]));\n\t      var ne = this._layer._world.latLonToPoint((0, _geoLatLon.latLon)(boundsWGS84[3], boundsWGS84[2]));\n\t\n\t      return [sw.x, sw.y, ne.x, ne.y];\n\t    }\n\t\n\t    // Get tile bounds in WGS84 coordinates\n\t  }, {\n\t    key: '_tileBoundsWGS84',\n\t    value: function _tileBoundsWGS84(tile) {\n\t      var e = this._tile2lon(tile[0] + 1, tile[2]);\n\t      var w = this._tile2lon(tile[0], tile[2]);\n\t      var s = this._tile2lat(tile[1] + 1, tile[2]);\n\t      var n = this._tile2lat(tile[1], tile[2]);\n\t      return [w, s, e, n];\n\t    }\n\t  }, {\n\t    key: '_tile2lon',\n\t    value: function _tile2lon(x, z) {\n\t      return x / Math.pow(2, z) * 360 - 180;\n\t    }\n\t  }, {\n\t    key: '_tile2lat',\n\t    value: function _tile2lat(y, z) {\n\t      var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n\t      return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n\t    }\n\t  }, {\n\t    key: '_boundsToCenter',\n\t    value: function _boundsToCenter(bounds) {\n\t      var x = bounds[0] + (bounds[2] - bounds[0]) / 2;\n\t      var y = bounds[1] + (bounds[3] - bounds[1]) / 2;\n\t\n\t      return [x, y];\n\t    }\n\t  }, {\n\t    key: '_getSide',\n\t    value: function _getSide(bounds) {\n\t      return new _three2['default'].Vector3(bounds[0], 0, bounds[3]).sub(new _three2['default'].Vector3(bounds[0], 0, bounds[1])).length();\n\t    }\n\t  }]);\n\t\n\t  return Tile;\n\t})();\n\t\n\texports['default'] = Tile;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\t\tvalue: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// jscs:disable\n\t/* eslint-disable */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\n\t\n\tBoxHelper = function (object) {\n\t\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\n\t\t\tvar geometry = new _three2['default'].BufferGeometry();\n\t\t\tgeometry.setIndex(new _three2['default'].BufferAttribute(indices, 1));\n\t\t\tgeometry.addAttribute('position', new _three2['default'].BufferAttribute(positions, 3));\n\t\n\t\t\t_three2['default'].LineSegments.call(this, geometry, new _three2['default'].LineBasicMaterial({ linewidth: 2, color: 0xff0000 }));\n\t\n\t\t\tif (object !== undefined) {\n\t\n\t\t\t\t\tthis.update(object);\n\t\t\t}\n\t};\n\t\n\tBoxHelper.prototype = Object.create(_three2['default'].LineSegments.prototype);\n\tBoxHelper.prototype.constructor = BoxHelper;\n\t\n\tBoxHelper.prototype.update = (function () {\n\t\n\t\t\tvar box = new _three2['default'].Box3();\n\t\n\t\t\treturn function (object) {\n\t\n\t\t\t\t\tbox.setFromObject(object);\n\t\n\t\t\t\t\tif (box.isEmpty()) return;\n\t\n\t\t\t\t\tvar min = box.min;\n\t\t\t\t\tvar max = box.max;\n\t\n\t\t\t\t\t/*\r\n\t      5____4\r\n\t    1/___0/|\r\n\t    | 6__|_7\r\n\t    2/___3/\r\n\t    \t\t0: max.x, max.y, max.z\r\n\t    1: min.x, max.y, max.z\r\n\t    2: min.x, min.y, max.z\r\n\t    3: max.x, min.y, max.z\r\n\t    4: max.x, max.y, min.z\r\n\t    5: min.x, max.y, min.z\r\n\t    6: min.x, min.y, min.z\r\n\t    7: max.x, min.y, min.z\r\n\t    */\n\t\n\t\t\t\t\tvar position = this.geometry.attributes.position;\n\t\t\t\t\tvar array = position.array;\n\t\n\t\t\t\t\tarray[0] = max.x;array[1] = max.y;array[2] = max.z;\n\t\t\t\t\tarray[3] = min.x;array[4] = max.y;array[5] = max.z;\n\t\t\t\t\tarray[6] = min.x;array[7] = min.y;array[8] = max.z;\n\t\t\t\t\tarray[9] = max.x;array[10] = min.y;array[11] = max.z;\n\t\t\t\t\tarray[12] = max.x;array[13] = max.y;array[14] = min.z;\n\t\t\t\t\tarray[15] = min.x;array[16] = max.y;array[17] = min.z;\n\t\t\t\t\tarray[18] = min.x;array[19] = min.y;array[20] = min.z;\n\t\t\t\t\tarray[21] = max.x;array[22] = min.y;array[23] = min.z;\n\t\n\t\t\t\t\tposition.needsUpdate = true;\n\t\n\t\t\t\t\tthis.geometry.computeBoundingSphere();\n\t\t\t};\n\t})();\n\t\n\texports['default'] = BoxHelper;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\texports['default'] = function (colour, skyboxTarget) {\n\t  var canvas = document.createElement('canvas');\n\t  canvas.width = 1;\n\t  canvas.height = 1;\n\t\n\t  var context = canvas.getContext('2d');\n\t  context.fillStyle = colour;\n\t  context.fillRect(0, 0, canvas.width, canvas.height);\n\t  // context.strokeStyle = '#D0D0CF';\n\t  // context.strokeRect(0, 0, canvas.width, canvas.height);\n\t\n\t  var texture = new _three2['default'].Texture(canvas);\n\t\n\t  // // Silky smooth images when tilted\n\t  // texture.magFilter = THREE.LinearFilter;\n\t  // texture.minFilter = THREE.LinearMipMapLinearFilter;\n\t  // //\n\t  // // // TODO: Set this to renderer.getMaxAnisotropy() / 4\n\t  // texture.anisotropy = 4;\n\t\n\t  // texture.wrapS = THREE.RepeatWrapping;\n\t  // texture.wrapT = THREE.RepeatWrapping;\n\t  // texture.repeat.set(segments, segments);\n\t\n\t  texture.needsUpdate = true;\n\t\n\t  var material;\n\t\n\t  if (!skyboxTarget) {\n\t    material = new _three2['default'].MeshBasicMaterial({\n\t      map: texture,\n\t      depthWrite: false\n\t    });\n\t  } else {\n\t    material = new _three2['default'].MeshStandardMaterial({\n\t      map: texture,\n\t      depthWrite: false\n\t    });\n\t    material.roughness = 1;\n\t    material.metalness = 0.1;\n\t    material.envMap = skyboxTarget;\n\t  }\n\t\n\t  return material;\n\t};\n\t\n\t;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _TileLayer2 = __webpack_require__(54);\n\t\n\tvar _TileLayer3 = _interopRequireDefault(_TileLayer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _GeoJSONTile = __webpack_require__(72);\n\t\n\tvar _GeoJSONTile2 = _interopRequireDefault(_GeoJSONTile);\n\t\n\tvar _lodashThrottle = __webpack_require__(20);\n\t\n\tvar _lodashThrottle2 = _interopRequireDefault(_lodashThrottle);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\t// TODO: Offer on-the-fly slicing of static, non-tile-based GeoJSON files into a\n\t// tile grid using geojson-vt\n\t//\n\t// See: https://github.com/mapbox/geojson-vt\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// TODO: Consider pausing per-frame output during movement so there's little to\n\t// no jank caused by previous tiles still processing\n\t\n\t// This tile layer only updates the quadtree after world movement has occurred\n\t//\n\t// Tiles from previous quadtree updates are updated and outputted every frame\n\t// (or at least every frame, throttled to some amount)\n\t//\n\t// This is because the complexity of TopoJSON tiles requires a lot of processing\n\t// and so makes movement janky if updates occur every frame – only updating\n\t// after movement means frame drops are less obvious due to heavy processing\n\t// occurring while the view is generally stationary\n\t//\n\t// The downside is that until new tiles are requested and outputted you will\n\t// see blank spaces as you orbit and move around\n\t//\n\t// An added benefit is that it dramatically reduces the number of tiles being\n\t// requested over a period of time and the time it takes to go from request to\n\t// screen output\n\t//\n\t// It may be possible to perform these updates per-frame once Web Worker\n\t// processing is added\n\t\n\tvar GeoJSONTileLayer = (function (_TileLayer) {\n\t  _inherits(GeoJSONTileLayer, _TileLayer);\n\t\n\t  function GeoJSONTileLayer(path, options) {\n\t    _classCallCheck(this, GeoJSONTileLayer);\n\t\n\t    var defaults = {\n\t      maxLOD: 14,\n\t      distance: 30000,\n\t      workers: false\n\t    };\n\t\n\t    options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(GeoJSONTileLayer.prototype), 'constructor', this).call(this, options);\n\t\n\t    this.defaults = defaults;\n\t\n\t    this._path = path;\n\t  }\n\t\n\t  _createClass(GeoJSONTileLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _get(Object.getPrototypeOf(GeoJSONTileLayer.prototype), '_onAdd', _this).call(_this, world).then(function () {\n\t          // Trigger initial quadtree calculation on the next frame\n\t          //\n\t          // TODO: This is a hack to ensure the camera is all set up - a better\n\t          // solution should be found\n\t          setTimeout(function () {\n\t            _this._calculateLOD();\n\t            _this._initEvents();\n\t          }, 0);\n\t\n\t          resolve(_this);\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: '_initEvents',\n\t    value: function _initEvents() {\n\t      // Run LOD calculations based on render calls\n\t      //\n\t      // Throttled to 1 LOD calculation per 100ms\n\t      this._throttledWorldUpdate = (0, _lodashThrottle2['default'])(this._onWorldUpdate, 100);\n\t\n\t      this._world.on('preUpdate', this._throttledWorldUpdate, this);\n\t      this._world.on('move', this._onWorldMove, this);\n\t      this._world.on('controlsMove', this._onControlsMove, this);\n\t    }\n\t\n\t    // Update and output tiles each frame (throttled)\n\t  }, {\n\t    key: '_onWorldUpdate',\n\t    value: function _onWorldUpdate() {\n\t      if (this._pauseOutput || this._disableOutput) {\n\t        return;\n\t      }\n\t\n\t      this._outputTiles();\n\t    }\n\t\n\t    // Update tiles grid after world move, but don't output them\n\t  }, {\n\t    key: '_onWorldMove',\n\t    value: function _onWorldMove(latlon, point) {\n\t      if (this._disableOutput) {\n\t        return;\n\t      }\n\t\n\t      this._pauseOutput = false;\n\t      this._calculateLOD();\n\t    }\n\t\n\t    // Pause updates during control movement for less visual jank\n\t  }, {\n\t    key: '_onControlsMove',\n\t    value: function _onControlsMove() {\n\t      if (this._disableOutput) {\n\t        return;\n\t      }\n\t\n\t      this._pauseOutput = true;\n\t    }\n\t  }, {\n\t    key: '_createTile',\n\t    value: function _createTile(quadcode, layer) {\n\t      var newOptions = (0, _lodashAssign2['default'])({}, this.defaults, this._options, {\n\t        outputToScene: false\n\t      });\n\t\n\t      delete newOptions.attribution;\n\t\n\t      return new _GeoJSONTile2['default'](quadcode, this._path, layer, newOptions);\n\t    }\n\t  }, {\n\t    key: 'hide',\n\t    value: function hide() {\n\t      this._pauseOutput = true;\n\t      _get(Object.getPrototypeOf(GeoJSONTileLayer.prototype), 'hide', this).call(this);\n\t    }\n\t  }, {\n\t    key: 'show',\n\t    value: function show() {\n\t      this._pauseOutput = false;\n\t      _get(Object.getPrototypeOf(GeoJSONTileLayer.prototype), 'show', this).call(this);\n\t    }\n\t\n\t    // Destroys the layer and removes it from the scene and memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      this._world.off('preUpdate', this._throttledWorldUpdate);\n\t      this._world.off('move', this._onWorldMove);\n\t\n\t      this._throttledWorldUpdate = null;\n\t\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(GeoJSONTileLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return GeoJSONTileLayer;\n\t})(_TileLayer3['default']);\n\t\n\texports['default'] = GeoJSONTileLayer;\n\t\n\tvar noNew = function noNew(path, options) {\n\t  return new GeoJSONTileLayer(path, options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.geoJSONTileLayer = noNew;\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _Tile2 = __webpack_require__(68);\n\t\n\tvar _Tile3 = _interopRequireDefault(_Tile2);\n\t\n\tvar _GeoJSONLayer = __webpack_require__(73);\n\t\n\tvar _GeoJSONWorkerLayer = __webpack_require__(91);\n\t\n\tvar _vendorBoxHelper = __webpack_require__(69);\n\t\n\tvar _vendorBoxHelper2 = _interopRequireDefault(_vendorBoxHelper);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _reqwest = __webpack_require__(74);\n\t\n\tvar _reqwest2 = _interopRequireDefault(_reqwest);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\t// import Offset from 'polygon-offset';\n\t\n\tvar _utilGeoJSON = __webpack_require__(76);\n\t\n\tvar _utilGeoJSON2 = _interopRequireDefault(_utilGeoJSON);\n\t\n\tvar _utilBuffer = __webpack_require__(82);\n\t\n\tvar _utilBuffer2 = _interopRequireDefault(_utilBuffer);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\t// TODO: Map picking IDs to some reference within the tile data / geometry so\n\t// that something useful can be done when an object is picked / clicked on\n\t\n\t// TODO: Make sure nothing is left behind in the heap after calling destroy()\n\t\n\t// TODO: Perform tile request and processing in a Web Worker\n\t//\n\t// Use Operative (https://github.com/padolsey/operative)\n\t//\n\t// Would it make sense to have the worker functionality defined in a static\n\t// method so it only gets initialised once and not on every tile instance?\n\t//\n\t// Otherwise, worker processing logic would have to go in the tile layer so not\n\t// to waste loads of time setting up a brand new worker with three.js for each\n\t// tile every single time.\n\t//\n\t// Unsure of the best way to get three.js and VIZI into the worker\n\t//\n\t// Would need to set up a CRS / projection identical to the world instance\n\t//\n\t// Is it possible to bypass requirements on external script by having multiple\n\t// simple worker methods that each take enough inputs to perform a single task\n\t// without requiring VIZI or three.js? So long as the heaviest logic is done in\n\t// the worker and transferrable objects are used then it should be better than\n\t// nothing. Would probably still need things like earcut...\n\t//\n\t// After all, the three.js logic and object creation will still need to be\n\t// done on the main thread regardless so the worker should try to do as much as\n\t// possible with as few dependencies as possible.\n\t//\n\t// Have a look at how this is done in Tangram before implementing anything as\n\t// the approach there is pretty similar and robust.\n\t\n\tvar GeoJSONTile = (function (_Tile) {\n\t  _inherits(GeoJSONTile, _Tile);\n\t\n\t  function GeoJSONTile(quadcode, path, layer, options) {\n\t    _classCallCheck(this, GeoJSONTile);\n\t\n\t    _get(Object.getPrototypeOf(GeoJSONTile.prototype), 'constructor', this).call(this, quadcode, path, layer);\n\t\n\t    this._defaultStyle = _utilGeoJSON2['default'].defaultStyle;\n\t\n\t    var defaults = {\n\t      workers: false,\n\t      output: true,\n\t      outputToScene: false,\n\t      interactive: false,\n\t      topojson: false,\n\t      filter: null,\n\t      onEachFeature: null,\n\t      polygonMaterial: null,\n\t      onPolygonMesh: null,\n\t      onPolygonBufferAttributes: null,\n\t      polylineMaterial: null,\n\t      onPolylineMesh: null,\n\t      onPolylineBufferAttributes: null,\n\t      pointGeometry: null,\n\t      pointMaterial: null,\n\t      onPointMesh: null,\n\t      style: _utilGeoJSON2['default'].defaultStyle,\n\t      keepFeatures: false\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    if (typeof options.style === 'function') {\n\t      _options.style = options.style;\n\t    } else {\n\t      _options.style = (0, _lodashAssign2['default'])({}, defaults.style, options.style);\n\t    }\n\t\n\t    this._options = _options;\n\t  }\n\t\n\t  // Request data for the tile\n\t\n\t  _createClass(GeoJSONTile, [{\n\t    key: 'requestTileAsync',\n\t    value: function requestTileAsync() {\n\t      var _this = this;\n\t\n\t      // Making this asynchronous really speeds up the LOD framerate\n\t      setTimeout(function () {\n\t        if (!_this._mesh) {\n\t          _this._mesh = _this._createMesh();\n\t          // this._shadowCanvas = this._createShadowCanvas();\n\t        }\n\t\n\t        _this._requestTile();\n\t      }, 0);\n\t    }\n\t\n\t    // TODO: Destroy GeoJSONLayer\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // Cancel any pending requests\n\t      this._abortRequest();\n\t\n\t      // Clear request reference\n\t      this._request = null;\n\t\n\t      if (this._geojsonLayer) {\n\t        this._geojsonLayer.destroy();\n\t        this._geojsonLayer = null;\n\t      }\n\t\n\t      this._mesh = null;\n\t\n\t      // TODO: Properly dispose of picking mesh\n\t      this._pickingMesh = null;\n\t\n\t      _get(Object.getPrototypeOf(GeoJSONTile.prototype), 'destroy', this).call(this);\n\t    }\n\t  }, {\n\t    key: '_createMesh',\n\t    value: function _createMesh() {\n\t      // Something went wrong and the tile\n\t      //\n\t      // Possibly removed by the cache before loaded\n\t      if (!this._center) {\n\t        return;\n\t      }\n\t\n\t      var mesh = new _three2['default'].Object3D();\n\t      // mesh.add(this._createDebugMesh());\n\t\n\t      return mesh;\n\t    }\n\t  }, {\n\t    key: '_createDebugMesh',\n\t    value: function _createDebugMesh() {\n\t      var canvas = document.createElement('canvas');\n\t      canvas.width = 256;\n\t      canvas.height = 256;\n\t\n\t      var context = canvas.getContext('2d');\n\t      context.font = 'Bold 20px Helvetica Neue, Verdana, Arial';\n\t      context.fillStyle = '#ff0000';\n\t      context.fillText(this._quadcode, 20, canvas.width / 2 - 5);\n\t      context.fillText(this._tile.toString(), 20, canvas.width / 2 + 25);\n\t\n\t      var texture = new _three2['default'].Texture(canvas);\n\t\n\t      // Silky smooth images when tilted\n\t      texture.magFilter = _three2['default'].LinearFilter;\n\t      texture.minFilter = _three2['default'].LinearMipMapLinearFilter;\n\t\n\t      // TODO: Set this to renderer.getMaxAnisotropy() / 4\n\t      texture.anisotropy = 4;\n\t\n\t      texture.needsUpdate = true;\n\t\n\t      var material = new _three2['default'].MeshBasicMaterial({\n\t        map: texture,\n\t        transparent: true,\n\t        depthWrite: false\n\t      });\n\t\n\t      var geom = new _three2['default'].PlaneBufferGeometry(this._side, this._side, 1);\n\t      var mesh = new _three2['default'].Mesh(geom, material);\n\t\n\t      mesh.rotation.x = -90 * Math.PI / 180;\n\t      mesh.position.y = 0.1;\n\t\n\t      return mesh;\n\t    }\n\t\n\t    // _createShadowCanvas() {\n\t    //   var canvas = document.createElement('canvas');\n\t    //\n\t    //   // Rendered at a low resolution and later scaled up for a low-quality blur\n\t    //   canvas.width = 512;\n\t    //   canvas.height = 512;\n\t    //\n\t    //   return canvas;\n\t    // }\n\t\n\t    // _addShadow(coordinates) {\n\t    //   var ctx = this._shadowCanvas.getContext('2d');\n\t    //   var width = this._shadowCanvas.width;\n\t    //   var height = this._shadowCanvas.height;\n\t    //\n\t    //   var _coords;\n\t    //   var _offset;\n\t    //   var offset = new Offset();\n\t    //\n\t    //   // Transform coordinates to shadowCanvas space and draw on canvas\n\t    //   coordinates.forEach((ring, index) => {\n\t    //     ctx.beginPath();\n\t    //\n\t    //     _coords = ring.map(coord => {\n\t    //       var xFrac = (coord[0] - this._boundsWorld[0]) / this._side;\n\t    //       var yFrac = (coord[1] - this._boundsWorld[3]) / this._side;\n\t    //       return [xFrac * width, yFrac * height];\n\t    //     });\n\t    //\n\t    //     if (index > 0) {\n\t    //       _offset = _coords;\n\t    //     } else {\n\t    //       _offset = offset.data(_coords).padding(1.3);\n\t    //     }\n\t    //\n\t    //     // TODO: This is super flaky and crashes the browser if run on anything\n\t    //     // put the outer ring (potentially due to winding)\n\t    //     _offset.forEach((coord, index) => {\n\t    //       // var xFrac = (coord[0] - this._boundsWorld[0]) / this._side;\n\t    //       // var yFrac = (coord[1] - this._boundsWorld[3]) / this._side;\n\t    //\n\t    //       if (index === 0) {\n\t    //         ctx.moveTo(coord[0], coord[1]);\n\t    //       } else {\n\t    //         ctx.lineTo(coord[0], coord[1]);\n\t    //       }\n\t    //     });\n\t    //\n\t    //     ctx.closePath();\n\t    //   });\n\t    //\n\t    //   ctx.fillStyle = 'rgba(80, 80, 80, 0.7)';\n\t    //   ctx.fill();\n\t    // }\n\t\n\t  }, {\n\t    key: '_requestTile',\n\t    value: function _requestTile() {\n\t      var _this2 = this;\n\t\n\t      var urlParams = {\n\t        x: this._tile[0],\n\t        y: this._tile[1],\n\t        z: this._tile[2]\n\t      };\n\t\n\t      var url = this._getTileURL(urlParams);\n\t\n\t      this._aborted = false;\n\t\n\t      if (!this._options.workers) {\n\t        this._request = (0, _reqwest2['default'])({\n\t          url: url,\n\t          type: 'json',\n\t          crossOrigin: true,\n\t          headers: this._options.headers\n\t        }).then(function (res) {\n\t          // Clear request reference\n\t          _this2._request = null;\n\t          _this2._processTileData(res);\n\t        })['catch'](function (err) {\n\t          // Clear request reference\n\t          _this2._request = null;\n\t        });\n\t      } else {\n\t        this._processTileData(url);\n\t      }\n\t    }\n\t  }, {\n\t    key: '_processTileData',\n\t    value: function _processTileData(data) {\n\t      var _this3 = this;\n\t\n\t      // console.time(this._tile);\n\t\n\t      var GeoJSONClass = !this._options.workers ? _GeoJSONLayer.geoJSONLayer : _GeoJSONWorkerLayer.geoJSONWorkerLayer;\n\t\n\t      // Using this creates a huge amount of memory due to the quantity of tiles\n\t      this._geojsonLayer = GeoJSONClass(data, this._options);\n\t      this._geojsonLayer.addTo(this._world).then(function () {\n\t        // TODO: This never seems to be called on worker layers. Find out why.\n\t        if (_this3.isAborted()) {\n\t          // this._geojsonLayer._aborted = true;\n\t          // this._geojsonLayer = null;\n\t          return;\n\t        }\n\t\n\t        // TODO: This is a hack to stop old tile meshes hanging around. Fix or\n\t        // move to somewhere more robust.\n\t        //\n\t        // Could potentially just overwrite mesh on first index each time\n\t        //\n\t        // This makes some worker tiles to not appear properly – showing the\n\t        // points mesh but not the polygon mesh, etc.\n\t        //\n\t        // Only do this for non-worker layers for now as it seems to cause issues\n\t        // with worker tiles showing for a moment and then disappearing forever\n\t        if (!_this3._options.workers) {\n\t          _this3.destroyMesh(_this3._mesh);\n\t        }\n\t\n\t        // TOSO: Work out if the picking mesh needs destroying here\n\t        // this.destroyMesh(this._pickingMesh);\n\t\n\t        _this3._mesh.add(_this3._geojsonLayer._object3D);\n\t        _this3._pickingMesh = _this3._geojsonLayer._pickingMesh;\n\t\n\t        // Free the GeoJSON memory as we don't need it\n\t        //\n\t        // TODO: This should probably be a method within GeoJSONLayer\n\t        if (_this3._geojsonLayer._geojson) {\n\t          _this3._geojsonLayer._geojson = null;\n\t        }\n\t\n\t        // TODO: Fix or store shadow canvas stuff and get rid of this code\n\t        // Draw footprint on shadow canvas\n\t        //\n\t        // TODO: Disabled for the time-being until it can be sped up / moved to\n\t        // a worker\n\t        // this._addShadow(coordinates);\n\t\n\t        // Output shadow canvas\n\t\n\t        // TODO: Disabled for the time-being until it can be sped up / moved to\n\t        // a worker\n\t\n\t        // var texture = new THREE.Texture(this._shadowCanvas);\n\t        //\n\t        // // Silky smooth images when tilted\n\t        // texture.magFilter = THREE.LinearFilter;\n\t        // texture.minFilter = THREE.LinearMipMapLinearFilter;\n\t        //\n\t        // // TODO: Set this to renderer.getMaxAnisotropy() / 4\n\t        // texture.anisotropy = 4;\n\t        //\n\t        // texture.needsUpdate = true;\n\t        //\n\t        // var material;\n\t        // if (!this._world._environment._skybox) {\n\t        //   material = new THREE.MeshBasicMaterial({\n\t        //     map: texture,\n\t        //     transparent: true,\n\t        //     depthWrite: false\n\t        //   });\n\t        // } else {\n\t        //   material = new THREE.MeshStandardMaterial({\n\t        //     map: texture,\n\t        //     transparent: true,\n\t        //     depthWrite: false\n\t        //   });\n\t        //   material.roughness = 1;\n\t        //   material.metalness = 0.1;\n\t        //   material.envMap = this._world._environment._skybox.getRenderTarget();\n\t        // }\n\t        //\n\t        // var geom = new THREE.PlaneBufferGeometry(this._side, this._side, 1);\n\t        // var mesh = new THREE.Mesh(geom, material);\n\t        //\n\t        // mesh.castShadow = false;\n\t        // mesh.receiveShadow = false;\n\t        // mesh.renderOrder = 1;\n\t        //\n\t        // mesh.rotation.x = -90 * Math.PI / 180;\n\t        //\n\t        // this._mesh.add(mesh);\n\t\n\t        _this3._ready = true;\n\t        // console.timeEnd(this._tile);\n\t      })['catch'](function (err) {\n\t        console.error(err);\n\t      });\n\t    }\n\t  }, {\n\t    key: '_abortRequest',\n\t    value: function _abortRequest() {\n\t      if (!this._request && !this._options.workers || this._ready) {\n\t        return;\n\t      }\n\t\n\t      this._aborted = true;\n\t\n\t      if (this._request) {\n\t        this._request.abort();\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return GeoJSONTile;\n\t})(_Tile3['default']);\n\t\n\texports['default'] = GeoJSONTile;\n\t\n\tvar noNew = function noNew(quadcode, path, layer, options) {\n\t  return new GeoJSONTile(quadcode, path, layer, options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.geoJSONTile = noNew;\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// TODO: Consider adopting GeoJSON CSS\n\t// http://wiki.openstreetmap.org/wiki/Geojson_CSS\n\t\n\t// TODO: Allow interaction to be defined per-layer to save on resources\n\t//\n\t// For example, only allow polygons to be interactive via a polygonInteractive\n\t// option\n\t\n\tvar _LayerGroup2 = __webpack_require__(52);\n\t\n\tvar _LayerGroup3 = _interopRequireDefault(_LayerGroup2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _reqwest = __webpack_require__(74);\n\t\n\tvar _reqwest2 = _interopRequireDefault(_reqwest);\n\t\n\tvar _utilGeoJSON = __webpack_require__(76);\n\t\n\tvar _utilGeoJSON2 = _interopRequireDefault(_utilGeoJSON);\n\t\n\tvar _utilBuffer = __webpack_require__(82);\n\t\n\tvar _utilBuffer2 = _interopRequireDefault(_utilBuffer);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\tvar _geometryPolygonLayer = __webpack_require__(88);\n\t\n\tvar _geometryPolygonLayer2 = _interopRequireDefault(_geometryPolygonLayer);\n\t\n\tvar _geometryPolylineLayer = __webpack_require__(89);\n\t\n\tvar _geometryPolylineLayer2 = _interopRequireDefault(_geometryPolylineLayer);\n\t\n\tvar _geometryPointLayer = __webpack_require__(90);\n\t\n\tvar _geometryPointLayer2 = _interopRequireDefault(_geometryPointLayer);\n\t\n\tvar GeoJSONLayer = (function (_LayerGroup) {\n\t  _inherits(GeoJSONLayer, _LayerGroup);\n\t\n\t  function GeoJSONLayer(geojson, options) {\n\t    _classCallCheck(this, GeoJSONLayer);\n\t\n\t    var defaults = {\n\t      output: false,\n\t      interactive: false,\n\t      topojson: false,\n\t      filter: null,\n\t      onEachFeature: null,\n\t      polygonMaterial: null,\n\t      onPolygonMesh: null,\n\t      onPolygonBufferAttributes: null,\n\t      polylineMaterial: null,\n\t      onPolylineMesh: null,\n\t      onPolylineBufferAttributes: null,\n\t      pointGeometry: null,\n\t      pointMaterial: null,\n\t      onPointMesh: null,\n\t      style: _utilGeoJSON2['default'].defaultStyle,\n\t      keepFeatures: true\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    if (typeof options.style === 'function') {\n\t      _options.style = options.style;\n\t    } else {\n\t      _options.style = (0, _lodashAssign2['default'])({}, defaults.style, options.style);\n\t    }\n\t\n\t    _get(Object.getPrototypeOf(GeoJSONLayer.prototype), 'constructor', this).call(this, _options);\n\t\n\t    this._geojson = geojson;\n\t  }\n\t\n\t  _createClass(GeoJSONLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      // Only add to picking mesh if this layer is controlling output\n\t      //\n\t      // Otherwise, assume another component will eventually add a mesh to\n\t      // the picking scene\n\t      if (this.isOutput()) {\n\t        this._pickingMesh = new THREE.Object3D();\n\t        this.addToPicking(this._pickingMesh);\n\t      }\n\t\n\t      // Request data from URL if needed\n\t      if (typeof this._geojson === 'string') {\n\t        return this._requestData(this._geojson);\n\t      } else {\n\t        // Process and add GeoJSON to layer\n\t        return this._processData(this._geojson);\n\t      }\n\t    }\n\t  }, {\n\t    key: '_requestData',\n\t    value: function _requestData(url) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this._request = (0, _reqwest2['default'])({\n\t          url: url,\n\t          type: 'json',\n\t          crossOrigin: true\n\t        }).then(function (res) {\n\t          // Clear request reference\n\t          _this._request = null;\n\t          _this._processData(res).then(function () {\n\t            resolve(_this);\n\t          });\n\t        })['catch'](function (err) {\n\t          console.error(err);\n\t\n\t          // Clear request reference\n\t          _this._request = null;\n\t\n\t          reject(err);\n\t        });\n\t      });\n\t    }\n\t\n\t    // TODO: Wrap into a helper method so this isn't duplicated in the tiled\n\t    // GeoJSON output layer\n\t    //\n\t    // Need to be careful as to not make it impossible to fork this off into a\n\t    // worker script at a later stage\n\t  }, {\n\t    key: '_processData',\n\t    value: function _processData(data) {\n\t      var _this2 = this;\n\t\n\t      return new Promise(function (resolve) {\n\t        // Collects features into a single FeatureCollection\n\t        //\n\t        // Also converts TopoJSON to GeoJSON if instructed\n\t        _this2._geojson = _utilGeoJSON2['default'].collectFeatures(data, _this2._options.topojson);\n\t\n\t        // TODO: Check that GeoJSON is valid / usable\n\t\n\t        var features = _this2._geojson.features;\n\t\n\t        // Run filter, if provided\n\t        if (_this2._options.filter) {\n\t          features = _this2._geojson.features.filter(_this2._options.filter);\n\t        }\n\t\n\t        var defaults = {};\n\t\n\t        // Assume that a style won't be set per feature\n\t        var style = _this2._options.style;\n\t\n\t        var layerPromises = [];\n\t\n\t        var options;\n\t        features.forEach(function (feature) {\n\t          // Get per-feature style object, if provided\n\t          if (typeof _this2._options.style === 'function') {\n\t            style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, _this2._options.style(feature));\n\t          }\n\t\n\t          options = (0, _lodashAssign2['default'])({}, defaults, {\n\t            // If merging feature layers, stop them outputting themselves\n\t            // If not, let feature layers output themselves to the world\n\t            output: !_this2.isOutput(),\n\t            interactive: _this2._options.interactive,\n\t            style: style\n\t          });\n\t\n\t          var layer = _this2._featureToLayer(feature, options);\n\t\n\t          if (!layer) {\n\t            return;\n\t          }\n\t\n\t          // Sometimes you don't want to store a reference to the feature\n\t          //\n\t          // For example, to save memory when being used by tile layers\n\t          if (_this2._options.keepFeatures) {\n\t            layer.feature = feature;\n\t          }\n\t\n\t          // If defined, call a function for each feature\n\t          //\n\t          // This is commonly used for adding event listeners from the user script\n\t          if (_this2._options.onEachFeature) {\n\t            _this2._options.onEachFeature(feature, layer);\n\t          }\n\t\n\t          // TODO: Make this a promise array and only continue on completion\n\t          layerPromises.push(_this2.addLayer(layer));\n\t        });\n\t\n\t        Promise.all(layerPromises).then(function (results) {\n\t          // If merging layers do that now, otherwise skip as the geometry layers\n\t          // should have already outputted themselves\n\t          if (!_this2.isOutput()) {\n\t            resolve();\n\t            return;\n\t          }\n\t\n\t          // From here on we can assume that we want to merge the layers\n\t\n\t          var polygonAttributes = [];\n\t          var polygonOutlineAttributes = [];\n\t          var polygonAttributeLengths = {\n\t            positions: 3,\n\t            normals: 3,\n\t            colors: 3\n\t          };\n\t          var polygonFlat = true;\n\t\n\t          var polylineAttributes = [];\n\t          var polylineAttributeLengths = {\n\t            positions: 3,\n\t            colors: 3\n\t          };\n\t          var polylineFlat = true;\n\t\n\t          var pointAttributes = [];\n\t          var pointAttributeLengths = {\n\t            positions: 3,\n\t            normals: 3,\n\t            colors: 3\n\t          };\n\t          var pointFlat = true;\n\t\n\t          _this2._layers.forEach(function (layer) {\n\t            if (layer instanceof _geometryPolygonLayer2['default']) {\n\t              polygonAttributes.push(layer.getBufferAttributes());\n\t\n\t              var outlineBufferAttributes = layer.getOutlineBufferAttributes();\n\t              if (outlineBufferAttributes) {\n\t                polygonOutlineAttributes.push(outlineBufferAttributes);\n\t              }\n\t\n\t              if (polygonFlat && !layer.isFlat()) {\n\t                polygonFlat = false;\n\t              }\n\t\n\t              if (_this2._options.interactive) {\n\t                polygonAttributeLengths.pickingIds = 1;\n\t              }\n\t            } else if (layer instanceof _geometryPolylineLayer2['default']) {\n\t              polylineAttributes.push(layer.getBufferAttributes());\n\t\n\t              if (polylineFlat && !layer.isFlat()) {\n\t                polylineFlat = false;\n\t              }\n\t\n\t              if (_this2._options.interactive) {\n\t                polylineAttributeLengths.pickingIds = 1;\n\t              }\n\t            } else if (layer instanceof _geometryPointLayer2['default']) {\n\t              pointAttributes.push(layer.getBufferAttributes());\n\t\n\t              if (pointFlat && !layer.isFlat()) {\n\t                pointFlat = false;\n\t              }\n\t\n\t              if (_this2._options.interactive) {\n\t                pointAttributeLengths.pickingIds = 1;\n\t              }\n\t            }\n\t          });\n\t\n\t          var style;\n\t\n\t          if (polygonAttributes.length > 0) {\n\t            var mergedPolygonAttributes = _utilBuffer2['default'].mergeAttributes(polygonAttributes);\n\t\n\t            var mergedPolygonOutlineAttributes;\n\t            if (polygonOutlineAttributes.length > 0) {\n\t              mergedPolygonOutlineAttributes = _utilBuffer2['default'].mergeAttributes(polygonOutlineAttributes);\n\t            }\n\t\n\t            style = typeof _this2._options.style === 'function' ? _this2._options.style(_this2._geojson.features[0]) : _this2._options.style;\n\t            style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t            _this2._setPolygonMesh(mergedPolygonAttributes, polygonAttributeLengths, style, polygonFlat).then(function (result) {\n\t              _this2._polygonMesh = result.mesh;\n\t              _this2.add(_this2._polygonMesh);\n\t\n\t              if (mergedPolygonOutlineAttributes) {\n\t                style = typeof _this2._options.style === 'function' ? _this2._options.style(_this2._geojson.features[0]) : _this2._options.style;\n\t                style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t                if (style.outlineRenderOrder !== undefined) {\n\t                  style.lineRenderOrder = style.outlineRenderOrder;\n\t                } else {\n\t                  style.lineRenderOrder = style.renderOrder ? style.renderOrder + 1 : 4;\n\t                }\n\t\n\t                if (style.outlineWidth) {\n\t                  style.lineWidth = style.outlineWidth;\n\t                }\n\t\n\t                _this2._setPolylineMesh(mergedPolygonOutlineAttributes, polylineAttributeLengths, style, true).then(function (result) {\n\t                  _this2.add(result.mesh);\n\t                });\n\t              }\n\t\n\t              if (result.pickingMesh) {\n\t                _this2._pickingMesh.add(result.pickingMesh);\n\t              }\n\t            });\n\t          }\n\t\n\t          if (polylineAttributes.length > 0) {\n\t            var mergedPolylineAttributes = _utilBuffer2['default'].mergeAttributes(polylineAttributes);\n\t\n\t            style = typeof _this2._options.style === 'function' ? _this2._options.style(_this2._geojson.features[0]) : _this2._options.style;\n\t            style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t            _this2._setPolylineMesh(mergedPolylineAttributes, polylineAttributeLengths, style, polylineFlat).then(function (result) {\n\t              _this2._polylineMesh = result.mesh;\n\t              _this2.add(_this2._polylineMesh);\n\t\n\t              if (result.pickingMesh) {\n\t                _this2._pickingMesh.add(result.pickingMesh);\n\t              }\n\t            });\n\t          }\n\t\n\t          if (pointAttributes.length > 0) {\n\t            var mergedPointAttributes = _utilBuffer2['default'].mergeAttributes(pointAttributes);\n\t\n\t            style = typeof _this2._options.style === 'function' ? _this2._options.style(_this2._geojson.features[0]) : _this2._options.style;\n\t            style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t            _this2._setPointMesh(mergedPointAttributes, pointAttributeLengths, style, pointFlat).then(function (result) {\n\t              _this2._pointMesh = result.mesh;\n\t              _this2.add(_this2._pointMesh);\n\t\n\t              if (result.pickingMesh) {\n\t                _this2._pickingMesh.add(result.pickingMesh);\n\t              }\n\t            });\n\t          }\n\t\n\t          // Clean up layers\n\t          //\n\t          // TODO: Are there ever situations where the unmerged buffer attributes\n\t          // and coordinates would still be required?\n\t          _this2._layers.forEach(function (layer) {\n\t            layer.clearBufferAttributes();\n\t            layer.clearCoordinates();\n\t          });\n\t\n\t          resolve();\n\t        });\n\t      });\n\t    }\n\t\n\t    // Create and store mesh from buffer attributes\n\t    //\n\t    // TODO: Probably remove this and call static method directly as it's just a proxy\n\t  }, {\n\t    key: '_setPolygonMesh',\n\t    value: function _setPolygonMesh(attributes, attributeLengths, style, flat) {\n\t      return _geometryPolygonLayer2['default'].SetMesh(attributes, attributeLengths, flat, style, this._options, this._world._environment._skybox);\n\t    }\n\t  }, {\n\t    key: '_setPolylineMesh',\n\t    value: function _setPolylineMesh(attributes, attributeLengths, style, flat) {\n\t      return _geometryPolylineLayer2['default'].SetMesh(attributes, attributeLengths, flat, style, this._options);\n\t    }\n\t  }, {\n\t    key: '_setPointMesh',\n\t    value: function _setPointMesh(attributes, attributeLengths, style, flat) {\n\t      return _geometryPointLayer2['default'].SetMesh(attributes, attributeLengths, flat, style, this._options);\n\t    }\n\t\n\t    // TODO: Support all GeoJSON geometry types\n\t  }, {\n\t    key: '_featureToLayer',\n\t    value: function _featureToLayer(feature, options) {\n\t      var geometry = feature.geometry;\n\t      var coordinates = geometry.coordinates ? geometry.coordinates : null;\n\t\n\t      if (!coordinates || !geometry) {\n\t        return;\n\t      }\n\t\n\t      if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\n\t        // Get material instance to use for polygon, if provided\n\t        if (typeof this._options.polygonMaterial === 'function') {\n\t          options.polygonMaterial = this._options.polygonMaterial(feature);\n\t        }\n\t\n\t        if (typeof this._options.onPolygonMesh === 'function') {\n\t          options.onPolygonMesh = this._options.onPolygonMesh;\n\t        }\n\t\n\t        // Pass onBufferAttributes callback, if defined\n\t        if (typeof this._options.onPolygonBufferAttributes === 'function') {\n\t          options.onBufferAttributes = this._options.onPolygonBufferAttributes;\n\t        }\n\t\n\t        return new _geometryPolygonLayer2['default'](coordinates, options);\n\t      }\n\t\n\t      if (geometry.type === 'LineString' || geometry.type === 'MultiLineString') {\n\t        // Get material instance to use for line, if provided\n\t        if (typeof this._options.lineMaterial === 'function') {\n\t          options.lineMaterial = this._options.lineMaterial(feature);\n\t        }\n\t\n\t        if (typeof this._options.onPolylineMesh === 'function') {\n\t          options.onPolylineMesh = this._options.onPolylineMesh;\n\t        }\n\t\n\t        // Pass onBufferAttributes callback, if defined\n\t        if (typeof this._options.onPolylineBufferAttributes === 'function') {\n\t          options.onBufferAttributes = this._options.onPolylineBufferAttributes;\n\t        }\n\t\n\t        return new _geometryPolylineLayer2['default'](coordinates, options);\n\t      }\n\t\n\t      if (geometry.type === 'Point' || geometry.type === 'MultiPoint') {\n\t        // Get geometry object to use for point, if provided\n\t        if (typeof this._options.pointGeometry === 'function') {\n\t          options.pointGeometry = this._options.pointGeometry(feature);\n\t        }\n\t\n\t        // Get material instance to use for point, if provided\n\t        if (typeof this._options.pointMaterial === 'function') {\n\t          options.pointMaterial = this._options.pointMaterial(feature);\n\t        }\n\t\n\t        if (typeof this._options.onPointMesh === 'function') {\n\t          options.onPointMesh = this._options.onPointMesh;\n\t        }\n\t\n\t        return new _geometryPointLayer2['default'](coordinates, options);\n\t      }\n\t    }\n\t  }, {\n\t    key: '_abortRequest',\n\t    value: function _abortRequest() {\n\t      if (!this._request) {\n\t        return;\n\t      }\n\t\n\t      this._request.abort();\n\t    }\n\t\n\t    // Destroy the layers and remove them from the scene and memory\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // Cancel any pending requests\n\t      this._abortRequest();\n\t\n\t      // Clear request reference\n\t      this._request = null;\n\t\n\t      this._geojson = null;\n\t\n\t      if (this._pickingMesh) {\n\t        // TODO: Properly dispose of picking mesh\n\t        this._pickingMesh = null;\n\t      }\n\t\n\t      if (this._polygonMesh) {\n\t        this._polygonMesh = null;\n\t      }\n\t\n\t      if (this._polylineMesh) {\n\t        this._polylineMesh = null;\n\t      }\n\t\n\t      if (this._pointMesh) {\n\t        this._pointMesh = null;\n\t      }\n\t\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(GeoJSONLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return GeoJSONLayer;\n\t})(_LayerGroup3['default']);\n\t\n\texports['default'] = GeoJSONLayer;\n\t\n\tvar noNew = function noNew(geojson, options) {\n\t  return new GeoJSONLayer(geojson, options);\n\t};\n\t\n\texports.geoJSONLayer = noNew;\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t  * Reqwest! A general purpose XHR connection manager\n\t  * license MIT (c) Dustin Diaz 2015\n\t  * https://github.com/ded/reqwest\n\t  */\n\t\n\t!function (name, context, definition) {\n\t  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n\t  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\t  else context[name] = definition()\n\t}('reqwest', this, function () {\n\t\n\t  var context = this\n\t\n\t  if ('window' in context) {\n\t    var doc = document\n\t      , byTag = 'getElementsByTagName'\n\t      , head = doc[byTag]('head')[0]\n\t  } else {\n\t    var XHR2\n\t    try {\n\t      XHR2 = __webpack_require__(75)\n\t    } catch (ex) {\n\t      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')\n\t    }\n\t  }\n\t\n\t\n\t  var httpsRe = /^http/\n\t    , protocolRe = /(^\\w+):\\/\\//\n\t    , twoHundo = /^(20\\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n\t    , readyState = 'readyState'\n\t    , contentType = 'Content-Type'\n\t    , requestedWith = 'X-Requested-With'\n\t    , uniqid = 0\n\t    , callbackPrefix = 'reqwest_' + (+new Date())\n\t    , lastValue // data stored by the most recent JSONP callback\n\t    , xmlHttpRequest = 'XMLHttpRequest'\n\t    , xDomainRequest = 'XDomainRequest'\n\t    , noop = function () {}\n\t\n\t    , isArray = typeof Array.isArray == 'function'\n\t        ? Array.isArray\n\t        : function (a) {\n\t            return a instanceof Array\n\t          }\n\t\n\t    , defaultHeaders = {\n\t          'contentType': 'application/x-www-form-urlencoded'\n\t        , 'requestedWith': xmlHttpRequest\n\t        , 'accept': {\n\t              '*':  'text/javascript, text/html, application/xml, text/xml, */*'\n\t            , 'xml':  'application/xml, text/xml'\n\t            , 'html': 'text/html'\n\t            , 'text': 'text/plain'\n\t            , 'json': 'application/json, text/javascript'\n\t            , 'js':   'application/javascript, text/javascript'\n\t          }\n\t      }\n\t\n\t    , xhr = function(o) {\n\t        // is it x-domain\n\t        if (o['crossOrigin'] === true) {\n\t          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null\n\t          if (xhr && 'withCredentials' in xhr) {\n\t            return xhr\n\t          } else if (context[xDomainRequest]) {\n\t            return new XDomainRequest()\n\t          } else {\n\t            throw new Error('Browser does not support cross-origin requests')\n\t          }\n\t        } else if (context[xmlHttpRequest]) {\n\t          return new XMLHttpRequest()\n\t        } else if (XHR2) {\n\t          return new XHR2()\n\t        } else {\n\t          return new ActiveXObject('Microsoft.XMLHTTP')\n\t        }\n\t      }\n\t    , globalSetupOptions = {\n\t        dataFilter: function (data) {\n\t          return data\n\t        }\n\t      }\n\t\n\t  function succeed(r) {\n\t    var protocol = protocolRe.exec(r.url)\n\t    protocol = (protocol && protocol[1]) || context.location.protocol\n\t    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response\n\t  }\n\t\n\t  function handleReadyState(r, success, error) {\n\t    return function () {\n\t      // use _aborted to mitigate against IE err c00c023f\n\t      // (can't read props on aborted request objects)\n\t      if (r._aborted) return error(r.request)\n\t      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')\n\t      if (r.request && r.request[readyState] == 4) {\n\t        r.request.onreadystatechange = noop\n\t        if (succeed(r)) success(r.request)\n\t        else\n\t          error(r.request)\n\t      }\n\t    }\n\t  }\n\t\n\t  function setHeaders(http, o) {\n\t    var headers = o['headers'] || {}\n\t      , h\n\t\n\t    headers['Accept'] = headers['Accept']\n\t      || defaultHeaders['accept'][o['type']]\n\t      || defaultHeaders['accept']['*']\n\t\n\t    var isAFormData = typeof FormData !== 'undefined' && (o['data'] instanceof FormData);\n\t    // breaks cross-origin requests with legacy browsers\n\t    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']\n\t    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']\n\t    for (h in headers)\n\t      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])\n\t  }\n\t\n\t  function setCredentials(http, o) {\n\t    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {\n\t      http.withCredentials = !!o['withCredentials']\n\t    }\n\t  }\n\t\n\t  function generalCallback(data) {\n\t    lastValue = data\n\t  }\n\t\n\t  function urlappend (url, s) {\n\t    return url + (/\\?/.test(url) ? '&' : '?') + s\n\t  }\n\t\n\t  function handleJsonp(o, fn, err, url) {\n\t    var reqId = uniqid++\n\t      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key\n\t      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)\n\t      , cbreg = new RegExp('((^|\\\\?|&)' + cbkey + ')=([^&]+)')\n\t      , match = url.match(cbreg)\n\t      , script = doc.createElement('script')\n\t      , loaded = 0\n\t      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1\n\t\n\t    if (match) {\n\t      if (match[3] === '?') {\n\t        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name\n\t      } else {\n\t        cbval = match[3] // provided callback func name\n\t      }\n\t    } else {\n\t      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em\n\t    }\n\t\n\t    context[cbval] = generalCallback\n\t\n\t    script.type = 'text/javascript'\n\t    script.src = url\n\t    script.async = true\n\t    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {\n\t      // need this for IE due to out-of-order onreadystatechange(), binding script\n\t      // execution to an event listener gives us control over when the script\n\t      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n\t      script.htmlFor = script.id = '_reqwest_' + reqId\n\t    }\n\t\n\t    script.onload = script.onreadystatechange = function () {\n\t      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {\n\t        return false\n\t      }\n\t      script.onload = script.onreadystatechange = null\n\t      script.onclick && script.onclick()\n\t      // Call the user callback with the last value stored and clean up values and scripts.\n\t      fn(lastValue)\n\t      lastValue = undefined\n\t      head.removeChild(script)\n\t      loaded = 1\n\t    }\n\t\n\t    // Add the script to the DOM head\n\t    head.appendChild(script)\n\t\n\t    // Enable JSONP timeout\n\t    return {\n\t      abort: function () {\n\t        script.onload = script.onreadystatechange = null\n\t        err({}, 'Request is aborted: timeout', {})\n\t        lastValue = undefined\n\t        head.removeChild(script)\n\t        loaded = 1\n\t      }\n\t    }\n\t  }\n\t\n\t  function getRequest(fn, err) {\n\t    var o = this.o\n\t      , method = (o['method'] || 'GET').toUpperCase()\n\t      , url = typeof o === 'string' ? o : o['url']\n\t      // convert non-string objects to query-string form unless o['processData'] is false\n\t      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')\n\t        ? reqwest.toQueryString(o['data'])\n\t        : (o['data'] || null)\n\t      , http\n\t      , sendWait = false\n\t\n\t    // if we're working on a GET request and we have data then we should append\n\t    // query string to end of URL and not post data\n\t    if ((o['type'] == 'jsonp' || method == 'GET') && data) {\n\t      url = urlappend(url, data)\n\t      data = null\n\t    }\n\t\n\t    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)\n\t\n\t    // get the xhr from the factory if passed\n\t    // if the factory returns null, fall-back to ours\n\t    http = (o.xhr && o.xhr(o)) || xhr(o)\n\t\n\t    http.open(method, url, o['async'] === false ? false : true)\n\t    setHeaders(http, o)\n\t    setCredentials(http, o)\n\t    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {\n\t        http.onload = fn\n\t        http.onerror = err\n\t        // NOTE: see\n\t        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e\n\t        http.onprogress = function() {}\n\t        sendWait = true\n\t    } else {\n\t      http.onreadystatechange = handleReadyState(this, fn, err)\n\t    }\n\t    o['before'] && o['before'](http)\n\t    if (sendWait) {\n\t      setTimeout(function () {\n\t        http.send(data)\n\t      }, 200)\n\t    } else {\n\t      http.send(data)\n\t    }\n\t    return http\n\t  }\n\t\n\t  function Reqwest(o, fn) {\n\t    this.o = o\n\t    this.fn = fn\n\t\n\t    init.apply(this, arguments)\n\t  }\n\t\n\t  function setType(header) {\n\t    // json, javascript, text/plain, text/html, xml\n\t    if (header === null) return undefined; //In case of no content-type.\n\t    if (header.match('json')) return 'json'\n\t    if (header.match('javascript')) return 'js'\n\t    if (header.match('text')) return 'html'\n\t    if (header.match('xml')) return 'xml'\n\t  }\n\t\n\t  function init(o, fn) {\n\t\n\t    this.url = typeof o == 'string' ? o : o['url']\n\t    this.timeout = null\n\t\n\t    // whether request has been fulfilled for purpose\n\t    // of tracking the Promises\n\t    this._fulfilled = false\n\t    // success handlers\n\t    this._successHandler = function(){}\n\t    this._fulfillmentHandlers = []\n\t    // error handlers\n\t    this._errorHandlers = []\n\t    // complete (both success and fail) handlers\n\t    this._completeHandlers = []\n\t    this._erred = false\n\t    this._responseArgs = {}\n\t\n\t    var self = this\n\t\n\t    fn = fn || function () {}\n\t\n\t    if (o['timeout']) {\n\t      this.timeout = setTimeout(function () {\n\t        timedOut()\n\t      }, o['timeout'])\n\t    }\n\t\n\t    if (o['success']) {\n\t      this._successHandler = function () {\n\t        o['success'].apply(o, arguments)\n\t      }\n\t    }\n\t\n\t    if (o['error']) {\n\t      this._errorHandlers.push(function () {\n\t        o['error'].apply(o, arguments)\n\t      })\n\t    }\n\t\n\t    if (o['complete']) {\n\t      this._completeHandlers.push(function () {\n\t        o['complete'].apply(o, arguments)\n\t      })\n\t    }\n\t\n\t    function complete (resp) {\n\t      o['timeout'] && clearTimeout(self.timeout)\n\t      self.timeout = null\n\t      while (self._completeHandlers.length > 0) {\n\t        self._completeHandlers.shift()(resp)\n\t      }\n\t    }\n\t\n\t    function success (resp) {\n\t      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE\n\t      resp = (type !== 'jsonp') ? self.request : resp\n\t      // use global data filter on response text\n\t      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)\n\t        , r = filteredResponse\n\t      try {\n\t        resp.responseText = r\n\t      } catch (e) {\n\t        // can't assign this in IE<=8, just ignore\n\t      }\n\t      if (r) {\n\t        switch (type) {\n\t        case 'json':\n\t          try {\n\t            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')\n\t          } catch (err) {\n\t            return error(resp, 'Could not parse JSON in response', err)\n\t          }\n\t          break\n\t        case 'js':\n\t          resp = eval(r)\n\t          break\n\t        case 'html':\n\t          resp = r\n\t          break\n\t        case 'xml':\n\t          resp = resp.responseXML\n\t              && resp.responseXML.parseError // IE trololo\n\t              && resp.responseXML.parseError.errorCode\n\t              && resp.responseXML.parseError.reason\n\t            ? null\n\t            : resp.responseXML\n\t          break\n\t        }\n\t      }\n\t\n\t      self._responseArgs.resp = resp\n\t      self._fulfilled = true\n\t      fn(resp)\n\t      self._successHandler(resp)\n\t      while (self._fulfillmentHandlers.length > 0) {\n\t        resp = self._fulfillmentHandlers.shift()(resp)\n\t      }\n\t\n\t      complete(resp)\n\t    }\n\t\n\t    function timedOut() {\n\t      self._timedOut = true\n\t      self.request.abort()\n\t    }\n\t\n\t    function error(resp, msg, t) {\n\t      resp = self.request\n\t      self._responseArgs.resp = resp\n\t      self._responseArgs.msg = msg\n\t      self._responseArgs.t = t\n\t      self._erred = true\n\t      while (self._errorHandlers.length > 0) {\n\t        self._errorHandlers.shift()(resp, msg, t)\n\t      }\n\t      complete(resp)\n\t    }\n\t\n\t    this.request = getRequest.call(this, success, error)\n\t  }\n\t\n\t  Reqwest.prototype = {\n\t    abort: function () {\n\t      this._aborted = true\n\t      this.request.abort()\n\t    }\n\t\n\t  , retry: function () {\n\t      init.call(this, this.o, this.fn)\n\t    }\n\t\n\t    /**\n\t     * Small deviation from the Promises A CommonJs specification\n\t     * http://wiki.commonjs.org/wiki/Promises/A\n\t     */\n\t\n\t    /**\n\t     * `then` will execute upon successful requests\n\t     */\n\t  , then: function (success, fail) {\n\t      success = success || function () {}\n\t      fail = fail || function () {}\n\t      if (this._fulfilled) {\n\t        this._responseArgs.resp = success(this._responseArgs.resp)\n\t      } else if (this._erred) {\n\t        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n\t      } else {\n\t        this._fulfillmentHandlers.push(success)\n\t        this._errorHandlers.push(fail)\n\t      }\n\t      return this\n\t    }\n\t\n\t    /**\n\t     * `always` will execute whether the request succeeds or fails\n\t     */\n\t  , always: function (fn) {\n\t      if (this._fulfilled || this._erred) {\n\t        fn(this._responseArgs.resp)\n\t      } else {\n\t        this._completeHandlers.push(fn)\n\t      }\n\t      return this\n\t    }\n\t\n\t    /**\n\t     * `fail` will execute when the request fails\n\t     */\n\t  , fail: function (fn) {\n\t      if (this._erred) {\n\t        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n\t      } else {\n\t        this._errorHandlers.push(fn)\n\t      }\n\t      return this\n\t    }\n\t  , 'catch': function (fn) {\n\t      return this.fail(fn)\n\t    }\n\t  }\n\t\n\t  function reqwest(o, fn) {\n\t    return new Reqwest(o, fn)\n\t  }\n\t\n\t  // normalize newline variants according to spec -> CRLF\n\t  function normalize(s) {\n\t    return s ? s.replace(/\\r?\\n/g, '\\r\\n') : ''\n\t  }\n\t\n\t  function serial(el, cb) {\n\t    var n = el.name\n\t      , t = el.tagName.toLowerCase()\n\t      , optCb = function (o) {\n\t          // IE gives value=\"\" even where there is no value attribute\n\t          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273\n\t          if (o && !o['disabled'])\n\t            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))\n\t        }\n\t      , ch, ra, val, i\n\t\n\t    // don't serialize elements that are disabled or without a name\n\t    if (el.disabled || !n) return\n\t\n\t    switch (t) {\n\t    case 'input':\n\t      if (!/reset|button|image|file/i.test(el.type)) {\n\t        ch = /checkbox/i.test(el.type)\n\t        ra = /radio/i.test(el.type)\n\t        val = el.value\n\t        // WebKit gives us \"\" instead of \"on\" if a checkbox has no value, so correct it here\n\t        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))\n\t      }\n\t      break\n\t    case 'textarea':\n\t      cb(n, normalize(el.value))\n\t      break\n\t    case 'select':\n\t      if (el.type.toLowerCase() === 'select-one') {\n\t        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)\n\t      } else {\n\t        for (i = 0; el.length && i < el.length; i++) {\n\t          el.options[i].selected && optCb(el.options[i])\n\t        }\n\t      }\n\t      break\n\t    }\n\t  }\n\t\n\t  // collect up all form elements found from the passed argument elements all\n\t  // the way down to child elements; pass a '<form>' or form fields.\n\t  // called with 'this'=callback to use for serial() on each element\n\t  function eachFormElement() {\n\t    var cb = this\n\t      , e, i\n\t      , serializeSubtags = function (e, tags) {\n\t          var i, j, fa\n\t          for (i = 0; i < tags.length; i++) {\n\t            fa = e[byTag](tags[i])\n\t            for (j = 0; j < fa.length; j++) serial(fa[j], cb)\n\t          }\n\t        }\n\t\n\t    for (i = 0; i < arguments.length; i++) {\n\t      e = arguments[i]\n\t      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)\n\t      serializeSubtags(e, [ 'input', 'select', 'textarea' ])\n\t    }\n\t  }\n\t\n\t  // standard query string style serialization\n\t  function serializeQueryString() {\n\t    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))\n\t  }\n\t\n\t  // { 'name': 'value', ... } style serialization\n\t  function serializeHash() {\n\t    var hash = {}\n\t    eachFormElement.apply(function (name, value) {\n\t      if (name in hash) {\n\t        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])\n\t        hash[name].push(value)\n\t      } else hash[name] = value\n\t    }, arguments)\n\t    return hash\n\t  }\n\t\n\t  // [ { name: 'name', value: 'value' }, ... ] style serialization\n\t  reqwest.serializeArray = function () {\n\t    var arr = []\n\t    eachFormElement.apply(function (name, value) {\n\t      arr.push({name: name, value: value})\n\t    }, arguments)\n\t    return arr\n\t  }\n\t\n\t  reqwest.serialize = function () {\n\t    if (arguments.length === 0) return ''\n\t    var opt, fn\n\t      , args = Array.prototype.slice.call(arguments, 0)\n\t\n\t    opt = args.pop()\n\t    opt && opt.nodeType && args.push(opt) && (opt = null)\n\t    opt && (opt = opt.type)\n\t\n\t    if (opt == 'map') fn = serializeHash\n\t    else if (opt == 'array') fn = reqwest.serializeArray\n\t    else fn = serializeQueryString\n\t\n\t    return fn.apply(null, args)\n\t  }\n\t\n\t  reqwest.toQueryString = function (o, trad) {\n\t    var prefix, i\n\t      , traditional = trad || false\n\t      , s = []\n\t      , enc = encodeURIComponent\n\t      , add = function (key, value) {\n\t          // If value is a function, invoke it and return its value\n\t          value = ('function' === typeof value) ? value() : (value == null ? '' : value)\n\t          s[s.length] = enc(key) + '=' + enc(value)\n\t        }\n\t    // If an array was passed in, assume that it is an array of form elements.\n\t    if (isArray(o)) {\n\t      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])\n\t    } else {\n\t      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t      // did it), otherwise encode params recursively.\n\t      for (prefix in o) {\n\t        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)\n\t      }\n\t    }\n\t\n\t    // spaces should be + according to spec\n\t    return s.join('&').replace(/%20/g, '+')\n\t  }\n\t\n\t  function buildParams(prefix, obj, traditional, add) {\n\t    var name, i, v\n\t      , rbracket = /\\[\\]$/\n\t\n\t    if (isArray(obj)) {\n\t      // Serialize array item.\n\t      for (i = 0; obj && i < obj.length; i++) {\n\t        v = obj[i]\n\t        if (traditional || rbracket.test(prefix)) {\n\t          // Treat each array item as a scalar.\n\t          add(prefix, v)\n\t        } else {\n\t          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)\n\t        }\n\t      }\n\t    } else if (obj && obj.toString() === '[object Object]') {\n\t      // Serialize object item.\n\t      for (name in obj) {\n\t        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)\n\t      }\n\t\n\t    } else {\n\t      // Serialize scalar item.\n\t      add(prefix, obj)\n\t    }\n\t  }\n\t\n\t  reqwest.getcallbackPrefix = function () {\n\t    return callbackPrefix\n\t  }\n\t\n\t  // jQuery and Zepto compatibility, differences can be remapped here so you can call\n\t  // .ajax.compat(options, callback)\n\t  reqwest.compat = function (o, fn) {\n\t    if (o) {\n\t      o['type'] && (o['method'] = o['type']) && delete o['type']\n\t      o['dataType'] && (o['type'] = o['dataType'])\n\t      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']\n\t      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])\n\t    }\n\t    return new Reqwest(o, fn)\n\t  }\n\t\n\t  reqwest.ajaxSetup = function (options) {\n\t    options = options || {}\n\t    for (var k in options) {\n\t      globalSetupOptions[k] = options[k]\n\t    }\n\t  }\n\t\n\t  return reqwest\n\t});\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t/*\r\n\t * GeoJSON helpers for handling data and generating objects\r\n\t */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _topojson2 = __webpack_require__(77);\n\t\n\tvar topojson = _interopRequireWildcard(_topojson2);\n\t\n\tvar _geojsonMerge = __webpack_require__(78);\n\t\n\tvar _geojsonMerge2 = _interopRequireDefault(_geojsonMerge);\n\t\n\tvar _earcut = __webpack_require__(80);\n\t\n\tvar _earcut2 = _interopRequireDefault(_earcut);\n\t\n\tvar _extrudePolygon = __webpack_require__(81);\n\t\n\tvar _extrudePolygon2 = _interopRequireDefault(_extrudePolygon);\n\t\n\t// TODO: Make it so height can be per-coordinate / point but connected together\n\t// as a linestring (eg. GPS points with an elevation at each point)\n\t//\n\t// This isn't really valid GeoJSON so perhaps something best left to an external\n\t// component for now, until a better approach can be considered\n\t//\n\t// See: http://lists.geojson.org/pipermail/geojson-geojson.org/2009-June/000489.html\n\t\n\t// Light and dark colours used for poor-mans AO gradient on object sides\n\tvar light = new _three2['default'].Color(0xffffff);\n\tvar shadow = new _three2['default'].Color(0x666666);\n\t\n\tvar GeoJSON = (function () {\n\t  var defaultStyle = {\n\t    color: '#ffffff',\n\t    outline: false,\n\t    outlineColor: '#000000',\n\t    transparent: false,\n\t    opacity: 1,\n\t    blending: _three2['default'].NormalBlending,\n\t    height: 0,\n\t    lineOpacity: 1,\n\t    lineTransparent: false,\n\t    lineColor: '#ffffff',\n\t    lineWidth: 1,\n\t    lineBlending: _three2['default'].NormalBlending\n\t  };\n\t\n\t  // Attempts to merge together multiple GeoJSON Features or FeatureCollections\n\t  // into a single FeatureCollection\n\t  var collectFeatures = function collectFeatures(data, _topojson) {\n\t    var collections = [];\n\t\n\t    if (_topojson) {\n\t      // TODO: Allow TopoJSON objects to be overridden as an option\n\t\n\t      // If not overridden, merge all features from all objects\n\t      for (var tk in data.objects) {\n\t        collections.push(topojson.feature(data, data.objects[tk]));\n\t      }\n\t\n\t      return (0, _geojsonMerge2['default'])(collections);\n\t    } else {\n\t      // If root doesn't have a type then let's see if there are features in the\n\t      // next step down\n\t      if (!data.type) {\n\t        // TODO: Allow GeoJSON objects to be overridden as an option\n\t\n\t        // If not overridden, merge all features from all objects\n\t        for (var gk in data) {\n\t          if (!data[gk].type) {\n\t            continue;\n\t          }\n\t\n\t          collections.push(data[gk]);\n\t        }\n\t\n\t        return (0, _geojsonMerge2['default'])(collections);\n\t      } else if (Array.isArray(data)) {\n\t        return (0, _geojsonMerge2['default'])(data);\n\t      } else {\n\t        return data;\n\t      }\n\t    }\n\t  };\n\t\n\t  // TODO: This is only used by GeoJSONTile so either roll it into that or\n\t  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\n\t  var lineStringAttributes = function lineStringAttributes(coordinates, colour, height) {\n\t    var _coords = [];\n\t    var _colours = [];\n\t\n\t    var nextCoord;\n\t\n\t    // Connect coordinate with the next to make a pair\n\t    //\n\t    // LineSegments requires pairs of vertices so repeat the last point if\n\t    // there's an odd number of vertices\n\t    coordinates.forEach(function (coordinate, index) {\n\t      _colours.push([colour.r, colour.g, colour.b]);\n\t      _coords.push([coordinate[0], height, coordinate[1]]);\n\t\n\t      nextCoord = coordinates[index + 1] ? coordinates[index + 1] : coordinate;\n\t\n\t      _colours.push([colour.r, colour.g, colour.b]);\n\t      _coords.push([nextCoord[0], height, nextCoord[1]]);\n\t    });\n\t\n\t    return {\n\t      vertices: _coords,\n\t      colours: _colours\n\t    };\n\t  };\n\t\n\t  // TODO: This is only used by GeoJSONTile so either roll it into that or\n\t  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\n\t  var multiLineStringAttributes = function multiLineStringAttributes(coordinates, colour, height) {\n\t    var _coords = [];\n\t    var _colours = [];\n\t\n\t    var result;\n\t    coordinates.forEach(function (coordinate) {\n\t      result = lineStringAttributes(coordinate, colour, height);\n\t\n\t      result.vertices.forEach(function (coord) {\n\t        _coords.push(coord);\n\t      });\n\t\n\t      result.colours.forEach(function (colour) {\n\t        _colours.push(colour);\n\t      });\n\t    });\n\t\n\t    return {\n\t      vertices: _coords,\n\t      colours: _colours\n\t    };\n\t  };\n\t\n\t  // TODO: This is only used by GeoJSONTile so either roll it into that or\n\t  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\n\t  var polygonAttributes = function polygonAttributes(coordinates, colour, height) {\n\t    var earcutData = _toEarcut(coordinates);\n\t\n\t    var faces = _triangulate(earcutData.vertices, earcutData.holes, earcutData.dimensions);\n\t\n\t    var groupedVertices = [];\n\t    for (i = 0, il = earcutData.vertices.length; i < il; i += earcutData.dimensions) {\n\t      groupedVertices.push(earcutData.vertices.slice(i, i + earcutData.dimensions));\n\t    }\n\t\n\t    var extruded = (0, _extrudePolygon2['default'])(groupedVertices, faces, {\n\t      bottom: 0,\n\t      top: height\n\t    });\n\t\n\t    var topColor = colour.clone().multiply(light);\n\t    var bottomColor = colour.clone().multiply(shadow);\n\t\n\t    var _vertices = extruded.positions;\n\t    var _faces = [];\n\t    var _colours = [];\n\t\n\t    var _colour;\n\t    extruded.top.forEach(function (face, fi) {\n\t      _colour = [];\n\t\n\t      _colour.push([colour.r, colour.g, colour.b]);\n\t      _colour.push([colour.r, colour.g, colour.b]);\n\t      _colour.push([colour.r, colour.g, colour.b]);\n\t\n\t      _faces.push(face);\n\t      _colours.push(_colour);\n\t    });\n\t\n\t    var allFlat = true;\n\t\n\t    if (extruded.sides) {\n\t      if (allFlat) {\n\t        allFlat = false;\n\t      }\n\t\n\t      // Set up colours for every vertex with poor-mans AO on the sides\n\t      extruded.sides.forEach(function (face, fi) {\n\t        _colour = [];\n\t\n\t        // First face is always bottom-bottom-top\n\t        if (fi % 2 === 0) {\n\t          _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\n\t          _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\n\t          _colour.push([topColor.r, topColor.g, topColor.b]);\n\t          // Reverse winding for the second face\n\t          // top-top-bottom\n\t        } else {\n\t            _colour.push([topColor.r, topColor.g, topColor.b]);\n\t            _colour.push([topColor.r, topColor.g, topColor.b]);\n\t            _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\n\t          }\n\t\n\t        _faces.push(face);\n\t        _colours.push(_colour);\n\t      });\n\t    }\n\t\n\t    // Skip bottom as there's no point rendering it\n\t    // allFaces.push(extruded.faces);\n\t\n\t    return {\n\t      vertices: _vertices,\n\t      faces: _faces,\n\t      colours: _colours,\n\t      flat: allFlat\n\t    };\n\t  };\n\t\n\t  // TODO: This is only used by GeoJSONTile so either roll it into that or\n\t  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\n\t  var _toEarcut = function _toEarcut(data) {\n\t    var dim = data[0][0].length;\n\t    var result = { vertices: [], holes: [], dimensions: dim };\n\t    var holeIndex = 0;\n\t\n\t    for (var i = 0; i < data.length; i++) {\n\t      for (var j = 0; j < data[i].length; j++) {\n\t        for (var d = 0; d < dim; d++) {\n\t          result.vertices.push(data[i][j][d]);\n\t        }\n\t      }\n\t      if (i > 0) {\n\t        holeIndex += data[i - 1].length;\n\t        result.holes.push(holeIndex);\n\t      }\n\t    }\n\t\n\t    return result;\n\t  };\n\t\n\t  // TODO: This is only used by GeoJSONTile so either roll it into that or\n\t  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\n\t  var _triangulate = function _triangulate(contour, holes, dim) {\n\t    // console.time('earcut');\n\t\n\t    var faces = (0, _earcut2['default'])(contour, holes, dim);\n\t    var result = [];\n\t\n\t    for (i = 0, il = faces.length; i < il; i += 3) {\n\t      result.push(faces.slice(i, i + 3));\n\t    }\n\t\n\t    // console.timeEnd('earcut');\n\t\n\t    return result;\n\t  };\n\t\n\t  return {\n\t    defaultStyle: defaultStyle,\n\t    collectFeatures: collectFeatures,\n\t    lineStringAttributes: lineStringAttributes,\n\t    multiLineStringAttributes: multiLineStringAttributes,\n\t    polygonAttributes: polygonAttributes\n\t  };\n\t})();\n\t\n\texports['default'] = GeoJSON;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.topojson = global.topojson || {})));\n\t}(this, (function (exports) { 'use strict';\n\t\n\tfunction noop() {}\n\t\n\tfunction transformAbsolute(transform) {\n\t  if (!transform) return noop;\n\t  var x0,\n\t      y0,\n\t      kx = transform.scale[0],\n\t      ky = transform.scale[1],\n\t      dx = transform.translate[0],\n\t      dy = transform.translate[1];\n\t  return function(point, i) {\n\t    if (!i) x0 = y0 = 0;\n\t    point[0] = (x0 += point[0]) * kx + dx;\n\t    point[1] = (y0 += point[1]) * ky + dy;\n\t  };\n\t}\n\t\n\tfunction transformRelative(transform) {\n\t  if (!transform) return noop;\n\t  var x0,\n\t      y0,\n\t      kx = transform.scale[0],\n\t      ky = transform.scale[1],\n\t      dx = transform.translate[0],\n\t      dy = transform.translate[1];\n\t  return function(point, i) {\n\t    if (!i) x0 = y0 = 0;\n\t    var x1 = Math.round((point[0] - dx) / kx),\n\t        y1 = Math.round((point[1] - dy) / ky);\n\t    point[0] = x1 - x0;\n\t    point[1] = y1 - y0;\n\t    x0 = x1;\n\t    y0 = y1;\n\t  };\n\t}\n\t\n\tfunction reverse(array, n) {\n\t  var t, j = array.length, i = j - n;\n\t  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n\t}\n\t\n\tfunction bisect(a, x) {\n\t  var lo = 0, hi = a.length;\n\t  while (lo < hi) {\n\t    var mid = lo + hi >>> 1;\n\t    if (a[mid] < x) lo = mid + 1;\n\t    else hi = mid;\n\t  }\n\t  return lo;\n\t}\n\t\n\tfunction feature(topology, o) {\n\t  return o.type === \"GeometryCollection\" ? {\n\t    type: \"FeatureCollection\",\n\t    features: o.geometries.map(function(o) { return feature$1(topology, o); })\n\t  } : feature$1(topology, o);\n\t}\n\t\n\tfunction feature$1(topology, o) {\n\t  var f = {\n\t    type: \"Feature\",\n\t    id: o.id,\n\t    properties: o.properties || {},\n\t    geometry: object(topology, o)\n\t  };\n\t  if (o.id == null) delete f.id;\n\t  return f;\n\t}\n\t\n\tfunction object(topology, o) {\n\t  var absolute = transformAbsolute(topology.transform),\n\t      arcs = topology.arcs;\n\t\n\t  function arc(i, points) {\n\t    if (points.length) points.pop();\n\t    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {\n\t      points.push(p = a[k].slice());\n\t      absolute(p, k);\n\t    }\n\t    if (i < 0) reverse(points, n);\n\t  }\n\t\n\t  function point(p) {\n\t    p = p.slice();\n\t    absolute(p, 0);\n\t    return p;\n\t  }\n\t\n\t  function line(arcs) {\n\t    var points = [];\n\t    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n\t    if (points.length < 2) points.push(points[0].slice());\n\t    return points;\n\t  }\n\t\n\t  function ring(arcs) {\n\t    var points = line(arcs);\n\t    while (points.length < 4) points.push(points[0].slice());\n\t    return points;\n\t  }\n\t\n\t  function polygon(arcs) {\n\t    return arcs.map(ring);\n\t  }\n\t\n\t  function geometry(o) {\n\t    var t = o.type;\n\t    return t === \"GeometryCollection\" ? {type: t, geometries: o.geometries.map(geometry)}\n\t        : t in geometryType ? {type: t, coordinates: geometryType[t](o)}\n\t        : null;\n\t  }\n\t\n\t  var geometryType = {\n\t    Point: function(o) { return point(o.coordinates); },\n\t    MultiPoint: function(o) { return o.coordinates.map(point); },\n\t    LineString: function(o) { return line(o.arcs); },\n\t    MultiLineString: function(o) { return o.arcs.map(line); },\n\t    Polygon: function(o) { return polygon(o.arcs); },\n\t    MultiPolygon: function(o) { return o.arcs.map(polygon); }\n\t  };\n\t\n\t  return geometry(o);\n\t}\n\t\n\tfunction stitchArcs(topology, arcs) {\n\t  var stitchedArcs = {},\n\t      fragmentByStart = {},\n\t      fragmentByEnd = {},\n\t      fragments = [],\n\t      emptyIndex = -1;\n\t\n\t  // Stitch empty arcs first, since they may be subsumed by other arcs.\n\t  arcs.forEach(function(i, j) {\n\t    var arc = topology.arcs[i < 0 ? ~i : i], t;\n\t    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n\t      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n\t    }\n\t  });\n\t\n\t  arcs.forEach(function(i) {\n\t    var e = ends(i),\n\t        start = e[0],\n\t        end = e[1],\n\t        f, g;\n\t\n\t    if (f = fragmentByEnd[start]) {\n\t      delete fragmentByEnd[f.end];\n\t      f.push(i);\n\t      f.end = end;\n\t      if (g = fragmentByStart[end]) {\n\t        delete fragmentByStart[g.start];\n\t        var fg = g === f ? f : f.concat(g);\n\t        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n\t      } else {\n\t        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n\t      }\n\t    } else if (f = fragmentByStart[end]) {\n\t      delete fragmentByStart[f.start];\n\t      f.unshift(i);\n\t      f.start = start;\n\t      if (g = fragmentByEnd[start]) {\n\t        delete fragmentByEnd[g.end];\n\t        var gf = g === f ? f : g.concat(f);\n\t        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n\t      } else {\n\t        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n\t      }\n\t    } else {\n\t      f = [i];\n\t      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n\t    }\n\t  });\n\t\n\t  function ends(i) {\n\t    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n\t    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n\t    else p1 = arc[arc.length - 1];\n\t    return i < 0 ? [p1, p0] : [p0, p1];\n\t  }\n\t\n\t  function flush(fragmentByEnd, fragmentByStart) {\n\t    for (var k in fragmentByEnd) {\n\t      var f = fragmentByEnd[k];\n\t      delete fragmentByStart[f.start];\n\t      delete f.start;\n\t      delete f.end;\n\t      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n\t      fragments.push(f);\n\t    }\n\t  }\n\t\n\t  flush(fragmentByEnd, fragmentByStart);\n\t  flush(fragmentByStart, fragmentByEnd);\n\t  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\t\n\t  return fragments;\n\t}\n\t\n\tfunction mesh(topology) {\n\t  return object(topology, meshArcs.apply(this, arguments));\n\t}\n\t\n\tfunction meshArcs(topology, o, filter) {\n\t  var arcs = [];\n\t\n\t  function arc(i) {\n\t    var j = i < 0 ? ~i : i;\n\t    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n\t  }\n\t\n\t  function line(arcs) {\n\t    arcs.forEach(arc);\n\t  }\n\t\n\t  function polygon(arcs) {\n\t    arcs.forEach(line);\n\t  }\n\t\n\t  function geometry(o) {\n\t    if (o.type === \"GeometryCollection\") o.geometries.forEach(geometry);\n\t    else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);\n\t  }\n\t\n\t  if (arguments.length > 1) {\n\t    var geomsByArc = [],\n\t        geom;\n\t\n\t    var geometryType = {\n\t      LineString: line,\n\t      MultiLineString: polygon,\n\t      Polygon: polygon,\n\t      MultiPolygon: function(arcs) { arcs.forEach(polygon); }\n\t    };\n\t\n\t    geometry(o);\n\t\n\t    geomsByArc.forEach(arguments.length < 3\n\t        ? function(geoms) { arcs.push(geoms[0].i); }\n\t        : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n\t  } else {\n\t    for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);\n\t  }\n\t\n\t  return {type: \"MultiLineString\", arcs: stitchArcs(topology, arcs)};\n\t}\n\t\n\tfunction cartesianTriangleArea(triangle) {\n\t  var a = triangle[0], b = triangle[1], c = triangle[2];\n\t  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));\n\t}\n\t\n\tfunction ring(ring) {\n\t  var i = -1,\n\t      n = ring.length,\n\t      a,\n\t      b = ring[n - 1],\n\t      area = 0;\n\t\n\t  while (++i < n) {\n\t    a = b;\n\t    b = ring[i];\n\t    area += a[0] * b[1] - a[1] * b[0];\n\t  }\n\t\n\t  return area / 2;\n\t}\n\t\n\tfunction merge(topology) {\n\t  return object(topology, mergeArcs.apply(this, arguments));\n\t}\n\t\n\tfunction mergeArcs(topology, objects) {\n\t  var polygonsByArc = {},\n\t      polygons = [],\n\t      components = [];\n\t\n\t  objects.forEach(function(o) {\n\t    if (o.type === \"Polygon\") register(o.arcs);\n\t    else if (o.type === \"MultiPolygon\") o.arcs.forEach(register);\n\t  });\n\t\n\t  function register(polygon) {\n\t    polygon.forEach(function(ring$$) {\n\t      ring$$.forEach(function(arc) {\n\t        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n\t      });\n\t    });\n\t    polygons.push(polygon);\n\t  }\n\t\n\t  function area(ring$$) {\n\t    return Math.abs(ring(object(topology, {type: \"Polygon\", arcs: [ring$$]}).coordinates[0]));\n\t  }\n\t\n\t  polygons.forEach(function(polygon) {\n\t    if (!polygon._) {\n\t      var component = [],\n\t          neighbors = [polygon];\n\t      polygon._ = 1;\n\t      components.push(component);\n\t      while (polygon = neighbors.pop()) {\n\t        component.push(polygon);\n\t        polygon.forEach(function(ring$$) {\n\t          ring$$.forEach(function(arc) {\n\t            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n\t              if (!polygon._) {\n\t                polygon._ = 1;\n\t                neighbors.push(polygon);\n\t              }\n\t            });\n\t          });\n\t        });\n\t      }\n\t    }\n\t  });\n\t\n\t  polygons.forEach(function(polygon) {\n\t    delete polygon._;\n\t  });\n\t\n\t  return {\n\t    type: \"MultiPolygon\",\n\t    arcs: components.map(function(polygons) {\n\t      var arcs = [], n;\n\t\n\t      // Extract the exterior (unique) arcs.\n\t      polygons.forEach(function(polygon) {\n\t        polygon.forEach(function(ring$$) {\n\t          ring$$.forEach(function(arc) {\n\t            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n\t              arcs.push(arc);\n\t            }\n\t          });\n\t        });\n\t      });\n\t\n\t      // Stitch the arcs into one or more rings.\n\t      arcs = stitchArcs(topology, arcs);\n\t\n\t      // If more than one ring is returned,\n\t      // at most one of these rings can be the exterior;\n\t      // choose the one with the greatest absolute area.\n\t      if ((n = arcs.length) > 1) {\n\t        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n\t          if ((ki = area(arcs[i])) > k) {\n\t            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n\t          }\n\t        }\n\t      }\n\t\n\t      return arcs;\n\t    })\n\t  };\n\t}\n\t\n\tfunction neighbors(objects) {\n\t  var indexesByArc = {}, // arc index -> array of object indexes\n\t      neighbors = objects.map(function() { return []; });\n\t\n\t  function line(arcs, i) {\n\t    arcs.forEach(function(a) {\n\t      if (a < 0) a = ~a;\n\t      var o = indexesByArc[a];\n\t      if (o) o.push(i);\n\t      else indexesByArc[a] = [i];\n\t    });\n\t  }\n\t\n\t  function polygon(arcs, i) {\n\t    arcs.forEach(function(arc) { line(arc, i); });\n\t  }\n\t\n\t  function geometry(o, i) {\n\t    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n\t    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n\t  }\n\t\n\t  var geometryType = {\n\t    LineString: line,\n\t    MultiLineString: polygon,\n\t    Polygon: polygon,\n\t    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n\t  };\n\t\n\t  objects.forEach(geometry);\n\t\n\t  for (var i in indexesByArc) {\n\t    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n\t      for (var k = j + 1; k < m; ++k) {\n\t        var ij = indexes[j], ik = indexes[k], n;\n\t        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n\t        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n\t      }\n\t    }\n\t  }\n\t\n\t  return neighbors;\n\t}\n\t\n\tfunction compareArea(a, b) {\n\t  return a[1][2] - b[1][2];\n\t}\n\t\n\tfunction minAreaHeap() {\n\t  var heap = {},\n\t      array = [],\n\t      size = 0;\n\t\n\t  heap.push = function(object) {\n\t    up(array[object._ = size] = object, size++);\n\t    return size;\n\t  };\n\t\n\t  heap.pop = function() {\n\t    if (size <= 0) return;\n\t    var removed = array[0], object;\n\t    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);\n\t    return removed;\n\t  };\n\t\n\t  heap.remove = function(removed) {\n\t    var i = removed._, object;\n\t    if (array[i] !== removed) return; // invalid request\n\t    if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);\n\t    return i;\n\t  };\n\t\n\t  function up(object, i) {\n\t    while (i > 0) {\n\t      var j = ((i + 1) >> 1) - 1,\n\t          parent = array[j];\n\t      if (compareArea(object, parent) >= 0) break;\n\t      array[parent._ = i] = parent;\n\t      array[object._ = i = j] = object;\n\t    }\n\t  }\n\t\n\t  function down(object, i) {\n\t    while (true) {\n\t      var r = (i + 1) << 1,\n\t          l = r - 1,\n\t          j = i,\n\t          child = array[j];\n\t      if (l < size && compareArea(array[l], child) < 0) child = array[j = l];\n\t      if (r < size && compareArea(array[r], child) < 0) child = array[j = r];\n\t      if (j === i) break;\n\t      array[child._ = i] = child;\n\t      array[object._ = i = j] = object;\n\t    }\n\t  }\n\t\n\t  return heap;\n\t}\n\t\n\tfunction presimplify(topology, triangleArea) {\n\t  var absolute = transformAbsolute(topology.transform),\n\t      relative = transformRelative(topology.transform),\n\t      heap = minAreaHeap();\n\t\n\t  if (!triangleArea) triangleArea = cartesianTriangleArea;\n\t\n\t  topology.arcs.forEach(function(arc) {\n\t    var triangles = [],\n\t        maxArea = 0,\n\t        triangle,\n\t        i,\n\t        n,\n\t        p;\n\t\n\t    // To store each point’s effective area, we create a new array rather than\n\t    // extending the passed-in point to workaround a Chrome/V8 bug (getting\n\t    // stuck in smi mode). For midpoints, the initial effective area of\n\t    // Infinity will be computed in the next step.\n\t    for (i = 0, n = arc.length; i < n; ++i) {\n\t      p = arc[i];\n\t      absolute(arc[i] = [p[0], p[1], Infinity], i);\n\t    }\n\t\n\t    for (i = 1, n = arc.length - 1; i < n; ++i) {\n\t      triangle = arc.slice(i - 1, i + 2);\n\t      triangle[1][2] = triangleArea(triangle);\n\t      triangles.push(triangle);\n\t      heap.push(triangle);\n\t    }\n\t\n\t    for (i = 0, n = triangles.length; i < n; ++i) {\n\t      triangle = triangles[i];\n\t      triangle.previous = triangles[i - 1];\n\t      triangle.next = triangles[i + 1];\n\t    }\n\t\n\t    while (triangle = heap.pop()) {\n\t      var previous = triangle.previous,\n\t          next = triangle.next;\n\t\n\t      // If the area of the current point is less than that of the previous point\n\t      // to be eliminated, use the latter's area instead. This ensures that the\n\t      // current point cannot be eliminated without eliminating previously-\n\t      // eliminated points.\n\t      if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;\n\t      else maxArea = triangle[1][2];\n\t\n\t      if (previous) {\n\t        previous.next = next;\n\t        previous[2] = triangle[2];\n\t        update(previous);\n\t      }\n\t\n\t      if (next) {\n\t        next.previous = previous;\n\t        next[0] = triangle[0];\n\t        update(next);\n\t      }\n\t    }\n\t\n\t    arc.forEach(relative);\n\t  });\n\t\n\t  function update(triangle) {\n\t    heap.remove(triangle);\n\t    triangle[1][2] = triangleArea(triangle);\n\t    heap.push(triangle);\n\t  }\n\t\n\t  return topology;\n\t}\n\t\n\tvar version = \"1.6.27\";\n\t\n\texports.version = version;\n\texports.mesh = mesh;\n\texports.meshArcs = meshArcs;\n\texports.merge = merge;\n\texports.mergeArcs = mergeArcs;\n\texports.feature = feature;\n\texports.neighbors = neighbors;\n\texports.presimplify = presimplify;\n\t\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\t\n\t})));\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar normalize = __webpack_require__(79);\n\t\n\tmodule.exports = function(inputs) {\n\t    return {\n\t        type: 'FeatureCollection',\n\t        features: inputs.reduce(function(memo, input) {\n\t            return memo.concat(normalize(input).features);\n\t        }, [])\n\t    };\n\t};\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = normalize;\n\t\n\tvar types = {\n\t    Point: 'geometry',\n\t    MultiPoint: 'geometry',\n\t    LineString: 'geometry',\n\t    MultiLineString: 'geometry',\n\t    Polygon: 'geometry',\n\t    MultiPolygon: 'geometry',\n\t    GeometryCollection: 'geometry',\n\t    Feature: 'feature',\n\t    FeatureCollection: 'featurecollection'\n\t};\n\t\n\t/**\n\t * Normalize a GeoJSON feature into a FeatureCollection.\n\t *\n\t * @param {object} gj geojson data\n\t * @returns {object} normalized geojson data\n\t */\n\tfunction normalize(gj) {\n\t    if (!gj || !gj.type) return null;\n\t    var type = types[gj.type];\n\t    if (!type) return null;\n\t\n\t    if (type === 'geometry') {\n\t        return {\n\t            type: 'FeatureCollection',\n\t            features: [{\n\t                type: 'Feature',\n\t                properties: {},\n\t                geometry: gj\n\t            }]\n\t        };\n\t    } else if (type === 'feature') {\n\t        return {\n\t            type: 'FeatureCollection',\n\t            features: [gj]\n\t        };\n\t    } else if (type === 'featurecollection') {\n\t        return gj;\n\t    }\n\t}\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = earcut;\n\tmodule.exports.default = earcut;\n\t\n\tfunction earcut(data, holeIndices, dim) {\n\t\n\t    dim = dim || 2;\n\t\n\t    var hasHoles = holeIndices && holeIndices.length,\n\t        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n\t        outerNode = linkedList(data, 0, outerLen, dim, true),\n\t        triangles = [];\n\t\n\t    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\n\t    var minX, minY, maxX, maxY, x, y, invSize;\n\t\n\t    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\t\n\t    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t    if (data.length > 80 * dim) {\n\t        minX = maxX = data[0];\n\t        minY = maxY = data[1];\n\t\n\t        for (var i = dim; i < outerLen; i += dim) {\n\t            x = data[i];\n\t            y = data[i + 1];\n\t            if (x < minX) minX = x;\n\t            if (y < minY) minY = y;\n\t            if (x > maxX) maxX = x;\n\t            if (y > maxY) maxY = y;\n\t        }\n\t\n\t        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t        invSize = Math.max(maxX - minX, maxY - minY);\n\t        invSize = invSize !== 0 ? 1 / invSize : 0;\n\t    }\n\t\n\t    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\n\t    return triangles;\n\t}\n\t\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t    var i, last;\n\t\n\t    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n\t        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n\t    } else {\n\t        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n\t    }\n\t\n\t    if (last && equals(last, last.next)) {\n\t        removeNode(last);\n\t        last = last.next;\n\t    }\n\t\n\t    return last;\n\t}\n\t\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints(start, end) {\n\t    if (!start) return start;\n\t    if (!end) end = start;\n\t\n\t    var p = start,\n\t        again;\n\t    do {\n\t        again = false;\n\t\n\t        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t            removeNode(p);\n\t            p = end = p.prev;\n\t            if (p === p.next) break;\n\t            again = true;\n\t\n\t        } else {\n\t            p = p.next;\n\t        }\n\t    } while (again || p !== end);\n\t\n\t    return end;\n\t}\n\t\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t    if (!ear) return;\n\t\n\t    // interlink polygon nodes in z-order\n\t    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\n\t    var stop = ear,\n\t        prev, next;\n\t\n\t    // iterate through ears, slicing them one by one\n\t    while (ear.prev !== ear.next) {\n\t        prev = ear.prev;\n\t        next = ear.next;\n\t\n\t        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t            // cut off the triangle\n\t            triangles.push(prev.i / dim);\n\t            triangles.push(ear.i / dim);\n\t            triangles.push(next.i / dim);\n\t\n\t            removeNode(ear);\n\t\n\t            // skipping the next vertex leads to less sliver triangles\n\t            ear = next.next;\n\t            stop = next.next;\n\t\n\t            continue;\n\t        }\n\t\n\t        ear = next;\n\t\n\t        // if we looped through the whole remaining polygon and can't find any more ears\n\t        if (ear === stop) {\n\t            // try filtering points and slicing again\n\t            if (!pass) {\n\t                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\t\n\t            // if this didn't work, try curing all small self-intersections locally\n\t            } else if (pass === 1) {\n\t                ear = cureLocalIntersections(ear, triangles, dim);\n\t                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\t\n\t            // as a last resort, try splitting the remaining polygon into two\n\t            } else if (pass === 2) {\n\t                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t            }\n\t\n\t            break;\n\t        }\n\t    }\n\t}\n\t\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar(ear) {\n\t    var a = ear.prev,\n\t        b = ear,\n\t        c = ear.next;\n\t\n\t    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\n\t    // now make sure we don't have other points inside the potential ear\n\t    var p = ear.next.next;\n\t\n\t    while (p !== ear.prev) {\n\t        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n\t            area(p.prev, p, p.next) >= 0) return false;\n\t        p = p.next;\n\t    }\n\t\n\t    return true;\n\t}\n\t\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t    var a = ear.prev,\n\t        b = ear,\n\t        c = ear.next;\n\t\n\t    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\n\t    // triangle bbox; min & max are calculated like this for speed\n\t    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n\t        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n\t        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n\t        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\t\n\t    // z-order range for the current triangle bbox;\n\t    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\n\t    var p = ear.prevZ,\n\t        n = ear.nextZ;\n\t\n\t    // look for points inside the triangle in both directions\n\t    while (p && p.z >= minZ && n && n.z <= maxZ) {\n\t        if (p !== ear.prev && p !== ear.next &&\n\t            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n\t            area(p.prev, p, p.next) >= 0) return false;\n\t        p = p.prevZ;\n\t\n\t        if (n !== ear.prev && n !== ear.next &&\n\t            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n\t            area(n.prev, n, n.next) >= 0) return false;\n\t        n = n.nextZ;\n\t    }\n\t\n\t    // look for remaining points in decreasing z-order\n\t    while (p && p.z >= minZ) {\n\t        if (p !== ear.prev && p !== ear.next &&\n\t            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n\t            area(p.prev, p, p.next) >= 0) return false;\n\t        p = p.prevZ;\n\t    }\n\t\n\t    // look for remaining points in increasing z-order\n\t    while (n && n.z <= maxZ) {\n\t        if (n !== ear.prev && n !== ear.next &&\n\t            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n\t            area(n.prev, n, n.next) >= 0) return false;\n\t        n = n.nextZ;\n\t    }\n\t\n\t    return true;\n\t}\n\t\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t    var p = start;\n\t    do {\n\t        var a = p.prev,\n\t            b = p.next.next;\n\t\n\t        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\n\t            triangles.push(a.i / dim);\n\t            triangles.push(p.i / dim);\n\t            triangles.push(b.i / dim);\n\t\n\t            // remove two nodes involved\n\t            removeNode(p);\n\t            removeNode(p.next);\n\t\n\t            p = start = b;\n\t        }\n\t        p = p.next;\n\t    } while (p !== start);\n\t\n\t    return p;\n\t}\n\t\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t    // look for a valid diagonal that divides the polygon into two\n\t    var a = start;\n\t    do {\n\t        var b = a.next.next;\n\t        while (b !== a.prev) {\n\t            if (a.i !== b.i && isValidDiagonal(a, b)) {\n\t                // split the polygon in two by the diagonal\n\t                var c = splitPolygon(a, b);\n\t\n\t                // filter colinear points around the cuts\n\t                a = filterPoints(a, a.next);\n\t                c = filterPoints(c, c.next);\n\t\n\t                // run earcut on each half\n\t                earcutLinked(a, triangles, dim, minX, minY, invSize);\n\t                earcutLinked(c, triangles, dim, minX, minY, invSize);\n\t                return;\n\t            }\n\t            b = b.next;\n\t        }\n\t        a = a.next;\n\t    } while (a !== start);\n\t}\n\t\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t    var queue = [],\n\t        i, len, start, end, list;\n\t\n\t    for (i = 0, len = holeIndices.length; i < len; i++) {\n\t        start = holeIndices[i] * dim;\n\t        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t        list = linkedList(data, start, end, dim, false);\n\t        if (list === list.next) list.steiner = true;\n\t        queue.push(getLeftmost(list));\n\t    }\n\t\n\t    queue.sort(compareX);\n\t\n\t    // process holes from left to right\n\t    for (i = 0; i < queue.length; i++) {\n\t        eliminateHole(queue[i], outerNode);\n\t        outerNode = filterPoints(outerNode, outerNode.next);\n\t    }\n\t\n\t    return outerNode;\n\t}\n\t\n\tfunction compareX(a, b) {\n\t    return a.x - b.x;\n\t}\n\t\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole(hole, outerNode) {\n\t    outerNode = findHoleBridge(hole, outerNode);\n\t    if (outerNode) {\n\t        var b = splitPolygon(outerNode, hole);\n\t        filterPoints(b, b.next);\n\t    }\n\t}\n\t\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge(hole, outerNode) {\n\t    var p = outerNode,\n\t        hx = hole.x,\n\t        hy = hole.y,\n\t        qx = -Infinity,\n\t        m;\n\t\n\t    // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t    // segment's endpoint with lesser x will be potential connection point\n\t    do {\n\t        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\t            if (x <= hx && x > qx) {\n\t                qx = x;\n\t                if (x === hx) {\n\t                    if (hy === p.y) return p;\n\t                    if (hy === p.next.y) return p.next;\n\t                }\n\t                m = p.x < p.next.x ? p : p.next;\n\t            }\n\t        }\n\t        p = p.next;\n\t    } while (p !== outerNode);\n\t\n\t    if (!m) return null;\n\t\n\t    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n\t\n\t    // look for points inside the triangle of hole point, segment intersection and endpoint;\n\t    // if there are no points found, we have a valid connection;\n\t    // otherwise choose the point of the minimum angle with the ray as connection point\n\t\n\t    var stop = m,\n\t        mx = m.x,\n\t        my = m.y,\n\t        tanMin = Infinity,\n\t        tan;\n\t\n\t    p = m.next;\n\t\n\t    while (p !== stop) {\n\t        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n\t                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\n\t            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\t\n\t            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {\n\t                m = p;\n\t                tanMin = tan;\n\t            }\n\t        }\n\t\n\t        p = p.next;\n\t    }\n\t\n\t    return m;\n\t}\n\t\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t    var p = start;\n\t    do {\n\t        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t        p.prevZ = p.prev;\n\t        p.nextZ = p.next;\n\t        p = p.next;\n\t    } while (p !== start);\n\t\n\t    p.prevZ.nextZ = null;\n\t    p.prevZ = null;\n\t\n\t    sortLinked(p);\n\t}\n\t\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked(list) {\n\t    var i, p, q, e, tail, numMerges, pSize, qSize,\n\t        inSize = 1;\n\t\n\t    do {\n\t        p = list;\n\t        list = null;\n\t        tail = null;\n\t        numMerges = 0;\n\t\n\t        while (p) {\n\t            numMerges++;\n\t            q = p;\n\t            pSize = 0;\n\t            for (i = 0; i < inSize; i++) {\n\t                pSize++;\n\t                q = q.nextZ;\n\t                if (!q) break;\n\t            }\n\t            qSize = inSize;\n\t\n\t            while (pSize > 0 || (qSize > 0 && q)) {\n\t\n\t                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t                    e = p;\n\t                    p = p.nextZ;\n\t                    pSize--;\n\t                } else {\n\t                    e = q;\n\t                    q = q.nextZ;\n\t                    qSize--;\n\t                }\n\t\n\t                if (tail) tail.nextZ = e;\n\t                else list = e;\n\t\n\t                e.prevZ = tail;\n\t                tail = e;\n\t            }\n\t\n\t            p = q;\n\t        }\n\t\n\t        tail.nextZ = null;\n\t        inSize *= 2;\n\t\n\t    } while (numMerges > 1);\n\t\n\t    return list;\n\t}\n\t\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t    // coords are transformed into non-negative 15-bit integer range\n\t    x = 32767 * (x - minX) * invSize;\n\t    y = 32767 * (y - minY) * invSize;\n\t\n\t    x = (x | (x << 8)) & 0x00FF00FF;\n\t    x = (x | (x << 4)) & 0x0F0F0F0F;\n\t    x = (x | (x << 2)) & 0x33333333;\n\t    x = (x | (x << 1)) & 0x55555555;\n\t\n\t    y = (y | (y << 8)) & 0x00FF00FF;\n\t    y = (y | (y << 4)) & 0x0F0F0F0F;\n\t    y = (y | (y << 2)) & 0x33333333;\n\t    y = (y | (y << 1)) & 0x55555555;\n\t\n\t    return x | (y << 1);\n\t}\n\t\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost(start) {\n\t    var p = start,\n\t        leftmost = start;\n\t    do {\n\t        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n\t        p = p.next;\n\t    } while (p !== start);\n\t\n\t    return leftmost;\n\t}\n\t\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n\t           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n\t           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t}\n\t\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal(a, b) {\n\t    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&\n\t           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n\t}\n\t\n\t// signed area of a triangle\n\tfunction area(p, q, r) {\n\t    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t}\n\t\n\t// check if two points are equal\n\tfunction equals(p1, p2) {\n\t    return p1.x === p2.x && p1.y === p2.y;\n\t}\n\t\n\t// check if two segments intersect\n\tfunction intersects(p1, q1, p2, q2) {\n\t    if ((equals(p1, q1) && equals(p2, q2)) ||\n\t        (equals(p1, q2) && equals(p2, q1))) return true;\n\t    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&\n\t           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n\t}\n\t\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon(a, b) {\n\t    var p = a;\n\t    do {\n\t        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t                intersects(p, p.next, a, b)) return true;\n\t        p = p.next;\n\t    } while (p !== a);\n\t\n\t    return false;\n\t}\n\t\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside(a, b) {\n\t    return area(a.prev, a, a.next) < 0 ?\n\t        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n\t        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t}\n\t\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside(a, b) {\n\t    var p = a,\n\t        inside = false,\n\t        px = (a.x + b.x) / 2,\n\t        py = (a.y + b.y) / 2;\n\t    do {\n\t        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n\t                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n\t            inside = !inside;\n\t        p = p.next;\n\t    } while (p !== a);\n\t\n\t    return inside;\n\t}\n\t\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon(a, b) {\n\t    var a2 = new Node(a.i, a.x, a.y),\n\t        b2 = new Node(b.i, b.x, b.y),\n\t        an = a.next,\n\t        bp = b.prev;\n\t\n\t    a.next = b;\n\t    b.prev = a;\n\t\n\t    a2.next = an;\n\t    an.prev = a2;\n\t\n\t    b2.next = a2;\n\t    a2.prev = b2;\n\t\n\t    bp.next = b2;\n\t    b2.prev = bp;\n\t\n\t    return b2;\n\t}\n\t\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode(i, x, y, last) {\n\t    var p = new Node(i, x, y);\n\t\n\t    if (!last) {\n\t        p.prev = p;\n\t        p.next = p;\n\t\n\t    } else {\n\t        p.next = last.next;\n\t        p.prev = last;\n\t        last.next.prev = p;\n\t        last.next = p;\n\t    }\n\t    return p;\n\t}\n\t\n\tfunction removeNode(p) {\n\t    p.next.prev = p.prev;\n\t    p.prev.next = p.next;\n\t\n\t    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\t\n\tfunction Node(i, x, y) {\n\t    // vertex index in coordinates array\n\t    this.i = i;\n\t\n\t    // vertex coordinates\n\t    this.x = x;\n\t    this.y = y;\n\t\n\t    // previous and next vertex nodes in a polygon ring\n\t    this.prev = null;\n\t    this.next = null;\n\t\n\t    // z-order curve value\n\t    this.z = null;\n\t\n\t    // previous and next nodes in z-order\n\t    this.prevZ = null;\n\t    this.nextZ = null;\n\t\n\t    // indicates whether this is a steiner point\n\t    this.steiner = false;\n\t}\n\t\n\t// return a percentage difference between the polygon area and its triangulation area;\n\t// used to verify correctness of triangulation\n\tearcut.deviation = function (data, holeIndices, dim, triangles) {\n\t    var hasHoles = holeIndices && holeIndices.length;\n\t    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\n\t    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\t    if (hasHoles) {\n\t        for (var i = 0, len = holeIndices.length; i < len; i++) {\n\t            var start = holeIndices[i] * dim;\n\t            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n\t        }\n\t    }\n\t\n\t    var trianglesArea = 0;\n\t    for (i = 0; i < triangles.length; i += 3) {\n\t        var a = triangles[i] * dim;\n\t        var b = triangles[i + 1] * dim;\n\t        var c = triangles[i + 2] * dim;\n\t        trianglesArea += Math.abs(\n\t            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n\t            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n\t    }\n\t\n\t    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n\t        Math.abs((trianglesArea - polygonArea) / polygonArea);\n\t};\n\t\n\tfunction signedArea(data, start, end, dim) {\n\t    var sum = 0;\n\t    for (var i = start, j = end - dim; i < end; i += dim) {\n\t        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t        j = i;\n\t    }\n\t    return sum;\n\t}\n\t\n\t// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\n\tearcut.flatten = function (data) {\n\t    var dim = data[0][0].length,\n\t        result = {vertices: [], holes: [], dimensions: dim},\n\t        holeIndex = 0;\n\t\n\t    for (var i = 0; i < data.length; i++) {\n\t        for (var j = 0; j < data[i].length; j++) {\n\t            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n\t        }\n\t        if (i > 0) {\n\t            holeIndex += data[i - 1].length;\n\t            result.holes.push(holeIndex);\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t/*\r\n\t * Extrude a polygon given its vertices and triangulated faces\r\n\t *\r\n\t * Based on:\r\n\t * https://github.com/freeman-lab/extrude\r\n\t */\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar extrudePolygon = function extrudePolygon(points, faces, _options) {\n\t  var defaults = {\n\t    top: 1,\n\t    bottom: 0,\n\t    closed: true\n\t  };\n\t\n\t  var options = (0, _lodashAssign2['default'])({}, defaults, _options);\n\t\n\t  var n = points.length;\n\t  var positions;\n\t  var cells;\n\t  var topCells;\n\t  var bottomCells;\n\t  var sideCells;\n\t\n\t  // If bottom and top values are identical then return the flat shape\n\t  options.top === options.bottom ? flat() : full();\n\t\n\t  function flat() {\n\t    positions = points.map(function (p) {\n\t      return [p[0], options.top, p[1]];\n\t    });\n\t    cells = faces;\n\t    topCells = faces;\n\t  }\n\t\n\t  function full() {\n\t    positions = [];\n\t    points.forEach(function (p) {\n\t      positions.push([p[0], options.top, p[1]]);\n\t    });\n\t    points.forEach(function (p) {\n\t      positions.push([p[0], options.bottom, p[1]]);\n\t    });\n\t\n\t    cells = [];\n\t    for (var i = 0; i < n; i++) {\n\t      if (i === n - 1) {\n\t        cells.push([i + n, n, i]);\n\t        cells.push([0, i, n]);\n\t      } else {\n\t        cells.push([i + n, i + n + 1, i]);\n\t        cells.push([i + 1, i, i + n + 1]);\n\t      }\n\t    }\n\t\n\t    sideCells = [].concat(cells);\n\t\n\t    if (options.closed) {\n\t      var top = faces;\n\t      var bottom = top.map(function (p) {\n\t        return p.map(function (v) {\n\t          return v + n;\n\t        });\n\t      });\n\t      bottom = bottom.map(function (p) {\n\t        return [p[0], p[2], p[1]];\n\t      });\n\t      cells = cells.concat(top).concat(bottom);\n\t\n\t      topCells = top;\n\t      bottomCells = bottom;\n\t    }\n\t  }\n\t\n\t  return {\n\t    positions: positions,\n\t    faces: cells,\n\t    top: topCells,\n\t    bottom: bottomCells,\n\t    sides: sideCells\n\t  };\n\t};\n\t\n\texports['default'] = extrudePolygon;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t/*\r\n\t * BufferGeometry helpers\r\n\t */\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _textEncoding = __webpack_require__(83);\n\t\n\tvar Buffer = (function () {\n\t  // Merge TypedArrays of the same type\n\t  // Returns merged array as well as indexes for splitting the array\n\t  var mergeFloat32Arrays = function mergeFloat32Arrays(arrays) {\n\t    var size = 0;\n\t    var map = new Int32Array(arrays.length * 2);\n\t\n\t    var lastIndex = 0;\n\t    var length;\n\t\n\t    // Find size of each array\n\t    arrays.forEach(function (_array, index) {\n\t      length = _array.length;\n\t      size += length;\n\t      map.set([lastIndex, lastIndex + length], index * 2);\n\t      lastIndex += length;\n\t    });\n\t\n\t    // Create a new array of total size\n\t    var mergedArray = new Float32Array(size);\n\t\n\t    // Add each array to the new array\n\t    arrays.forEach(function (_array, index) {\n\t      mergedArray.set(_array, map[index * 2]);\n\t    });\n\t\n\t    return [mergedArray, map];\n\t  };\n\t\n\t  var splitFloat32Array = function splitFloat32Array(data) {\n\t    var arr = data[0];\n\t    var map = data[1];\n\t\n\t    var start;\n\t    var arrays = [];\n\t\n\t    // Iterate over map\n\t    for (var i = 0; i < map.length / 2; i++) {\n\t      start = i * 2;\n\t      arrays.push(arr.subarray(map[start], map[start + 1]));\n\t    }\n\t\n\t    return arrays;\n\t  };\n\t\n\t  // TODO: Create a generic method that can work for any typed array\n\t  var mergeUint8Arrays = function mergeUint8Arrays(arrays) {\n\t    var size = 0;\n\t    var map = new Int32Array(arrays.length * 2);\n\t\n\t    var lastIndex = 0;\n\t    var length;\n\t\n\t    // Find size of each array\n\t    arrays.forEach(function (_array, index) {\n\t      length = _array.length;\n\t      size += length;\n\t      map.set([lastIndex, lastIndex + length], index * 2);\n\t      lastIndex += length;\n\t    });\n\t\n\t    // Create a new array of total size\n\t    var mergedArray = new Uint8Array(size);\n\t\n\t    // Add each array to the new array\n\t    arrays.forEach(function (_array, index) {\n\t      mergedArray.set(_array, map[index * 2]);\n\t    });\n\t\n\t    return [mergedArray, map];\n\t  };\n\t\n\t  // TODO: Dedupe with splitFloat32Array\n\t  var splitUint8Array = function splitUint8Array(data) {\n\t    var arr = data[0];\n\t    var map = data[1];\n\t\n\t    var start;\n\t    var arrays = [];\n\t\n\t    // Iterate over map\n\t    for (var i = 0; i < map.length / 2; i++) {\n\t      start = i * 2;\n\t      arrays.push(arr.subarray(map[start], map[start + 1]));\n\t    }\n\t\n\t    return arrays;\n\t  };\n\t\n\t  // Merge multiple attribute objects into a single attribute object\n\t  //\n\t  // Attribute objects must all use the same attribute keys\n\t  var mergeAttributes = function mergeAttributes(attributes) {\n\t    var lengths = {};\n\t\n\t    // Find array lengths\n\t    attributes.forEach(function (_attributes) {\n\t      for (var k in _attributes) {\n\t        if (!lengths[k]) {\n\t          lengths[k] = 0;\n\t        }\n\t\n\t        lengths[k] += _attributes[k].length;\n\t      }\n\t    });\n\t\n\t    var mergedAttributes = {};\n\t\n\t    // Set up arrays to merge into\n\t    for (var k in lengths) {\n\t      mergedAttributes[k] = new Float32Array(lengths[k]);\n\t    }\n\t\n\t    var lastLengths = {};\n\t\n\t    attributes.forEach(function (_attributes) {\n\t      for (var k in _attributes) {\n\t        if (!lastLengths[k]) {\n\t          lastLengths[k] = 0;\n\t        }\n\t\n\t        mergedAttributes[k].set(_attributes[k], lastLengths[k]);\n\t\n\t        lastLengths[k] += _attributes[k].length;\n\t      }\n\t    });\n\t\n\t    return mergedAttributes;\n\t  };\n\t\n\t  var createLineGeometry = function createLineGeometry(lines, offset) {\n\t    var geometry = new _three2['default'].BufferGeometry();\n\t\n\t    var vertices = new Float32Array(lines.verticesCount * 3);\n\t    var colours = new Float32Array(lines.verticesCount * 3);\n\t\n\t    var pickingIds;\n\t    if (lines.pickingIds) {\n\t      // One component per vertex (1)\n\t      pickingIds = new Float32Array(lines.verticesCount);\n\t    }\n\t\n\t    var _vertices;\n\t    var _colour;\n\t    var _pickingId;\n\t\n\t    var lastIndex = 0;\n\t\n\t    for (var i = 0; i < lines.vertices.length; i++) {\n\t      _vertices = lines.vertices[i];\n\t      _colour = lines.colours[i];\n\t\n\t      if (pickingIds) {\n\t        _pickingId = lines.pickingIds[i];\n\t      }\n\t\n\t      for (var j = 0; j < _vertices.length; j++) {\n\t        var ax = _vertices[j][0] + offset.x;\n\t        var ay = _vertices[j][1];\n\t        var az = _vertices[j][2] + offset.y;\n\t\n\t        var c1 = _colour[j];\n\t\n\t        vertices[lastIndex * 3 + 0] = ax;\n\t        vertices[lastIndex * 3 + 1] = ay;\n\t        vertices[lastIndex * 3 + 2] = az;\n\t\n\t        colours[lastIndex * 3 + 0] = c1[0];\n\t        colours[lastIndex * 3 + 1] = c1[1];\n\t        colours[lastIndex * 3 + 2] = c1[2];\n\t\n\t        if (pickingIds) {\n\t          pickingIds[lastIndex] = _pickingId;\n\t        }\n\t\n\t        lastIndex++;\n\t      }\n\t    }\n\t\n\t    // itemSize = 3 because there are 3 values (components) per vertex\n\t    geometry.addAttribute('position', new _three2['default'].BufferAttribute(vertices, 3));\n\t    geometry.addAttribute('color', new _three2['default'].BufferAttribute(colours, 3));\n\t\n\t    if (pickingIds) {\n\t      geometry.addAttribute('pickingId', new _three2['default'].BufferAttribute(pickingIds, 1));\n\t    }\n\t\n\t    geometry.computeBoundingBox();\n\t\n\t    return geometry;\n\t  };\n\t\n\t  // TODO: Make picking IDs optional\n\t  var createGeometry = function createGeometry(attributes, offset) {\n\t    var geometry = new _three2['default'].BufferGeometry();\n\t\n\t    // Three components per vertex per face (3 x 3 = 9)\n\t    var vertices = new Float32Array(attributes.facesCount * 9);\n\t    var normals = new Float32Array(attributes.facesCount * 9);\n\t    var colours = new Float32Array(attributes.facesCount * 9);\n\t\n\t    var pickingIds;\n\t    if (attributes.pickingIds) {\n\t      // One component per vertex per face (1 x 3 = 3)\n\t      pickingIds = new Float32Array(attributes.facesCount * 3);\n\t    }\n\t\n\t    var pA = new _three2['default'].Vector3();\n\t    var pB = new _three2['default'].Vector3();\n\t    var pC = new _three2['default'].Vector3();\n\t\n\t    var cb = new _three2['default'].Vector3();\n\t    var ab = new _three2['default'].Vector3();\n\t\n\t    var index;\n\t    var _faces;\n\t    var _vertices;\n\t    var _colour;\n\t    var _pickingId;\n\t    var lastIndex = 0;\n\t    for (var i = 0; i < attributes.faces.length; i++) {\n\t      _faces = attributes.faces[i];\n\t      _vertices = attributes.vertices[i];\n\t      _colour = attributes.colours[i];\n\t\n\t      if (pickingIds) {\n\t        _pickingId = attributes.pickingIds[i];\n\t      }\n\t\n\t      for (var j = 0; j < _faces.length; j++) {\n\t        // Array of vertex indexes for the face\n\t        index = _faces[j][0];\n\t\n\t        var ax = _vertices[index][0] + offset.x;\n\t        var ay = _vertices[index][1];\n\t        var az = _vertices[index][2] + offset.y;\n\t\n\t        var c1 = _colour[j][0];\n\t\n\t        index = _faces[j][1];\n\t\n\t        var bx = _vertices[index][0] + offset.x;\n\t        var by = _vertices[index][1];\n\t        var bz = _vertices[index][2] + offset.y;\n\t\n\t        var c2 = _colour[j][1];\n\t\n\t        index = _faces[j][2];\n\t\n\t        var cx = _vertices[index][0] + offset.x;\n\t        var cy = _vertices[index][1];\n\t        var cz = _vertices[index][2] + offset.y;\n\t\n\t        var c3 = _colour[j][2];\n\t\n\t        // Flat face normals\n\t        // From: http://threejs.org/examples/webgl_buffergeometry.html\n\t        pA.set(ax, ay, az);\n\t        pB.set(bx, by, bz);\n\t        pC.set(cx, cy, cz);\n\t\n\t        cb.subVectors(pC, pB);\n\t        ab.subVectors(pA, pB);\n\t        cb.cross(ab);\n\t\n\t        cb.normalize();\n\t\n\t        var nx = cb.x;\n\t        var ny = cb.y;\n\t        var nz = cb.z;\n\t\n\t        vertices[lastIndex * 9 + 0] = ax;\n\t        vertices[lastIndex * 9 + 1] = ay;\n\t        vertices[lastIndex * 9 + 2] = az;\n\t\n\t        normals[lastIndex * 9 + 0] = nx;\n\t        normals[lastIndex * 9 + 1] = ny;\n\t        normals[lastIndex * 9 + 2] = nz;\n\t\n\t        colours[lastIndex * 9 + 0] = c1[0];\n\t        colours[lastIndex * 9 + 1] = c1[1];\n\t        colours[lastIndex * 9 + 2] = c1[2];\n\t\n\t        vertices[lastIndex * 9 + 3] = bx;\n\t        vertices[lastIndex * 9 + 4] = by;\n\t        vertices[lastIndex * 9 + 5] = bz;\n\t\n\t        normals[lastIndex * 9 + 3] = nx;\n\t        normals[lastIndex * 9 + 4] = ny;\n\t        normals[lastIndex * 9 + 5] = nz;\n\t\n\t        colours[lastIndex * 9 + 3] = c2[0];\n\t        colours[lastIndex * 9 + 4] = c2[1];\n\t        colours[lastIndex * 9 + 5] = c2[2];\n\t\n\t        vertices[lastIndex * 9 + 6] = cx;\n\t        vertices[lastIndex * 9 + 7] = cy;\n\t        vertices[lastIndex * 9 + 8] = cz;\n\t\n\t        normals[lastIndex * 9 + 6] = nx;\n\t        normals[lastIndex * 9 + 7] = ny;\n\t        normals[lastIndex * 9 + 8] = nz;\n\t\n\t        colours[lastIndex * 9 + 6] = c3[0];\n\t        colours[lastIndex * 9 + 7] = c3[1];\n\t        colours[lastIndex * 9 + 8] = c3[2];\n\t\n\t        if (pickingIds) {\n\t          pickingIds[lastIndex * 3 + 0] = _pickingId;\n\t          pickingIds[lastIndex * 3 + 1] = _pickingId;\n\t          pickingIds[lastIndex * 3 + 2] = _pickingId;\n\t        }\n\t\n\t        lastIndex++;\n\t      }\n\t    }\n\t\n\t    // itemSize = 3 because there are 3 values (components) per vertex\n\t    geometry.addAttribute('position', new _three2['default'].BufferAttribute(vertices, 3));\n\t    geometry.addAttribute('normal', new _three2['default'].BufferAttribute(normals, 3));\n\t    geometry.addAttribute('color', new _three2['default'].BufferAttribute(colours, 3));\n\t\n\t    if (pickingIds) {\n\t      geometry.addAttribute('pickingId', new _three2['default'].BufferAttribute(pickingIds, 1));\n\t    }\n\t\n\t    geometry.computeBoundingBox();\n\t\n\t    return geometry;\n\t  };\n\t\n\t  var textEncoder = new _textEncoding.TextEncoder('utf-8');\n\t  var textDecoder = new _textEncoding.TextDecoder('utf-8');\n\t\n\t  var stringToUint8Array = function stringToUint8Array(str) {\n\t    return textEncoder.encode(str);\n\t  };\n\t\n\t  var uint8ArrayToString = function uint8ArrayToString(ab) {\n\t    return textDecoder.decode(ab);\n\t  };\n\t\n\t  var fillTypedArray = function fillTypedArray(arr, value) {\n\t    for (var i = 0; i < arr.length; i++) {\n\t      arr[i] = value;\n\t    }\n\t  };\n\t\n\t  return {\n\t    mergeFloat32Arrays: mergeFloat32Arrays,\n\t    splitFloat32Array: splitFloat32Array,\n\t    mergeUint8Arrays: mergeUint8Arrays,\n\t    splitUint8Array: splitUint8Array,\n\t    mergeAttributes: mergeAttributes,\n\t    createLineGeometry: createLineGeometry,\n\t    createGeometry: createGeometry,\n\t    stringToUint8Array: stringToUint8Array,\n\t    uint8ArrayToString: uint8ArrayToString,\n\t    fillTypedArray: fillTypedArray\n\t  };\n\t})();\n\t\n\texports['default'] = Buffer;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// This is free and unencumbered software released into the public domain.\n\t// See LICENSE.md for more information.\n\t\n\tvar encoding = __webpack_require__(84);\n\t\n\tmodule.exports = {\n\t  TextEncoder: encoding.TextEncoder,\n\t  TextDecoder: encoding.TextDecoder,\n\t};\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// This is free and unencumbered software released into the public domain.\n\t// See LICENSE.md for more information.\n\t\n\t/**\n\t * @fileoverview Global |this| required for resolving indexes in node.\n\t * @suppress {globalThis}\n\t */\n\t(function(global) {\n\t  'use strict';\n\t\n\t  // If we're in node require encoding-indexes and attach it to the global.\n\t  if (typeof module !== \"undefined\" && module.exports &&\n\t    !global[\"encoding-indexes\"]) {\n\t    global[\"encoding-indexes\"] =\n\t      __webpack_require__(85)[\"encoding-indexes\"];\n\t  }\n\t\n\t  //\n\t  // Utilities\n\t  //\n\t\n\t  /**\n\t   * @param {number} a The number to test.\n\t   * @param {number} min The minimum value in the range, inclusive.\n\t   * @param {number} max The maximum value in the range, inclusive.\n\t   * @return {boolean} True if a >= min and a <= max.\n\t   */\n\t  function inRange(a, min, max) {\n\t    return min <= a && a <= max;\n\t  }\n\t\n\t  /**\n\t   * @param {!Array.<*>} array The array to check.\n\t   * @param {*} item The item to look for in the array.\n\t   * @return {boolean} True if the item appears in the array.\n\t   */\n\t  function includes(array, item) {\n\t    return array.indexOf(item) !== -1;\n\t  }\n\t\n\t  var floor = Math.floor;\n\t\n\t  /**\n\t   * @param {*} o\n\t   * @return {Object}\n\t   */\n\t  function ToDictionary(o) {\n\t    if (o === undefined) return {};\n\t    if (o === Object(o)) return o;\n\t    throw TypeError('Could not convert argument to dictionary');\n\t  }\n\t\n\t  /**\n\t   * @param {string} string Input string of UTF-16 code units.\n\t   * @return {!Array.<number>} Code points.\n\t   */\n\t  function stringToCodePoints(string) {\n\t    // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\t\n\t    // 1. Let S be the DOMString value.\n\t    var s = String(string);\n\t\n\t    // 2. Let n be the length of S.\n\t    var n = s.length;\n\t\n\t    // 3. Initialize i to 0.\n\t    var i = 0;\n\t\n\t    // 4. Initialize U to be an empty sequence of Unicode characters.\n\t    var u = [];\n\t\n\t    // 5. While i < n:\n\t    while (i < n) {\n\t\n\t      // 1. Let c be the code unit in S at index i.\n\t      var c = s.charCodeAt(i);\n\t\n\t      // 2. Depending on the value of c:\n\t\n\t      // c < 0xD800 or c > 0xDFFF\n\t      if (c < 0xD800 || c > 0xDFFF) {\n\t        // Append to U the Unicode character with code point c.\n\t        u.push(c);\n\t      }\n\t\n\t      // 0xDC00 ≤ c ≤ 0xDFFF\n\t      else if (0xDC00 <= c && c <= 0xDFFF) {\n\t        // Append to U a U+FFFD REPLACEMENT CHARACTER.\n\t        u.push(0xFFFD);\n\t      }\n\t\n\t      // 0xD800 ≤ c ≤ 0xDBFF\n\t      else if (0xD800 <= c && c <= 0xDBFF) {\n\t        // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n\t        // CHARACTER.\n\t        if (i === n - 1) {\n\t          u.push(0xFFFD);\n\t        }\n\t        // 2. Otherwise, i < n−1:\n\t        else {\n\t          // 1. Let d be the code unit in S at index i+1.\n\t          var d = s.charCodeAt(i + 1);\n\t\n\t          // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n\t          if (0xDC00 <= d && d <= 0xDFFF) {\n\t            // 1. Let a be c & 0x3FF.\n\t            var a = c & 0x3FF;\n\t\n\t            // 2. Let b be d & 0x3FF.\n\t            var b = d & 0x3FF;\n\t\n\t            // 3. Append to U the Unicode character with code point\n\t            // 2^16+2^10*a+b.\n\t            u.push(0x10000 + (a << 10) + b);\n\t\n\t            // 4. Set i to i+1.\n\t            i += 1;\n\t          }\n\t\n\t          // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n\t          // U+FFFD REPLACEMENT CHARACTER.\n\t          else  {\n\t            u.push(0xFFFD);\n\t          }\n\t        }\n\t      }\n\t\n\t      // 3. Set i to i+1.\n\t      i += 1;\n\t    }\n\t\n\t    // 6. Return U.\n\t    return u;\n\t  }\n\t\n\t  /**\n\t   * @param {!Array.<number>} code_points Array of code points.\n\t   * @return {string} string String of UTF-16 code units.\n\t   */\n\t  function codePointsToString(code_points) {\n\t    var s = '';\n\t    for (var i = 0; i < code_points.length; ++i) {\n\t      var cp = code_points[i];\n\t      if (cp <= 0xFFFF) {\n\t        s += String.fromCharCode(cp);\n\t      } else {\n\t        cp -= 0x10000;\n\t        s += String.fromCharCode((cp >> 10) + 0xD800,\n\t                                 (cp & 0x3FF) + 0xDC00);\n\t      }\n\t    }\n\t    return s;\n\t  }\n\t\n\t\n\t  //\n\t  // Implementation of Encoding specification\n\t  // https://encoding.spec.whatwg.org/\n\t  //\n\t\n\t  //\n\t  // 4. Terminology\n\t  //\n\t\n\t  /**\n\t   * An ASCII byte is a byte in the range 0x00 to 0x7F, inclusive.\n\t   * @param {number} a The number to test.\n\t   * @return {boolean} True if a is in the range 0x00 to 0x7F, inclusive.\n\t   */\n\t  function isASCIIByte(a) {\n\t    return 0x00 <= a && a <= 0x7F;\n\t  }\n\t\n\t  /**\n\t   * An ASCII code point is a code point in the range U+0000 to\n\t   * U+007F, inclusive.\n\t   */\n\t  var isASCIICodePoint = isASCIIByte;\n\t\n\t\n\t  /**\n\t   * End-of-stream is a special token that signifies no more tokens\n\t   * are in the stream.\n\t   * @const\n\t   */ var end_of_stream = -1;\n\t\n\t  /**\n\t   * A stream represents an ordered sequence of tokens.\n\t   *\n\t   * @constructor\n\t   * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide\n\t   * the stream.\n\t   */\n\t  function Stream(tokens) {\n\t    /** @type {!Array.<number>} */\n\t    this.tokens = [].slice.call(tokens);\n\t    // Reversed as push/pop is more efficient than shift/unshift.\n\t    this.tokens.reverse();\n\t  }\n\t\n\t  Stream.prototype = {\n\t    /**\n\t     * @return {boolean} True if end-of-stream has been hit.\n\t     */\n\t    endOfStream: function() {\n\t      return !this.tokens.length;\n\t    },\n\t\n\t    /**\n\t     * When a token is read from a stream, the first token in the\n\t     * stream must be returned and subsequently removed, and\n\t     * end-of-stream must be returned otherwise.\n\t     *\n\t     * @return {number} Get the next token from the stream, or\n\t     * end_of_stream.\n\t     */\n\t     read: function() {\n\t      if (!this.tokens.length)\n\t        return end_of_stream;\n\t       return this.tokens.pop();\n\t     },\n\t\n\t    /**\n\t     * When one or more tokens are prepended to a stream, those tokens\n\t     * must be inserted, in given order, before the first token in the\n\t     * stream.\n\t     *\n\t     * @param {(number|!Array.<number>)} token The token(s) to prepend to the\n\t     * stream.\n\t     */\n\t    prepend: function(token) {\n\t      if (Array.isArray(token)) {\n\t        var tokens = /**@type {!Array.<number>}*/(token);\n\t        while (tokens.length)\n\t          this.tokens.push(tokens.pop());\n\t      } else {\n\t        this.tokens.push(token);\n\t      }\n\t    },\n\t\n\t    /**\n\t     * When one or more tokens are pushed to a stream, those tokens\n\t     * must be inserted, in given order, after the last token in the\n\t     * stream.\n\t     *\n\t     * @param {(number|!Array.<number>)} token The tokens(s) to push to the\n\t     * stream.\n\t     */\n\t    push: function(token) {\n\t      if (Array.isArray(token)) {\n\t        var tokens = /**@type {!Array.<number>}*/(token);\n\t        while (tokens.length)\n\t          this.tokens.unshift(tokens.shift());\n\t      } else {\n\t        this.tokens.unshift(token);\n\t      }\n\t    }\n\t  };\n\t\n\t  //\n\t  // 5. Encodings\n\t  //\n\t\n\t  // 5.1 Encoders and decoders\n\t\n\t  /** @const */\n\t  var finished = -1;\n\t\n\t  /**\n\t   * @param {boolean} fatal If true, decoding errors raise an exception.\n\t   * @param {number=} opt_code_point Override the standard fallback code point.\n\t   * @return {number} The code point to insert on a decoding error.\n\t   */\n\t  function decoderError(fatal, opt_code_point) {\n\t    if (fatal)\n\t      throw TypeError('Decoder error');\n\t    return opt_code_point || 0xFFFD;\n\t  }\n\t\n\t  /**\n\t   * @param {number} code_point The code point that could not be encoded.\n\t   * @return {number} Always throws, no value is actually returned.\n\t   */\n\t  function encoderError(code_point) {\n\t    throw TypeError('The code point ' + code_point + ' could not be encoded.');\n\t  }\n\t\n\t  /** @interface */\n\t  function Decoder() {}\n\t  Decoder.prototype = {\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point, or |finished|.\n\t     */\n\t    handler: function(stream, bite) {}\n\t  };\n\t\n\t  /** @interface */\n\t  function Encoder() {}\n\t  Encoder.prototype = {\n\t    /**\n\t     * @param {Stream} stream The stream of code points being encoded.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n\t     */\n\t    handler: function(stream, code_point) {}\n\t  };\n\t\n\t  // 5.2 Names and labels\n\t\n\t  // TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}\n\t  // https://github.com/google/closure-compiler/issues/247\n\t\n\t  /**\n\t   * @param {string} label The encoding label.\n\t   * @return {?{name:string,labels:Array.<string>}}\n\t   */\n\t  function getEncoding(label) {\n\t    // 1. Remove any leading and trailing ASCII whitespace from label.\n\t    label = String(label).trim().toLowerCase();\n\t\n\t    // 2. If label is an ASCII case-insensitive match for any of the\n\t    // labels listed in the table below, return the corresponding\n\t    // encoding, and failure otherwise.\n\t    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {\n\t      return label_to_encoding[label];\n\t    }\n\t    return null;\n\t  }\n\t\n\t  /**\n\t   * Encodings table: https://encoding.spec.whatwg.org/encodings.json\n\t   * @const\n\t   * @type {!Array.<{\n\t   *          heading: string,\n\t   *          encodings: Array.<{name:string,labels:Array.<string>}>\n\t   *        }>}\n\t   */\n\t  var encodings = [\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"unicode-1-1-utf-8\",\n\t            \"utf-8\",\n\t            \"utf8\"\n\t          ],\n\t          \"name\": \"UTF-8\"\n\t        }\n\t      ],\n\t      \"heading\": \"The Encoding\"\n\t    },\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"866\",\n\t            \"cp866\",\n\t            \"csibm866\",\n\t            \"ibm866\"\n\t          ],\n\t          \"name\": \"IBM866\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatin2\",\n\t            \"iso-8859-2\",\n\t            \"iso-ir-101\",\n\t            \"iso8859-2\",\n\t            \"iso88592\",\n\t            \"iso_8859-2\",\n\t            \"iso_8859-2:1987\",\n\t            \"l2\",\n\t            \"latin2\"\n\t          ],\n\t          \"name\": \"ISO-8859-2\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatin3\",\n\t            \"iso-8859-3\",\n\t            \"iso-ir-109\",\n\t            \"iso8859-3\",\n\t            \"iso88593\",\n\t            \"iso_8859-3\",\n\t            \"iso_8859-3:1988\",\n\t            \"l3\",\n\t            \"latin3\"\n\t          ],\n\t          \"name\": \"ISO-8859-3\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatin4\",\n\t            \"iso-8859-4\",\n\t            \"iso-ir-110\",\n\t            \"iso8859-4\",\n\t            \"iso88594\",\n\t            \"iso_8859-4\",\n\t            \"iso_8859-4:1988\",\n\t            \"l4\",\n\t            \"latin4\"\n\t          ],\n\t          \"name\": \"ISO-8859-4\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatincyrillic\",\n\t            \"cyrillic\",\n\t            \"iso-8859-5\",\n\t            \"iso-ir-144\",\n\t            \"iso8859-5\",\n\t            \"iso88595\",\n\t            \"iso_8859-5\",\n\t            \"iso_8859-5:1988\"\n\t          ],\n\t          \"name\": \"ISO-8859-5\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"arabic\",\n\t            \"asmo-708\",\n\t            \"csiso88596e\",\n\t            \"csiso88596i\",\n\t            \"csisolatinarabic\",\n\t            \"ecma-114\",\n\t            \"iso-8859-6\",\n\t            \"iso-8859-6-e\",\n\t            \"iso-8859-6-i\",\n\t            \"iso-ir-127\",\n\t            \"iso8859-6\",\n\t            \"iso88596\",\n\t            \"iso_8859-6\",\n\t            \"iso_8859-6:1987\"\n\t          ],\n\t          \"name\": \"ISO-8859-6\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatingreek\",\n\t            \"ecma-118\",\n\t            \"elot_928\",\n\t            \"greek\",\n\t            \"greek8\",\n\t            \"iso-8859-7\",\n\t            \"iso-ir-126\",\n\t            \"iso8859-7\",\n\t            \"iso88597\",\n\t            \"iso_8859-7\",\n\t            \"iso_8859-7:1987\",\n\t            \"sun_eu_greek\"\n\t          ],\n\t          \"name\": \"ISO-8859-7\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csiso88598e\",\n\t            \"csisolatinhebrew\",\n\t            \"hebrew\",\n\t            \"iso-8859-8\",\n\t            \"iso-8859-8-e\",\n\t            \"iso-ir-138\",\n\t            \"iso8859-8\",\n\t            \"iso88598\",\n\t            \"iso_8859-8\",\n\t            \"iso_8859-8:1988\",\n\t            \"visual\"\n\t          ],\n\t          \"name\": \"ISO-8859-8\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csiso88598i\",\n\t            \"iso-8859-8-i\",\n\t            \"logical\"\n\t          ],\n\t          \"name\": \"ISO-8859-8-I\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatin6\",\n\t            \"iso-8859-10\",\n\t            \"iso-ir-157\",\n\t            \"iso8859-10\",\n\t            \"iso885910\",\n\t            \"l6\",\n\t            \"latin6\"\n\t          ],\n\t          \"name\": \"ISO-8859-10\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"iso-8859-13\",\n\t            \"iso8859-13\",\n\t            \"iso885913\"\n\t          ],\n\t          \"name\": \"ISO-8859-13\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"iso-8859-14\",\n\t            \"iso8859-14\",\n\t            \"iso885914\"\n\t          ],\n\t          \"name\": \"ISO-8859-14\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csisolatin9\",\n\t            \"iso-8859-15\",\n\t            \"iso8859-15\",\n\t            \"iso885915\",\n\t            \"iso_8859-15\",\n\t            \"l9\"\n\t          ],\n\t          \"name\": \"ISO-8859-15\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"iso-8859-16\"\n\t          ],\n\t          \"name\": \"ISO-8859-16\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cskoi8r\",\n\t            \"koi\",\n\t            \"koi8\",\n\t            \"koi8-r\",\n\t            \"koi8_r\"\n\t          ],\n\t          \"name\": \"KOI8-R\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"koi8-ru\",\n\t            \"koi8-u\"\n\t          ],\n\t          \"name\": \"KOI8-U\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csmacintosh\",\n\t            \"mac\",\n\t            \"macintosh\",\n\t            \"x-mac-roman\"\n\t          ],\n\t          \"name\": \"macintosh\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"dos-874\",\n\t            \"iso-8859-11\",\n\t            \"iso8859-11\",\n\t            \"iso885911\",\n\t            \"tis-620\",\n\t            \"windows-874\"\n\t          ],\n\t          \"name\": \"windows-874\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1250\",\n\t            \"windows-1250\",\n\t            \"x-cp1250\"\n\t          ],\n\t          \"name\": \"windows-1250\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1251\",\n\t            \"windows-1251\",\n\t            \"x-cp1251\"\n\t          ],\n\t          \"name\": \"windows-1251\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"ansi_x3.4-1968\",\n\t            \"ascii\",\n\t            \"cp1252\",\n\t            \"cp819\",\n\t            \"csisolatin1\",\n\t            \"ibm819\",\n\t            \"iso-8859-1\",\n\t            \"iso-ir-100\",\n\t            \"iso8859-1\",\n\t            \"iso88591\",\n\t            \"iso_8859-1\",\n\t            \"iso_8859-1:1987\",\n\t            \"l1\",\n\t            \"latin1\",\n\t            \"us-ascii\",\n\t            \"windows-1252\",\n\t            \"x-cp1252\"\n\t          ],\n\t          \"name\": \"windows-1252\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1253\",\n\t            \"windows-1253\",\n\t            \"x-cp1253\"\n\t          ],\n\t          \"name\": \"windows-1253\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1254\",\n\t            \"csisolatin5\",\n\t            \"iso-8859-9\",\n\t            \"iso-ir-148\",\n\t            \"iso8859-9\",\n\t            \"iso88599\",\n\t            \"iso_8859-9\",\n\t            \"iso_8859-9:1989\",\n\t            \"l5\",\n\t            \"latin5\",\n\t            \"windows-1254\",\n\t            \"x-cp1254\"\n\t          ],\n\t          \"name\": \"windows-1254\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1255\",\n\t            \"windows-1255\",\n\t            \"x-cp1255\"\n\t          ],\n\t          \"name\": \"windows-1255\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1256\",\n\t            \"windows-1256\",\n\t            \"x-cp1256\"\n\t          ],\n\t          \"name\": \"windows-1256\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1257\",\n\t            \"windows-1257\",\n\t            \"x-cp1257\"\n\t          ],\n\t          \"name\": \"windows-1257\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"cp1258\",\n\t            \"windows-1258\",\n\t            \"x-cp1258\"\n\t          ],\n\t          \"name\": \"windows-1258\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"x-mac-cyrillic\",\n\t            \"x-mac-ukrainian\"\n\t          ],\n\t          \"name\": \"x-mac-cyrillic\"\n\t        }\n\t      ],\n\t      \"heading\": \"Legacy single-byte encodings\"\n\t    },\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"chinese\",\n\t            \"csgb2312\",\n\t            \"csiso58gb231280\",\n\t            \"gb2312\",\n\t            \"gb_2312\",\n\t            \"gb_2312-80\",\n\t            \"gbk\",\n\t            \"iso-ir-58\",\n\t            \"x-gbk\"\n\t          ],\n\t          \"name\": \"GBK\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"gb18030\"\n\t          ],\n\t          \"name\": \"gb18030\"\n\t        }\n\t      ],\n\t      \"heading\": \"Legacy multi-byte Chinese (simplified) encodings\"\n\t    },\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"big5\",\n\t            \"big5-hkscs\",\n\t            \"cn-big5\",\n\t            \"csbig5\",\n\t            \"x-x-big5\"\n\t          ],\n\t          \"name\": \"Big5\"\n\t        }\n\t      ],\n\t      \"heading\": \"Legacy multi-byte Chinese (traditional) encodings\"\n\t    },\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"cseucpkdfmtjapanese\",\n\t            \"euc-jp\",\n\t            \"x-euc-jp\"\n\t          ],\n\t          \"name\": \"EUC-JP\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csiso2022jp\",\n\t            \"iso-2022-jp\"\n\t          ],\n\t          \"name\": \"ISO-2022-JP\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"csshiftjis\",\n\t            \"ms932\",\n\t            \"ms_kanji\",\n\t            \"shift-jis\",\n\t            \"shift_jis\",\n\t            \"sjis\",\n\t            \"windows-31j\",\n\t            \"x-sjis\"\n\t          ],\n\t          \"name\": \"Shift_JIS\"\n\t        }\n\t      ],\n\t      \"heading\": \"Legacy multi-byte Japanese encodings\"\n\t    },\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"cseuckr\",\n\t            \"csksc56011987\",\n\t            \"euc-kr\",\n\t            \"iso-ir-149\",\n\t            \"korean\",\n\t            \"ks_c_5601-1987\",\n\t            \"ks_c_5601-1989\",\n\t            \"ksc5601\",\n\t            \"ksc_5601\",\n\t            \"windows-949\"\n\t          ],\n\t          \"name\": \"EUC-KR\"\n\t        }\n\t      ],\n\t      \"heading\": \"Legacy multi-byte Korean encodings\"\n\t    },\n\t    {\n\t      \"encodings\": [\n\t        {\n\t          \"labels\": [\n\t            \"csiso2022kr\",\n\t            \"hz-gb-2312\",\n\t            \"iso-2022-cn\",\n\t            \"iso-2022-cn-ext\",\n\t            \"iso-2022-kr\"\n\t          ],\n\t          \"name\": \"replacement\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"utf-16be\"\n\t          ],\n\t          \"name\": \"UTF-16BE\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"utf-16\",\n\t            \"utf-16le\"\n\t          ],\n\t          \"name\": \"UTF-16LE\"\n\t        },\n\t        {\n\t          \"labels\": [\n\t            \"x-user-defined\"\n\t          ],\n\t          \"name\": \"x-user-defined\"\n\t        }\n\t      ],\n\t      \"heading\": \"Legacy miscellaneous encodings\"\n\t    }\n\t  ];\n\t\n\t  // Label to encoding registry.\n\t  /** @type {Object.<string,{name:string,labels:Array.<string>}>} */\n\t  var label_to_encoding = {};\n\t  encodings.forEach(function(category) {\n\t    category.encodings.forEach(function(encoding) {\n\t      encoding.labels.forEach(function(label) {\n\t        label_to_encoding[label] = encoding;\n\t      });\n\t    });\n\t  });\n\t\n\t  // Registry of of encoder/decoder factories, by encoding name.\n\t  /** @type {Object.<string, function({fatal:boolean}): Encoder>} */\n\t  var encoders = {};\n\t  /** @type {Object.<string, function({fatal:boolean}): Decoder>} */\n\t  var decoders = {};\n\t\n\t  //\n\t  // 6. Indexes\n\t  //\n\t\n\t  /**\n\t   * @param {number} pointer The |pointer| to search for.\n\t   * @param {(!Array.<?number>|undefined)} index The |index| to search within.\n\t   * @return {?number} The code point corresponding to |pointer| in |index|,\n\t   *     or null if |code point| is not in |index|.\n\t   */\n\t  function indexCodePointFor(pointer, index) {\n\t    if (!index) return null;\n\t    return index[pointer] || null;\n\t  }\n\t\n\t  /**\n\t   * @param {number} code_point The |code point| to search for.\n\t   * @param {!Array.<?number>} index The |index| to search within.\n\t   * @return {?number} The first pointer corresponding to |code point| in\n\t   *     |index|, or null if |code point| is not in |index|.\n\t   */\n\t  function indexPointerFor(code_point, index) {\n\t    var pointer = index.indexOf(code_point);\n\t    return pointer === -1 ? null : pointer;\n\t  }\n\t\n\t  /**\n\t   * @param {string} name Name of the index.\n\t   * @return {(!Array.<number>|!Array.<Array.<number>>)}\n\t   *  */\n\t  function index(name) {\n\t    if (!('encoding-indexes' in global)) {\n\t      throw Error(\"Indexes missing.\" +\n\t                  \" Did you forget to include encoding-indexes.js first?\");\n\t    }\n\t    return global['encoding-indexes'][name];\n\t  }\n\t\n\t  /**\n\t   * @param {number} pointer The |pointer| to search for in the gb18030 index.\n\t   * @return {?number} The code point corresponding to |pointer| in |index|,\n\t   *     or null if |code point| is not in the gb18030 index.\n\t   */\n\t  function indexGB18030RangesCodePointFor(pointer) {\n\t    // 1. If pointer is greater than 39419 and less than 189000, or\n\t    // pointer is greater than 1237575, return null.\n\t    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575))\n\t      return null;\n\t\n\t    // 2. If pointer is 7457, return code point U+E7C7.\n\t    if (pointer === 7457) return 0xE7C7;\n\t\n\t    // 3. Let offset be the last pointer in index gb18030 ranges that\n\t    // is equal to or less than pointer and let code point offset be\n\t    // its corresponding code point.\n\t    var offset = 0;\n\t    var code_point_offset = 0;\n\t    var idx = index('gb18030-ranges');\n\t    var i;\n\t    for (i = 0; i < idx.length; ++i) {\n\t      /** @type {!Array.<number>} */\n\t      var entry = idx[i];\n\t      if (entry[0] <= pointer) {\n\t        offset = entry[0];\n\t        code_point_offset = entry[1];\n\t      } else {\n\t        break;\n\t      }\n\t    }\n\t\n\t    // 4. Return a code point whose value is code point offset +\n\t    // pointer − offset.\n\t    return code_point_offset + pointer - offset;\n\t  }\n\t\n\t  /**\n\t   * @param {number} code_point The |code point| to locate in the gb18030 index.\n\t   * @return {number} The first pointer corresponding to |code point| in the\n\t   *     gb18030 index.\n\t   */\n\t  function indexGB18030RangesPointerFor(code_point) {\n\t    // 1. If code point is U+E7C7, return pointer 7457.\n\t    if (code_point === 0xE7C7) return 7457;\n\t\n\t    // 2. Let offset be the last code point in index gb18030 ranges\n\t    // that is equal to or less than code point and let pointer offset\n\t    // be its corresponding pointer.\n\t    var offset = 0;\n\t    var pointer_offset = 0;\n\t    var idx = index('gb18030-ranges');\n\t    var i;\n\t    for (i = 0; i < idx.length; ++i) {\n\t      /** @type {!Array.<number>} */\n\t      var entry = idx[i];\n\t      if (entry[1] <= code_point) {\n\t        offset = entry[1];\n\t        pointer_offset = entry[0];\n\t      } else {\n\t        break;\n\t      }\n\t    }\n\t\n\t    // 3. Return a pointer whose value is pointer offset + code point\n\t    // − offset.\n\t    return pointer_offset + code_point - offset;\n\t  }\n\t\n\t  /**\n\t   * @param {number} code_point The |code_point| to search for in the Shift_JIS\n\t   *     index.\n\t   * @return {?number} The code point corresponding to |pointer| in |index|,\n\t   *     or null if |code point| is not in the Shift_JIS index.\n\t   */\n\t  function indexShiftJISPointerFor(code_point) {\n\t    // 1. Let index be index jis0208 excluding all entries whose\n\t    // pointer is in the range 8272 to 8835, inclusive.\n\t    shift_jis_index = shift_jis_index ||\n\t      index('jis0208').map(function(code_point, pointer) {\n\t        return inRange(pointer, 8272, 8835) ? null : code_point;\n\t      });\n\t    var index_ = shift_jis_index;\n\t\n\t    // 2. Return the index pointer for code point in index.\n\t    return index_.indexOf(code_point);\n\t  }\n\t  var shift_jis_index;\n\t\n\t  /**\n\t   * @param {number} code_point The |code_point| to search for in the big5\n\t   *     index.\n\t   * @return {?number} The code point corresponding to |pointer| in |index|,\n\t   *     or null if |code point| is not in the big5 index.\n\t   */\n\t  function indexBig5PointerFor(code_point) {\n\t    // 1. Let index be index Big5 excluding all entries whose pointer\n\t    big5_index_no_hkscs = big5_index_no_hkscs ||\n\t      index('big5').map(function(code_point, pointer) {\n\t        return (pointer < (0xA1 - 0x81) * 157) ? null : code_point;\n\t      });\n\t    var index_ = big5_index_no_hkscs;\n\t\n\t    // 2. If code point is U+2550, U+255E, U+2561, U+256A, U+5341, or\n\t    // U+5345, return the last pointer corresponding to code point in\n\t    // index.\n\t    if (code_point === 0x2550 || code_point === 0x255E ||\n\t        code_point === 0x2561 || code_point === 0x256A ||\n\t        code_point === 0x5341 || code_point === 0x5345) {\n\t      return index_.lastIndexOf(code_point);\n\t    }\n\t\n\t    // 3. Return the index pointer for code point in index.\n\t    return indexPointerFor(code_point, index_);\n\t  }\n\t  var big5_index_no_hkscs;\n\t\n\t  //\n\t  // 8. API\n\t  //\n\t\n\t  /** @const */ var DEFAULT_ENCODING = 'utf-8';\n\t\n\t  // 8.1 Interface TextDecoder\n\t\n\t  /**\n\t   * @constructor\n\t   * @param {string=} label The label of the encoding;\n\t   *     defaults to 'utf-8'.\n\t   * @param {Object=} options\n\t   */\n\t  function TextDecoder(label, options) {\n\t    // Web IDL conventions\n\t    if (!(this instanceof TextDecoder))\n\t      throw TypeError('Called as a function. Did you forget \\'new\\'?');\n\t    label = label !== undefined ? String(label) : DEFAULT_ENCODING;\n\t    options = ToDictionary(options);\n\t\n\t    // A TextDecoder object has an associated encoding, decoder,\n\t    // stream, ignore BOM flag (initially unset), BOM seen flag\n\t    // (initially unset), error mode (initially replacement), and do\n\t    // not flush flag (initially unset).\n\t\n\t    /** @private */\n\t    this._encoding = null;\n\t    /** @private @type {?Decoder} */\n\t    this._decoder = null;\n\t    /** @private @type {boolean} */\n\t    this._ignoreBOM = false;\n\t    /** @private @type {boolean} */\n\t    this._BOMseen = false;\n\t    /** @private @type {string} */\n\t    this._error_mode = 'replacement';\n\t    /** @private @type {boolean} */\n\t    this._do_not_flush = false;\n\t\n\t\n\t    // 1. Let encoding be the result of getting an encoding from\n\t    // label.\n\t    var encoding = getEncoding(label);\n\t\n\t    // 2. If encoding is failure or replacement, throw a RangeError.\n\t    if (encoding === null || encoding.name === 'replacement')\n\t      throw RangeError('Unknown encoding: ' + label);\n\t    if (!decoders[encoding.name]) {\n\t      throw Error('Decoder not present.' +\n\t                  ' Did you forget to include encoding-indexes.js first?');\n\t    }\n\t\n\t    // 3. Let dec be a new TextDecoder object.\n\t    var dec = this;\n\t\n\t    // 4. Set dec's encoding to encoding.\n\t    dec._encoding = encoding;\n\t\n\t    // 5. If options's fatal member is true, set dec's error mode to\n\t    // fatal.\n\t    if (Boolean(options['fatal']))\n\t      dec._error_mode = 'fatal';\n\t\n\t    // 6. If options's ignoreBOM member is true, set dec's ignore BOM\n\t    // flag.\n\t    if (Boolean(options['ignoreBOM']))\n\t      dec._ignoreBOM = true;\n\t\n\t    // For pre-ES5 runtimes:\n\t    if (!Object.defineProperty) {\n\t      this.encoding = dec._encoding.name.toLowerCase();\n\t      this.fatal = dec._error_mode === 'fatal';\n\t      this.ignoreBOM = dec._ignoreBOM;\n\t    }\n\t\n\t    // 7. Return dec.\n\t    return dec;\n\t  }\n\t\n\t  if (Object.defineProperty) {\n\t    // The encoding attribute's getter must return encoding's name.\n\t    Object.defineProperty(TextDecoder.prototype, 'encoding', {\n\t      /** @this {TextDecoder} */\n\t      get: function() { return this._encoding.name.toLowerCase(); }\n\t    });\n\t\n\t    // The fatal attribute's getter must return true if error mode\n\t    // is fatal, and false otherwise.\n\t    Object.defineProperty(TextDecoder.prototype, 'fatal', {\n\t      /** @this {TextDecoder} */\n\t      get: function() { return this._error_mode === 'fatal'; }\n\t    });\n\t\n\t    // The ignoreBOM attribute's getter must return true if ignore\n\t    // BOM flag is set, and false otherwise.\n\t    Object.defineProperty(TextDecoder.prototype, 'ignoreBOM', {\n\t      /** @this {TextDecoder} */\n\t      get: function() { return this._ignoreBOM; }\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @param {BufferSource=} input The buffer of bytes to decode.\n\t   * @param {Object=} options\n\t   * @return {string} The decoded string.\n\t   */\n\t  TextDecoder.prototype.decode = function decode(input, options) {\n\t    var bytes;\n\t    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n\t      bytes = new Uint8Array(input);\n\t    } else if (typeof input === 'object' && 'buffer' in input &&\n\t               input.buffer instanceof ArrayBuffer) {\n\t      bytes = new Uint8Array(input.buffer,\n\t                             input.byteOffset,\n\t                             input.byteLength);\n\t    } else {\n\t      bytes = new Uint8Array(0);\n\t    }\n\t\n\t    options = ToDictionary(options);\n\t\n\t    // 1. If the do not flush flag is unset, set decoder to a new\n\t    // encoding's decoder, set stream to a new stream, and unset the\n\t    // BOM seen flag.\n\t    if (!this._do_not_flush) {\n\t      this._decoder = decoders[this._encoding.name]({\n\t        fatal: this._error_mode === 'fatal'});\n\t      this._BOMseen = false;\n\t    }\n\t\n\t    // 2. If options's stream is true, set the do not flush flag, and\n\t    // unset the do not flush flag otherwise.\n\t    this._do_not_flush = Boolean(options['stream']);\n\t\n\t    // 3. If input is given, push a copy of input to stream.\n\t    // TODO: Align with spec algorithm - maintain stream on instance.\n\t    var input_stream = new Stream(bytes);\n\t\n\t    // 4. Let output be a new stream.\n\t    var output = [];\n\t\n\t    /** @type {?(number|!Array.<number>)} */\n\t    var result;\n\t\n\t    // 5. While true:\n\t    while (true) {\n\t      // 1. Let token be the result of reading from stream.\n\t      var token = input_stream.read();\n\t\n\t      // 2. If token is end-of-stream and the do not flush flag is\n\t      // set, return output, serialized.\n\t      // TODO: Align with spec algorithm.\n\t      if (token === end_of_stream)\n\t        break;\n\t\n\t      // 3. Otherwise, run these subsubsteps:\n\t\n\t      // 1. Let result be the result of processing token for decoder,\n\t      // stream, output, and error mode.\n\t      result = this._decoder.handler(input_stream, token);\n\t\n\t      // 2. If result is finished, return output, serialized.\n\t      if (result === finished)\n\t        break;\n\t\n\t      if (result !== null) {\n\t        if (Array.isArray(result))\n\t          output.push.apply(output, /**@type {!Array.<number>}*/(result));\n\t        else\n\t          output.push(result);\n\t      }\n\t\n\t      // 3. Otherwise, if result is error, throw a TypeError.\n\t      // (Thrown in handler)\n\t\n\t      // 4. Otherwise, do nothing.\n\t    }\n\t    // TODO: Align with spec algorithm.\n\t    if (!this._do_not_flush) {\n\t      do {\n\t        result = this._decoder.handler(input_stream, input_stream.read());\n\t        if (result === finished)\n\t          break;\n\t        if (result === null)\n\t          continue;\n\t        if (Array.isArray(result))\n\t          output.push.apply(output, /**@type {!Array.<number>}*/(result));\n\t        else\n\t          output.push(result);\n\t      } while (!input_stream.endOfStream());\n\t      this._decoder = null;\n\t    }\n\t\n\t    // A TextDecoder object also has an associated serialize stream\n\t    // algorithm...\n\t    /**\n\t     * @param {!Array.<number>} stream\n\t     * @return {string}\n\t     * @this {TextDecoder}\n\t     */\n\t    function serializeStream(stream) {\n\t      // 1. Let token be the result of reading from stream.\n\t      // (Done in-place on array, rather than as a stream)\n\t\n\t      // 2. If encoding is UTF-8, UTF-16BE, or UTF-16LE, and ignore\n\t      // BOM flag and BOM seen flag are unset, run these subsubsteps:\n\t      if (includes(['UTF-8', 'UTF-16LE', 'UTF-16BE'], this._encoding.name) &&\n\t          !this._ignoreBOM && !this._BOMseen) {\n\t        if (stream.length > 0 && stream[0] === 0xFEFF) {\n\t          // 1. If token is U+FEFF, set BOM seen flag.\n\t          this._BOMseen = true;\n\t          stream.shift();\n\t        } else if (stream.length > 0) {\n\t          // 2. Otherwise, if token is not end-of-stream, set BOM seen\n\t          // flag and append token to stream.\n\t          this._BOMseen = true;\n\t        } else {\n\t          // 3. Otherwise, if token is not end-of-stream, append token\n\t          // to output.\n\t          // (no-op)\n\t        }\n\t      }\n\t      // 4. Otherwise, return output.\n\t      return codePointsToString(stream);\n\t    }\n\t\n\t    return serializeStream.call(this, output);\n\t  };\n\t\n\t  // 8.2 Interface TextEncoder\n\t\n\t  /**\n\t   * @constructor\n\t   * @param {string=} label The label of the encoding. NONSTANDARD.\n\t   * @param {Object=} options NONSTANDARD.\n\t   */\n\t  function TextEncoder(label, options) {\n\t    // Web IDL conventions\n\t    if (!(this instanceof TextEncoder))\n\t      throw TypeError('Called as a function. Did you forget \\'new\\'?');\n\t    options = ToDictionary(options);\n\t\n\t    // A TextEncoder object has an associated encoding and encoder.\n\t\n\t    /** @private */\n\t    this._encoding = null;\n\t    /** @private @type {?Encoder} */\n\t    this._encoder = null;\n\t\n\t    // Non-standard\n\t    /** @private @type {boolean} */\n\t    this._do_not_flush = false;\n\t    /** @private @type {string} */\n\t    this._fatal = Boolean(options['fatal']) ? 'fatal' : 'replacement';\n\t\n\t    // 1. Let enc be a new TextEncoder object.\n\t    var enc = this;\n\t\n\t    // 2. Set enc's encoding to UTF-8's encoder.\n\t    if (Boolean(options['NONSTANDARD_allowLegacyEncoding'])) {\n\t      // NONSTANDARD behavior.\n\t      label = label !== undefined ? String(label) : DEFAULT_ENCODING;\n\t      var encoding = getEncoding(label);\n\t      if (encoding === null || encoding.name === 'replacement')\n\t        throw RangeError('Unknown encoding: ' + label);\n\t      if (!encoders[encoding.name]) {\n\t        throw Error('Encoder not present.' +\n\t                    ' Did you forget to include encoding-indexes.js first?');\n\t      }\n\t      enc._encoding = encoding;\n\t    } else {\n\t      // Standard behavior.\n\t      enc._encoding = getEncoding('utf-8');\n\t\n\t      if (label !== undefined && 'console' in global) {\n\t        console.warn('TextEncoder constructor called with encoding label, '\n\t                     + 'which is ignored.');\n\t      }\n\t    }\n\t\n\t    // For pre-ES5 runtimes:\n\t    if (!Object.defineProperty)\n\t      this.encoding = enc._encoding.name.toLowerCase();\n\t\n\t    // 3. Return enc.\n\t    return enc;\n\t  }\n\t\n\t  if (Object.defineProperty) {\n\t    // The encoding attribute's getter must return encoding's name.\n\t    Object.defineProperty(TextEncoder.prototype, 'encoding', {\n\t      /** @this {TextEncoder} */\n\t      get: function() { return this._encoding.name.toLowerCase(); }\n\t    });\n\t  }\n\t\n\t  /**\n\t   * @param {string=} opt_string The string to encode.\n\t   * @param {Object=} options\n\t   * @return {!Uint8Array} Encoded bytes, as a Uint8Array.\n\t   */\n\t  TextEncoder.prototype.encode = function encode(opt_string, options) {\n\t    opt_string = opt_string === undefined ? '' : String(opt_string);\n\t    options = ToDictionary(options);\n\t\n\t    // NOTE: This option is nonstandard. None of the encodings\n\t    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when\n\t    // the input is a USVString so streaming is not necessary.\n\t    if (!this._do_not_flush)\n\t      this._encoder = encoders[this._encoding.name]({\n\t        fatal: this._fatal === 'fatal'});\n\t    this._do_not_flush = Boolean(options['stream']);\n\t\n\t    // 1. Convert input to a stream.\n\t    var input = new Stream(stringToCodePoints(opt_string));\n\t\n\t    // 2. Let output be a new stream\n\t    var output = [];\n\t\n\t    /** @type {?(number|!Array.<number>)} */\n\t    var result;\n\t    // 3. While true, run these substeps:\n\t    while (true) {\n\t      // 1. Let token be the result of reading from input.\n\t      var token = input.read();\n\t      if (token === end_of_stream)\n\t        break;\n\t      // 2. Let result be the result of processing token for encoder,\n\t      // input, output.\n\t      result = this._encoder.handler(input, token);\n\t      if (result === finished)\n\t        break;\n\t      if (Array.isArray(result))\n\t        output.push.apply(output, /**@type {!Array.<number>}*/(result));\n\t      else\n\t        output.push(result);\n\t    }\n\t    // TODO: Align with spec algorithm.\n\t    if (!this._do_not_flush) {\n\t      while (true) {\n\t        result = this._encoder.handler(input, input.read());\n\t        if (result === finished)\n\t          break;\n\t        if (Array.isArray(result))\n\t          output.push.apply(output, /**@type {!Array.<number>}*/(result));\n\t        else\n\t          output.push(result);\n\t      }\n\t      this._encoder = null;\n\t    }\n\t    // 3. If result is finished, convert output into a byte sequence,\n\t    // and then return a Uint8Array object wrapping an ArrayBuffer\n\t    // containing output.\n\t    return new Uint8Array(output);\n\t  };\n\t\n\t\n\t  //\n\t  // 9. The encoding\n\t  //\n\t\n\t  // 9.1 utf-8\n\t\n\t  // 9.1.1 utf-8 decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function UTF8Decoder(options) {\n\t    var fatal = options.fatal;\n\t\n\t    // utf-8's decoder's has an associated utf-8 code point, utf-8\n\t    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n\t    // lower boundary (initially 0x80), and a utf-8 upper boundary\n\t    // (initially 0xBF).\n\t    var /** @type {number} */ utf8_code_point = 0,\n\t        /** @type {number} */ utf8_bytes_seen = 0,\n\t        /** @type {number} */ utf8_bytes_needed = 0,\n\t        /** @type {number} */ utf8_lower_boundary = 0x80,\n\t        /** @type {number} */ utf8_upper_boundary = 0xBF;\n\t\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n\t      // set utf-8 bytes needed to 0 and return error.\n\t      if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n\t        utf8_bytes_needed = 0;\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 2. If byte is end-of-stream, return finished.\n\t      if (bite === end_of_stream)\n\t        return finished;\n\t\n\t      // 3. If utf-8 bytes needed is 0, based on byte:\n\t      if (utf8_bytes_needed === 0) {\n\t\n\t        // 0x00 to 0x7F\n\t        if (inRange(bite, 0x00, 0x7F)) {\n\t          // Return a code point whose value is byte.\n\t          return bite;\n\t        }\n\t\n\t        // 0xC2 to 0xDF\n\t        else if (inRange(bite, 0xC2, 0xDF)) {\n\t          // 1. Set utf-8 bytes needed to 1.\n\t          utf8_bytes_needed = 1;\n\t\n\t          // 2. Set UTF-8 code point to byte & 0x1F.\n\t          utf8_code_point = bite & 0x1F;\n\t        }\n\t\n\t        // 0xE0 to 0xEF\n\t        else if (inRange(bite, 0xE0, 0xEF)) {\n\t          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n\t          if (bite === 0xE0)\n\t            utf8_lower_boundary = 0xA0;\n\t          // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n\t          if (bite === 0xED)\n\t            utf8_upper_boundary = 0x9F;\n\t          // 3. Set utf-8 bytes needed to 2.\n\t          utf8_bytes_needed = 2;\n\t          // 4. Set UTF-8 code point to byte & 0xF.\n\t          utf8_code_point = bite & 0xF;\n\t        }\n\t\n\t        // 0xF0 to 0xF4\n\t        else if (inRange(bite, 0xF0, 0xF4)) {\n\t          // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n\t          if (bite === 0xF0)\n\t            utf8_lower_boundary = 0x90;\n\t          // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n\t          if (bite === 0xF4)\n\t            utf8_upper_boundary = 0x8F;\n\t          // 3. Set utf-8 bytes needed to 3.\n\t          utf8_bytes_needed = 3;\n\t          // 4. Set UTF-8 code point to byte & 0x7.\n\t          utf8_code_point = bite & 0x7;\n\t        }\n\t\n\t        // Otherwise\n\t        else {\n\t          // Return error.\n\t          return decoderError(fatal);\n\t        }\n\t\n\t        // Return continue.\n\t        return null;\n\t      }\n\t\n\t      // 4. If byte is not in the range utf-8 lower boundary to utf-8\n\t      // upper boundary, inclusive, run these substeps:\n\t      if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\t\n\t        // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n\t        // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n\t        // utf-8 upper boundary to 0xBF.\n\t        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\t        utf8_lower_boundary = 0x80;\n\t        utf8_upper_boundary = 0xBF;\n\t\n\t        // 2. Prepend byte to stream.\n\t        stream.prepend(bite);\n\t\n\t        // 3. Return error.\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n\t      // to 0xBF.\n\t      utf8_lower_boundary = 0x80;\n\t      utf8_upper_boundary = 0xBF;\n\t\n\t      // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &\n\t      // 0x3F)\n\t      utf8_code_point = (utf8_code_point << 6) | (bite & 0x3F);\n\t\n\t      // 7. Increase utf-8 bytes seen by one.\n\t      utf8_bytes_seen += 1;\n\t\n\t      // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n\t      // continue.\n\t      if (utf8_bytes_seen !== utf8_bytes_needed)\n\t        return null;\n\t\n\t      // 9. Let code point be utf-8 code point.\n\t      var code_point = utf8_code_point;\n\t\n\t      // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n\t      // seen to 0.\n\t      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\t\n\t      // 11. Return a code point whose value is code point.\n\t      return code_point;\n\t    };\n\t  }\n\t\n\t  // 9.1.2 utf-8 encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function UTF8Encoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. Set count and offset based on the range code point is in:\n\t      var count, offset;\n\t      // U+0080 to U+07FF, inclusive:\n\t      if (inRange(code_point, 0x0080, 0x07FF)) {\n\t        // 1 and 0xC0\n\t        count = 1;\n\t        offset = 0xC0;\n\t      }\n\t      // U+0800 to U+FFFF, inclusive:\n\t      else if (inRange(code_point, 0x0800, 0xFFFF)) {\n\t        // 2 and 0xE0\n\t        count = 2;\n\t        offset = 0xE0;\n\t      }\n\t      // U+10000 to U+10FFFF, inclusive:\n\t      else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n\t        // 3 and 0xF0\n\t        count = 3;\n\t        offset = 0xF0;\n\t      }\n\t\n\t      // 4. Let bytes be a byte sequence whose first byte is (code\n\t      // point >> (6 × count)) + offset.\n\t      var bytes = [(code_point >> (6 * count)) + offset];\n\t\n\t      // 5. Run these substeps while count is greater than 0:\n\t      while (count > 0) {\n\t\n\t        // 1. Set temp to code point >> (6 × (count − 1)).\n\t        var temp = code_point >> (6 * (count - 1));\n\t\n\t        // 2. Append to bytes 0x80 | (temp & 0x3F).\n\t        bytes.push(0x80 | (temp & 0x3F));\n\t\n\t        // 3. Decrease count by one.\n\t        count -= 1;\n\t      }\n\t\n\t      // 6. Return bytes bytes, in order.\n\t      return bytes;\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['UTF-8'] = function(options) {\n\t    return new UTF8Encoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['UTF-8'] = function(options) {\n\t    return new UTF8Decoder(options);\n\t  };\n\t\n\t  //\n\t  // 10. Legacy single-byte encodings\n\t  //\n\t\n\t  // 10.1 single-byte decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {!Array.<number>} index The encoding index.\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function SingleByteDecoder(index, options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream, return finished.\n\t      if (bite === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If byte is an ASCII byte, return a code point whose value\n\t      // is byte.\n\t      if (isASCIIByte(bite))\n\t        return bite;\n\t\n\t      // 3. Let code point be the index code point for byte − 0x80 in\n\t      // index single-byte.\n\t      var code_point = index[bite - 0x80];\n\t\n\t      // 4. If code point is null, return error.\n\t      if (code_point === null)\n\t        return decoderError(fatal);\n\t\n\t      // 5. Return a code point whose value is code point.\n\t      return code_point;\n\t    };\n\t  }\n\t\n\t  // 10.2 single-byte encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {!Array.<?number>} index The encoding index.\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function SingleByteEncoder(index, options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. Let pointer be the index pointer for code point in index\n\t      // single-byte.\n\t      var pointer = indexPointerFor(code_point, index);\n\t\n\t      // 4. If pointer is null, return error with code point.\n\t      if (pointer === null)\n\t        encoderError(code_point);\n\t\n\t      // 5. Return a byte whose value is pointer + 0x80.\n\t      return pointer + 0x80;\n\t    };\n\t  }\n\t\n\t  (function() {\n\t    if (!('encoding-indexes' in global))\n\t      return;\n\t    encodings.forEach(function(category) {\n\t      if (category.heading !== 'Legacy single-byte encodings')\n\t        return;\n\t      category.encodings.forEach(function(encoding) {\n\t        var name = encoding.name;\n\t        var idx = index(name.toLowerCase());\n\t        /** @param {{fatal: boolean}} options */\n\t        decoders[name] = function(options) {\n\t          return new SingleByteDecoder(idx, options);\n\t        };\n\t        /** @param {{fatal: boolean}} options */\n\t        encoders[name] = function(options) {\n\t          return new SingleByteEncoder(idx, options);\n\t        };\n\t      });\n\t    });\n\t  }());\n\t\n\t  //\n\t  // 11. Legacy multi-byte Chinese (simplified) encodings\n\t  //\n\t\n\t  // 11.1 gbk\n\t\n\t  // 11.1.1 gbk decoder\n\t  // gbk's decoder is gb18030's decoder.\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['GBK'] = function(options) {\n\t    return new GB18030Decoder(options);\n\t  };\n\t\n\t  // 11.1.2 gbk encoder\n\t  // gbk's encoder is gb18030's encoder with its gbk flag set.\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['GBK'] = function(options) {\n\t    return new GB18030Encoder(options, true);\n\t  };\n\t\n\t  // 11.2 gb18030\n\t\n\t  // 11.2.1 gb18030 decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function GB18030Decoder(options) {\n\t    var fatal = options.fatal;\n\t    // gb18030's decoder has an associated gb18030 first, gb18030\n\t    // second, and gb18030 third (all initially 0x00).\n\t    var /** @type {number} */ gb18030_first = 0x00,\n\t        /** @type {number} */ gb18030_second = 0x00,\n\t        /** @type {number} */ gb18030_third = 0x00;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and gb18030 first, gb18030\n\t      // second, and gb18030 third are 0x00, return finished.\n\t      if (bite === end_of_stream && gb18030_first === 0x00 &&\n\t          gb18030_second === 0x00 && gb18030_third === 0x00) {\n\t        return finished;\n\t      }\n\t      // 2. If byte is end-of-stream, and gb18030 first, gb18030\n\t      // second, or gb18030 third is not 0x00, set gb18030 first,\n\t      // gb18030 second, and gb18030 third to 0x00, and return error.\n\t      if (bite === end_of_stream &&\n\t          (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||\n\t           gb18030_third !== 0x00)) {\n\t        gb18030_first = 0x00;\n\t        gb18030_second = 0x00;\n\t        gb18030_third = 0x00;\n\t        decoderError(fatal);\n\t      }\n\t      var code_point;\n\t      // 3. If gb18030 third is not 0x00, run these substeps:\n\t      if (gb18030_third !== 0x00) {\n\t        // 1. Let code point be null.\n\t        code_point = null;\n\t        // 2. If byte is in the range 0x30 to 0x39, inclusive, set\n\t        // code point to the index gb18030 ranges code point for\n\t        // (((gb18030 first − 0x81) × 10 + gb18030 second − 0x30) ×\n\t        // 126 + gb18030 third − 0x81) × 10 + byte − 0x30.\n\t        if (inRange(bite, 0x30, 0x39)) {\n\t          code_point = indexGB18030RangesCodePointFor(\n\t              (((gb18030_first - 0x81) * 10 + gb18030_second - 0x30) * 126 +\n\t               gb18030_third - 0x81) * 10 + bite - 0x30);\n\t        }\n\t\n\t        // 3. Let buffer be a byte sequence consisting of gb18030\n\t        // second, gb18030 third, and byte, in order.\n\t        var buffer = [gb18030_second, gb18030_third, bite];\n\t\n\t        // 4. Set gb18030 first, gb18030 second, and gb18030 third to\n\t        // 0x00.\n\t        gb18030_first = 0x00;\n\t        gb18030_second = 0x00;\n\t        gb18030_third = 0x00;\n\t\n\t        // 5. If code point is null, prepend buffer to stream and\n\t        // return error.\n\t        if (code_point === null) {\n\t          stream.prepend(buffer);\n\t          return decoderError(fatal);\n\t        }\n\t\n\t        // 6. Return a code point whose value is code point.\n\t        return code_point;\n\t      }\n\t\n\t      // 4. If gb18030 second is not 0x00, run these substeps:\n\t      if (gb18030_second !== 0x00) {\n\t\n\t        // 1. If byte is in the range 0x81 to 0xFE, inclusive, set\n\t        // gb18030 third to byte and return continue.\n\t        if (inRange(bite, 0x81, 0xFE)) {\n\t          gb18030_third = bite;\n\t          return null;\n\t        }\n\t\n\t        // 2. Prepend gb18030 second followed by byte to stream, set\n\t        // gb18030 first and gb18030 second to 0x00, and return error.\n\t        stream.prepend([gb18030_second, bite]);\n\t        gb18030_first = 0x00;\n\t        gb18030_second = 0x00;\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 5. If gb18030 first is not 0x00, run these substeps:\n\t      if (gb18030_first !== 0x00) {\n\t\n\t        // 1. If byte is in the range 0x30 to 0x39, inclusive, set\n\t        // gb18030 second to byte and return continue.\n\t        if (inRange(bite, 0x30, 0x39)) {\n\t          gb18030_second = bite;\n\t          return null;\n\t        }\n\t\n\t        // 2. Let lead be gb18030 first, let pointer be null, and set\n\t        // gb18030 first to 0x00.\n\t        var lead = gb18030_first;\n\t        var pointer = null;\n\t        gb18030_first = 0x00;\n\t\n\t        // 3. Let offset be 0x40 if byte is less than 0x7F and 0x41\n\t        // otherwise.\n\t        var offset = bite < 0x7F ? 0x40 : 0x41;\n\t\n\t        // 4. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80\n\t        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 190 +\n\t        // (byte − offset).\n\t        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE))\n\t          pointer = (lead - 0x81) * 190 + (bite - offset);\n\t\n\t        // 5. Let code point be null if pointer is null and the index\n\t        // code point for pointer in index gb18030 otherwise.\n\t        code_point = pointer === null ? null :\n\t            indexCodePointFor(pointer, index('gb18030'));\n\t\n\t        // 6. If code point is null and byte is an ASCII byte, prepend\n\t        // byte to stream.\n\t        if (code_point === null && isASCIIByte(bite))\n\t          stream.prepend(bite);\n\t\n\t        // 7. If code point is null, return error.\n\t        if (code_point === null)\n\t          return decoderError(fatal);\n\t\n\t        // 8. Return a code point whose value is code point.\n\t        return code_point;\n\t      }\n\t\n\t      // 6. If byte is an ASCII byte, return a code point whose value\n\t      // is byte.\n\t      if (isASCIIByte(bite))\n\t        return bite;\n\t\n\t      // 7. If byte is 0x80, return code point U+20AC.\n\t      if (bite === 0x80)\n\t        return 0x20AC;\n\t\n\t      // 8. If byte is in the range 0x81 to 0xFE, inclusive, set\n\t      // gb18030 first to byte and return continue.\n\t      if (inRange(bite, 0x81, 0xFE)) {\n\t        gb18030_first = bite;\n\t        return null;\n\t      }\n\t\n\t      // 9. Return error.\n\t      return decoderError(fatal);\n\t    };\n\t  }\n\t\n\t  // 11.2.2 gb18030 encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   * @param {boolean=} gbk_flag\n\t   */\n\t  function GB18030Encoder(options, gbk_flag) {\n\t    var fatal = options.fatal;\n\t    // gb18030's decoder has an associated gbk flag (initially unset).\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. If code point is U+E5E5, return error with code point.\n\t      if (code_point === 0xE5E5)\n\t        return encoderError(code_point);\n\t\n\t      // 4. If the gbk flag is set and code point is U+20AC, return\n\t      // byte 0x80.\n\t      if (gbk_flag && code_point === 0x20AC)\n\t        return 0x80;\n\t\n\t      // 5. Let pointer be the index pointer for code point in index\n\t      // gb18030.\n\t      var pointer = indexPointerFor(code_point, index('gb18030'));\n\t\n\t      // 6. If pointer is not null, run these substeps:\n\t      if (pointer !== null) {\n\t\n\t        // 1. Let lead be floor(pointer / 190) + 0x81.\n\t        var lead = floor(pointer / 190) + 0x81;\n\t\n\t        // 2. Let trail be pointer % 190.\n\t        var trail = pointer % 190;\n\t\n\t        // 3. Let offset be 0x40 if trail is less than 0x3F and 0x41 otherwise.\n\t        var offset = trail < 0x3F ? 0x40 : 0x41;\n\t\n\t        // 4. Return two bytes whose values are lead and trail + offset.\n\t        return [lead, trail + offset];\n\t      }\n\t\n\t      // 7. If gbk flag is set, return error with code point.\n\t      if (gbk_flag)\n\t        return encoderError(code_point);\n\t\n\t      // 8. Set pointer to the index gb18030 ranges pointer for code\n\t      // point.\n\t      pointer = indexGB18030RangesPointerFor(code_point);\n\t\n\t      // 9. Let byte1 be floor(pointer / 10 / 126 / 10).\n\t      var byte1 = floor(pointer / 10 / 126 / 10);\n\t\n\t      // 10. Set pointer to pointer − byte1 × 10 × 126 × 10.\n\t      pointer = pointer - byte1 * 10 * 126 * 10;\n\t\n\t      // 11. Let byte2 be floor(pointer / 10 / 126).\n\t      var byte2 = floor(pointer / 10 / 126);\n\t\n\t      // 12. Set pointer to pointer − byte2 × 10 × 126.\n\t      pointer = pointer - byte2 * 10 * 126;\n\t\n\t      // 13. Let byte3 be floor(pointer / 10).\n\t      var byte3 = floor(pointer / 10);\n\t\n\t      // 14. Let byte4 be pointer − byte3 × 10.\n\t      var byte4 = pointer - byte3 * 10;\n\t\n\t      // 15. Return four bytes whose values are byte1 + 0x81, byte2 +\n\t      // 0x30, byte3 + 0x81, byte4 + 0x30.\n\t      return [byte1 + 0x81,\n\t              byte2 + 0x30,\n\t              byte3 + 0x81,\n\t              byte4 + 0x30];\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['gb18030'] = function(options) {\n\t    return new GB18030Encoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['gb18030'] = function(options) {\n\t    return new GB18030Decoder(options);\n\t  };\n\t\n\t\n\t  //\n\t  // 12. Legacy multi-byte Chinese (traditional) encodings\n\t  //\n\t\n\t  // 12.1 Big5\n\t\n\t  // 12.1.1 Big5 decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function Big5Decoder(options) {\n\t    var fatal = options.fatal;\n\t    // Big5's decoder has an associated Big5 lead (initially 0x00).\n\t    var /** @type {number} */ Big5_lead = 0x00;\n\t\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and Big5 lead is not 0x00, set\n\t      // Big5 lead to 0x00 and return error.\n\t      if (bite === end_of_stream && Big5_lead !== 0x00) {\n\t        Big5_lead = 0x00;\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 2. If byte is end-of-stream and Big5 lead is 0x00, return\n\t      // finished.\n\t      if (bite === end_of_stream && Big5_lead === 0x00)\n\t        return finished;\n\t\n\t      // 3. If Big5 lead is not 0x00, let lead be Big5 lead, let\n\t      // pointer be null, set Big5 lead to 0x00, and then run these\n\t      // substeps:\n\t      if (Big5_lead !== 0x00) {\n\t        var lead = Big5_lead;\n\t        var pointer = null;\n\t        Big5_lead = 0x00;\n\t\n\t        // 1. Let offset be 0x40 if byte is less than 0x7F and 0x62\n\t        // otherwise.\n\t        var offset = bite < 0x7F ? 0x40 : 0x62;\n\t\n\t        // 2. If byte is in the range 0x40 to 0x7E, inclusive, or 0xA1\n\t        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 157 +\n\t        // (byte − offset).\n\t        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE))\n\t          pointer = (lead - 0x81) * 157 + (bite - offset);\n\t\n\t        // 3. If there is a row in the table below whose first column\n\t        // is pointer, return the two code points listed in its second\n\t        // column\n\t        // Pointer | Code points\n\t        // --------+--------------\n\t        // 1133    | U+00CA U+0304\n\t        // 1135    | U+00CA U+030C\n\t        // 1164    | U+00EA U+0304\n\t        // 1166    | U+00EA U+030C\n\t        switch (pointer) {\n\t          case 1133: return [0x00CA, 0x0304];\n\t          case 1135: return [0x00CA, 0x030C];\n\t          case 1164: return [0x00EA, 0x0304];\n\t          case 1166: return [0x00EA, 0x030C];\n\t        }\n\t\n\t        // 4. Let code point be null if pointer is null and the index\n\t        // code point for pointer in index Big5 otherwise.\n\t        var code_point = (pointer === null) ? null :\n\t            indexCodePointFor(pointer, index('big5'));\n\t\n\t        // 5. If code point is null and byte is an ASCII byte, prepend\n\t        // byte to stream.\n\t        if (code_point === null && isASCIIByte(bite))\n\t          stream.prepend(bite);\n\t\n\t        // 6. If code point is null, return error.\n\t        if (code_point === null)\n\t          return decoderError(fatal);\n\t\n\t        // 7. Return a code point whose value is code point.\n\t        return code_point;\n\t      }\n\t\n\t      // 4. If byte is an ASCII byte, return a code point whose value\n\t      // is byte.\n\t      if (isASCIIByte(bite))\n\t        return bite;\n\t\n\t      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set Big5\n\t      // lead to byte and return continue.\n\t      if (inRange(bite, 0x81, 0xFE)) {\n\t        Big5_lead = bite;\n\t        return null;\n\t      }\n\t\n\t      // 6. Return error.\n\t      return decoderError(fatal);\n\t    };\n\t  }\n\t\n\t  // 12.1.2 Big5 encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function Big5Encoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. Let pointer be the index Big5 pointer for code point.\n\t      var pointer = indexBig5PointerFor(code_point);\n\t\n\t      // 4. If pointer is null, return error with code point.\n\t      if (pointer === null)\n\t        return encoderError(code_point);\n\t\n\t      // 5. Let lead be floor(pointer / 157) + 0x81.\n\t      var lead = floor(pointer / 157) + 0x81;\n\t\n\t      // 6. If lead is less than 0xA1, return error with code point.\n\t      if (lead < 0xA1)\n\t        return encoderError(code_point);\n\t\n\t      // 7. Let trail be pointer % 157.\n\t      var trail = pointer % 157;\n\t\n\t      // 8. Let offset be 0x40 if trail is less than 0x3F and 0x62\n\t      // otherwise.\n\t      var offset = trail < 0x3F ? 0x40 : 0x62;\n\t\n\t      // Return two bytes whose values are lead and trail + offset.\n\t      return [lead, trail + offset];\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['Big5'] = function(options) {\n\t    return new Big5Encoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['Big5'] = function(options) {\n\t    return new Big5Decoder(options);\n\t  };\n\t\n\t\n\t  //\n\t  // 13. Legacy multi-byte Japanese encodings\n\t  //\n\t\n\t  // 13.1 euc-jp\n\t\n\t  // 13.1.1 euc-jp decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function EUCJPDecoder(options) {\n\t    var fatal = options.fatal;\n\t\n\t    // euc-jp's decoder has an associated euc-jp jis0212 flag\n\t    // (initially unset) and euc-jp lead (initially 0x00).\n\t    var /** @type {boolean} */ eucjp_jis0212_flag = false,\n\t        /** @type {number} */ eucjp_lead = 0x00;\n\t\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and euc-jp lead is not 0x00, set\n\t      // euc-jp lead to 0x00, and return error.\n\t      if (bite === end_of_stream && eucjp_lead !== 0x00) {\n\t        eucjp_lead = 0x00;\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 2. If byte is end-of-stream and euc-jp lead is 0x00, return\n\t      // finished.\n\t      if (bite === end_of_stream && eucjp_lead === 0x00)\n\t        return finished;\n\t\n\t      // 3. If euc-jp lead is 0x8E and byte is in the range 0xA1 to\n\t      // 0xDF, inclusive, set euc-jp lead to 0x00 and return a code\n\t      // point whose value is 0xFF61 − 0xA1 + byte.\n\t      if (eucjp_lead === 0x8E && inRange(bite, 0xA1, 0xDF)) {\n\t        eucjp_lead = 0x00;\n\t        return 0xFF61 - 0xA1 + bite;\n\t      }\n\t\n\t      // 4. If euc-jp lead is 0x8F and byte is in the range 0xA1 to\n\t      // 0xFE, inclusive, set the euc-jp jis0212 flag, set euc-jp lead\n\t      // to byte, and return continue.\n\t      if (eucjp_lead === 0x8F && inRange(bite, 0xA1, 0xFE)) {\n\t        eucjp_jis0212_flag = true;\n\t        eucjp_lead = bite;\n\t        return null;\n\t      }\n\t\n\t      // 5. If euc-jp lead is not 0x00, let lead be euc-jp lead, set\n\t      // euc-jp lead to 0x00, and run these substeps:\n\t      if (eucjp_lead !== 0x00) {\n\t        var lead = eucjp_lead;\n\t        eucjp_lead = 0x00;\n\t\n\t        // 1. Let code point be null.\n\t        var code_point = null;\n\t\n\t        // 2. If lead and byte are both in the range 0xA1 to 0xFE,\n\t        // inclusive, set code point to the index code point for (lead\n\t        // − 0xA1) × 94 + byte − 0xA1 in index jis0208 if the euc-jp\n\t        // jis0212 flag is unset and in index jis0212 otherwise.\n\t        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {\n\t          code_point = indexCodePointFor(\n\t            (lead - 0xA1) * 94 + (bite - 0xA1),\n\t            index(!eucjp_jis0212_flag ? 'jis0208' : 'jis0212'));\n\t        }\n\t\n\t        // 3. Unset the euc-jp jis0212 flag.\n\t        eucjp_jis0212_flag = false;\n\t\n\t        // 4. If byte is not in the range 0xA1 to 0xFE, inclusive,\n\t        // prepend byte to stream.\n\t        if (!inRange(bite, 0xA1, 0xFE))\n\t          stream.prepend(bite);\n\t\n\t        // 5. If code point is null, return error.\n\t        if (code_point === null)\n\t          return decoderError(fatal);\n\t\n\t        // 6. Return a code point whose value is code point.\n\t        return code_point;\n\t      }\n\t\n\t      // 6. If byte is an ASCII byte, return a code point whose value\n\t      // is byte.\n\t      if (isASCIIByte(bite))\n\t        return bite;\n\t\n\t      // 7. If byte is 0x8E, 0x8F, or in the range 0xA1 to 0xFE,\n\t      // inclusive, set euc-jp lead to byte and return continue.\n\t      if (bite === 0x8E || bite === 0x8F || inRange(bite, 0xA1, 0xFE)) {\n\t        eucjp_lead = bite;\n\t        return null;\n\t      }\n\t\n\t      // 8. Return error.\n\t      return decoderError(fatal);\n\t    };\n\t  }\n\t\n\t  // 13.1.2 euc-jp encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function EUCJPEncoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. If code point is U+00A5, return byte 0x5C.\n\t      if (code_point === 0x00A5)\n\t        return 0x5C;\n\t\n\t      // 4. If code point is U+203E, return byte 0x7E.\n\t      if (code_point === 0x203E)\n\t        return 0x7E;\n\t\n\t      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,\n\t      // return two bytes whose values are 0x8E and code point −\n\t      // 0xFF61 + 0xA1.\n\t      if (inRange(code_point, 0xFF61, 0xFF9F))\n\t        return [0x8E, code_point - 0xFF61 + 0xA1];\n\t\n\t      // 6. If code point is U+2212, set it to U+FF0D.\n\t      if (code_point === 0x2212)\n\t        code_point = 0xFF0D;\n\t\n\t      // 7. Let pointer be the index pointer for code point in index\n\t      // jis0208.\n\t      var pointer = indexPointerFor(code_point, index('jis0208'));\n\t\n\t      // 8. If pointer is null, return error with code point.\n\t      if (pointer === null)\n\t        return encoderError(code_point);\n\t\n\t      // 9. Let lead be floor(pointer / 94) + 0xA1.\n\t      var lead = floor(pointer / 94) + 0xA1;\n\t\n\t      // 10. Let trail be pointer % 94 + 0xA1.\n\t      var trail = pointer % 94 + 0xA1;\n\t\n\t      // 11. Return two bytes whose values are lead and trail.\n\t      return [lead, trail];\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['EUC-JP'] = function(options) {\n\t    return new EUCJPEncoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['EUC-JP'] = function(options) {\n\t    return new EUCJPDecoder(options);\n\t  };\n\t\n\t  // 13.2 iso-2022-jp\n\t\n\t  // 13.2.1 iso-2022-jp decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function ISO2022JPDecoder(options) {\n\t    var fatal = options.fatal;\n\t    /** @enum */\n\t    var states = {\n\t      ASCII: 0,\n\t      Roman: 1,\n\t      Katakana: 2,\n\t      LeadByte: 3,\n\t      TrailByte: 4,\n\t      EscapeStart: 5,\n\t      Escape: 6\n\t    };\n\t    // iso-2022-jp's decoder has an associated iso-2022-jp decoder\n\t    // state (initially ASCII), iso-2022-jp decoder output state\n\t    // (initially ASCII), iso-2022-jp lead (initially 0x00), and\n\t    // iso-2022-jp output flag (initially unset).\n\t    var /** @type {number} */ iso2022jp_decoder_state = states.ASCII,\n\t        /** @type {number} */ iso2022jp_decoder_output_state = states.ASCII,\n\t        /** @type {number} */ iso2022jp_lead = 0x00,\n\t        /** @type {boolean} */ iso2022jp_output_flag = false;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // switching on iso-2022-jp decoder state:\n\t      switch (iso2022jp_decoder_state) {\n\t      default:\n\t      case states.ASCII:\n\t        // ASCII\n\t        // Based on byte:\n\t\n\t        // 0x1B\n\t        if (bite === 0x1B) {\n\t          // Set iso-2022-jp decoder state to escape start and return\n\t          // continue.\n\t          iso2022jp_decoder_state = states.EscapeStart;\n\t          return null;\n\t        }\n\t\n\t        // 0x00 to 0x7F, excluding 0x0E, 0x0F, and 0x1B\n\t        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E\n\t            && bite !== 0x0F && bite !== 0x1B) {\n\t          // Unset the iso-2022-jp output flag and return a code point\n\t          // whose value is byte.\n\t          iso2022jp_output_flag = false;\n\t          return bite;\n\t        }\n\t\n\t        // end-of-stream\n\t        if (bite === end_of_stream) {\n\t          // Return finished.\n\t          return finished;\n\t        }\n\t\n\t        // Otherwise\n\t        // Unset the iso-2022-jp output flag and return error.\n\t        iso2022jp_output_flag = false;\n\t        return decoderError(fatal);\n\t\n\t      case states.Roman:\n\t        // Roman\n\t        // Based on byte:\n\t\n\t        // 0x1B\n\t        if (bite === 0x1B) {\n\t          // Set iso-2022-jp decoder state to escape start and return\n\t          // continue.\n\t          iso2022jp_decoder_state = states.EscapeStart;\n\t          return null;\n\t        }\n\t\n\t        // 0x5C\n\t        if (bite === 0x5C) {\n\t          // Unset the iso-2022-jp output flag and return code point\n\t          // U+00A5.\n\t          iso2022jp_output_flag = false;\n\t          return 0x00A5;\n\t        }\n\t\n\t        // 0x7E\n\t        if (bite === 0x7E) {\n\t          // Unset the iso-2022-jp output flag and return code point\n\t          // U+203E.\n\t          iso2022jp_output_flag = false;\n\t          return 0x203E;\n\t        }\n\t\n\t        // 0x00 to 0x7F, excluding 0x0E, 0x0F, 0x1B, 0x5C, and 0x7E\n\t        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E && bite !== 0x0F\n\t            && bite !== 0x1B && bite !== 0x5C && bite !== 0x7E) {\n\t          // Unset the iso-2022-jp output flag and return a code point\n\t          // whose value is byte.\n\t          iso2022jp_output_flag = false;\n\t          return bite;\n\t        }\n\t\n\t        // end-of-stream\n\t        if (bite === end_of_stream) {\n\t          // Return finished.\n\t          return finished;\n\t        }\n\t\n\t        // Otherwise\n\t        // Unset the iso-2022-jp output flag and return error.\n\t        iso2022jp_output_flag = false;\n\t        return decoderError(fatal);\n\t\n\t      case states.Katakana:\n\t        // Katakana\n\t        // Based on byte:\n\t\n\t        // 0x1B\n\t        if (bite === 0x1B) {\n\t          // Set iso-2022-jp decoder state to escape start and return\n\t          // continue.\n\t          iso2022jp_decoder_state = states.EscapeStart;\n\t          return null;\n\t        }\n\t\n\t        // 0x21 to 0x5F\n\t        if (inRange(bite, 0x21, 0x5F)) {\n\t          // Unset the iso-2022-jp output flag and return a code point\n\t          // whose value is 0xFF61 − 0x21 + byte.\n\t          iso2022jp_output_flag = false;\n\t          return 0xFF61 - 0x21 + bite;\n\t        }\n\t\n\t        // end-of-stream\n\t        if (bite === end_of_stream) {\n\t          // Return finished.\n\t          return finished;\n\t        }\n\t\n\t        // Otherwise\n\t        // Unset the iso-2022-jp output flag and return error.\n\t        iso2022jp_output_flag = false;\n\t        return decoderError(fatal);\n\t\n\t      case states.LeadByte:\n\t        // Lead byte\n\t        // Based on byte:\n\t\n\t        // 0x1B\n\t        if (bite === 0x1B) {\n\t          // Set iso-2022-jp decoder state to escape start and return\n\t          // continue.\n\t          iso2022jp_decoder_state = states.EscapeStart;\n\t          return null;\n\t        }\n\t\n\t        // 0x21 to 0x7E\n\t        if (inRange(bite, 0x21, 0x7E)) {\n\t          // Unset the iso-2022-jp output flag, set iso-2022-jp lead\n\t          // to byte, iso-2022-jp decoder state to trail byte, and\n\t          // return continue.\n\t          iso2022jp_output_flag = false;\n\t          iso2022jp_lead = bite;\n\t          iso2022jp_decoder_state = states.TrailByte;\n\t          return null;\n\t        }\n\t\n\t        // end-of-stream\n\t        if (bite === end_of_stream) {\n\t          // Return finished.\n\t          return finished;\n\t        }\n\t\n\t        // Otherwise\n\t        // Unset the iso-2022-jp output flag and return error.\n\t        iso2022jp_output_flag = false;\n\t        return decoderError(fatal);\n\t\n\t      case states.TrailByte:\n\t        // Trail byte\n\t        // Based on byte:\n\t\n\t        // 0x1B\n\t        if (bite === 0x1B) {\n\t          // Set iso-2022-jp decoder state to escape start and return\n\t          // continue.\n\t          iso2022jp_decoder_state = states.EscapeStart;\n\t          return decoderError(fatal);\n\t        }\n\t\n\t        // 0x21 to 0x7E\n\t        if (inRange(bite, 0x21, 0x7E)) {\n\t          // 1. Set the iso-2022-jp decoder state to lead byte.\n\t          iso2022jp_decoder_state = states.LeadByte;\n\t\n\t          // 2. Let pointer be (iso-2022-jp lead − 0x21) × 94 + byte − 0x21.\n\t          var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;\n\t\n\t          // 3. Let code point be the index code point for pointer in\n\t          // index jis0208.\n\t          var code_point = indexCodePointFor(pointer, index('jis0208'));\n\t\n\t          // 4. If code point is null, return error.\n\t          if (code_point === null)\n\t            return decoderError(fatal);\n\t\n\t          // 5. Return a code point whose value is code point.\n\t          return code_point;\n\t        }\n\t\n\t        // end-of-stream\n\t        if (bite === end_of_stream) {\n\t          // Set the iso-2022-jp decoder state to lead byte, prepend\n\t          // byte to stream, and return error.\n\t          iso2022jp_decoder_state = states.LeadByte;\n\t          stream.prepend(bite);\n\t          return decoderError(fatal);\n\t        }\n\t\n\t        // Otherwise\n\t        // Set iso-2022-jp decoder state to lead byte and return\n\t        // error.\n\t        iso2022jp_decoder_state = states.LeadByte;\n\t        return decoderError(fatal);\n\t\n\t      case states.EscapeStart:\n\t        // Escape start\n\t\n\t        // 1. If byte is either 0x24 or 0x28, set iso-2022-jp lead to\n\t        // byte, iso-2022-jp decoder state to escape, and return\n\t        // continue.\n\t        if (bite === 0x24 || bite === 0x28) {\n\t          iso2022jp_lead = bite;\n\t          iso2022jp_decoder_state = states.Escape;\n\t          return null;\n\t        }\n\t\n\t        // 2. Prepend byte to stream.\n\t        stream.prepend(bite);\n\t\n\t        // 3. Unset the iso-2022-jp output flag, set iso-2022-jp\n\t        // decoder state to iso-2022-jp decoder output state, and\n\t        // return error.\n\t        iso2022jp_output_flag = false;\n\t        iso2022jp_decoder_state = iso2022jp_decoder_output_state;\n\t        return decoderError(fatal);\n\t\n\t      case states.Escape:\n\t        // Escape\n\t\n\t        // 1. Let lead be iso-2022-jp lead and set iso-2022-jp lead to\n\t        // 0x00.\n\t        var lead = iso2022jp_lead;\n\t        iso2022jp_lead = 0x00;\n\t\n\t        // 2. Let state be null.\n\t        var state = null;\n\t\n\t        // 3. If lead is 0x28 and byte is 0x42, set state to ASCII.\n\t        if (lead === 0x28 && bite === 0x42)\n\t          state = states.ASCII;\n\t\n\t        // 4. If lead is 0x28 and byte is 0x4A, set state to Roman.\n\t        if (lead === 0x28 && bite === 0x4A)\n\t          state = states.Roman;\n\t\n\t        // 5. If lead is 0x28 and byte is 0x49, set state to Katakana.\n\t        if (lead === 0x28 && bite === 0x49)\n\t          state = states.Katakana;\n\t\n\t        // 6. If lead is 0x24 and byte is either 0x40 or 0x42, set\n\t        // state to lead byte.\n\t        if (lead === 0x24 && (bite === 0x40 || bite === 0x42))\n\t          state = states.LeadByte;\n\t\n\t        // 7. If state is non-null, run these substeps:\n\t        if (state !== null) {\n\t          // 1. Set iso-2022-jp decoder state and iso-2022-jp decoder\n\t          // output state to states.\n\t          iso2022jp_decoder_state = iso2022jp_decoder_state = state;\n\t\n\t          // 2. Let output flag be the iso-2022-jp output flag.\n\t          var output_flag = iso2022jp_output_flag;\n\t\n\t          // 3. Set the iso-2022-jp output flag.\n\t          iso2022jp_output_flag = true;\n\t\n\t          // 4. Return continue, if output flag is unset, and error\n\t          // otherwise.\n\t          return !output_flag ? null : decoderError(fatal);\n\t        }\n\t\n\t        // 8. Prepend lead and byte to stream.\n\t        stream.prepend([lead, bite]);\n\t\n\t        // 9. Unset the iso-2022-jp output flag, set iso-2022-jp\n\t        // decoder state to iso-2022-jp decoder output state and\n\t        // return error.\n\t        iso2022jp_output_flag = false;\n\t        iso2022jp_decoder_state = iso2022jp_decoder_output_state;\n\t        return decoderError(fatal);\n\t      }\n\t    };\n\t  }\n\t\n\t  // 13.2.2 iso-2022-jp encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function ISO2022JPEncoder(options) {\n\t    var fatal = options.fatal;\n\t    // iso-2022-jp's encoder has an associated iso-2022-jp encoder\n\t    // state which is one of ASCII, Roman, and jis0208 (initially\n\t    // ASCII).\n\t    /** @enum */\n\t    var states = {\n\t      ASCII: 0,\n\t      Roman: 1,\n\t      jis0208: 2\n\t    };\n\t    var /** @type {number} */ iso2022jp_state = states.ASCII;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream and iso-2022-jp encoder\n\t      // state is not ASCII, prepend code point to stream, set\n\t      // iso-2022-jp encoder state to ASCII, and return three bytes\n\t      // 0x1B 0x28 0x42.\n\t      if (code_point === end_of_stream &&\n\t          iso2022jp_state !== states.ASCII) {\n\t        stream.prepend(code_point);\n\t        iso2022jp_state = states.ASCII;\n\t        return [0x1B, 0x28, 0x42];\n\t      }\n\t\n\t      // 2. If code point is end-of-stream and iso-2022-jp encoder\n\t      // state is ASCII, return finished.\n\t      if (code_point === end_of_stream && iso2022jp_state === states.ASCII)\n\t        return finished;\n\t\n\t      // 3. If ISO-2022-JP encoder state is ASCII or Roman, and code\n\t      // point is U+000E, U+000F, or U+001B, return error with U+FFFD.\n\t      if ((iso2022jp_state === states.ASCII ||\n\t           iso2022jp_state === states.Roman) &&\n\t          (code_point === 0x000E || code_point === 0x000F ||\n\t           code_point === 0x001B)) {\n\t        return encoderError(0xFFFD);\n\t      }\n\t\n\t      // 4. If iso-2022-jp encoder state is ASCII and code point is an\n\t      // ASCII code point, return a byte whose value is code point.\n\t      if (iso2022jp_state === states.ASCII &&\n\t          isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 5. If iso-2022-jp encoder state is Roman and code point is an\n\t      // ASCII code point, excluding U+005C and U+007E, or is U+00A5\n\t      // or U+203E, run these substeps:\n\t      if (iso2022jp_state === states.Roman &&\n\t          ((isASCIICodePoint(code_point) &&\n\t           code_point !== 0x005C && code_point !== 0x007E) ||\n\t          (code_point == 0x00A5 || code_point == 0x203E))) {\n\t\n\t        // 1. If code point is an ASCII code point, return a byte\n\t        // whose value is code point.\n\t        if (isASCIICodePoint(code_point))\n\t          return code_point;\n\t\n\t        // 2. If code point is U+00A5, return byte 0x5C.\n\t        if (code_point === 0x00A5)\n\t          return 0x5C;\n\t\n\t        // 3. If code point is U+203E, return byte 0x7E.\n\t        if (code_point === 0x203E)\n\t          return 0x7E;\n\t      }\n\t\n\t      // 6. If code point is an ASCII code point, and iso-2022-jp\n\t      // encoder state is not ASCII, prepend code point to stream, set\n\t      // iso-2022-jp encoder state to ASCII, and return three bytes\n\t      // 0x1B 0x28 0x42.\n\t      if (isASCIICodePoint(code_point) &&\n\t          iso2022jp_state !== states.ASCII) {\n\t        stream.prepend(code_point);\n\t        iso2022jp_state = states.ASCII;\n\t        return [0x1B, 0x28, 0x42];\n\t      }\n\t\n\t      // 7. If code point is either U+00A5 or U+203E, and iso-2022-jp\n\t      // encoder state is not Roman, prepend code point to stream, set\n\t      // iso-2022-jp encoder state to Roman, and return three bytes\n\t      // 0x1B 0x28 0x4A.\n\t      if ((code_point === 0x00A5 || code_point === 0x203E) &&\n\t          iso2022jp_state !== states.Roman) {\n\t        stream.prepend(code_point);\n\t        iso2022jp_state = states.Roman;\n\t        return [0x1B, 0x28, 0x4A];\n\t      }\n\t\n\t      // 8. If code point is U+2212, set it to U+FF0D.\n\t      if (code_point === 0x2212)\n\t        code_point = 0xFF0D;\n\t\n\t      // 9. Let pointer be the index pointer for code point in index\n\t      // jis0208.\n\t      var pointer = indexPointerFor(code_point, index('jis0208'));\n\t\n\t      // 10. If pointer is null, return error with code point.\n\t      if (pointer === null)\n\t        return encoderError(code_point);\n\t\n\t      // 11. If iso-2022-jp encoder state is not jis0208, prepend code\n\t      // point to stream, set iso-2022-jp encoder state to jis0208,\n\t      // and return three bytes 0x1B 0x24 0x42.\n\t      if (iso2022jp_state !== states.jis0208) {\n\t        stream.prepend(code_point);\n\t        iso2022jp_state = states.jis0208;\n\t        return [0x1B, 0x24, 0x42];\n\t      }\n\t\n\t      // 12. Let lead be floor(pointer / 94) + 0x21.\n\t      var lead = floor(pointer / 94) + 0x21;\n\t\n\t      // 13. Let trail be pointer % 94 + 0x21.\n\t      var trail = pointer % 94 + 0x21;\n\t\n\t      // 14. Return two bytes whose values are lead and trail.\n\t      return [lead, trail];\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['ISO-2022-JP'] = function(options) {\n\t    return new ISO2022JPEncoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['ISO-2022-JP'] = function(options) {\n\t    return new ISO2022JPDecoder(options);\n\t  };\n\t\n\t  // 13.3 Shift_JIS\n\t\n\t  // 13.3.1 Shift_JIS decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function ShiftJISDecoder(options) {\n\t    var fatal = options.fatal;\n\t    // Shift_JIS's decoder has an associated Shift_JIS lead (initially\n\t    // 0x00).\n\t    var /** @type {number} */ Shift_JIS_lead = 0x00;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and Shift_JIS lead is not 0x00,\n\t      // set Shift_JIS lead to 0x00 and return error.\n\t      if (bite === end_of_stream && Shift_JIS_lead !== 0x00) {\n\t        Shift_JIS_lead = 0x00;\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 2. If byte is end-of-stream and Shift_JIS lead is 0x00,\n\t      // return finished.\n\t      if (bite === end_of_stream && Shift_JIS_lead === 0x00)\n\t        return finished;\n\t\n\t      // 3. If Shift_JIS lead is not 0x00, let lead be Shift_JIS lead,\n\t      // let pointer be null, set Shift_JIS lead to 0x00, and then run\n\t      // these substeps:\n\t      if (Shift_JIS_lead !== 0x00) {\n\t        var lead = Shift_JIS_lead;\n\t        var pointer = null;\n\t        Shift_JIS_lead = 0x00;\n\t\n\t        // 1. Let offset be 0x40, if byte is less than 0x7F, and 0x41\n\t        // otherwise.\n\t        var offset = (bite < 0x7F) ? 0x40 : 0x41;\n\t\n\t        // 2. Let lead offset be 0x81, if lead is less than 0xA0, and\n\t        // 0xC1 otherwise.\n\t        var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;\n\t\n\t        // 3. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80\n\t        // to 0xFC, inclusive, set pointer to (lead − lead offset) ×\n\t        // 188 + byte − offset.\n\t        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC))\n\t          pointer = (lead - lead_offset) * 188 + bite - offset;\n\t\n\t        // 4. If pointer is in the range 8836 to 10715, inclusive,\n\t        // return a code point whose value is 0xE000 − 8836 + pointer.\n\t        if (inRange(pointer, 8836, 10715))\n\t          return 0xE000 - 8836 + pointer;\n\t\n\t        // 5. Let code point be null, if pointer is null, and the\n\t        // index code point for pointer in index jis0208 otherwise.\n\t        var code_point = (pointer === null) ? null :\n\t              indexCodePointFor(pointer, index('jis0208'));\n\t\n\t        // 6. If code point is null and byte is an ASCII byte, prepend\n\t        // byte to stream.\n\t        if (code_point === null && isASCIIByte(bite))\n\t          stream.prepend(bite);\n\t\n\t        // 7. If code point is null, return error.\n\t        if (code_point === null)\n\t          return decoderError(fatal);\n\t\n\t        // 8. Return a code point whose value is code point.\n\t        return code_point;\n\t      }\n\t\n\t      // 4. If byte is an ASCII byte or 0x80, return a code point\n\t      // whose value is byte.\n\t      if (isASCIIByte(bite) || bite === 0x80)\n\t        return bite;\n\t\n\t      // 5. If byte is in the range 0xA1 to 0xDF, inclusive, return a\n\t      // code point whose value is 0xFF61 − 0xA1 + byte.\n\t      if (inRange(bite, 0xA1, 0xDF))\n\t        return 0xFF61 - 0xA1 + bite;\n\t\n\t      // 6. If byte is in the range 0x81 to 0x9F, inclusive, or 0xE0\n\t      // to 0xFC, inclusive, set Shift_JIS lead to byte and return\n\t      // continue.\n\t      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {\n\t        Shift_JIS_lead = bite;\n\t        return null;\n\t      }\n\t\n\t      // 7. Return error.\n\t      return decoderError(fatal);\n\t    };\n\t  }\n\t\n\t  // 13.3.2 Shift_JIS encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function ShiftJISEncoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point or U+0080, return a\n\t      // byte whose value is code point.\n\t      if (isASCIICodePoint(code_point) || code_point === 0x0080)\n\t        return code_point;\n\t\n\t      // 3. If code point is U+00A5, return byte 0x5C.\n\t      if (code_point === 0x00A5)\n\t        return 0x5C;\n\t\n\t      // 4. If code point is U+203E, return byte 0x7E.\n\t      if (code_point === 0x203E)\n\t        return 0x7E;\n\t\n\t      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,\n\t      // return a byte whose value is code point − 0xFF61 + 0xA1.\n\t      if (inRange(code_point, 0xFF61, 0xFF9F))\n\t        return code_point - 0xFF61 + 0xA1;\n\t\n\t      // 6. If code point is U+2212, set it to U+FF0D.\n\t      if (code_point === 0x2212)\n\t        code_point = 0xFF0D;\n\t\n\t      // 7. Let pointer be the index Shift_JIS pointer for code point.\n\t      var pointer = indexShiftJISPointerFor(code_point);\n\t\n\t      // 8. If pointer is null, return error with code point.\n\t      if (pointer === null)\n\t        return encoderError(code_point);\n\t\n\t      // 9. Let lead be floor(pointer / 188).\n\t      var lead = floor(pointer / 188);\n\t\n\t      // 10. Let lead offset be 0x81, if lead is less than 0x1F, and\n\t      // 0xC1 otherwise.\n\t      var lead_offset = (lead < 0x1F) ? 0x81 : 0xC1;\n\t\n\t      // 11. Let trail be pointer % 188.\n\t      var trail = pointer % 188;\n\t\n\t      // 12. Let offset be 0x40, if trail is less than 0x3F, and 0x41\n\t      // otherwise.\n\t      var offset = (trail < 0x3F) ? 0x40 : 0x41;\n\t\n\t      // 13. Return two bytes whose values are lead + lead offset and\n\t      // trail + offset.\n\t      return [lead + lead_offset, trail + offset];\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['Shift_JIS'] = function(options) {\n\t    return new ShiftJISEncoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['Shift_JIS'] = function(options) {\n\t    return new ShiftJISDecoder(options);\n\t  };\n\t\n\t  //\n\t  // 14. Legacy multi-byte Korean encodings\n\t  //\n\t\n\t  // 14.1 euc-kr\n\t\n\t  // 14.1.1 euc-kr decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function EUCKRDecoder(options) {\n\t    var fatal = options.fatal;\n\t\n\t    // euc-kr's decoder has an associated euc-kr lead (initially 0x00).\n\t    var /** @type {number} */ euckr_lead = 0x00;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and euc-kr lead is not 0x00, set\n\t      // euc-kr lead to 0x00 and return error.\n\t      if (bite === end_of_stream && euckr_lead !== 0) {\n\t        euckr_lead = 0x00;\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 2. If byte is end-of-stream and euc-kr lead is 0x00, return\n\t      // finished.\n\t      if (bite === end_of_stream && euckr_lead === 0)\n\t        return finished;\n\t\n\t      // 3. If euc-kr lead is not 0x00, let lead be euc-kr lead, let\n\t      // pointer be null, set euc-kr lead to 0x00, and then run these\n\t      // substeps:\n\t      if (euckr_lead !== 0x00) {\n\t        var lead = euckr_lead;\n\t        var pointer = null;\n\t        euckr_lead = 0x00;\n\t\n\t        // 1. If byte is in the range 0x41 to 0xFE, inclusive, set\n\t        // pointer to (lead − 0x81) × 190 + (byte − 0x41).\n\t        if (inRange(bite, 0x41, 0xFE))\n\t          pointer = (lead - 0x81) * 190 + (bite - 0x41);\n\t\n\t        // 2. Let code point be null, if pointer is null, and the\n\t        // index code point for pointer in index euc-kr otherwise.\n\t        var code_point = (pointer === null)\n\t              ? null : indexCodePointFor(pointer, index('euc-kr'));\n\t\n\t        // 3. If code point is null and byte is an ASCII byte, prepend\n\t        // byte to stream.\n\t        if (pointer === null && isASCIIByte(bite))\n\t          stream.prepend(bite);\n\t\n\t        // 4. If code point is null, return error.\n\t        if (code_point === null)\n\t          return decoderError(fatal);\n\t\n\t        // 5. Return a code point whose value is code point.\n\t        return code_point;\n\t      }\n\t\n\t      // 4. If byte is an ASCII byte, return a code point whose value\n\t      // is byte.\n\t      if (isASCIIByte(bite))\n\t        return bite;\n\t\n\t      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set\n\t      // euc-kr lead to byte and return continue.\n\t      if (inRange(bite, 0x81, 0xFE)) {\n\t        euckr_lead = bite;\n\t        return null;\n\t      }\n\t\n\t      // 6. Return error.\n\t      return decoderError(fatal);\n\t    };\n\t  }\n\t\n\t  // 14.1.2 euc-kr encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function EUCKREncoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. Let pointer be the index pointer for code point in index\n\t      // euc-kr.\n\t      var pointer = indexPointerFor(code_point, index('euc-kr'));\n\t\n\t      // 4. If pointer is null, return error with code point.\n\t      if (pointer === null)\n\t        return encoderError(code_point);\n\t\n\t      // 5. Let lead be floor(pointer / 190) + 0x81.\n\t      var lead = floor(pointer / 190) + 0x81;\n\t\n\t      // 6. Let trail be pointer % 190 + 0x41.\n\t      var trail = (pointer % 190) + 0x41;\n\t\n\t      // 7. Return two bytes whose values are lead and trail.\n\t      return [lead, trail];\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['EUC-KR'] = function(options) {\n\t    return new EUCKREncoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['EUC-KR'] = function(options) {\n\t    return new EUCKRDecoder(options);\n\t  };\n\t\n\t\n\t  //\n\t  // 15. Legacy miscellaneous encodings\n\t  //\n\t\n\t  // 15.1 replacement\n\t\n\t  // Not needed - API throws RangeError\n\t\n\t  // 15.2 Common infrastructure for utf-16be and utf-16le\n\t\n\t  /**\n\t   * @param {number} code_unit\n\t   * @param {boolean} utf16be\n\t   * @return {!Array.<number>} bytes\n\t   */\n\t  function convertCodeUnitToBytes(code_unit, utf16be) {\n\t    // 1. Let byte1 be code unit >> 8.\n\t    var byte1 = code_unit >> 8;\n\t\n\t    // 2. Let byte2 be code unit & 0x00FF.\n\t    var byte2 = code_unit & 0x00FF;\n\t\n\t    // 3. Then return the bytes in order:\n\t        // utf-16be flag is set: byte1, then byte2.\n\t    if (utf16be)\n\t      return [byte1, byte2];\n\t    // utf-16be flag is unset: byte2, then byte1.\n\t    return [byte2, byte1];\n\t  }\n\t\n\t  // 15.2.1 shared utf-16 decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function UTF16Decoder(utf16_be, options) {\n\t    var fatal = options.fatal;\n\t    var /** @type {?number} */ utf16_lead_byte = null,\n\t        /** @type {?number} */ utf16_lead_surrogate = null;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream and either utf-16 lead byte or\n\t      // utf-16 lead surrogate is not null, set utf-16 lead byte and\n\t      // utf-16 lead surrogate to null, and return error.\n\t      if (bite === end_of_stream && (utf16_lead_byte !== null ||\n\t                                utf16_lead_surrogate !== null)) {\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 2. If byte is end-of-stream and utf-16 lead byte and utf-16\n\t      // lead surrogate are null, return finished.\n\t      if (bite === end_of_stream && utf16_lead_byte === null &&\n\t          utf16_lead_surrogate === null) {\n\t        return finished;\n\t      }\n\t\n\t      // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte\n\t      // and return continue.\n\t      if (utf16_lead_byte === null) {\n\t        utf16_lead_byte = bite;\n\t        return null;\n\t      }\n\t\n\t      // 4. Let code unit be the result of:\n\t      var code_unit;\n\t      if (utf16_be) {\n\t        // utf-16be decoder flag is set\n\t        //   (utf-16 lead byte << 8) + byte.\n\t        code_unit = (utf16_lead_byte << 8) + bite;\n\t      } else {\n\t        // utf-16be decoder flag is unset\n\t        //   (byte << 8) + utf-16 lead byte.\n\t        code_unit = (bite << 8) + utf16_lead_byte;\n\t      }\n\t      // Then set utf-16 lead byte to null.\n\t      utf16_lead_byte = null;\n\t\n\t      // 5. If utf-16 lead surrogate is not null, let lead surrogate\n\t      // be utf-16 lead surrogate, set utf-16 lead surrogate to null,\n\t      // and then run these substeps:\n\t      if (utf16_lead_surrogate !== null) {\n\t        var lead_surrogate = utf16_lead_surrogate;\n\t        utf16_lead_surrogate = null;\n\t\n\t        // 1. If code unit is in the range U+DC00 to U+DFFF,\n\t        // inclusive, return a code point whose value is 0x10000 +\n\t        // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).\n\t        if (inRange(code_unit, 0xDC00, 0xDFFF)) {\n\t          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +\n\t              (code_unit - 0xDC00);\n\t        }\n\t\n\t        // 2. Prepend the sequence resulting of converting code unit\n\t        // to bytes using utf-16be decoder flag to stream and return\n\t        // error.\n\t        stream.prepend(convertCodeUnitToBytes(code_unit, utf16_be));\n\t        return decoderError(fatal);\n\t      }\n\t\n\t      // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,\n\t      // set utf-16 lead surrogate to code unit and return continue.\n\t      if (inRange(code_unit, 0xD800, 0xDBFF)) {\n\t        utf16_lead_surrogate = code_unit;\n\t        return null;\n\t      }\n\t\n\t      // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,\n\t      // return error.\n\t      if (inRange(code_unit, 0xDC00, 0xDFFF))\n\t        return decoderError(fatal);\n\t\n\t      // 8. Return code point code unit.\n\t      return code_unit;\n\t    };\n\t  }\n\t\n\t  // 15.2.2 shared utf-16 encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function UTF16Encoder(utf16_be, options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1. If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is in the range U+0000 to U+FFFF, inclusive,\n\t      // return the sequence resulting of converting code point to\n\t      // bytes using utf-16be encoder flag.\n\t      if (inRange(code_point, 0x0000, 0xFFFF))\n\t        return convertCodeUnitToBytes(code_point, utf16_be);\n\t\n\t      // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,\n\t      // converted to bytes using utf-16be encoder flag.\n\t      var lead = convertCodeUnitToBytes(\n\t        ((code_point - 0x10000) >> 10) + 0xD800, utf16_be);\n\t\n\t      // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,\n\t      // converted to bytes using utf-16be encoder flag.\n\t      var trail = convertCodeUnitToBytes(\n\t        ((code_point - 0x10000) & 0x3FF) + 0xDC00, utf16_be);\n\t\n\t      // 5. Return a byte sequence of lead followed by trail.\n\t      return lead.concat(trail);\n\t    };\n\t  }\n\t\n\t  // 15.3 utf-16be\n\t  // 15.3.1 utf-16be decoder\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['UTF-16BE'] = function(options) {\n\t    return new UTF16Encoder(true, options);\n\t  };\n\t  // 15.3.2 utf-16be encoder\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['UTF-16BE'] = function(options) {\n\t    return new UTF16Decoder(true, options);\n\t  };\n\t\n\t  // 15.4 utf-16le\n\t  // 15.4.1 utf-16le decoder\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['UTF-16LE'] = function(options) {\n\t    return new UTF16Encoder(false, options);\n\t  };\n\t  // 15.4.2 utf-16le encoder\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['UTF-16LE'] = function(options) {\n\t    return new UTF16Decoder(false, options);\n\t  };\n\t\n\t  // 15.5 x-user-defined\n\t\n\t  // 15.5.1 x-user-defined decoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Decoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function XUserDefinedDecoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream The stream of bytes being decoded.\n\t     * @param {number} bite The next byte read from the stream.\n\t     * @return {?(number|!Array.<number>)} The next code point(s)\n\t     *     decoded, or null if not enough data exists in the input\n\t     *     stream to decode a complete code point.\n\t     */\n\t    this.handler = function(stream, bite) {\n\t      // 1. If byte is end-of-stream, return finished.\n\t      if (bite === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If byte is an ASCII byte, return a code point whose value\n\t      // is byte.\n\t      if (isASCIIByte(bite))\n\t        return bite;\n\t\n\t      // 3. Return a code point whose value is 0xF780 + byte − 0x80.\n\t      return 0xF780 + bite - 0x80;\n\t    };\n\t  }\n\t\n\t  // 15.5.2 x-user-defined encoder\n\t  /**\n\t   * @constructor\n\t   * @implements {Encoder}\n\t   * @param {{fatal: boolean}} options\n\t   */\n\t  function XUserDefinedEncoder(options) {\n\t    var fatal = options.fatal;\n\t    /**\n\t     * @param {Stream} stream Input stream.\n\t     * @param {number} code_point Next code point read from the stream.\n\t     * @return {(number|!Array.<number>)} Byte(s) to emit.\n\t     */\n\t    this.handler = function(stream, code_point) {\n\t      // 1.If code point is end-of-stream, return finished.\n\t      if (code_point === end_of_stream)\n\t        return finished;\n\t\n\t      // 2. If code point is an ASCII code point, return a byte whose\n\t      // value is code point.\n\t      if (isASCIICodePoint(code_point))\n\t        return code_point;\n\t\n\t      // 3. If code point is in the range U+F780 to U+F7FF, inclusive,\n\t      // return a byte whose value is code point − 0xF780 + 0x80.\n\t      if (inRange(code_point, 0xF780, 0xF7FF))\n\t        return code_point - 0xF780 + 0x80;\n\t\n\t      // 4. Return error with code point.\n\t      return encoderError(code_point);\n\t    };\n\t  }\n\t\n\t  /** @param {{fatal: boolean}} options */\n\t  encoders['x-user-defined'] = function(options) {\n\t    return new XUserDefinedEncoder(options);\n\t  };\n\t  /** @param {{fatal: boolean}} options */\n\t  decoders['x-user-defined'] = function(options) {\n\t    return new XUserDefinedDecoder(options);\n\t  };\n\t\n\t  if (!global['TextEncoder'])\n\t    global['TextEncoder'] = TextEncoder;\n\t  if (!global['TextDecoder'])\n\t    global['TextDecoder'] = TextDecoder;\n\t\n\t  if (typeof module !== \"undefined\" && module.exports) {\n\t    module.exports = {\n\t      TextEncoder: global['TextEncoder'],\n\t      TextDecoder: global['TextDecoder'],\n\t      EncodingIndexes: global[\"encoding-indexes\"]\n\t    };\n\t  }\n\t\n\t// For strict environments where `this` inside the global scope\n\t// is `undefined`, take a pure object instead\n\t}(this || {}));\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports) {\n\n\t(function(global) {\n\t  'use strict';\n\t\n\t  if (typeof module !== \"undefined\" && module.exports) {\n\t    module.exports = global;\n\t  }\n\t\n\t  global[\"encoding-indexes\"] =\n\t{\n\t  \"big5\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,170000,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14000,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132000,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22000,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21000,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,30000,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23000,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32000,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36000,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26000,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37000,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39000,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38000,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28000,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35000,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27000,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34000,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25000,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24000,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,40000,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],\n\t  \"euc-kr\":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46000,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48000,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49000,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,50000,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51000,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45000,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47000,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52000,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55000,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53000,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54000,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32000,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37000,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36000,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26000,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21000,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39000,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,30000,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64000,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27000,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\n\t  \"gb18030\":[19970,19972,19973,19974,19983,19986,19991,19999,20000,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22000,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24000,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29000,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59000,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31000,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25000,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32000,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,30000,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35000,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36000,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21000,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34000,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28000,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37000,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23000,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38000,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27000,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33000,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26000,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39000,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,40000,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58000,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],\n\t  \"gb18030-ranges\":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189000,65536]],\n\t  \"jis0208\":[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21000,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39000,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32000,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,30000,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26000,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36000,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27000,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34000,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38000,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\n\t  \"jis0212\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25000,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37000,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\n\t  \"ibm866\":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],\n\t  \"iso-8859-2\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],\n\t  \"iso-8859-3\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],\n\t  \"iso-8859-4\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],\n\t  \"iso-8859-5\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],\n\t  \"iso-8859-6\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],\n\t  \"iso-8859-7\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],\n\t  \"iso-8859-8\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],\n\t  \"iso-8859-10\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],\n\t  \"iso-8859-13\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],\n\t  \"iso-8859-14\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],\n\t  \"iso-8859-15\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],\n\t  \"iso-8859-16\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],\n\t  \"koi8-r\":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],\n\t  \"koi8-u\":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],\n\t  \"macintosh\":[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],\n\t  \"windows-874\":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],\n\t  \"windows-1250\":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],\n\t  \"windows-1251\":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],\n\t  \"windows-1252\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],\n\t  \"windows-1253\":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],\n\t  \"windows-1254\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],\n\t  \"windows-1255\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],\n\t  \"windows-1256\":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],\n\t  \"windows-1257\":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],\n\t  \"windows-1258\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],\n\t  \"x-mac-cyrillic\":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]\n\t};\n\t\n\t// For strict environments where `this` inside the global scope\n\t// is `undefined`, take a pure object instead\n\t}(this || {}));\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _PickingShader = __webpack_require__(87);\n\t\n\tvar _PickingShader2 = _interopRequireDefault(_PickingShader);\n\t\n\t// FROM: https://github.com/brianxu/GPUPicker/blob/master/GPUPicker.js\n\t\n\tvar PickingMaterial = function PickingMaterial() {\n\t  _three2['default'].ShaderMaterial.call(this, {\n\t    uniforms: {\n\t      size: {\n\t        type: 'f',\n\t        value: 0.01\n\t      },\n\t      scale: {\n\t        type: 'f',\n\t        value: 400\n\t      }\n\t    },\n\t    // attributes: ['position', 'id'],\n\t    vertexShader: _PickingShader2['default'].vertexShader,\n\t    fragmentShader: _PickingShader2['default'].fragmentShader\n\t  });\n\t\n\t  this.linePadding = 2;\n\t};\n\t\n\tPickingMaterial.prototype = Object.create(_three2['default'].ShaderMaterial.prototype);\n\t\n\tPickingMaterial.prototype.constructor = PickingMaterial;\n\t\n\tPickingMaterial.prototype.setPointSize = function (size) {\n\t  this.uniforms.size.value = size;\n\t};\n\t\n\tPickingMaterial.prototype.setPointScale = function (scale) {\n\t  this.uniforms.scale.value = scale;\n\t};\n\t\n\texports['default'] = PickingMaterial;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t\t\tvalue: true\n\t});\n\t// FROM: https://github.com/brianxu/GPUPicker/blob/master/GPUPicker.js\n\t\n\tvar PickingShader = {\n\t\t\tvertexShader: ['attribute float pickingId;',\n\t\t\t// '',\n\t\t\t// 'uniform float size;',\n\t\t\t// 'uniform float scale;',\n\t\t\t'', 'varying vec4 worldId;', '', 'void main() {', '  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n\t\t\t// '  gl_PointSize = size * ( scale / length( mvPosition.xyz ) );',\n\t\t\t'  vec3 a = fract(vec3(1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)) * pickingId);', '  a -= a.xxy * vec3(0.0, 1.0/255.0, 1.0/255.0);', '  worldId = vec4(a,1);', '  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n\t\n\t\t\tfragmentShader: ['#ifdef GL_ES\\n', 'precision highp float;\\n', '#endif\\n', '', 'varying vec4 worldId;', '', 'void main() {', '  gl_FragColor = worldId;', '}'].join('\\n')\n\t};\n\t\n\texports['default'] = PickingShader;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// TODO: Move duplicated logic between geometry layrs into GeometryLayer\n\t\n\t// TODO: Look at ways to drop unneeded references to array buffers, etc to\n\t// reduce memory footprint\n\t\n\t// TODO: Support dynamic updating / hiding / animation of geometry\n\t//\n\t// This could be pretty hard as it's all packed away within BufferGeometry and\n\t// may even be merged by another layer (eg. GeoJSONLayer)\n\t//\n\t// How much control should this layer support? Perhaps a different or custom\n\t// layer would be better suited for animation, for example.\n\t\n\t// TODO: Allow _setBufferAttributes to use a custom function passed in to\n\t// generate a custom mesh\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _geoGeo = __webpack_require__(4);\n\t\n\tvar _geoGeo2 = _interopRequireDefault(_geoGeo);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _earcut2 = __webpack_require__(80);\n\t\n\tvar _earcut3 = _interopRequireDefault(_earcut2);\n\t\n\tvar _utilExtrudePolygon = __webpack_require__(81);\n\t\n\tvar _utilExtrudePolygon2 = _interopRequireDefault(_utilExtrudePolygon);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\tvar _utilBuffer = __webpack_require__(82);\n\t\n\tvar _utilBuffer2 = _interopRequireDefault(_utilBuffer);\n\t\n\tvar PolygonLayer = (function (_Layer) {\n\t  _inherits(PolygonLayer, _Layer);\n\t\n\t  function PolygonLayer(coordinates, options) {\n\t    _classCallCheck(this, PolygonLayer);\n\t\n\t    var defaults = {\n\t      output: true,\n\t      interactive: false,\n\t      // Custom material override\n\t      //\n\t      // TODO: Should this be in the style object?\n\t      polygonMaterial: null,\n\t      onPolygonMesh: null,\n\t      onBufferAttributes: null,\n\t      // This default style is separate to Util.GeoJSON.defaultStyle\n\t      style: {\n\t        color: '#ffffff',\n\t        transparent: false,\n\t        opacity: 1,\n\t        blending: _three2['default'].NormalBlending,\n\t        height: 0\n\t      }\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(PolygonLayer.prototype), 'constructor', this).call(this, _options);\n\t\n\t    // Return coordinates as array of polygons so it's easy to support\n\t    // MultiPolygon features (a single polygon would be a MultiPolygon with a\n\t    // single polygon in the array)\n\t    this._coordinates = PolygonLayer.isSingle(coordinates) ? [coordinates] : coordinates;\n\t  }\n\t\n\t  _createClass(PolygonLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this._setCoordinates();\n\t\n\t        if (_this._options.interactive) {\n\t          // Only add to picking mesh if this layer is controlling output\n\t          //\n\t          // Otherwise, assume another component will eventually add a mesh to\n\t          // the picking scene\n\t          if (_this.isOutput()) {\n\t            _this._pickingMesh = new _three2['default'].Object3D();\n\t            _this.addToPicking(_this._pickingMesh);\n\t          }\n\t\n\t          _this._setPickingId();\n\t          _this._addPickingEvents();\n\t        }\n\t\n\t        PolygonLayer.SetBufferAttributes(_this._projectedCoordinates, _this._options).then(function (result) {\n\t          _this._bufferAttributes = _utilBuffer2['default'].mergeAttributes(result.attributes);\n\t\n\t          if (result.outlineAttributes.length > 0) {\n\t            _this._outlineBufferAttributes = _utilBuffer2['default'].mergeAttributes(result.outlineAttributes);\n\t          }\n\t\n\t          _this._flat = result.flat;\n\t\n\t          if (_this.isOutput()) {\n\t            var attributeLengths = {\n\t              positions: 3,\n\t              normals: 3,\n\t              colors: 3,\n\t              tops: 1\n\t            };\n\t\n\t            if (_this._options.interactive) {\n\t              attributeLengths.pickingIds = 1;\n\t            }\n\t\n\t            var style = _this._options.style;\n\t\n\t            // Set mesh if not merging elsewhere\n\t            PolygonLayer.SetMesh(_this._bufferAttributes, attributeLengths, _this._flat, style, _this._options, _this._world._environment._skybox).then(function (result) {\n\t              // Output mesh\n\t              _this.add(result.mesh);\n\t\n\t              if (result.pickingMesh) {\n\t                _this._pickingMesh.add(result.pickingMesh);\n\t              }\n\t            });\n\t          }\n\t\n\t          result.attributes = null;\n\t          result.outlineAttributes = null;\n\t          result = null;\n\t\n\t          resolve(_this);\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // Return center of polygon as a LatLon\n\t    //\n\t    // This is used for things like placing popups / UI elements on the layer\n\t    //\n\t    // TODO: Find proper center position instead of returning first coordinate\n\t    // SEE: https://github.com/Leaflet/Leaflet/blob/master/src/layer/vector/Polygon.js#L15\n\t  }, {\n\t    key: 'getCenter',\n\t    value: function getCenter() {\n\t      return this._center;\n\t    }\n\t\n\t    // Return polygon bounds in geographic coordinates\n\t    //\n\t    // TODO: Implement getBounds()\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds() {}\n\t\n\t    // Get unique ID for picking interaction\n\t  }, {\n\t    key: '_setPickingId',\n\t    value: function _setPickingId() {\n\t      this._pickingId = this.getPickingId();\n\t    }\n\t\n\t    // Set up and re-emit interaction events\n\t  }, {\n\t    key: '_addPickingEvents',\n\t    value: function _addPickingEvents() {\n\t      var _this2 = this;\n\t\n\t      // TODO: Find a way to properly remove this listener on destroy\n\t      this._world.on('pick-' + this._pickingId, function (point2d, point3d, intersects) {\n\t        // Re-emit click event from the layer\n\t        _this2.emit('click', _this2, point2d, point3d, intersects);\n\t      });\n\t    }\n\t\n\t    // Create and store reference to THREE.BufferAttribute data for this layer\n\t  }, {\n\t    key: 'getBufferAttributes',\n\t    value: function getBufferAttributes() {\n\t      return this._bufferAttributes;\n\t    }\n\t  }, {\n\t    key: 'getOutlineBufferAttributes',\n\t    value: function getOutlineBufferAttributes() {\n\t      return this._outlineBufferAttributes;\n\t    }\n\t\n\t    // Used by external components to clear some memory when the attributes\n\t    // are no longer required to be stored in this layer\n\t    //\n\t    // For example, you would want to clear the attributes here after merging them\n\t    // using something like the GeoJSONLayer\n\t  }, {\n\t    key: 'clearBufferAttributes',\n\t    value: function clearBufferAttributes() {\n\t      this._bufferAttributes = null;\n\t      this._outlineBufferAttributes = null;\n\t    }\n\t\n\t    // Threshold angle is currently in rads\n\t  }, {\n\t    key: 'clearCoordinates',\n\t\n\t    // Used by external components to clear some memory when the coordinates\n\t    // are no longer required to be stored in this layer\n\t    //\n\t    // For example, you would want to clear the coordinates here after this\n\t    // layer is merged in something like the GeoJSONLayer\n\t    value: function clearCoordinates() {\n\t      this._coordinates = null;\n\t      this._projectedCoordinates = null;\n\t    }\n\t  }, {\n\t    key: '_setCoordinates',\n\t\n\t    // Convert and project coordinates\n\t    //\n\t    // TODO: Calculate bounds\n\t    value: function _setCoordinates() {\n\t      this._bounds = [];\n\t      this._coordinates = this._convertCoordinates(this._coordinates);\n\t\n\t      this._projectedBounds = [];\n\t      this._projectedCoordinates = this._projectCoordinates();\n\t\n\t      this._center = this._coordinates[0][0][0];\n\t    }\n\t\n\t    // Recursively convert input coordinates into LatLon objects\n\t    //\n\t    // Calculate geographic bounds at the same time\n\t    //\n\t    // TODO: Calculate geographic bounds\n\t  }, {\n\t    key: '_convertCoordinates',\n\t    value: function _convertCoordinates(coordinates) {\n\t      return coordinates.map(function (_coordinates) {\n\t        return _coordinates.map(function (ring) {\n\t          return ring.map(function (coordinate) {\n\t            return (0, _geoLatLon.latLon)(coordinate[1], coordinate[0]);\n\t          });\n\t        });\n\t      });\n\t    }\n\t\n\t    // Recursively project coordinates into world positions\n\t    //\n\t    // Calculate world bounds, offset and pointScale at the same time\n\t    //\n\t    // TODO: Calculate world bounds\n\t  }, {\n\t    key: '_projectCoordinates',\n\t    value: function _projectCoordinates() {\n\t      var _this3 = this;\n\t\n\t      var point;\n\t      return this._coordinates.map(function (_coordinates) {\n\t        return _coordinates.map(function (ring) {\n\t          return ring.map(function (latlon) {\n\t            point = _this3._world.latLonToPoint(latlon);\n\t\n\t            // TODO: Is offset ever being used or needed?\n\t            if (!_this3._offset) {\n\t              _this3._offset = (0, _geoPoint.point)(0, 0);\n\t              _this3._offset.x = -1 * point.x;\n\t              _this3._offset.y = -1 * point.y;\n\t\n\t              _this3._options.pointScale = _this3._world.pointScale(latlon);\n\t            }\n\t\n\t            return point;\n\t          });\n\t        });\n\t      });\n\t    }\n\t\n\t    // Convert coordinates array to something earcut can understand\n\t  }, {\n\t    key: 'isFlat',\n\t\n\t    // Returns true if the polygon is flat (has no height)\n\t    value: function isFlat() {\n\t      return this._flat;\n\t    }\n\t\n\t    // Returns true if coordinates refer to a single geometry\n\t    //\n\t    // For example, not coordinates for a MultiPolygon GeoJSON feature\n\t  }, {\n\t    key: 'destroy',\n\t\n\t    // TODO: Make sure this is cleaning everything\n\t    value: function destroy() {\n\t      if (this._pickingMesh) {\n\t        // TODO: Properly dispose of picking mesh\n\t        this._pickingMesh = null;\n\t      }\n\t\n\t      this.clearCoordinates();\n\t      this.clearBufferAttributes();\n\t\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(PolygonLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }], [{\n\t    key: 'SetBufferAttributes',\n\t    value: function SetBufferAttributes(coordinates, options) {\n\t      return new Promise(function (resolve) {\n\t        var height = 0;\n\t\n\t        // Convert height into world units\n\t        if (options.style.height && options.style.height !== 0) {\n\t          height = _geoGeo2['default'].metresToWorld(options.style.height, options.pointScale);\n\t        }\n\t\n\t        var colour = new _three2['default'].Color();\n\t        colour.set(options.style.color);\n\t\n\t        // Light and dark colours used for poor-mans AO gradient on object sides\n\t        var light = new _three2['default'].Color(0xffffff);\n\t        var shadow = new _three2['default'].Color(0x666666);\n\t\n\t        var flat = true;\n\t\n\t        var outlineAttributes = [];\n\t\n\t        // For each polygon\n\t        var attributes = coordinates.map(function (_coordinates) {\n\t          // Convert coordinates to earcut format\n\t          var _earcut = PolygonLayer.ToEarcut(_coordinates);\n\t\n\t          // Triangulate faces using earcut\n\t          var faces = PolygonLayer.Triangulate(_earcut.vertices, _earcut.holes, _earcut.dimensions);\n\t\n\t          var groupedVertices = [];\n\t          for (i = 0, il = _earcut.vertices.length; i < il; i += _earcut.dimensions) {\n\t            groupedVertices.push(_earcut.vertices.slice(i, i + _earcut.dimensions));\n\t          }\n\t\n\t          var extruded = (0, _utilExtrudePolygon2['default'])(groupedVertices, faces, {\n\t            bottom: 0,\n\t            top: height\n\t          });\n\t\n\t          var topColor = colour.clone().multiply(light);\n\t          var bottomColor = colour.clone().multiply(shadow);\n\t\n\t          var _vertices = extruded.positions;\n\t          var _faces = [];\n\t          var _colours = [];\n\t          var _tops = [];\n\t\n\t          var _colour;\n\t          extruded.top.forEach(function (face, fi) {\n\t            _colour = [];\n\t\n\t            _colour.push([colour.r, colour.g, colour.b]);\n\t            _colour.push([colour.r, colour.g, colour.b]);\n\t            _colour.push([colour.r, colour.g, colour.b]);\n\t\n\t            _tops.push([true, true, true]);\n\t\n\t            _faces.push(face);\n\t            _colours.push(_colour);\n\t          });\n\t\n\t          if (extruded.sides) {\n\t            flat = false;\n\t\n\t            // Set up colours for every vertex with poor-mans AO on the sides\n\t            extruded.sides.forEach(function (face, fi) {\n\t              _colour = [];\n\t\n\t              // First face is always bottom-bottom-top\n\t              if (fi % 2 === 0) {\n\t                _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\n\t                _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\n\t                _colour.push([topColor.r, topColor.g, topColor.b]);\n\t\n\t                _tops.push([false, false, true]);\n\t                // Reverse winding for the second face\n\t                // top-top-bottom\n\t              } else {\n\t                  _colour.push([topColor.r, topColor.g, topColor.b]);\n\t                  _colour.push([topColor.r, topColor.g, topColor.b]);\n\t                  _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\n\t\n\t                  _tops.push([true, true, false]);\n\t                }\n\t\n\t              _faces.push(face);\n\t              _colours.push(_colour);\n\t            });\n\t          }\n\t\n\t          // Skip bottom as there's no point rendering it\n\t          // allFaces.push(extruded.faces);\n\t\n\t          var polygon = {\n\t            vertices: _vertices,\n\t            faces: _faces,\n\t            colours: _colours,\n\t            tops: _tops,\n\t            facesCount: _faces.length\n\t          };\n\t\n\t          if (options.style.outline) {\n\t            var outlineColour = new _three2['default'].Color();\n\t            outlineColour.set(options.style.outlineColor || 0x000000);\n\t\n\t            outlineAttributes.push(PolygonLayer.Set2DOutline(_coordinates, outlineColour));\n\t          }\n\t\n\t          if (options.interactive && options.pickingId) {\n\t            // Inject picking ID\n\t            polygon.pickingId = options.pickingId;\n\t          }\n\t\n\t          // Convert polygon representation to proper attribute arrays\n\t          return PolygonLayer.ToAttributes(polygon);\n\t        });\n\t\n\t        resolve({\n\t          attributes: attributes,\n\t          outlineAttributes: outlineAttributes,\n\t          flat: flat\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'Set2DOutline',\n\t    value: function Set2DOutline(coordinates, colour) {\n\t      var _vertices = [];\n\t\n\t      coordinates.forEach(function (ring) {\n\t        var _ring = ring.map(function (coordinate) {\n\t          return [coordinate.x, 0, coordinate.y];\n\t        });\n\t\n\t        // Add in duplicate vertices for line segments to work\n\t        var verticeCount = _ring.length;\n\t        var first = true;\n\t        while (--verticeCount) {\n\t          if (first || verticeCount === 0) {\n\t            first = false;\n\t            continue;\n\t          }\n\t\n\t          _ring.splice(verticeCount + 1, 0, _ring[verticeCount]);\n\t        }\n\t\n\t        _vertices = _vertices.concat(_ring);\n\t      });\n\t\n\t      _colour = [colour.r, colour.g, colour.b];\n\t\n\t      var vertices = new Float32Array(_vertices.length * 3);\n\t      var colours = new Float32Array(_vertices.length * 3);\n\t\n\t      var lastIndex = 0;\n\t\n\t      for (var i = 0; i < _vertices.length; i++) {\n\t        var ax = _vertices[i][0];\n\t        var ay = _vertices[i][1];\n\t        var az = _vertices[i][2];\n\t\n\t        var c1 = _colour;\n\t\n\t        vertices[lastIndex * 3 + 0] = ax;\n\t        vertices[lastIndex * 3 + 1] = ay;\n\t        vertices[lastIndex * 3 + 2] = az;\n\t\n\t        colours[lastIndex * 3 + 0] = c1[0];\n\t        colours[lastIndex * 3 + 1] = c1[1];\n\t        colours[lastIndex * 3 + 2] = c1[2];\n\t\n\t        lastIndex++;\n\t      }\n\t\n\t      var attributes = {\n\t        positions: vertices,\n\t        colors: colours\n\t      };\n\t\n\t      return attributes;\n\t    }\n\t  }, {\n\t    key: 'SetMesh',\n\t    value: function SetMesh(attributes, attributeLengths, flat, style, options, skybox) {\n\t      var geometry = new _three2['default'].BufferGeometry();\n\t\n\t      for (var key in attributes) {\n\t        geometry.addAttribute(key.slice(0, -1), new _three2['default'].BufferAttribute(attributes[key], attributeLengths[key]));\n\t      }\n\t\n\t      geometry.computeBoundingBox();\n\t\n\t      var material;\n\t      if (options.polygonMaterial && options.polygonMaterial instanceof _three2['default'].Material) {\n\t        material = options.polygonMaterial;\n\t      } else if (!skybox) {\n\t        material = new _three2['default'].MeshPhongMaterial({\n\t          vertexColors: _three2['default'].VertexColors,\n\t          side: _three2['default'].BackSide,\n\t          transparent: style.transparent,\n\t          opacity: style.opacity,\n\t          blending: style.blending\n\t        });\n\t      } else {\n\t        material = new _three2['default'].MeshStandardMaterial({\n\t          vertexColors: _three2['default'].VertexColors,\n\t          side: _three2['default'].BackSide,\n\t          transparent: style.transparent,\n\t          opacity: style.opacity,\n\t          blending: style.blending\n\t        });\n\t        material.roughness = 1;\n\t        material.metalness = 0.1;\n\t        material.envMapIntensity = 3;\n\t        material.envMap = skybox.getRenderTarget();\n\t      }\n\t\n\t      var mesh;\n\t\n\t      // Pass mesh through callback, if defined\n\t      if (typeof options.onPolygonMesh === 'function') {\n\t        mesh = options.onPolygonMesh(geometry, material);\n\t      } else {\n\t        mesh = new _three2['default'].Mesh(geometry, material);\n\t\n\t        mesh.castShadow = true;\n\t        mesh.receiveShadow = true;\n\t      }\n\t\n\t      if (flat || style.renderOrder !== undefined) {\n\t        if (!style.ignoreDepth) {\n\t          material.depthWrite = false;\n\t        }\n\t\n\t        var renderOrder = style.renderOrder !== undefined ? style.renderOrder : 3;\n\t        mesh.renderOrder = renderOrder;\n\t      }\n\t\n\t      if (options.interactive) {\n\t        material = new _enginePickingMaterial2['default']();\n\t        material.side = _three2['default'].BackSide;\n\t\n\t        var pickingMesh = new _three2['default'].Mesh(geometry, material);\n\t      }\n\t\n\t      return Promise.resolve({\n\t        mesh: mesh,\n\t        pickingMesh: pickingMesh\n\t      });\n\t    }\n\t  }, {\n\t    key: 'ToEarcut',\n\t    value: function ToEarcut(coordinates) {\n\t      var dim = 2;\n\t      var result = { vertices: [], holes: [], dimensions: dim };\n\t      var holeIndex = 0;\n\t\n\t      for (var i = 0; i < coordinates.length; i++) {\n\t        for (var j = 0; j < coordinates[i].length; j++) {\n\t          // for (var d = 0; d < dim; d++) {\n\t          result.vertices.push(coordinates[i][j].x);\n\t          result.vertices.push(coordinates[i][j].y);\n\t          // }\n\t        }\n\t        if (i > 0) {\n\t          holeIndex += coordinates[i - 1].length;\n\t          result.holes.push(holeIndex);\n\t        }\n\t      }\n\t\n\t      return result;\n\t    }\n\t\n\t    // Triangulate earcut-based input using earcut\n\t  }, {\n\t    key: 'Triangulate',\n\t    value: function Triangulate(contour, holes, dim) {\n\t      // console.time('earcut');\n\t\n\t      var faces = (0, _earcut3['default'])(contour, holes, dim);\n\t      var result = [];\n\t\n\t      for (i = 0, il = faces.length; i < il; i += 3) {\n\t        result.push(faces.slice(i, i + 3));\n\t      }\n\t\n\t      // console.timeEnd('earcut');\n\t\n\t      return result;\n\t    }\n\t\n\t    // Transform polygon representation into attribute arrays that can be used by\n\t    // THREE.BufferGeometry\n\t    //\n\t    // TODO: Can this be simplified? It's messy and huge\n\t  }, {\n\t    key: 'ToAttributes',\n\t    value: function ToAttributes(polygon) {\n\t      // Three components per vertex per face (3 x 3 = 9)\n\t      var positions = new Float32Array(polygon.facesCount * 9);\n\t      var normals = new Float32Array(polygon.facesCount * 9);\n\t      var colours = new Float32Array(polygon.facesCount * 9);\n\t\n\t      // One component per vertex per face (1 x 3 = 3)\n\t      var tops = new Float32Array(polygon.facesCount * 3);\n\t\n\t      var pickingIds;\n\t      if (polygon.pickingId) {\n\t        // One component per vertex per face (1 x 3 = 3)\n\t        pickingIds = new Float32Array(polygon.facesCount * 3);\n\t      }\n\t\n\t      var pA = new _three2['default'].Vector3();\n\t      var pB = new _three2['default'].Vector3();\n\t      var pC = new _three2['default'].Vector3();\n\t\n\t      var cb = new _three2['default'].Vector3();\n\t      var ab = new _three2['default'].Vector3();\n\t\n\t      var index;\n\t\n\t      var _faces = polygon.faces;\n\t      var _vertices = polygon.vertices;\n\t      var _colour = polygon.colours;\n\t      var _tops = polygon.tops;\n\t\n\t      var _pickingId;\n\t      if (pickingIds) {\n\t        _pickingId = polygon.pickingId;\n\t      }\n\t\n\t      var lastIndex = 0;\n\t\n\t      for (var i = 0; i < _faces.length; i++) {\n\t        // Array of vertex indexes for the face\n\t        index = _faces[i][0];\n\t\n\t        var ax = _vertices[index][0];\n\t        var ay = _vertices[index][1];\n\t        var az = _vertices[index][2];\n\t\n\t        var c1 = _colour[i][0];\n\t        var t1 = _tops[i][0];\n\t\n\t        index = _faces[i][1];\n\t\n\t        var bx = _vertices[index][0];\n\t        var by = _vertices[index][1];\n\t        var bz = _vertices[index][2];\n\t\n\t        var c2 = _colour[i][1];\n\t        var t2 = _tops[i][1];\n\t\n\t        index = _faces[i][2];\n\t\n\t        var cx = _vertices[index][0];\n\t        var cy = _vertices[index][1];\n\t        var cz = _vertices[index][2];\n\t\n\t        var c3 = _colour[i][2];\n\t        var t3 = _tops[i][2];\n\t\n\t        // Flat face normals\n\t        // From: http://threejs.org/examples/webgl_buffergeometry.html\n\t        pA.set(ax, ay, az);\n\t        pB.set(bx, by, bz);\n\t        pC.set(cx, cy, cz);\n\t\n\t        cb.subVectors(pC, pB);\n\t        ab.subVectors(pA, pB);\n\t        cb.cross(ab);\n\t\n\t        cb.normalize();\n\t\n\t        var nx = cb.x;\n\t        var ny = cb.y;\n\t        var nz = cb.z;\n\t\n\t        positions[lastIndex * 9 + 0] = ax;\n\t        positions[lastIndex * 9 + 1] = ay;\n\t        positions[lastIndex * 9 + 2] = az;\n\t\n\t        normals[lastIndex * 9 + 0] = nx;\n\t        normals[lastIndex * 9 + 1] = ny;\n\t        normals[lastIndex * 9 + 2] = nz;\n\t\n\t        colours[lastIndex * 9 + 0] = c1[0];\n\t        colours[lastIndex * 9 + 1] = c1[1];\n\t        colours[lastIndex * 9 + 2] = c1[2];\n\t\n\t        positions[lastIndex * 9 + 3] = bx;\n\t        positions[lastIndex * 9 + 4] = by;\n\t        positions[lastIndex * 9 + 5] = bz;\n\t\n\t        normals[lastIndex * 9 + 3] = nx;\n\t        normals[lastIndex * 9 + 4] = ny;\n\t        normals[lastIndex * 9 + 5] = nz;\n\t\n\t        colours[lastIndex * 9 + 3] = c2[0];\n\t        colours[lastIndex * 9 + 4] = c2[1];\n\t        colours[lastIndex * 9 + 5] = c2[2];\n\t\n\t        positions[lastIndex * 9 + 6] = cx;\n\t        positions[lastIndex * 9 + 7] = cy;\n\t        positions[lastIndex * 9 + 8] = cz;\n\t\n\t        normals[lastIndex * 9 + 6] = nx;\n\t        normals[lastIndex * 9 + 7] = ny;\n\t        normals[lastIndex * 9 + 8] = nz;\n\t\n\t        colours[lastIndex * 9 + 6] = c3[0];\n\t        colours[lastIndex * 9 + 7] = c3[1];\n\t        colours[lastIndex * 9 + 8] = c3[2];\n\t\n\t        tops[lastIndex * 3 + 0] = t1;\n\t        tops[lastIndex * 3 + 1] = t2;\n\t        tops[lastIndex * 3 + 2] = t3;\n\t\n\t        if (pickingIds) {\n\t          pickingIds[lastIndex * 3 + 0] = _pickingId;\n\t          pickingIds[lastIndex * 3 + 1] = _pickingId;\n\t          pickingIds[lastIndex * 3 + 2] = _pickingId;\n\t        }\n\t\n\t        lastIndex++;\n\t      }\n\t\n\t      var attributes = {\n\t        positions: positions,\n\t        normals: normals,\n\t        colors: colours,\n\t        tops: tops\n\t      };\n\t\n\t      if (pickingIds) {\n\t        attributes.pickingIds = pickingIds;\n\t      }\n\t\n\t      return attributes;\n\t    }\n\t  }, {\n\t    key: 'isSingle',\n\t    value: function isSingle(coordinates) {\n\t      return !Array.isArray(coordinates[0][0][0]);\n\t    }\n\t  }]);\n\t\n\t  return PolygonLayer;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = PolygonLayer;\n\t\n\tvar noNew = function noNew(coordinates, options) {\n\t  return new PolygonLayer(coordinates, options);\n\t};\n\t\n\texports.polygonLayer = noNew;\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// TODO: Move duplicated logic between geometry layrs into GeometryLayer\n\t\n\t// TODO: Look at ways to drop unneeded references to array buffers, etc to\n\t// reduce memory footprint\n\t\n\t// TODO: Provide alternative output using tubes and splines / curves\n\t\n\t// TODO: Support dynamic updating / hiding / animation of geometry\n\t//\n\t// This could be pretty hard as it's all packed away within BufferGeometry and\n\t// may even be merged by another layer (eg. GeoJSONLayer)\n\t//\n\t// How much control should this layer support? Perhaps a different or custom\n\t// layer would be better suited for animation, for example.\n\t\n\t// TODO: Allow _setBufferAttributes to use a custom function passed in to\n\t// generate a custom mesh\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _geoGeo = __webpack_require__(4);\n\t\n\tvar _geoGeo2 = _interopRequireDefault(_geoGeo);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\tvar _utilBuffer = __webpack_require__(82);\n\t\n\tvar _utilBuffer2 = _interopRequireDefault(_utilBuffer);\n\t\n\tvar PolylineLayer = (function (_Layer) {\n\t  _inherits(PolylineLayer, _Layer);\n\t\n\t  function PolylineLayer(coordinates, options) {\n\t    _classCallCheck(this, PolylineLayer);\n\t\n\t    var defaults = {\n\t      output: true,\n\t      interactive: false,\n\t      // Custom material override\n\t      //\n\t      // TODO: Should this be in the style object?\n\t      polylineMaterial: null,\n\t      onPolylineMesh: null,\n\t      onBufferAttributes: null,\n\t      // This default style is separate to Util.GeoJSON.defaultStyle\n\t      style: {\n\t        lineOpacity: 1,\n\t        lineTransparent: false,\n\t        lineColor: '#ffffff',\n\t        lineWidth: 1,\n\t        lineBlending: _three2['default'].NormalBlending\n\t      }\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(PolylineLayer.prototype), 'constructor', this).call(this, _options);\n\t\n\t    // Return coordinates as array of lines so it's easy to support\n\t    // MultiLineString features (a single line would be a MultiLineString with a\n\t    // single line in the array)\n\t    this._coordinates = PolylineLayer.isSingle(coordinates) ? [coordinates] : coordinates;\n\t\n\t    // Polyline features are always flat (for now at least)\n\t    this._flat = true;\n\t  }\n\t\n\t  _createClass(PolylineLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this._setCoordinates();\n\t\n\t        if (_this._options.interactive) {\n\t          // Only add to picking mesh if this layer is controlling output\n\t          //\n\t          // Otherwise, assume another component will eventually add a mesh to\n\t          // the picking scene\n\t          if (_this.isOutput()) {\n\t            _this._pickingMesh = new _three2['default'].Object3D();\n\t            _this.addToPicking(_this._pickingMesh);\n\t          }\n\t\n\t          _this._setPickingId();\n\t          _this._addPickingEvents();\n\t        }\n\t\n\t        // Store geometry representation as instances of THREE.BufferAttribute\n\t        PolylineLayer.SetBufferAttributes(_this._projectedCoordinates, _this._options).then(function (result) {\n\t          _this._bufferAttributes = _utilBuffer2['default'].mergeAttributes(result.attributes);\n\t          _this._flat = result.flat;\n\t\n\t          var attributeLengths = {\n\t            positions: 3,\n\t            colors: 3\n\t          };\n\t\n\t          if (_this._options.interactive) {\n\t            attributeLengths.pickingIds = 1;\n\t          }\n\t\n\t          if (_this.isOutput()) {\n\t            var style = _this._options.style;\n\t\n\t            // Set mesh if not merging elsewhere\n\t            PolylineLayer.SetMesh(_this._bufferAttributes, attributeLengths, _this._flat, style, _this._options).then(function (result) {\n\t              // Output mesh\n\t              _this.add(result.mesh);\n\t\n\t              if (result.pickingMesh) {\n\t                _this._pickingMesh.add(result.pickingMesh);\n\t              }\n\t            });\n\t          }\n\t\n\t          result.attributes = null;\n\t          result = null;\n\t\n\t          resolve(_this);\n\t        });\n\t      });\n\t    }\n\t\n\t    // Return center of polyline as a LatLon\n\t    //\n\t    // This is used for things like placing popups / UI elements on the layer\n\t    //\n\t    // TODO: Find proper center position instead of returning first coordinate\n\t    // SEE: https://github.com/Leaflet/Leaflet/blob/master/src/layer/vector/Polyline.js#L59\n\t  }, {\n\t    key: 'getCenter',\n\t    value: function getCenter() {\n\t      return this._center;\n\t    }\n\t\n\t    // Return line bounds in geographic coordinates\n\t    //\n\t    // TODO: Implement getBounds()\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds() {}\n\t\n\t    // Get unique ID for picking interaction\n\t  }, {\n\t    key: '_setPickingId',\n\t    value: function _setPickingId() {\n\t      this._pickingId = this.getPickingId();\n\t    }\n\t\n\t    // Set up and re-emit interaction events\n\t  }, {\n\t    key: '_addPickingEvents',\n\t    value: function _addPickingEvents() {\n\t      var _this2 = this;\n\t\n\t      // TODO: Find a way to properly remove this listener on destroy\n\t      this._world.on('pick-' + this._pickingId, function (point2d, point3d, intersects) {\n\t        // Re-emit click event from the layer\n\t        _this2.emit('click', _this2, point2d, point3d, intersects);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'getBufferAttributes',\n\t    value: function getBufferAttributes() {\n\t      return this._bufferAttributes;\n\t    }\n\t\n\t    // Used by external components to clear some memory when the attributes\n\t    // are no longer required to be stored in this layer\n\t    //\n\t    // For example, you would want to clear the attributes here after merging them\n\t    // using something like the GeoJSONLayer\n\t  }, {\n\t    key: 'clearBufferAttributes',\n\t    value: function clearBufferAttributes() {\n\t      this._bufferAttributes = null;\n\t    }\n\t\n\t    // Used by external components to clear some memory when the coordinates\n\t    // are no longer required to be stored in this layer\n\t    //\n\t    // For example, you would want to clear the coordinates here after this\n\t    // layer is merged in something like the GeoJSONLayer\n\t  }, {\n\t    key: 'clearCoordinates',\n\t    value: function clearCoordinates() {\n\t      this._coordinates = null;\n\t      this._projectedCoordinates = null;\n\t    }\n\t  }, {\n\t    key: '_setCoordinates',\n\t\n\t    // Convert and project coordinates\n\t    //\n\t    // TODO: Calculate bounds\n\t    value: function _setCoordinates() {\n\t      this._bounds = [];\n\t      this._coordinates = this._convertCoordinates(this._coordinates);\n\t\n\t      this._projectedBounds = [];\n\t      this._projectedCoordinates = this._projectCoordinates();\n\t\n\t      this._center = this._coordinates[0][0];\n\t    }\n\t\n\t    // Recursively convert input coordinates into LatLon objects\n\t    //\n\t    // Calculate geographic bounds at the same time\n\t    //\n\t    // TODO: Calculate geographic bounds\n\t  }, {\n\t    key: '_convertCoordinates',\n\t    value: function _convertCoordinates(coordinates) {\n\t      return coordinates.map(function (_coordinates) {\n\t        return _coordinates.map(function (coordinate) {\n\t          return (0, _geoLatLon.latLon)(coordinate[1], coordinate[0]);\n\t        });\n\t      });\n\t    }\n\t\n\t    // Recursively project coordinates into world positions\n\t    //\n\t    // Calculate world bounds, offset and pointScale at the same time\n\t    //\n\t    // TODO: Calculate world bounds\n\t  }, {\n\t    key: '_projectCoordinates',\n\t    value: function _projectCoordinates() {\n\t      var _this3 = this;\n\t\n\t      var point;\n\t      return this._coordinates.map(function (_coordinates) {\n\t        return _coordinates.map(function (latlon) {\n\t          point = _this3._world.latLonToPoint(latlon);\n\t\n\t          // TODO: Is offset ever being used or needed?\n\t          if (!_this3._offset) {\n\t            _this3._offset = (0, _geoPoint.point)(0, 0);\n\t            _this3._offset.x = -1 * point.x;\n\t            _this3._offset.y = -1 * point.y;\n\t\n\t            _this3._options.pointScale = _this3._world.pointScale(latlon);\n\t          }\n\t\n\t          return point;\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'isFlat',\n\t\n\t    // Returns true if the line is flat (has no height)\n\t    value: function isFlat() {\n\t      return this._flat;\n\t    }\n\t\n\t    // Returns true if coordinates refer to a single geometry\n\t    //\n\t    // For example, not coordinates for a MultiLineString GeoJSON feature\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      if (this._pickingMesh) {\n\t        // TODO: Properly dispose of picking mesh\n\t        this._pickingMesh = null;\n\t      }\n\t\n\t      this.clearCoordinates();\n\t      this.clearBufferAttributes();\n\t\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(PolylineLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }], [{\n\t    key: 'SetBufferAttributes',\n\t    value: function SetBufferAttributes(coordinates, options) {\n\t      return new Promise(function (resolve) {\n\t        var height = 0;\n\t\n\t        // Convert height into world units\n\t        if (options.style.lineHeight) {\n\t          height = _geoGeo2['default'].metresToWorld(options.style.lineHeight, options.pointScale);\n\t        }\n\t\n\t        var colour = new _three2['default'].Color();\n\t        colour.set(options.style.lineColor);\n\t\n\t        var flat = true;\n\t\n\t        // For each line\n\t        var attributes = coordinates.map(function (_projectedCoordinates) {\n\t          var _vertices = [];\n\t          var _colours = [];\n\t\n\t          // Connect coordinate with the next to make a pair\n\t          //\n\t          // LineSegments requires pairs of vertices so repeat the last point if\n\t          // there's an odd number of vertices\n\t          var nextCoord;\n\t          _projectedCoordinates.forEach(function (coordinate, index) {\n\t            _colours.push([colour.r, colour.g, colour.b]);\n\t            _vertices.push([coordinate.x, height, coordinate.y]);\n\t\n\t            nextCoord = _projectedCoordinates[index + 1] ? _projectedCoordinates[index + 1] : coordinate;\n\t\n\t            _colours.push([colour.r, colour.g, colour.b]);\n\t            _vertices.push([nextCoord.x, height, nextCoord.y]);\n\t          });\n\t\n\t          var line = {\n\t            vertices: _vertices,\n\t            colours: _colours,\n\t            verticesCount: _vertices.length\n\t          };\n\t\n\t          if (options.interactive && options.pickingId) {\n\t            // Inject picking ID\n\t            line.pickingId = options.pickingId;\n\t          }\n\t\n\t          // Convert line representation to proper attribute arrays\n\t          return PolylineLayer.ToAttributes(line);\n\t        });\n\t\n\t        resolve({\n\t          attributes: attributes,\n\t          flat: flat\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'SetMesh',\n\t    value: function SetMesh(attributes, attributeLengths, flat, style, options) {\n\t      var geometry = new _three2['default'].BufferGeometry();\n\t\n\t      for (var key in attributes) {\n\t        geometry.addAttribute(key.slice(0, -1), new _three2['default'].BufferAttribute(attributes[key], attributeLengths[key]));\n\t      }\n\t\n\t      geometry.computeBoundingBox();\n\t\n\t      var material;\n\t      if (options.polylineMaterial && options.polylineMaterial instanceof _three2['default'].Material) {\n\t        material = options.polylineMaterial;\n\t      } else {\n\t        material = new _three2['default'].LineBasicMaterial({\n\t          vertexColors: _three2['default'].VertexColors,\n\t          linewidth: style.lineWidth,\n\t          transparent: style.lineTransparent,\n\t          opacity: style.lineOpacity,\n\t          blending: style.lineBlending\n\t        });\n\t      }\n\t\n\t      var mesh;\n\t\n\t      // Pass mesh through callback, if defined\n\t      if (typeof options.onPolylineMesh === 'function') {\n\t        mesh = options.onPolylineMesh(geometry, material);\n\t      } else {\n\t        mesh = new _three2['default'].LineSegments(geometry, material);\n\t\n\t        if (style.lineRenderOrder !== undefined) {\n\t          material.depthWrite = false;\n\t          mesh.renderOrder = style.lineRenderOrder;\n\t        }\n\t\n\t        mesh.castShadow = true;\n\t        // mesh.receiveShadow = true;\n\t      }\n\t\n\t      if (options.interactive) {\n\t        material = new _enginePickingMaterial2['default']();\n\t        // material.side = THREE.BackSide;\n\t\n\t        // Make the line wider / easier to pick\n\t        material.linewidth = style.lineWidth + material.linePadding;\n\t\n\t        var pickingMesh = new _three2['default'].LineSegments(geometry, material);\n\t      }\n\t\n\t      return Promise.resolve({\n\t        mesh: mesh,\n\t        pickingMesh: pickingMesh\n\t      });\n\t    }\n\t  }, {\n\t    key: 'ToAttributes',\n\t    value: function ToAttributes(line) {\n\t      // Three components per vertex\n\t      var vertices = new Float32Array(line.verticesCount * 3);\n\t      var colours = new Float32Array(line.verticesCount * 3);\n\t\n\t      var pickingIds;\n\t      if (line.pickingId) {\n\t        // One component per vertex\n\t        pickingIds = new Float32Array(line.verticesCount);\n\t      }\n\t\n\t      var _vertices = line.vertices;\n\t      var _colour = line.colours;\n\t\n\t      var _pickingId;\n\t      if (pickingIds) {\n\t        _pickingId = line.pickingId;\n\t      }\n\t\n\t      var lastIndex = 0;\n\t\n\t      for (var i = 0; i < _vertices.length; i++) {\n\t        var ax = _vertices[i][0];\n\t        var ay = _vertices[i][1];\n\t        var az = _vertices[i][2];\n\t\n\t        var c1 = _colour[i];\n\t\n\t        vertices[lastIndex * 3 + 0] = ax;\n\t        vertices[lastIndex * 3 + 1] = ay;\n\t        vertices[lastIndex * 3 + 2] = az;\n\t\n\t        colours[lastIndex * 3 + 0] = c1[0];\n\t        colours[lastIndex * 3 + 1] = c1[1];\n\t        colours[lastIndex * 3 + 2] = c1[2];\n\t\n\t        if (pickingIds) {\n\t          pickingIds[lastIndex] = _pickingId;\n\t        }\n\t\n\t        lastIndex++;\n\t      }\n\t\n\t      var attributes = {\n\t        positions: vertices,\n\t        colors: colours\n\t      };\n\t\n\t      if (pickingIds) {\n\t        attributes.pickingIds = pickingIds;\n\t      }\n\t\n\t      return attributes;\n\t    }\n\t  }, {\n\t    key: 'isSingle',\n\t    value: function isSingle(coordinates) {\n\t      return !Array.isArray(coordinates[0][0]);\n\t    }\n\t  }]);\n\t\n\t  return PolylineLayer;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = PolylineLayer;\n\t\n\tvar noNew = function noNew(coordinates, options) {\n\t  return new PolylineLayer(coordinates, options);\n\t};\n\t\n\texports.polylineLayer = noNew;\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// TODO: Move duplicated logic between geometry layrs into GeometryLayer\n\t\n\t// TODO: Look at ways to drop unneeded references to array buffers, etc to\n\t// reduce memory footprint\n\t\n\t// TODO: Point features may be using custom models / meshes and so an approach\n\t// needs to be found to allow these to be brokwn down into buffer attributes for\n\t// merging\n\t//\n\t// Can probably use fromGeometry() or setFromObject() from THREE.BufferGeometry\n\t// and pull out the attributes\n\t\n\t// TODO: Support sprite objects using textures\n\t\n\t// TODO: Provide option to billboard geometry so it always faces the camera\n\t\n\t// TODO: Support dynamic updating / hiding / animation of geometry\n\t//\n\t// This could be pretty hard as it's all packed away within BufferGeometry and\n\t// may even be merged by another layer (eg. GeoJSONLayer)\n\t//\n\t// How much control should this layer support? Perhaps a different or custom\n\t// layer would be better suited for animation, for example.\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _three = __webpack_require__(8);\n\t\n\tvar _three2 = _interopRequireDefault(_three);\n\t\n\tvar _geoGeo = __webpack_require__(4);\n\t\n\tvar _geoGeo2 = _interopRequireDefault(_geoGeo);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\tvar _utilBuffer = __webpack_require__(82);\n\t\n\tvar _utilBuffer2 = _interopRequireDefault(_utilBuffer);\n\t\n\tvar _PolygonLayer = __webpack_require__(88);\n\t\n\tvar _PolygonLayer2 = _interopRequireDefault(_PolygonLayer);\n\t\n\tvar PointLayer = (function (_Layer) {\n\t  _inherits(PointLayer, _Layer);\n\t\n\t  function PointLayer(coordinates, options) {\n\t    _classCallCheck(this, PointLayer);\n\t\n\t    var defaults = {\n\t      output: true,\n\t      interactive: false,\n\t      // THREE.Geometry or THREE.BufferGeometry to use for point output\n\t      pointGeometry: null,\n\t      // Custom material override\n\t      //\n\t      // TODO: Should this be in the style object?\n\t      pointMaterial: null,\n\t      onPointMesh: null,\n\t      // This default style is separate to Util.GeoJSON.defaultStyle\n\t      style: {\n\t        pointColor: '#ff0000'\n\t      }\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(PointLayer.prototype), 'constructor', this).call(this, _options);\n\t\n\t    // Return coordinates as array of points so it's easy to support\n\t    // MultiPoint features (a single point would be a MultiPoint with a\n\t    // single point in the array)\n\t    this._coordinates = PointLayer.isSingle(coordinates) ? [coordinates] : coordinates;\n\t\n\t    this._flat = false;\n\t  }\n\t\n\t  _createClass(PointLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this._setCoordinates();\n\t\n\t        if (_this._options.interactive) {\n\t          // Only add to picking mesh if this layer is controlling output\n\t          //\n\t          // Otherwise, assume another component will eventually add a mesh to\n\t          // the picking scene\n\t          if (_this.isOutput()) {\n\t            _this._pickingMesh = new _three2['default'].Object3D();\n\t            _this.addToPicking(_this._pickingMesh);\n\t          }\n\t\n\t          _this._setPickingId();\n\t          _this._addPickingEvents();\n\t        }\n\t\n\t        // Store geometry representation as instances of THREE.BufferAttribute\n\t        PointLayer.SetBufferAttributes(_this._projectedCoordinates, _this._options).then(function (result) {\n\t          _this._bufferAttributes = _utilBuffer2['default'].mergeAttributes(result.attributes);\n\t          _this._flat = result.flat;\n\t\n\t          var attributeLengths = {\n\t            positions: 3,\n\t            normals: 3,\n\t            colors: 3\n\t          };\n\t\n\t          if (_this._options.interactive) {\n\t            attributeLengths.pickingIds = 1;\n\t          }\n\t\n\t          if (_this.isOutput()) {\n\t            var style = _this._options.style;\n\t\n\t            // Set mesh if not merging elsewhere\n\t            // TODO: Dedupe with PolygonLayer as they are identical\n\t            PointLayer.SetMesh(_this._bufferAttributes, attributeLengths, _this._flat, style, _this._options, _this._world._environment._skybox).then(function (result) {\n\t              // Output mesh\n\t              _this.add(result.mesh);\n\t\n\t              if (result.pickingMesh) {\n\t                _this._pickingMesh.add(result.pickingMesh);\n\t              }\n\t            });\n\t          }\n\t\n\t          result.attributes = null;\n\t          result = null;\n\t\n\t          resolve(_this);\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // Return center of point as a LatLon\n\t    //\n\t    // This is used for things like placing popups / UI elements on the layer\n\t  }, {\n\t    key: 'getCenter',\n\t    value: function getCenter() {\n\t      return this._center;\n\t    }\n\t\n\t    // Return point bounds in geographic coordinates\n\t    //\n\t    // While not useful for single points, it could be useful for MultiPoint\n\t    //\n\t    // TODO: Implement getBounds()\n\t  }, {\n\t    key: 'getBounds',\n\t    value: function getBounds() {}\n\t\n\t    // Get unique ID for picking interaction\n\t  }, {\n\t    key: '_setPickingId',\n\t    value: function _setPickingId() {\n\t      this._pickingId = this.getPickingId();\n\t    }\n\t\n\t    // Set up and re-emit interaction events\n\t  }, {\n\t    key: '_addPickingEvents',\n\t    value: function _addPickingEvents() {\n\t      var _this2 = this;\n\t\n\t      // TODO: Find a way to properly remove this listener on destroy\n\t      this._world.on('pick-' + this._pickingId, function (point2d, point3d, intersects) {\n\t        // Re-emit click event from the layer\n\t        _this2.emit('click', _this2, point2d, point3d, intersects);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'getBufferAttributes',\n\t    value: function getBufferAttributes() {\n\t      return this._bufferAttributes;\n\t    }\n\t\n\t    // Used by external components to clear some memory when the attributes\n\t    // are no longer required to be stored in this layer\n\t    //\n\t    // For example, you would want to clear the attributes here after merging them\n\t    // using something like the GeoJSONLayer\n\t  }, {\n\t    key: 'clearBufferAttributes',\n\t    value: function clearBufferAttributes() {\n\t      this._bufferAttributes = null;\n\t    }\n\t\n\t    // Used by external components to clear some memory when the coordinates\n\t    // are no longer required to be stored in this layer\n\t    //\n\t    // For example, you would want to clear the coordinates here after this\n\t    // layer is merged in something like the GeoJSONLayer\n\t  }, {\n\t    key: 'clearCoordinates',\n\t    value: function clearCoordinates() {\n\t      this._coordinates = null;\n\t      this._projectedCoordinates = null;\n\t    }\n\t  }, {\n\t    key: '_setCoordinates',\n\t\n\t    // Convert and project coordinates\n\t    //\n\t    // TODO: Calculate bounds\n\t    value: function _setCoordinates() {\n\t      this._bounds = [];\n\t      this._coordinates = this._convertCoordinates(this._coordinates);\n\t\n\t      this._projectedBounds = [];\n\t      this._projectedCoordinates = this._projectCoordinates();\n\t\n\t      this._center = this._coordinates;\n\t    }\n\t\n\t    // Recursively convert input coordinates into LatLon objects\n\t    //\n\t    // Calculate geographic bounds at the same time\n\t    //\n\t    // TODO: Calculate geographic bounds\n\t  }, {\n\t    key: '_convertCoordinates',\n\t    value: function _convertCoordinates(coordinates) {\n\t      return coordinates.map(function (coordinate) {\n\t        return (0, _geoLatLon.latLon)(coordinate[1], coordinate[0]);\n\t      });\n\t    }\n\t\n\t    // Recursively project coordinates into world positions\n\t    //\n\t    // Calculate world bounds, offset and pointScale at the same time\n\t    //\n\t    // TODO: Calculate world bounds\n\t  }, {\n\t    key: '_projectCoordinates',\n\t    value: function _projectCoordinates() {\n\t      var _this3 = this;\n\t\n\t      var _point;\n\t      return this._coordinates.map(function (latlon) {\n\t        _point = _this3._world.latLonToPoint(latlon);\n\t\n\t        // TODO: Is offset ever being used or needed?\n\t        if (!_this3._offset) {\n\t          _this3._offset = (0, _geoPoint.point)(0, 0);\n\t          _this3._offset.x = -1 * _point.x;\n\t          _this3._offset.y = -1 * _point.y;\n\t\n\t          _this3._options.pointScale = _this3._world.pointScale(latlon);\n\t        }\n\t\n\t        return _point;\n\t      });\n\t    }\n\t\n\t    // Returns true if the line is flat (has no height)\n\t  }, {\n\t    key: 'isFlat',\n\t    value: function isFlat() {\n\t      return this._flat;\n\t    }\n\t\n\t    // Returns true if coordinates refer to a single geometry\n\t    //\n\t    // For example, not coordinates for a MultiPoint GeoJSON feature\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      if (this._pickingMesh) {\n\t        // TODO: Properly dispose of picking mesh\n\t        this._pickingMesh = null;\n\t      }\n\t\n\t      this.clearCoordinates();\n\t      this.clearBufferAttributes();\n\t\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(PointLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }], [{\n\t    key: 'SetBufferAttributes',\n\t    value: function SetBufferAttributes(coordinates, options) {\n\t      return new Promise(function (resolve) {\n\t        var height = 0;\n\t\n\t        // Convert height into world units\n\t        if (options.style.pointHeight) {\n\t          height = _geoGeo2['default'].metresToWorld(options.style.pointHeight, options.pointScale);\n\t        }\n\t\n\t        var colour = new _three2['default'].Color();\n\t        colour.set(options.style.pointColor);\n\t\n\t        // Use default geometry if none has been provided or the provided geometry\n\t        // isn't valid\n\t        if (!options.pointGeometry || !options.pointGeometry instanceof _three2['default'].Geometry || !options.pointGeometry instanceof _three2['default'].BufferGeometry) {\n\t          // Debug geometry for points is a thin bar\n\t          //\n\t          // TODO: Allow point geometry to be customised / overridden\n\t          var geometryWidth = _geoGeo2['default'].metresToWorld(25, options.pointScale);\n\t          var geometryHeight = _geoGeo2['default'].metresToWorld(200, options.pointScale);\n\t          var _geometry = new _three2['default'].BoxGeometry(geometryWidth, geometryHeight, geometryWidth);\n\t\n\t          // Shift geometry up so it sits on the ground\n\t          _geometry.translate(0, geometryHeight * 0.5, 0);\n\t\n\t          // Pull attributes out of debug geometry\n\t          geometry = new _three2['default'].BufferGeometry().fromGeometry(_geometry);\n\t        } else {\n\t          if (options.geometry instanceof _three2['default'].BufferGeometry) {\n\t            geometry = options.pointGeometry;\n\t          } else {\n\t            geometry = new _three2['default'].BufferGeometry().fromGeometry(options.pointGeometry);\n\t          }\n\t        }\n\t\n\t        var attributes = coordinates.map(function (coordinate) {\n\t          var _vertices = [];\n\t          var _normals = [];\n\t          var _colours = [];\n\t\n\t          var _geometry = geometry.clone();\n\t          _geometry.translate(coordinate.x, height, coordinate.y);\n\t\n\t          var _vertices = _geometry.attributes.position.clone().array;\n\t          var _normals = _geometry.attributes.normal.clone().array;\n\t          var _colours = _geometry.attributes.color.clone().array;\n\t\n\t          for (var i = 0; i < _colours.length; i += 3) {\n\t            _colours[i] = colour.r;\n\t            _colours[i + 1] = colour.g;\n\t            _colours[i + 2] = colour.b;\n\t          }\n\t\n\t          var _point = {\n\t            positions: _vertices,\n\t            normals: _normals,\n\t            colors: _colours\n\t          };\n\t\n\t          if (options.interactive && options.pickingId) {\n\t            // Inject picking ID\n\t            _point.pickingId = options.pickingId;\n\t          }\n\t\n\t          return _point;\n\t        });\n\t\n\t        resolve({\n\t          attributes: attributes,\n\t          flat: false\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'SetMesh',\n\t    value: function SetMesh(attributes, attributeLengths, flat, style, options, skybox) {\n\t      var geometry = new _three2['default'].BufferGeometry();\n\t\n\t      for (var key in attributes) {\n\t        geometry.addAttribute(key.slice(0, -1), new _three2['default'].BufferAttribute(attributes[key], attributeLengths[key]));\n\t      }\n\t\n\t      geometry.computeBoundingBox();\n\t\n\t      var material;\n\t      if (options.pointMaterial && options.pointMaterial instanceof _three2['default'].Material) {\n\t        material = options.pointMaterial;\n\t      } else if (!skybox) {\n\t        material = new _three2['default'].MeshPhongMaterial({\n\t          vertexColors: _three2['default'].VertexColors,\n\t          // side: THREE.BackSide,\n\t          transparent: style.transparent,\n\t          opacity: style.opacity,\n\t          blending: style.blending\n\t        });\n\t      } else {\n\t        material = new _three2['default'].MeshStandardMaterial({\n\t          vertexColors: _three2['default'].VertexColors,\n\t          // side: THREE.BackSide,\n\t          transparent: style.transparent,\n\t          opacity: style.opacity,\n\t          blending: style.blending\n\t        });\n\t        material.roughness = 1;\n\t        material.metalness = 0.1;\n\t        material.envMapIntensity = 3;\n\t        material.envMap = skybox.getRenderTarget();\n\t      }\n\t\n\t      var mesh;\n\t\n\t      // Pass mesh through callback, if defined\n\t      if (typeof options.onPolygonMesh === 'function') {\n\t        mesh = options.onPolygonMesh(geometry, material);\n\t      } else {\n\t        mesh = new _three2['default'].Mesh(geometry, material);\n\t\n\t        mesh.castShadow = true;\n\t        mesh.receiveShadow = true;\n\t      }\n\t\n\t      if (flat) {\n\t        material.depthWrite = false;\n\t        mesh.renderOrder = 4;\n\t      }\n\t\n\t      if (options.interactive) {\n\t        material = new _enginePickingMaterial2['default']();\n\t        material.side = _three2['default'].BackSide;\n\t\n\t        var pickingMesh = new _three2['default'].Mesh(geometry, material);\n\t      }\n\t\n\t      return Promise.resolve({\n\t        mesh: mesh,\n\t        pickingMesh: pickingMesh\n\t      });\n\t    }\n\t  }, {\n\t    key: 'isSingle',\n\t    value: function isSingle(coordinates) {\n\t      return !Array.isArray(coordinates[0]);\n\t    }\n\t  }]);\n\t\n\t  return PointLayer;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = PointLayer;\n\t\n\tvar noNew = function noNew(coordinates, options) {\n\t  return new PointLayer(coordinates, options);\n\t};\n\t\n\texports.pointLayer = noNew;\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _Layer2 = __webpack_require__(31);\n\t\n\tvar _Layer3 = _interopRequireDefault(_Layer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar _reqwest = __webpack_require__(74);\n\t\n\tvar _reqwest2 = _interopRequireDefault(_reqwest);\n\t\n\tvar _utilGeoJSON = __webpack_require__(76);\n\t\n\tvar _utilGeoJSON2 = _interopRequireDefault(_utilGeoJSON);\n\t\n\tvar _utilWorker = __webpack_require__(44);\n\t\n\tvar _utilWorker2 = _interopRequireDefault(_utilWorker);\n\t\n\tvar _utilBuffer = __webpack_require__(82);\n\t\n\tvar _utilBuffer2 = _interopRequireDefault(_utilBuffer);\n\t\n\tvar _utilStringify = __webpack_require__(92);\n\t\n\tvar _utilStringify2 = _interopRequireDefault(_utilStringify);\n\t\n\tvar _geometryPolygonLayer = __webpack_require__(88);\n\t\n\tvar _geometryPolygonLayer2 = _interopRequireDefault(_geometryPolygonLayer);\n\t\n\tvar _geometryPolylineLayer = __webpack_require__(89);\n\t\n\tvar _geometryPolylineLayer2 = _interopRequireDefault(_geometryPolylineLayer);\n\t\n\tvar _geometryPointLayer = __webpack_require__(90);\n\t\n\tvar _geometryPointLayer2 = _interopRequireDefault(_geometryPointLayer);\n\t\n\tvar _geoLatLon = __webpack_require__(5);\n\t\n\tvar _geoPoint = __webpack_require__(6);\n\t\n\tvar _geoGeo = __webpack_require__(4);\n\t\n\tvar _geoGeo2 = _interopRequireDefault(_geoGeo);\n\t\n\tvar _enginePickingMaterial = __webpack_require__(86);\n\t\n\tvar _enginePickingMaterial2 = _interopRequireDefault(_enginePickingMaterial);\n\t\n\t// TODO: Allow filter method to be run inside a worker to improve performance\n\t// TODO: Allow onEachFeature method to be run inside a worker to improve performance\n\t\n\tvar GeoJSONWorkerLayer = (function (_Layer) {\n\t  _inherits(GeoJSONWorkerLayer, _Layer);\n\t\n\t  function GeoJSONWorkerLayer(geojson, options) {\n\t    _classCallCheck(this, GeoJSONWorkerLayer);\n\t\n\t    var defaults = {\n\t      topojson: false,\n\t      style: _utilGeoJSON2['default'].defaultStyle,\n\t      onEachFeature: null,\n\t      onEachFeatureWorker: null,\n\t      onAddAttributes: null,\n\t      interactive: false,\n\t      pointGeometry: null,\n\t      onClick: null,\n\t      headers: {}\n\t    };\n\t\n\t    var _options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    if (typeof options.style === 'object') {\n\t      _options.style = (0, _lodashAssign2['default'])({}, defaults.style, options.style);\n\t    }\n\t\n\t    _get(Object.getPrototypeOf(GeoJSONWorkerLayer.prototype), 'constructor', this).call(this, _options);\n\t\n\t    this._aborted = false;\n\t    this._geojson = geojson;\n\t  }\n\t\n\t  _createClass(GeoJSONWorkerLayer, [{\n\t    key: '_onAdd',\n\t    value: function _onAdd(world) {\n\t      if (this._options.interactive) {\n\t        // Worker layer always controls output to add a picking mesh\n\t        this._pickingMesh = new THREE.Object3D();\n\t      }\n\t\n\t      // Process GeoJSON\n\t      return this._process(this._geojson)['catch'](function (err) {\n\t        console.error(err);\n\t      });\n\t    }\n\t\n\t    // Use workers to request and process GeoJSON, returning data structure\n\t    // containing geometry and any supplementary data for output\n\t  }, {\n\t    key: '_process',\n\t    value: function _process(_geojson) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var style = _this._options.style;\n\t\n\t        // TODO: Convert to buffer and use transferrable objects\n\t        if (typeof _this._options.style === 'function') {\n\t          style = _utilStringify2['default'].functionToString(_this._options.style);\n\t        }\n\t\n\t        var pointGeometry = _this._options.pointGeometry;\n\t\n\t        // TODO: Convert to buffer and use transferrable objects\n\t        if (typeof _this._options.pointGeometry === 'function') {\n\t          pointGeometry = _utilStringify2['default'].functionToString(_this._options.pointGeometry);\n\t        }\n\t\n\t        var geojson = _geojson;\n\t        var transferrables = [];\n\t\n\t        if (typeof geojson !== 'string') {\n\t          _this._geojson = geojson = _utilBuffer2['default'].stringToUint8Array(JSON.stringify(geojson));\n\t          transferrables.push(geojson.buffer);\n\t          _this._execWorker(geojson, _this._options.topojson, _this._world._originPoint, style, _this._options.interactive, pointGeometry, transferrables).then(function () {\n\t            resolve();\n\t          })['catch'](reject);\n\t        } else if (typeof _this._options.filter === 'function' || typeof _this._options.onEachFeature === 'function') {\n\t          GeoJSONWorkerLayer.RequestGeoJSON(geojson).then(function (res) {\n\t            // if (this._aborted) {\n\t            //   resolve();\n\t            //   return;\n\t            // }\n\t\n\t            var fc = _utilGeoJSON2['default'].collectFeatures(res, _this._options.topojson);\n\t            var features = fc.features;\n\t\n\t            // Run filter, if provided\n\t            if (_this._options.filter) {\n\t              fc.features = features.filter(_this._options.filter);\n\t            }\n\t\n\t            if (_this._options.onEachFeature) {\n\t              var feature;\n\t              for (var i = 0; i < features.length; i++) {\n\t                feature = features[i];\n\t                _this._options.onEachFeature(feature);\n\t              };\n\t            }\n\t\n\t            _this._geojson = geojson = _utilBuffer2['default'].stringToUint8Array(JSON.stringify(fc));\n\t            transferrables.push(geojson.buffer);\n\t\n\t            _this._execWorker(geojson, false, _this._options.headers, _this._world._originPoint, style, _this._options.interactive, pointGeometry, transferrables).then(function () {\n\t              resolve();\n\t            })['catch'](reject);\n\t          });\n\t        } else {\n\t          _this._execWorker(geojson, _this._options.topojson, _this._options.headers, _this._world._originPoint, style, _this._options.interactive, pointGeometry, transferrables).then(function () {\n\t            resolve();\n\t          })['catch'](reject);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: '_execWorker',\n\t    value: function _execWorker(geojson, topojson, headers, originPoint, style, interactive, pointGeometry, transferrables) {\n\t      var _this2 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        // console.time('Worker round trip');\n\t\n\t        _utilWorker2['default'].exec('GeoJSONWorkerLayer.Process', [geojson, topojson, headers, originPoint, style, interactive, pointGeometry], transferrables).then(function (results) {\n\t          // console.timeEnd('Worker round trip');\n\t\n\t          // if (this._aborted) {\n\t          //   resolve();\n\t          //   return;\n\t          // }\n\t\n\t          var processPromises = [];\n\t\n\t          if (results.polygons) {\n\t            processPromises.push(_this2._processPolygonResults(results.polygons));\n\t          }\n\t\n\t          if (results.polylines) {\n\t            processPromises.push(_this2._processPolylineResults(results.polylines));\n\t          }\n\t\n\t          if (results.points) {\n\t            processPromises.push(_this2._processPointResults(results.points));\n\t          }\n\t\n\t          if (processPromises.length > 0) {\n\t            Promise.all(processPromises).then(function () {\n\t              resolve();\n\t            })['catch'](reject);\n\t          } else {\n\t            resolve();\n\t          }\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // TODO: Dedupe with polyline method\n\t  }, {\n\t    key: '_processPolygonResults',\n\t    value: function _processPolygonResults(results) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var splitPositions = _utilBuffer2['default'].splitFloat32Array(results.attributes.positions);\n\t        var splitNormals = _utilBuffer2['default'].splitFloat32Array(results.attributes.normals);\n\t        var splitColors = _utilBuffer2['default'].splitFloat32Array(results.attributes.colors);\n\t        var splitTops = _utilBuffer2['default'].splitFloat32Array(results.attributes.tops);\n\t\n\t        var splitOutlinePositions;\n\t        var splitOutlineColors;\n\t\n\t        if (results.outlineAttributes) {\n\t          splitOutlinePositions = _utilBuffer2['default'].splitFloat32Array(results.outlineAttributes.positions);\n\t          splitOutlineColors = _utilBuffer2['default'].splitFloat32Array(results.outlineAttributes.colors);\n\t        }\n\t\n\t        var splitProperties;\n\t        if (results.properties) {\n\t          splitProperties = _utilBuffer2['default'].splitUint8Array(results.properties);\n\t        }\n\t\n\t        var flats = results.flats;\n\t\n\t        var objects = [];\n\t        var outlineObjects = [];\n\t\n\t        var obj;\n\t        var pickingId;\n\t        var pickingIds;\n\t        var properties;\n\t\n\t        var polygonAttributeLengths = {\n\t          positions: 3,\n\t          normals: 3,\n\t          colors: 3,\n\t          tops: 1\n\t        };\n\t\n\t        var polygonOutlineAttributeLengths = {\n\t          positions: 3,\n\t          colors: 3\n\t        };\n\t\n\t        for (var i = 0; i < splitPositions.length; i++) {\n\t          if (splitProperties && splitProperties[i]) {\n\t            properties = JSON.parse(_utilBuffer2['default'].uint8ArrayToString(splitProperties[i]));\n\t          } else {\n\t            properties = {};\n\t          }\n\t\n\t          // WORKERS: obj.attributes should actually an array of polygons for\n\t          // the feature, though the current logic isn't aware of that\n\t          obj = {\n\t            attributes: [{\n\t              positions: splitPositions[i],\n\t              normals: splitNormals[i],\n\t              colors: splitColors[i],\n\t              tops: splitTops[i]\n\t            }],\n\t            properties: properties,\n\t            flat: flats[i]\n\t          };\n\t\n\t          // WORKERS: If interactive, generate unique ID for each feature, create\n\t          // the buffer attributes and set up event listeners\n\t          if (_this3._options.interactive) {\n\t            pickingId = _this3.getPickingId();\n\t\n\t            pickingIds = new Float32Array(splitPositions[i].length / 3);\n\t            _utilBuffer2['default'].fillTypedArray(pickingIds, pickingId);\n\t\n\t            obj.attributes[0].pickingIds = pickingIds;\n\t\n\t            polygonAttributeLengths.pickingIds = 1;\n\t\n\t            _this3._addPicking(pickingId, properties);\n\t          }\n\t\n\t          // TODO: Make this specific to polygon attributes\n\t          if (typeof _this3._options.onAddAttributes === 'function') {\n\t            var customAttributes = _this3._options.onAddAttributes(obj.attributes[0], properties);\n\t            var customAttribute;\n\t            for (var key in customAttributes) {\n\t              customAttribute = customAttributes[key];\n\t              obj.attributes[0][key] = customAttribute.value;\n\t              polygonAttributeLengths[key] = customAttribute.length;\n\t            }\n\t          }\n\t\n\t          objects.push(obj);\n\t        }\n\t\n\t        for (var i = 0; i < splitOutlinePositions.length; i++) {\n\t          obj = {\n\t            attributes: [{\n\t              positions: splitOutlinePositions[i],\n\t              colors: splitOutlineColors[i]\n\t            }],\n\t            flat: true\n\t          };\n\t\n\t          outlineObjects.push(obj);\n\t        }\n\t\n\t        var polygonAttributes = [];\n\t        var polygonOutlineAttributes = [];\n\t\n\t        var polygonFlat = true;\n\t\n\t        for (var i = 0; i < objects.length; i++) {\n\t          obj = objects[i];\n\t\n\t          // TODO: Work out why obj.flat is rarely set to something other than\n\t          // true or false. Potentially undefined.\n\t          if (polygonFlat && obj.flat === false) {\n\t            polygonFlat = false;\n\t          }\n\t\n\t          var bufferAttributes = _utilBuffer2['default'].mergeAttributes(obj.attributes);\n\t          polygonAttributes.push(bufferAttributes);\n\t        };\n\t\n\t        for (var i = 0; i < outlineObjects.length; i++) {\n\t          obj = outlineObjects[i];\n\t\n\t          var bufferAttributes = _utilBuffer2['default'].mergeAttributes(obj.attributes);\n\t          polygonOutlineAttributes.push(bufferAttributes);\n\t        };\n\t\n\t        var outputPromises = [];\n\t\n\t        var style;\n\t\n\t        if (polygonAttributes.length > 0) {\n\t          var mergedPolygonAttributes = _utilBuffer2['default'].mergeAttributes(polygonAttributes);\n\t\n\t          // TODO: Make this work when style is a function per feature\n\t          style = typeof _this3._options.style === 'function' ? _this3._options.style(objects[0]) : _this3._options.style;\n\t          style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t          outputPromises.push(_this3._setPolygonMesh(mergedPolygonAttributes, polygonAttributeLengths, style, polygonFlat));\n\t        }\n\t\n\t        if (polygonOutlineAttributes.length > 0) {\n\t          var mergedPolygonOutlineAttributes = _utilBuffer2['default'].mergeAttributes(polygonOutlineAttributes);\n\t\n\t          style = typeof _this3._options.style === 'function' ? _this3._options.style(objects[0]) : _this3._options.style;\n\t          style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t          if (style.outlineRenderOrder !== undefined) {\n\t            style.lineRenderOrder = style.outlineRenderOrder;\n\t          } else {\n\t            style.lineRenderOrder = style.renderOrder ? style.renderOrder + 1 : 4;\n\t          }\n\t\n\t          if (style.outlineWidth) {\n\t            style.lineWidth = style.outlineWidth;\n\t          }\n\t\n\t          outputPromises.push(_this3._setPolylineMesh(mergedPolygonOutlineAttributes, polygonOutlineAttributeLengths, style, true));\n\t        }\n\t\n\t        Promise.all(outputPromises).then(function (results) {\n\t          var _results = results;\n\t\n\t          var _results2 = _slicedToArray(_results, 2);\n\t\n\t          var polygonResult = _results2[0];\n\t          var outlineResult = _results2[1];\n\t\n\t          if (polygonResult) {\n\t            _this3._polygonMesh = polygonResult.mesh;\n\t            _this3.add(_this3._polygonMesh);\n\t\n\t            if (polygonResult.pickingMesh) {\n\t              _this3._pickingMesh.add(polygonResult.pickingMesh);\n\t            }\n\t          }\n\t\n\t          if (outlineResult) {\n\t            _this3.add(outlineResult.mesh);\n\t          }\n\t\n\t          // Clean up\n\t          results.attributes = null;\n\t          results.flats = null;\n\t          results = null;\n\t\n\t          resolve();\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // TODO: Dedupe with polygon method\n\t  }, {\n\t    key: '_processPolylineResults',\n\t    value: function _processPolylineResults(results) {\n\t      var _this4 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var splitPositions = _utilBuffer2['default'].splitFloat32Array(results.attributes.positions);\n\t        var splitColors = _utilBuffer2['default'].splitFloat32Array(results.attributes.colors);\n\t\n\t        var splitProperties;\n\t        if (results.properties) {\n\t          splitProperties = _utilBuffer2['default'].splitUint8Array(results.properties);\n\t        }\n\t\n\t        var flats = results.flats;\n\t\n\t        var objects = [];\n\t        var obj;\n\t        var pickingId;\n\t        var pickingIds;\n\t        var properties;\n\t\n\t        var polylineAttributeLengths = {\n\t          positions: 3,\n\t          colors: 3\n\t        };\n\t\n\t        for (var i = 0; i < splitPositions.length; i++) {\n\t          if (splitProperties && splitProperties[i]) {\n\t            properties = JSON.parse(_utilBuffer2['default'].uint8ArrayToString(splitProperties[i]));\n\t          } else {\n\t            properties = {};\n\t          }\n\t\n\t          // WORKERS: obj.attributes should actually an array of polygons for\n\t          // the feature, though the current logic isn't aware of that\n\t          obj = {\n\t            attributes: [{\n\t              positions: splitPositions[i],\n\t              colors: splitColors[i]\n\t            }],\n\t            properties: properties,\n\t            flat: flats[i]\n\t          };\n\t\n\t          // WORKERS: If interactive, generate unique ID for each feature, create\n\t          // the buffer attributes and set up event listeners\n\t          if (_this4._options.interactive) {\n\t            pickingId = _this4.getPickingId();\n\t\n\t            pickingIds = new Float32Array(splitPositions[i].length / 3);\n\t            _utilBuffer2['default'].fillTypedArray(pickingIds, pickingId);\n\t\n\t            obj.attributes[0].pickingIds = pickingIds;\n\t\n\t            polylineAttributeLengths.pickingIds = 1;\n\t\n\t            _this4._addPicking(pickingId, properties);\n\t          }\n\t\n\t          // TODO: Make this specific to polyline attributes\n\t          if (typeof _this4._options.onAddAttributes === 'function') {\n\t            var customAttributes = _this4._options.onAddAttributes(obj.attributes[0], properties);\n\t            var customAttribute;\n\t            for (var key in customAttributes) {\n\t              customAttribute = customAttributes[key];\n\t              obj.attributes[0][key] = customAttribute.value;\n\t              polylineAttributeLengths[key] = customAttribute.length;\n\t            }\n\t          }\n\t\n\t          objects.push(obj);\n\t        }\n\t\n\t        var polylineAttributes = [];\n\t\n\t        var polylineFlat = true;\n\t\n\t        for (var i = 0; i < objects.length; i++) {\n\t          obj = objects[i];\n\t\n\t          if (polylineFlat && !obj.flat) {\n\t            polylineFlat = false;\n\t          }\n\t\n\t          var bufferAttributes = _utilBuffer2['default'].mergeAttributes(obj.attributes);\n\t          polylineAttributes.push(bufferAttributes);\n\t        };\n\t\n\t        if (polylineAttributes.length > 0) {\n\t          var mergedPolylineAttributes = _utilBuffer2['default'].mergeAttributes(polylineAttributes);\n\t\n\t          // TODO: Make this work when style is a function per feature\n\t          var style = typeof _this4._options.style === 'function' ? _this4._options.style(objects[0]) : _this4._options.style;\n\t          style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t          _this4._setPolylineMesh(mergedPolylineAttributes, polylineAttributeLengths, style, polylineFlat).then(function (result) {\n\t            _this4._polylineMesh = result.mesh;\n\t            _this4.add(_this4._polylineMesh);\n\t\n\t            if (result.pickingMesh) {\n\t              _this4._pickingMesh.add(result.pickingMesh);\n\t            }\n\t\n\t            resolve();\n\t          })['catch'](reject);\n\t        } else {\n\t          resolve();\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: '_processPointResults',\n\t    value: function _processPointResults(results) {\n\t      var _this5 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var splitPositions = _utilBuffer2['default'].splitFloat32Array(results.attributes.positions);\n\t        var splitNormals = _utilBuffer2['default'].splitFloat32Array(results.attributes.normals);\n\t        var splitColors = _utilBuffer2['default'].splitFloat32Array(results.attributes.colors);\n\t\n\t        var splitProperties;\n\t        if (results.properties) {\n\t          splitProperties = _utilBuffer2['default'].splitUint8Array(results.properties);\n\t        }\n\t\n\t        var flats = results.flats;\n\t\n\t        var objects = [];\n\t        var obj;\n\t        var pickingId;\n\t        var pickingIds;\n\t        var properties;\n\t\n\t        var pointAttributeLengths = {\n\t          positions: 3,\n\t          normals: 3,\n\t          colors: 3\n\t        };\n\t\n\t        for (var i = 0; i < splitPositions.length; i++) {\n\t          if (splitProperties && splitProperties[i]) {\n\t            properties = JSON.parse(_utilBuffer2['default'].uint8ArrayToString(splitProperties[i]));\n\t          } else {\n\t            properties = {};\n\t          }\n\t\n\t          // WORKERS: obj.attributes should actually an array of polygons for\n\t          // the feature, though the current logic isn't aware of that\n\t          obj = {\n\t            attributes: [{\n\t              positions: splitPositions[i],\n\t              normals: splitNormals[i],\n\t              colors: splitColors[i]\n\t            }],\n\t            properties: properties,\n\t            flat: flats[i]\n\t          };\n\t\n\t          // WORKERS: If interactive, generate unique ID for each feature, create\n\t          // the buffer attributes and set up event listeners\n\t          if (_this5._options.interactive) {\n\t            pickingId = _this5.getPickingId();\n\t\n\t            pickingIds = new Float32Array(splitPositions[i].length / 3);\n\t            _utilBuffer2['default'].fillTypedArray(pickingIds, pickingId);\n\t\n\t            obj.attributes[0].pickingIds = pickingIds;\n\t\n\t            pointAttributeLengths.pickingIds = 1;\n\t\n\t            _this5._addPicking(pickingId, properties);\n\t          }\n\t\n\t          // TODO: Make this specific to polygon attributes\n\t          if (typeof _this5._options.onAddAttributes === 'function') {\n\t            var customAttributes = _this5._options.onAddAttributes(obj.attributes[0], properties);\n\t            var customAttribute;\n\t            for (var key in customAttributes) {\n\t              customAttribute = customAttributes[key];\n\t              obj.attributes[0][key] = customAttribute.value;\n\t              pointAttributeLengths[key] = customAttribute.length;\n\t            }\n\t          }\n\t\n\t          objects.push(obj);\n\t        }\n\t\n\t        var pointAttributes = [];\n\t\n\t        var pointFlat = true;\n\t\n\t        for (var i = 0; i < objects.length; i++) {\n\t          obj = objects[i];\n\t\n\t          if (pointFlat && !obj.flat) {\n\t            pointFlat = false;\n\t          }\n\t\n\t          var bufferAttributes = _utilBuffer2['default'].mergeAttributes(obj.attributes);\n\t          pointAttributes.push(bufferAttributes);\n\t        };\n\t\n\t        if (pointAttributes.length > 0) {\n\t          var mergedPointAttributes = _utilBuffer2['default'].mergeAttributes(pointAttributes);\n\t\n\t          // TODO: Make this work when style is a function per feature\n\t          var style = typeof _this5._options.style === 'function' ? _this5._options.style(objects[0]) : _this5._options.style;\n\t          style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, style);\n\t\n\t          _this5._setPointMesh(mergedPointAttributes, pointAttributeLengths, style, pointFlat).then(function (result) {\n\t            _this5._pointMesh = result.mesh;\n\t            _this5.add(_this5._pointMesh);\n\t\n\t            if (result.pickingMesh) {\n\t              _this5._pickingMesh.add(result.pickingMesh);\n\t            }\n\t\n\t            resolve();\n\t          })['catch'](reject);\n\t        } else {\n\t          resolve();\n\t        }\n\t      });\n\t    }\n\t\n\t    // TODO: At some point this needs to return all the features to the main thread\n\t    // so it can generate meshes and output to the scene, as well as perhaps creating\n\t    // individual layers / components for each feature to track things like picking\n\t    // and properties\n\t    //\n\t    // TODO: Find a way so the origin point isn't needed to be passed in as it\n\t    // feels a bit messy and against the idea of a static Geo class\n\t    //\n\t    // TODO: Support passing custom geometry for point layers\n\t  }, {\n\t    key: '_setPolygonMesh',\n\t\n\t    // Create and store mesh from buffer attributes\n\t    //\n\t    // Could make this an abstract method for each geometry layer\n\t    value: function _setPolygonMesh(attributes, attributeLengths, style, flat) {\n\t      if (!this._world) {\n\t        return Promise.reject();\n\t      }\n\t\n\t      return _geometryPolygonLayer2['default'].SetMesh(attributes, attributeLengths, flat, style, this._options, this._world._environment._skybox);\n\t    }\n\t  }, {\n\t    key: '_setPolylineMesh',\n\t    value: function _setPolylineMesh(attributes, attributeLengths, style, flat) {\n\t      if (!this._world) {\n\t        return Promise.reject();\n\t      }\n\t\n\t      return _geometryPolylineLayer2['default'].SetMesh(attributes, attributeLengths, flat, style, this._options);\n\t    }\n\t  }, {\n\t    key: '_setPointMesh',\n\t    value: function _setPointMesh(attributes, attributeLengths, style, flat) {\n\t      if (!this._world) {\n\t        return Promise.reject();\n\t      }\n\t\n\t      return _geometryPointLayer2['default'].SetMesh(attributes, attributeLengths, flat, style, this._options, this._world._environment._skybox);\n\t    }\n\t\n\t    // Set up and re-emit interaction events\n\t  }, {\n\t    key: '_addPicking',\n\t    value: function _addPicking(pickingId, properties) {\n\t      var _this6 = this;\n\t\n\t      this._world.on('pick-click-' + pickingId, function (pickingId, point2d, point3d, intersects) {\n\t        _this6._world.emit('click', _this6, properties, point2d, point3d);\n\t      });\n\t\n\t      this._world.on('pick-hover-' + pickingId, function (pickingId, point2d, point3d, intersects) {\n\t        _this6._world.emit('hover', _this6, properties, point2d, point3d);\n\t      });\n\t    }\n\t\n\t    // TODO: Finish cleanup\n\t  }, {\n\t    key: 'destroy',\n\t    value: function destroy() {\n\t      // Run common destruction logic from parent\n\t      _get(Object.getPrototypeOf(GeoJSONWorkerLayer.prototype), 'destroy', this).call(this);\n\t    }\n\t  }], [{\n\t    key: 'Process',\n\t    value: function Process(geojson, topojson, headers, originPoint, _style, _properties, _pointGeometry) {\n\t      return new Promise(function (resolve, reject) {\n\t        GeoJSONWorkerLayer.ProcessGeoJSON(geojson, headers).then(function (res) {\n\t          // Collects features into a single FeatureCollection\n\t          //\n\t          // Also converts TopoJSON to GeoJSON if instructed\n\t          var geojson = _utilGeoJSON2['default'].collectFeatures(res, topojson);\n\t\n\t          // TODO: Check that GeoJSON is valid / usable\n\t\n\t          var features = geojson.features;\n\t\n\t          // TODO: Run filter, if provided (must be static)\n\t\n\t          var pointScale;\n\t          var polygons = [];\n\t          var polylines = [];\n\t          var points = [];\n\t\n\t          // Deserialise style function if provided\n\t          if (typeof _style === 'string') {\n\t            _style = _utilStringify2['default'].stringToFunction(_style);\n\t          }\n\t\n\t          // Assume that a style won't be set per feature\n\t          var style = _style;\n\t\n\t          var pointGeometry;\n\t          // Deserialise pointGeometry function if provided\n\t          if (typeof _pointGeometry === 'string') {\n\t            pointGeometry = _utilStringify2['default'].stringToFunction(_pointGeometry);\n\t          }\n\t\n\t          var feature;\n\t          for (var i = 0; i < features.length; i++) {\n\t            feature = features[i];\n\t\n\t            var geometry = feature.geometry;\n\t            var coordinates = geometry.coordinates ? geometry.coordinates : null;\n\t\n\t            if (!coordinates || !geometry) {\n\t              return;\n\t            }\n\t\n\t            // Get per-feature style object, if provided\n\t            if (typeof _style === 'function') {\n\t              style = (0, _lodashAssign2['default'])({}, _utilGeoJSON2['default'].defaultStyle, _style(feature));\n\t              // console.log(feature, style);\n\t            }\n\t\n\t            if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\n\t              coordinates = _geometryPolygonLayer2['default'].isSingle(coordinates) ? [coordinates] : coordinates;\n\t\n\t              var converted = coordinates.map(function (_coordinates) {\n\t                return _coordinates.map(function (ring) {\n\t                  return ring.map(function (coordinate) {\n\t                    return (0, _geoLatLon.latLon)(coordinate[1], coordinate[0]);\n\t                  });\n\t                });\n\t              });\n\t\n\t              var point;\n\t              var projected = converted.map(function (_coordinates) {\n\t                return _coordinates.map(function (ring) {\n\t                  return ring.map(function (latlon) {\n\t                    point = _geoGeo2['default'].latLonToPoint(latlon)._subtract(originPoint);\n\t\n\t                    if (!pointScale) {\n\t                      pointScale = _geoGeo2['default'].pointScale(latlon);\n\t                    }\n\t\n\t                    return point;\n\t                  });\n\t                });\n\t              });\n\t\n\t              var polygon = {\n\t                projected: projected,\n\t                options: {\n\t                  pointScale: pointScale,\n\t                  style: style\n\t                }\n\t              };\n\t\n\t              if (_properties) {\n\t                polygon.properties = feature.properties;\n\t              }\n\t\n\t              polygons.push(polygon);\n\t            }\n\t\n\t            if (geometry.type === 'LineString' || geometry.type === 'MultiLineString') {\n\t              coordinates = _geometryPolylineLayer2['default'].isSingle(coordinates) ? [coordinates] : coordinates;\n\t\n\t              var converted = coordinates.map(function (_coordinates) {\n\t                return _coordinates.map(function (coordinate) {\n\t                  return (0, _geoLatLon.latLon)(coordinate[1], coordinate[0]);\n\t                });\n\t              });\n\t\n\t              var point;\n\t              var projected = converted.map(function (_coordinates) {\n\t                return _coordinates.map(function (latlon) {\n\t                  point = _geoGeo2['default'].latLonToPoint(latlon)._subtract(originPoint);\n\t\n\t                  if (!pointScale) {\n\t                    pointScale = _geoGeo2['default'].pointScale(latlon);\n\t                  }\n\t\n\t                  return point;\n\t                });\n\t              });\n\t\n\t              var polyline = {\n\t                projected: projected,\n\t                options: {\n\t                  pointScale: pointScale,\n\t                  style: style\n\t                }\n\t              };\n\t\n\t              if (_properties) {\n\t                polyline.properties = feature.properties;\n\t              }\n\t\n\t              polylines.push(polyline);\n\t            }\n\t\n\t            if (geometry.type === 'Point' || geometry.type === 'MultiPoint') {\n\t              coordinates = _geometryPointLayer2['default'].isSingle(coordinates) ? [coordinates] : coordinates;\n\t\n\t              var converted = coordinates.map(function (coordinate) {\n\t                return (0, _geoLatLon.latLon)(coordinate[1], coordinate[0]);\n\t              });\n\t\n\t              var point;\n\t              var projected = converted.map(function (latlon) {\n\t                point = _geoGeo2['default'].latLonToPoint(latlon)._subtract(originPoint);\n\t\n\t                if (!pointScale) {\n\t                  pointScale = _geoGeo2['default'].pointScale(latlon);\n\t                }\n\t\n\t                return point;\n\t              });\n\t\n\t              var point = {\n\t                projected: projected,\n\t                options: {\n\t                  pointGeometry: pointGeometry(feature),\n\t                  pointScale: pointScale,\n\t                  style: style\n\t                }\n\t              };\n\t\n\t              if (_properties) {\n\t                point.properties = feature.properties;\n\t              }\n\t\n\t              points.push(point);\n\t            }\n\t          };\n\t\n\t          var polygonBufferPromises = [];\n\t          var polylineBufferPromises = [];\n\t          var pointBufferPromises = [];\n\t\n\t          var polygon;\n\t          for (var i = 0; i < polygons.length; i++) {\n\t            polygon = polygons[i];\n\t            polygonBufferPromises.push(_geometryPolygonLayer2['default'].SetBufferAttributes(polygon.projected, polygon.options));\n\t          };\n\t\n\t          var polyline;\n\t          for (var i = 0; i < polylines.length; i++) {\n\t            polyline = polylines[i];\n\t            polylineBufferPromises.push(_geometryPolylineLayer2['default'].SetBufferAttributes(polyline.projected, polyline.options));\n\t          };\n\t\n\t          var point;\n\t          for (var i = 0; i < points.length; i++) {\n\t            point = points[i];\n\t            pointBufferPromises.push(_geometryPointLayer2['default'].SetBufferAttributes(point.projected, point.options));\n\t          };\n\t\n\t          var data = {};\n\t          var transferrables = [];\n\t\n\t          // TODO: Make this work with polylines too\n\t          // TODO: Make this so it's not a nest of promises\n\t          GeoJSONWorkerLayer.ProcessPolygons(polygonBufferPromises, polygons, _properties).then(function (result) {\n\t            data.polygons = result.data;\n\t            transferrables = transferrables.concat(result.transferrables);\n\t\n\t            GeoJSONWorkerLayer.ProcessPolylines(polylineBufferPromises, polylines, _properties).then(function (result) {\n\t              data.polylines = result.data;\n\t              transferrables = transferrables.concat(result.transferrables);\n\t\n\t              GeoJSONWorkerLayer.ProcessPoints(pointBufferPromises, points, _properties).then(function (result) {\n\t                data.points = result.data;\n\t                transferrables = transferrables.concat(result.transferrables);\n\t\n\t                resolve({\n\t                  data: data,\n\t                  transferrables: transferrables\n\t                });\n\t              });\n\t            });\n\t          });\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'ProcessPolygons',\n\t    value: function ProcessPolygons(polygonPromises, polygons, _properties) {\n\t      return new Promise(function (resolve, reject) {\n\t        Promise.all(polygonPromises).then(function (results) {\n\t          var transferrables = [];\n\t\n\t          var positions = [];\n\t          var normals = [];\n\t          var colors = [];\n\t          var tops = [];\n\t\n\t          var outlinePositions = [];\n\t          var outlineColors = [];\n\t\n\t          var properties = [];\n\t\n\t          var flats = [];\n\t          var polygon;\n\t\n\t          var result;\n\t          for (var i = 0; i < results.length; i++) {\n\t            result = results[i];\n\t\n\t            polygon = polygons[i];\n\t\n\t            // WORKERS: Making this a typed array will speed up transfer time\n\t            // As things stand this adds on a few milliseconds\n\t            flats.push(result.flat);\n\t\n\t            // WORKERS: result.attributes is actually an array of polygons for each\n\t            // feature, though the current logic isn't keeping these all together\n\t\n\t            var attributes;\n\t            for (var j = 0; j < result.attributes.length; j++) {\n\t              attributes = result.attributes[j];\n\t\n\t              positions.push(attributes.positions);\n\t              normals.push(attributes.normals);\n\t              colors.push(attributes.colors);\n\t              tops.push(attributes.tops);\n\t\n\t              if (_properties) {\n\t                properties.push(_utilBuffer2['default'].stringToUint8Array(JSON.stringify(polygon.properties)));\n\t              }\n\t            };\n\t\n\t            var outlineAttributes;\n\t            for (var j = 0; j < result.outlineAttributes.length; j++) {\n\t              outlineAttributes = result.outlineAttributes[j];\n\t\n\t              outlinePositions.push(outlineAttributes.positions);\n\t              outlineColors.push(outlineAttributes.colors);\n\t            };\n\t          };\n\t\n\t          var mergedAttributes = {\n\t            positions: _utilBuffer2['default'].mergeFloat32Arrays(positions),\n\t            normals: _utilBuffer2['default'].mergeFloat32Arrays(normals),\n\t            colors: _utilBuffer2['default'].mergeFloat32Arrays(colors),\n\t            tops: _utilBuffer2['default'].mergeFloat32Arrays(tops)\n\t          };\n\t\n\t          var mergedOutlineAttributes = {\n\t            positions: _utilBuffer2['default'].mergeFloat32Arrays(outlinePositions),\n\t            colors: _utilBuffer2['default'].mergeFloat32Arrays(outlineColors)\n\t          };\n\t\n\t          transferrables.push(mergedAttributes.positions[0].buffer);\n\t          transferrables.push(mergedAttributes.positions[1].buffer);\n\t\n\t          transferrables.push(mergedAttributes.normals[0].buffer);\n\t          transferrables.push(mergedAttributes.normals[1].buffer);\n\t\n\t          transferrables.push(mergedAttributes.colors[0].buffer);\n\t          transferrables.push(mergedAttributes.colors[1].buffer);\n\t\n\t          transferrables.push(mergedAttributes.tops[0].buffer);\n\t          transferrables.push(mergedAttributes.tops[1].buffer);\n\t\n\t          transferrables.push(mergedOutlineAttributes.positions[0].buffer);\n\t          transferrables.push(mergedOutlineAttributes.positions[1].buffer);\n\t\n\t          transferrables.push(mergedOutlineAttributes.colors[0].buffer);\n\t          transferrables.push(mergedOutlineAttributes.colors[1].buffer);\n\t\n\t          var mergedProperties;\n\t          if (_properties) {\n\t            mergedProperties = _utilBuffer2['default'].mergeUint8Arrays(properties);\n\t\n\t            transferrables.push(mergedProperties[0].buffer);\n\t            transferrables.push(mergedProperties[1].buffer);\n\t          }\n\t\n\t          var output = {\n\t            attributes: mergedAttributes,\n\t            outlineAttributes: mergedOutlineAttributes,\n\t            flats: flats\n\t          };\n\t\n\t          if (_properties) {\n\t            output.properties = mergedProperties;\n\t          }\n\t\n\t          // TODO: Also return GeoJSON features that can be mapped to objects on\n\t          // the main thread. Allow user to provide filter / toggles to only return\n\t          // properties from the GeoJSON that they need (eg. don't return geometry,\n\t          // or don't return properties.height)\n\t          resolve({\n\t            data: output,\n\t            transferrables: transferrables\n\t          });\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'ProcessPolylines',\n\t    value: function ProcessPolylines(polylinePromises, polylines, _properties) {\n\t      return new Promise(function (resolve, reject) {\n\t        Promise.all(polylinePromises).then(function (results) {\n\t          var transferrables = [];\n\t\n\t          var positions = [];\n\t          var colors = [];\n\t\n\t          var properties = [];\n\t\n\t          var flats = [];\n\t          var polyline;\n\t\n\t          var result;\n\t          for (var i = 0; i < results.length; i++) {\n\t            result = results[i];\n\t\n\t            polyline = polylines[i];\n\t\n\t            // WORKERS: Making this a typed array will speed up transfer time\n\t            // As things stand this adds on a few milliseconds\n\t            flats.push(result.flat);\n\t\n\t            // WORKERS: result.attributes is actually an array of polygons for each\n\t            // feature, though the current logic isn't keeping these all together\n\t\n\t            var attributes;\n\t            for (var j = 0; j < result.attributes.length; j++) {\n\t              attributes = result.attributes[j];\n\t\n\t              positions.push(attributes.positions);\n\t              colors.push(attributes.colors);\n\t\n\t              if (_properties) {\n\t                properties.push(_utilBuffer2['default'].stringToUint8Array(JSON.stringify(polyline.properties)));\n\t              }\n\t            };\n\t          };\n\t\n\t          var mergedAttributes = {\n\t            positions: _utilBuffer2['default'].mergeFloat32Arrays(positions),\n\t            colors: _utilBuffer2['default'].mergeFloat32Arrays(colors)\n\t          };\n\t\n\t          transferrables.push(mergedAttributes.positions[0].buffer);\n\t          transferrables.push(mergedAttributes.positions[1].buffer);\n\t\n\t          transferrables.push(mergedAttributes.colors[0].buffer);\n\t          transferrables.push(mergedAttributes.colors[1].buffer);\n\t\n\t          var mergedProperties;\n\t          if (_properties) {\n\t            mergedProperties = _utilBuffer2['default'].mergeUint8Arrays(properties);\n\t\n\t            transferrables.push(mergedProperties[0].buffer);\n\t            transferrables.push(mergedProperties[1].buffer);\n\t          }\n\t\n\t          var output = {\n\t            attributes: mergedAttributes,\n\t            flats: flats\n\t          };\n\t\n\t          if (_properties) {\n\t            output.properties = mergedProperties;\n\t          }\n\t\n\t          // TODO: Also return GeoJSON features that can be mapped to objects on\n\t          // the main thread. Allow user to provide filter / toggles to only return\n\t          // properties from the GeoJSON that they need (eg. don't return geometry,\n\t          // or don't return properties.height)\n\t          resolve({\n\t            data: output,\n\t            transferrables: transferrables\n\t          });\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t\n\t    // TODO: Dedupe with ProcessPolygons as they are identical\n\t  }, {\n\t    key: 'ProcessPoints',\n\t    value: function ProcessPoints(pointPromises, points, _properties) {\n\t      return new Promise(function (resolve, reject) {\n\t        Promise.all(pointPromises).then(function (results) {\n\t          var transferrables = [];\n\t\n\t          var positions = [];\n\t          var normals = [];\n\t          var colors = [];\n\t\n\t          var properties = [];\n\t\n\t          var flats = [];\n\t          var point;\n\t\n\t          var result;\n\t          for (var i = 0; i < results.length; i++) {\n\t            result = results[i];\n\t\n\t            point = points[i];\n\t\n\t            // WORKERS: Making this a typed array will speed up transfer time\n\t            // As things stand this adds on a few milliseconds\n\t            flats.push(result.flat);\n\t\n\t            // WORKERS: result.attributes is actually an array of polygons for each\n\t            // feature, though the current logic isn't keeping these all together\n\t\n\t            var attributes;\n\t            for (var j = 0; j < result.attributes.length; j++) {\n\t              attributes = result.attributes[j];\n\t\n\t              positions.push(attributes.positions);\n\t              normals.push(attributes.normals);\n\t              colors.push(attributes.colors);\n\t\n\t              if (_properties) {\n\t                properties.push(_utilBuffer2['default'].stringToUint8Array(JSON.stringify(polygon.properties)));\n\t              }\n\t            };\n\t          };\n\t\n\t          var mergedAttributes = {\n\t            positions: _utilBuffer2['default'].mergeFloat32Arrays(positions),\n\t            normals: _utilBuffer2['default'].mergeFloat32Arrays(normals),\n\t            colors: _utilBuffer2['default'].mergeFloat32Arrays(colors)\n\t          };\n\t\n\t          transferrables.push(mergedAttributes.positions[0].buffer);\n\t          transferrables.push(mergedAttributes.positions[1].buffer);\n\t\n\t          transferrables.push(mergedAttributes.normals[0].buffer);\n\t          transferrables.push(mergedAttributes.normals[1].buffer);\n\t\n\t          transferrables.push(mergedAttributes.colors[0].buffer);\n\t          transferrables.push(mergedAttributes.colors[1].buffer);\n\t\n\t          var mergedProperties;\n\t          if (_properties) {\n\t            mergedProperties = _utilBuffer2['default'].mergeUint8Arrays(properties);\n\t\n\t            transferrables.push(mergedProperties[0].buffer);\n\t            transferrables.push(mergedProperties[1].buffer);\n\t          }\n\t\n\t          var output = {\n\t            attributes: mergedAttributes,\n\t            flats: flats\n\t          };\n\t\n\t          if (_properties) {\n\t            output.properties = mergedProperties;\n\t          }\n\t\n\t          // TODO: Also return GeoJSON features that can be mapped to objects on\n\t          // the main thread. Allow user to provide filter / toggles to only return\n\t          // properties from the GeoJSON that they need (eg. don't return geometry,\n\t          // or don't return properties.height)\n\t          resolve({\n\t            data: output,\n\t            transferrables: transferrables\n\t          });\n\t        })['catch'](reject);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'ProcessGeoJSON',\n\t    value: function ProcessGeoJSON(geojson, headers) {\n\t      if (typeof geojson === 'string') {\n\t        return GeoJSONWorkerLayer.RequestGeoJSON(geojson, headers);\n\t      } else {\n\t        return Promise.resolve(JSON.parse(_utilBuffer2['default'].uint8ArrayToString(geojson)));\n\t      }\n\t    }\n\t  }, {\n\t    key: 'RequestGeoJSON',\n\t    value: function RequestGeoJSON(path, headers) {\n\t      return (0, _reqwest2['default'])({\n\t        url: path,\n\t        type: 'json',\n\t        crossOrigin: true,\n\t        headers: headers\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return GeoJSONWorkerLayer;\n\t})(_Layer3['default']);\n\t\n\texports['default'] = GeoJSONWorkerLayer;\n\t\n\tvar noNew = function noNew(geojson, options) {\n\t  return new GeoJSONWorkerLayer(geojson, options);\n\t};\n\t\n\texports.geoJSONWorkerLayer = noNew;\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar Stringify = (function () {\n\t  var functionToString = function functionToString(f) {\n\t    return f.toString();\n\t  };\n\t\n\t  // Based on https://github.com/tangrams/tangram/blob/2a31893c814cf15d5077f87ffa10af20160716b9/src/utils/utils.js#L245\n\t  var stringToFunction = function stringToFunction(str) {\n\t    if (typeof str === 'string' && str.match(/^\\s*function\\s*\\w*\\s*\\([\\s\\S]*\\)\\s*\\{[\\s\\S]*\\}/m) != null) {\n\t      var f;\n\t\n\t      try {\n\t        eval('f = ' + str);\n\t        return f;\n\t      } catch (err) {\n\t        return str;\n\t      }\n\t    }\n\t  };\n\t\n\t  return {\n\t    functionToString: functionToString,\n\t    stringToFunction: stringToFunction\n\t  };\n\t})();\n\t\n\texports['default'] = Stringify;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _GeoJSONTileLayer2 = __webpack_require__(71);\n\t\n\tvar _GeoJSONTileLayer3 = _interopRequireDefault(_GeoJSONTileLayer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar TopoJSONTileLayer = (function (_GeoJSONTileLayer) {\n\t  _inherits(TopoJSONTileLayer, _GeoJSONTileLayer);\n\t\n\t  function TopoJSONTileLayer(path, options) {\n\t    _classCallCheck(this, TopoJSONTileLayer);\n\t\n\t    var defaults = {\n\t      topojson: true\n\t    };\n\t\n\t    options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(TopoJSONTileLayer.prototype), 'constructor', this).call(this, path, options);\n\t  }\n\t\n\t  return TopoJSONTileLayer;\n\t})(_GeoJSONTileLayer3['default']);\n\t\n\texports['default'] = TopoJSONTileLayer;\n\t\n\tvar noNew = function noNew(path, options) {\n\t  return new TopoJSONTileLayer(path, options);\n\t};\n\t\n\texports.topoJSONTileLayer = noNew;\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _GeoJSONLayer2 = __webpack_require__(73);\n\t\n\tvar _GeoJSONLayer3 = _interopRequireDefault(_GeoJSONLayer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar TopoJSONLayer = (function (_GeoJSONLayer) {\n\t  _inherits(TopoJSONLayer, _GeoJSONLayer);\n\t\n\t  function TopoJSONLayer(topojson, options) {\n\t    _classCallCheck(this, TopoJSONLayer);\n\t\n\t    var defaults = {\n\t      topojson: true\n\t    };\n\t\n\t    options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(TopoJSONLayer.prototype), 'constructor', this).call(this, topojson, options);\n\t  }\n\t\n\t  return TopoJSONLayer;\n\t})(_GeoJSONLayer3['default']);\n\t\n\texports['default'] = TopoJSONLayer;\n\t\n\tvar noNew = function noNew(topojson, options) {\n\t  return new TopoJSONLayer(topojson, options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.topoJSONLayer = noNew;\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _GeoJSONWorkerLayer2 = __webpack_require__(91);\n\t\n\tvar _GeoJSONWorkerLayer3 = _interopRequireDefault(_GeoJSONWorkerLayer2);\n\t\n\tvar _lodashAssign = __webpack_require__(3);\n\t\n\tvar _lodashAssign2 = _interopRequireDefault(_lodashAssign);\n\t\n\tvar TopoJSONWorkerLayer = (function (_GeoJSONWorkerLayer) {\n\t  _inherits(TopoJSONWorkerLayer, _GeoJSONWorkerLayer);\n\t\n\t  function TopoJSONWorkerLayer(topojson, options) {\n\t    _classCallCheck(this, TopoJSONWorkerLayer);\n\t\n\t    var defaults = {\n\t      topojson: true\n\t    };\n\t\n\t    options = (0, _lodashAssign2['default'])({}, defaults, options);\n\t\n\t    _get(Object.getPrototypeOf(TopoJSONWorkerLayer.prototype), 'constructor', this).call(this, topojson, options);\n\t  }\n\t\n\t  return TopoJSONWorkerLayer;\n\t})(_GeoJSONWorkerLayer3['default']);\n\t\n\texports['default'] = TopoJSONWorkerLayer;\n\t\n\tvar noNew = function noNew(topojson, options) {\n\t  return new TopoJSONWorkerLayer(topojson, options);\n\t};\n\t\n\t// Initialise without requiring new keyword\n\texports.topoJSONWorkerLayer = noNew;\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\t// TODO: A lot of these utils don't need to be in separate, tiny files\n\t\n\tvar _wrapNum = __webpack_require__(97);\n\t\n\tvar _wrapNum2 = _interopRequireDefault(_wrapNum);\n\t\n\tvar _extrudePolygon = __webpack_require__(81);\n\t\n\tvar _extrudePolygon2 = _interopRequireDefault(_extrudePolygon);\n\t\n\tvar _GeoJSON = __webpack_require__(76);\n\t\n\tvar _GeoJSON2 = _interopRequireDefault(_GeoJSON);\n\t\n\tvar _Buffer = __webpack_require__(82);\n\t\n\tvar _Buffer2 = _interopRequireDefault(_Buffer);\n\t\n\tvar _Worker = __webpack_require__(44);\n\t\n\tvar _Worker2 = _interopRequireDefault(_Worker);\n\t\n\tvar _Stringify = __webpack_require__(92);\n\t\n\tvar _Stringify2 = _interopRequireDefault(_Stringify);\n\t\n\tvar Util = {};\n\t\n\tUtil.wrapNum = _wrapNum2['default'];\n\tUtil.extrudePolygon = _extrudePolygon2['default'];\n\tUtil.GeoJSON = _GeoJSON2['default'];\n\tUtil.Buffer = _Buffer2['default'];\n\tUtil.Worker = _Worker2['default'];\n\tUtil.Stringify = _Stringify2['default'];\n\t\n\texports['default'] = Util;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports) {\n\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/*\r\n\t * Wrap the given number to lie within a certain range (eg. longitude)\r\n\t *\r\n\t * Based on:\r\n\t * https://github.com/Leaflet/Leaflet/blob/master/src/core/Util.js\r\n\t */\n\t\n\tvar wrapNum = function wrapNum(x, range, includeMax) {\n\t  var max = range[1];\n\t  var min = range[0];\n\t  var d = max - min;\n\t  return x === max && includeMax ? x : ((x - min) % d + d) % d + min;\n\t};\n\t\n\texports[\"default\"] = wrapNum;\n\tmodule.exports = exports[\"default\"];\n\n/***/ })\n/******/ ])\n});\n;"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 592d1894b768a8f48264","import World, {world} from './World';\r\nimport Controls from './controls/index';\r\n\r\nimport Geo from './geo/Geo.js';\r\n\r\nimport Layer, {layer} from './layer/Layer';\r\nimport LayerGroup, {layerGroup} from './layer/LayerGroup';\r\nimport EnvironmentLayer, {environmentLayer} from './layer/environment/EnvironmentLayer';\r\nimport ImageTileLayer, {imageTileLayer} from './layer/tile/ImageTileLayer';\r\nimport GeoJSONTileLayer, {geoJSONTileLayer} from './layer/tile/GeoJSONTileLayer';\r\nimport TopoJSONTileLayer, {topoJSONTileLayer} from './layer/tile/TopoJSONTileLayer';\r\nimport GeoJSONTile, {geoJSONTile} from './layer/tile/GeoJSONTile';\r\nimport GeoJSONLayer, {geoJSONLayer} from './layer/GeoJSONLayer';\r\nimport TopoJSONLayer, {topoJSONLayer} from './layer/TopoJSONLayer';\r\nimport GeoJSONWorkerLayer, {geoJSONWorkerLayer} from './layer/GeoJSONWorkerLayer';\r\nimport TopoJSONWorkerLayer, {topoJSONWorkerLayer} from './layer/TopoJSONWorkerLayer';\r\nimport PolygonLayer, {polygonLayer} from './layer/geometry/PolygonLayer';\r\nimport PolylineLayer, {polylineLayer} from './layer/geometry/PolylineLayer';\r\nimport PointLayer, {pointLayer} from './layer/geometry/PointLayer';\r\n\r\nimport Point, {point} from './geo/Point';\r\nimport LatLon, {latLon} from './geo/LatLon';\r\n\r\nimport PickingMaterial from './engine/PickingMaterial';\r\n\r\nimport Util from './util/index';\r\n\r\nconst VIZI = {\r\n  version: '0.3',\r\n\r\n  // Public API\r\n  World: World,\r\n  world: world,\r\n  Controls: Controls,\r\n  Geo: Geo,\r\n  Layer: Layer,\r\n  layer: layer,\r\n  EnvironmentLayer: EnvironmentLayer,\r\n  environmentLayer: environmentLayer,\r\n  ImageTileLayer: ImageTileLayer,\r\n  imageTileLayer: imageTileLayer,\r\n  GeoJSONTileLayer: GeoJSONTileLayer,\r\n  geoJSONTileLayer: geoJSONTileLayer,\r\n  GeoJSONTile: GeoJSONTile,\r\n  geoJSONTile: geoJSONTile,\r\n  TopoJSONTileLayer: TopoJSONTileLayer,\r\n  topoJSONTileLayer: topoJSONTileLayer,\r\n  GeoJSONLayer: GeoJSONLayer,\r\n  geoJSONLayer: geoJSONLayer,\r\n  TopoJSONLayer: TopoJSONLayer,\r\n  topoJSONLayer: topoJSONLayer,\r\n  GeoJSONWorkerLayer: GeoJSONWorkerLayer,\r\n  geoJSONWorkerLayer: geoJSONWorkerLayer,\r\n  TopoJSONWorkerLayer: TopoJSONWorkerLayer,\r\n  topoJSONWorkerLayer: topoJSONWorkerLayer,\r\n  PolygonLayer: PolygonLayer,\r\n  polygonLayer: polygonLayer,\r\n  PolylineLayer: PolylineLayer,\r\n  polylineLayer: polylineLayer,\r\n  PointLayer: PointLayer,\r\n  pointLayer: pointLayer,\r\n  Point: Point,\r\n  point: point,\r\n  LatLon: LatLon,\r\n  latLon: latLon,\r\n  PickingMaterial: PickingMaterial,\r\n  Util: Util\r\n};\r\n\r\nexport default VIZI;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vizicities.js","import EventEmitter from 'eventemitter3';\r\nimport extend from 'lodash.assign';\r\nimport Geo from './geo/Geo';\r\nimport {point as Point} from './geo/Point';\r\nimport {latLon as LatLon} from './geo/LatLon';\r\nimport Engine from './engine/Engine';\r\nimport EnvironmentLayer from './layer/environment/EnvironmentLayer';\r\nimport Worker from './util/Worker';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// Pretty much any event someone using ViziCities would need will be emitted or\r\n// proxied by World (eg. render events, etc)\r\n\r\nclass World extends EventEmitter {\r\n  constructor(domId, options) {\r\n    super();\r\n\r\n    var defaults = {\r\n      skybox: false,\r\n      postProcessing: false\r\n    };\r\n\r\n    this.options = extend({}, defaults, options);\r\n\r\n    this._layers = [];\r\n    this._controls = [];\r\n\r\n    this._initContainer(domId);\r\n    this._initAttribution();\r\n    this._initEngine();\r\n\r\n    this._initEnvironment().then(() => {\r\n      this._initEvents();\r\n\r\n      this._pause = false;\r\n\r\n      // Kick off the update and render loop\r\n      this._update();\r\n    });\r\n  }\r\n\r\n  createWorkers(maxWorkers, workerScript) {\r\n    return Worker.createWorkers(maxWorkers, workerScript);\r\n  }\r\n\r\n  _initContainer(domId) {\r\n    this._container = document.getElementById(domId);\r\n  }\r\n\r\n  _initAttribution() {\r\n    var message = '<a href=\"http://vizicities.com\" target=\"_blank\">ViziCities</a> | <a id=\"show-attr\" href=\"#\">Attribution</a>';\r\n\r\n    var element = document.createElement('div');\r\n    element.classList.add('vizicities-attribution');\r\n\r\n    var additionalElem = document.createElement('div');\r\n    additionalElem.id = 'attribution-container';\r\n\r\n    element.innerHTML = message;\r\n    element.appendChild(additionalElem);\r\n\r\n    this._container.appendChild(element);\r\n\r\n    document.getElementById('show-attr').addEventListener('click', function(e) {\r\n      e.currentTarget.parentNode.classList.toggle('is-visible');\r\n    });\r\n  }\r\n\r\n  _initEngine() {\r\n    this._engine = new Engine(this._container, this);\r\n\r\n    // Engine events\r\n    //\r\n    // Consider proxying these through events on World for public access\r\n    // this._engine.on('preRender', () => {});\r\n    // this._engine.on('postRender', () => {});\r\n  }\r\n\r\n  _initEnvironment() {\r\n    // Not sure if I want to keep this as a private API\r\n    //\r\n    // Makes sense to allow others to customise their environment so perhaps\r\n    // add some method of disable / overriding the environment settings\r\n    this._environment = new EnvironmentLayer({\r\n      skybox: this.options.skybox\r\n    });\r\n\r\n    return this._environment.addTo(this);\r\n  }\r\n\r\n  _initEvents() {\r\n    this.on('controlsMoveEnd', this._onControlsMoveEnd);\r\n  }\r\n\r\n  _onControlsMoveEnd(point) {\r\n    var _point = Point(point.x, point.z);\r\n    this._resetView(this.pointToLatLon(_point), _point);\r\n  }\r\n\r\n  // Reset world view\r\n  _resetView(latlon, point) {\r\n    this.emit('preResetView');\r\n\r\n    this._moveStart();\r\n    this._move(latlon, point);\r\n    this._moveEnd();\r\n\r\n    this.emit('postResetView');\r\n  }\r\n\r\n  _moveStart() {\r\n    this.emit('moveStart');\r\n  }\r\n\r\n  _move(latlon, point) {\r\n    this._lastPosition = latlon;\r\n    this.emit('move', latlon, point);\r\n  }\r\n  _moveEnd() {\r\n    this.emit('moveEnd');\r\n  }\r\n\r\n  _update() {\r\n    if (this._pause) {\r\n      return;\r\n    }\r\n\r\n    var delta = this._engine.clock.getDelta();\r\n\r\n    // Once _update is called it will run forever, for now\r\n    window.requestAnimationFrame(this._update.bind(this));\r\n\r\n    // Update controls\r\n    // this._controls.forEach(controls => {\r\n    //   controls.update(delta);\r\n    // });\r\n\r\n    this.emit('preUpdate', delta);\r\n    this._engine.update(delta);\r\n    this.emit('postUpdate', delta);\r\n  }\r\n\r\n  _addAttribution(id, message) {\r\n    var container = document.getElementById('attribution-container');\r\n\r\n    var span = document.createElement('p');\r\n    span.dataset.layer = id;\r\n    span.innerHTML = message;\r\n\r\n    container.appendChild(span);\r\n  }\r\n\r\n  _removeAttribution(id) {\r\n    var elem = document.querySelectorAll('#attribution-container [data-layer=\"' + id + '\"]')[0];\r\n    if (elem) {\r\n      elem.remove();\r\n    }\r\n  }\r\n\r\n  // Set world view\r\n  setView(latlon) {\r\n    // Store initial geographic coordinate for the [0,0,0] world position\r\n    //\r\n    // The origin point doesn't move in three.js / 3D space so only set it once\r\n    // here instead of every time _resetView is called\r\n    //\r\n    // If it was updated every time then coorindates would shift over time and\r\n    // would be out of place / context with previously-placed points (0,0 would\r\n    // refer to a different point each time)\r\n    this._originLatlon = latlon;\r\n    this._originPoint = this.project(latlon);\r\n\r\n    this._resetView(latlon);\r\n    return this;\r\n  }\r\n\r\n  // Return world geographic position\r\n  getPosition() {\r\n    return this._lastPosition;\r\n  }\r\n\r\n  // Transform geographic coordinate to world point\r\n  //\r\n  // This doesn't take into account the origin offset\r\n  //\r\n  // For example, this takes a geographic coordinate and returns a point\r\n  // relative to the origin point of the projection (not the world)\r\n  project(latlon) {\r\n    return Geo.latLonToPoint(LatLon(latlon));\r\n  }\r\n\r\n  // Transform world point to geographic coordinate\r\n  //\r\n  // This doesn't take into account the origin offset\r\n  //\r\n  // For example, this takes a point relative to the origin point of the\r\n  // projection (not the world) and returns a geographic coordinate\r\n  unproject(point) {\r\n    return Geo.pointToLatLon(Point(point));\r\n  }\r\n\r\n  // Takes into account the origin offset\r\n  //\r\n  // For example, this takes a geographic coordinate and returns a point\r\n  // relative to the three.js / 3D origin (0,0)\r\n  latLonToPoint(latlon) {\r\n    var projectedPoint = this.project(LatLon(latlon));\r\n    return projectedPoint._subtract(this._originPoint);\r\n  }\r\n\r\n  // Takes into account the origin offset\r\n  //\r\n  // For example, this takes a point relative to the three.js / 3D origin (0,0)\r\n  // and returns the exact geographic coordinate at that point\r\n  pointToLatLon(point) {\r\n    var projectedPoint = Point(point).add(this._originPoint);\r\n    return this.unproject(projectedPoint);\r\n  }\r\n\r\n  // Return pointscale for a given geographic coordinate\r\n  pointScale(latlon, accurate) {\r\n    return Geo.pointScale(latlon, accurate);\r\n  }\r\n\r\n  // Convert from real meters to world units\r\n  //\r\n  // TODO: Would be nice not to have to pass in a pointscale here\r\n  metresToWorld(metres, pointScale, zoom) {\r\n    return Geo.metresToWorld(metres, pointScale, zoom);\r\n  }\r\n\r\n  // Convert from real meters to world units\r\n  //\r\n  // TODO: Would be nice not to have to pass in a pointscale here\r\n  worldToMetres(worldUnits, pointScale, zoom) {\r\n    return Geo.worldToMetres(worldUnits, pointScale, zoom);\r\n  }\r\n\r\n  // Unsure if it's a good idea to expose this here for components like\r\n  // GridLayer to use (eg. to keep track of a frustum)\r\n  getCamera() {\r\n    return this._engine._camera;\r\n  }\r\n\r\n  addLayer(layer) {\r\n    // Is is right to assume that there will always be some other layer\r\n    // managing layers with output set to false?\r\n    this._layers.push(layer);\r\n\r\n    if (layer.isOutput() && layer.isOutputToScene()) {\r\n      // Could move this into Layer but it'll do here for now\r\n      this._engine._scene.add(layer._object3D);\r\n      this._engine._domScene3D.add(layer._domObject3D);\r\n      this._engine._domScene2D.add(layer._domObject2D);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      layer._addToWorld(this).then(() => {\r\n        if (layer._options.attribution) {\r\n          this._addAttribution(layer._options.id, layer._options.attribution);\r\n        }\r\n\r\n        // TODO: Consider moving this so it doesn't fire for layers that are\r\n        // actually managed by a parent layer (eg. tiles)\r\n        this.emit('layerAdded', layer);\r\n\r\n        resolve(this);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // Remove layer from world and scene but don't destroy it entirely\r\n  removeLayer(layer) {\r\n    var layerIndex = this._layers.indexOf(layer);\r\n\r\n    if (layerIndex > -1) {\r\n      // Remove from this._layers\r\n      this._layers.splice(layerIndex, 1);\r\n    };\r\n\r\n    if (layer._options.attribution) {\r\n      this._removeAttribution(layer._options.id);\r\n    }\r\n\r\n    if (layer.isOutput() && layer.isOutputToScene()) {\r\n      this._engine._scene.remove(layer._object3D);\r\n      this._engine._domScene3D.remove(layer._domObject3D);\r\n      this._engine._domScene2D.remove(layer._domObject2D);\r\n    }\r\n\r\n    this.emit('layerRemoved');\r\n\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  addControls(controls) {\r\n    controls._addToWorld(this);\r\n\r\n    this._controls.push(controls);\r\n\r\n    this.emit('controlsAdded', controls);\r\n\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  // Remove controls from world but don't destroy them entirely\r\n  removeControls(controls) {\r\n    var controlsIndex = this._controls.indexOf(controlsIndex);\r\n\r\n    if (controlsIndex > -1) {\r\n      this._controls.splice(controlsIndex, 1);\r\n    };\r\n\r\n    this.emit('controlsRemoved', controls);\r\n\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  stop() {\r\n    this._pause = true;\r\n  }\r\n\r\n  start() {\r\n    this._pause = false;\r\n    this._update();\r\n  }\r\n\r\n  // Destroys the world(!) and removes it from the scene and memory\r\n  //\r\n  // TODO: World out why so much three.js stuff is left in the heap after this\r\n  destroy() {\r\n    this.stop();\r\n\r\n    // Remove listeners\r\n    this.off('controlsMoveEnd', this._onControlsMoveEnd);\r\n\r\n    var i;\r\n\r\n    // Remove all controls\r\n    var controls;\r\n    for (i = this._controls.length - 1; i >= 0; i--) {\r\n      controls = this._controls[0];\r\n      this.removeControls(controls);\r\n      controls.destroy();\r\n    };\r\n\r\n    // Remove all layers\r\n    var layer;\r\n    for (i = this._layers.length - 1; i >= 0; i--) {\r\n      layer = this._layers[0];\r\n      this.removeLayer(layer);\r\n      layer.destroy();\r\n    };\r\n\r\n    // Environment layer is removed with the other layers\r\n    this._environment = null;\r\n\r\n    this._engine.destroy();\r\n    this._engine = null;\r\n\r\n    // Clean the container / remove the canvas\r\n    while (this._container.firstChild) {\r\n      this._container.removeChild(this._container.firstChild);\r\n    }\r\n\r\n    this._container = null;\r\n  }\r\n}\r\n\r\nexport default World;\r\n\r\nvar noNew = function(domId, options) {\r\n  return new World(domId, options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as world};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/World.js","'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n//\n// We store our EE objects in a plain object whose properties are event names.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// `~` to make sure that the built-in object properties are not overridden or\n// used as an attack vector.\n// We also assume that `Object.create(null)` is available when the event name\n// is an ES6 Symbol.\n//\nvar prefix = typeof Object.create !== 'function' ? '~' : false;\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} [once=false] Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Hold the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var events = this._events\n    , names = []\n    , name;\n\n  if (!events) return names;\n\n  for (name in events) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @param {Boolean} exists We only need to know if there are listeners.\n * @returns {Array|Boolean}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event, exists) {\n  var evt = prefix ? prefix + event : event\n    , available = this._events && this._events[evt];\n\n  if (exists) return !!available;\n  if (!available) return [];\n  if (available.fn) return [available.fn];\n\n  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {\n    ee[i] = available[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} [context=this] The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} [context=this] The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true)\n    , evt = prefix ? prefix + event : event;\n\n  if (!this._events) this._events = prefix ? {} : Object.create(null);\n  if (!this._events[evt]) this._events[evt] = listener;\n  else {\n    if (!this._events[evt].fn) this._events[evt].push(listener);\n    else this._events[evt] = [\n      this._events[evt], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Mixed} context Only remove listeners matching this context.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events || !this._events[evt]) return this;\n\n  var listeners = this._events[evt]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn) {\n      if (\n           listeners.fn !== fn\n        || (once && !listeners.once)\n        || (context && listeners.context !== context)\n      ) {\n        events.push(listeners);\n      }\n    } else {\n      for (var i = 0, length = listeners.length; i < length; i++) {\n        if (\n             listeners[i].fn !== fn\n          || (once && !listeners[i].once)\n          || (context && listeners[i].context !== context)\n        ) {\n          events.push(listeners[i]);\n        }\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[evt] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[evt];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[prefix ? prefix + event : event];\n  else this._events = prefix ? {} : Object.create(null);\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/eventemitter3/index.js\n// module id = 2\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = assign;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.assign/index.js\n// module id = 3\n// module chunks = 0","import {latLon as LatLon} from './LatLon';\r\nimport {point as Point} from './Point';\r\n\r\nvar Geo = {};\r\n\r\n// Radius / WGS84 semi-major axis\r\nGeo.R = 6378137;\r\nGeo.MAX_LATITUDE = 85.0511287798;\r\n\r\n// WGS84 eccentricity\r\nGeo.ECC = 0.081819191;\r\nGeo.ECC2 = 0.081819191 * 0.081819191;\r\n\r\n// Multiplier is used to expand or compress the WebGL coordinate space relative\r\n// to the EPSG:3857 / Pseudo-Mercator coordinate space (metres).\r\n//\r\n// This is useful for keeping coordinate calculations to smaller numbers and\r\n// helps increase accuracy of things like the z-buffer, object intersection,\r\n// and camera near and far clipping.\r\n//\r\n// A multiplier of 1 would mean a 1:1 mapping between WebGL and EPSG:3857\r\n// coordinates (1 EPSG:3857 metre === 1 WebGL unit)\r\n//\r\n// A multiplier of 0.1 would mean a 1:0.1 mapping between WebGL and EPSG:3857\r\n// coordinates (1 EPSG:3857 metre === 0.1 WebGL units)\r\nGeo.multiplier = 0.1;\r\n\r\nGeo.project = function(latlon) {\r\n  var d = Math.PI / 180;\r\n  var max = Geo.MAX_LATITUDE;\r\n  var lat = Math.max(Math.min(max, latlon.lat), -max);\r\n  var sin = Math.sin(lat * d);\r\n\r\n  return Point(\r\n    Geo.R * latlon.lon * d,\r\n    Geo.R * Math.log((1 + sin) / (1 - sin)) / 2\r\n  );\r\n},\r\n\r\nGeo.unproject = function(point) {\r\n  var d = 180 / Math.PI;\r\n\r\n  return LatLon(\r\n    (2 * Math.atan(Math.exp(point.y / Geo.R)) - (Math.PI / 2)) * d,\r\n    point.x * d / Geo.R\r\n  );\r\n};\r\n\r\n// Converts geo coords to pixel / WebGL ones\r\n// This just reverses the Y axis to match WebGL\r\nGeo.latLonToPoint = function(latlon) {\r\n  var projected = Geo.project(latlon);\r\n  projected.y *= -1;\r\n\r\n  projected.x *= Geo.multiplier;\r\n  projected.y *= Geo.multiplier;\r\n\r\n  return projected;\r\n};\r\n\r\n// Converts pixel / WebGL coords to geo coords\r\n// This just reverses the Y axis to match WebGL\r\nGeo.pointToLatLon = function(point) {\r\n  var _point = Point(point.x, point.y * -1);\r\n\r\n  _point.x /= Geo.multiplier;\r\n  _point.y /= Geo.multiplier;\r\n\r\n  return Geo.unproject(_point);\r\n};\r\n\r\n// Scale factor for converting between real metres and projected metres\r\n//\r\n// projectedMetres = realMetres * pointScale\r\n// realMetres = projectedMetres / pointScale\r\n//\r\n// Accurate scale factor uses proper Web Mercator scaling\r\n// See pg.9: http://www.hydrometronics.com/downloads/Web%20Mercator%20-%20Non-Conformal,%20Non-Mercator%20(notes).pdf\r\n// See: http://jsfiddle.net/robhawkes/yws924cf/\r\nGeo.pointScale = function(latlon, accurate) {\r\n  var rad = Math.PI / 180;\r\n\r\n  var k;\r\n\r\n  if (!accurate) {\r\n    k = 1 / Math.cos(latlon.lat * rad);\r\n\r\n    // [scaleX, scaleY]\r\n    return [k, k];\r\n  } else {\r\n    var lat = latlon.lat * rad;\r\n    var lon = latlon.lon * rad;\r\n\r\n    var a = Geo.R;\r\n\r\n    var sinLat = Math.sin(lat);\r\n    var sinLat2 = sinLat * sinLat;\r\n\r\n    var cosLat = Math.cos(lat);\r\n\r\n    // Radius meridian\r\n    var p = a * (1 - Geo.ECC2) / Math.pow(1 - Geo.ECC2 * sinLat2, 3 / 2);\r\n\r\n    // Radius prime meridian\r\n    var v = a / Math.sqrt(1 - Geo.ECC2 * sinLat2);\r\n\r\n    // Scale N/S\r\n    var h = (a / p) / cosLat;\r\n\r\n    // Scale E/W\r\n    k = (a / v) / cosLat;\r\n\r\n    // [scaleX, scaleY]\r\n    return [k, h];\r\n  }\r\n};\r\n\r\n// Convert real metres to projected units\r\n//\r\n// Latitude scale is chosen because it fluctuates more than longitude\r\nGeo.metresToProjected = function(metres, pointScale) {\r\n  return metres * pointScale[1];\r\n};\r\n\r\n// Convert projected units to real metres\r\n//\r\n// Latitude scale is chosen because it fluctuates more than longitude\r\nGeo.projectedToMetres = function(projectedUnits, pointScale) {\r\n  return projectedUnits / pointScale[1];\r\n};\r\n\r\n// Convert real metres to a value in world (WebGL) units\r\nGeo.metresToWorld = function(metres, pointScale) {\r\n  // Transform metres to projected metres using the latitude point scale\r\n  //\r\n  // Latitude scale is chosen because it fluctuates more than longitude\r\n  var projectedMetres = Geo.metresToProjected(metres, pointScale);\r\n  return projectedMetres * Geo.multiplier;\r\n};\r\n\r\n// Convert world (WebGL) units to a value in real metres\r\nGeo.worldToMetres = function(worldUnits, pointScale) {\r\n  var projectedUnits = worldUnits;\r\n  var realMetres = Geo.projectedToMetres(projectedUnits, pointScale);\r\n\r\n  return realMetres / Geo.multiplier;\r\n};\r\n\r\n// Returns the world width in pixels for a given zoom, assuming tile dimensions\r\n// of 256x256 pixels\r\nGeo.scale = function(zoom) {\r\n  return 256 * Math.pow(2, zoom);\r\n};\r\n\r\n// Returns zoom level for a given scale value\r\n// This only works with a scale value that is based on map pixel width\r\nGeo.zoom = function(scale) {\r\n  return Math.log(scale / 256) / Math.LN2;\r\n};\r\n\r\n// Distance between two geographical points using spherical law of cosines\r\n// approximation or Haversine\r\n//\r\n// See: http://www.movable-type.co.uk/scripts/latlong.html\r\nGeo.distance = function(latlon1, latlon2, accurate) {\r\n  var rad = Math.PI / 180;\r\n\r\n  var lat1;\r\n  var lat2;\r\n\r\n  var a;\r\n\r\n  if (!accurate) {\r\n    lat1 = latlon1.lat * rad;\r\n    lat2 = latlon2.lat * rad;\r\n\r\n    a = Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos((latlon2.lon - latlon1.lon) * rad);\r\n\r\n    return Geo.R * Math.acos(Math.min(a, 1));\r\n  } else {\r\n    lat1 = latlon1.lat * rad;\r\n    lat2 = latlon2.lat * rad;\r\n\r\n    var lon1 = latlon1.lon * rad;\r\n    var lon2 = latlon2.lon * rad;\r\n\r\n    var deltaLat = lat2 - lat1;\r\n    var deltaLon = lon2 - lon1;\r\n\r\n    var halfDeltaLat = deltaLat / 2;\r\n    var halfDeltaLon = deltaLon / 2;\r\n\r\n    a = Math.sin(halfDeltaLat) * Math.sin(halfDeltaLat) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(halfDeltaLon) * Math.sin(halfDeltaLon);\r\n\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    return Geo.R * c;\r\n  }\r\n};\r\n\r\nGeo.bounds = (function() {\r\n  var d = Geo.R * Math.PI * Geo.multiplier;\r\n  return [[-d, -d], [d, d]];\r\n})();\r\n\r\nexport default Geo;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geo/Geo.js","/*\r\n * LatLon is a helper class for ensuring consistent geographic coordinates.\r\n *\r\n * Based on:\r\n * https://github.com/Leaflet/Leaflet/blob/master/src/geo/LatLng.js\r\n */\r\n\r\nclass LatLon {\r\n  constructor(lat, lon, alt) {\r\n    if (isNaN(lat) || isNaN(lon)) {\r\n      throw new Error('Invalid LatLon object: (' + lat + ', ' + lon + ')');\r\n    }\r\n\r\n    this.lat = +lat;\r\n    this.lon = +lon;\r\n\r\n    if (alt !== undefined) {\r\n      this.alt = +alt;\r\n    }\r\n  }\r\n\r\n  clone() {\r\n    return new LatLon(this.lat, this.lon, this.alt);\r\n  }\r\n}\r\n\r\nexport default LatLon;\r\n\r\n// Accepts (LatLon), ([lat, lon, alt]), ([lat, lon]) and (lat, lon, alt)\r\n// Also converts between lng and lon\r\nvar noNew = function(a, b, c) {\r\n  if (a instanceof LatLon) {\r\n    return a;\r\n  }\r\n  if (Array.isArray(a) && typeof a[0] !== 'object') {\r\n    if (a.length === 3) {\r\n      return new LatLon(a[0], a[1], a[2]);\r\n    }\r\n    if (a.length === 2) {\r\n      return new LatLon(a[0], a[1]);\r\n    }\r\n    return null;\r\n  }\r\n  if (a === undefined || a === null) {\r\n    return a;\r\n  }\r\n  if (typeof a === 'object' && 'lat' in a) {\r\n    return new LatLon(a.lat, 'lng' in a ? a.lng : a.lon, a.alt);\r\n  }\r\n  if (b === undefined) {\r\n    return null;\r\n  }\r\n  return new LatLon(a, b, c);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as latLon};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geo/LatLon.js","/*\r\n * Point is a helper class for ensuring consistent world positions.\r\n *\r\n * Based on:\r\n * https://github.com/Leaflet/Leaflet/blob/master/src/geo/Point.js\r\n */\r\n\r\nclass Point {\r\n  constructor(x, y, round) {\r\n    this.x = (round ? Math.round(x) : x);\r\n    this.y = (round ? Math.round(y) : y);\r\n  }\r\n\r\n  clone() {\r\n    return new Point(this.x, this.y);\r\n  }\r\n\r\n  // Non-destructive\r\n  add(point) {\r\n    return this.clone()._add(_point(point));\r\n  }\r\n\r\n  // Destructive\r\n  _add(point) {\r\n    this.x += point.x;\r\n    this.y += point.y;\r\n    return this;\r\n  }\r\n\r\n  // Non-destructive\r\n  subtract(point) {\r\n    return this.clone()._subtract(_point(point));\r\n  }\r\n\r\n  // Destructive\r\n  _subtract(point) {\r\n    this.x -= point.x;\r\n    this.y -= point.y;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Point;\r\n\r\n// Accepts (point), ([x, y]) and (x, y, round)\r\nvar _point = function(x, y, round) {\r\n  if (x instanceof Point) {\r\n    return x;\r\n  }\r\n  if (Array.isArray(x)) {\r\n    return new Point(x[0], x[1]);\r\n  }\r\n  if (x === undefined || x === null) {\r\n    return x;\r\n  }\r\n  return new Point(x, y, round);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {_point as point};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/geo/Point.js","import EventEmitter from 'eventemitter3';\r\nimport THREE from 'three';\r\nimport Scene from './Scene';\r\nimport DOMScene3D from './DOMScene3D';\r\nimport DOMScene2D from './DOMScene2D';\r\nimport Renderer from './Renderer';\r\nimport DOMRenderer3D from './DOMRenderer3D';\r\nimport DOMRenderer2D from './DOMRenderer2D';\r\nimport Camera from './Camera';\r\nimport Picking from './Picking';\r\nimport EffectComposer from './EffectComposer';\r\nimport RenderPass from '../vendor/RenderPass';\r\nimport ShaderPass from '../vendor/ShaderPass';\r\nimport CopyShader from '../vendor/CopyShader';\r\nimport HorizontalTiltShiftShader from '../vendor/HorizontalTiltShiftShader';\r\nimport VerticalTiltShiftShader from '../vendor/VerticalTiltShiftShader';\r\nimport FXAAShader from '../vendor/FXAAShader';\r\n\r\nclass Engine extends EventEmitter {\r\n  constructor(container, world) {\r\n    console.log('Init Engine');\r\n\r\n    super();\r\n\r\n    this._world = world;\r\n\r\n    this._scene = Scene;\r\n    this._domScene3D = DOMScene3D;\r\n    this._domScene2D = DOMScene2D;\r\n\r\n    var antialias = (this._world.options.postProcessing) ? false : true;\r\n    this._renderer = Renderer(container, antialias);\r\n    this._domRenderer3D = DOMRenderer3D(container);\r\n    this._domRenderer2D = DOMRenderer2D(container);\r\n\r\n    this._camera = Camera(container);\r\n\r\n    this._container = container;\r\n\r\n    // TODO: Make this optional\r\n    this._picking = Picking(this._world, this._renderer, this._camera);\r\n\r\n    this.clock = new THREE.Clock();\r\n\r\n    this._frustum = new THREE.Frustum();\r\n\r\n    if (this._world.options.postProcessing) {\r\n      this._initPostProcessing();\r\n    }\r\n  }\r\n\r\n  // TODO: Set up composer to automatically resize on viewport change\r\n  // TODO: Update passes that rely on width / height on resize\r\n  // TODO: Merge default passes into a single shader / pass for performance\r\n  _initPostProcessing() {\r\n    var renderPass = new RenderPass(this._scene, this._camera);\r\n\r\n    // TODO: Look at using @mattdesl's optimised FXAA shader\r\n    // https://github.com/mattdesl/three-shader-fxaa\r\n    var fxaaPass = new ShaderPass(FXAAShader);\r\n\r\n    var hblurPass = new ShaderPass(HorizontalTiltShiftShader);\r\n    var vblurPass = new ShaderPass(VerticalTiltShiftShader);\r\n    var bluriness = 5;\r\n\r\n    hblurPass.uniforms.r.value = vblurPass.uniforms.r.value = 0.6;\r\n\r\n    var copyPass = new ShaderPass(CopyShader);\r\n    copyPass.renderToScreen = true;\r\n\r\n    this._composer = EffectComposer(this._renderer, this._container);\r\n\r\n    this._composer.addPass(renderPass);\r\n    this._composer.addPass(fxaaPass);\r\n    this._composer.addPass(hblurPass);\r\n    this._composer.addPass(vblurPass);\r\n    this._composer.addPass(copyPass);\r\n\r\n    var self = this;\r\n    var updatePostProcessingSize = function() {\r\n      var width = self._container.clientWidth;\r\n      var height = self._container.clientHeight;\r\n\r\n      // TODO: Re-enable this when perf issues can be solved\r\n      //\r\n      // Rendering double the resolution of the screen can be really slow\r\n      // var pixelRatio = window.devicePixelRatio;\r\n      var pixelRatio = 1;\r\n\r\n      fxaaPass.uniforms.resolution.value.set(1 / (width * pixelRatio), 1 / (height * pixelRatio));\r\n\r\n      hblurPass.uniforms.h.value = bluriness / (width * pixelRatio);\r\n      vblurPass.uniforms.v.value = bluriness / (height * pixelRatio);\r\n    };\r\n\r\n    updatePostProcessingSize();\r\n    window.addEventListener('resize', updatePostProcessingSize, false);\r\n  }\r\n\r\n  update(delta) {\r\n    this.emit('preRender');\r\n\r\n    if (this._world.options.postProcessing) {\r\n      this._composer.render(delta);\r\n    } else {\r\n      this._renderer.render(this._scene, this._camera);\r\n    }\r\n\r\n    // Render picking scene\r\n    // this._renderer.render(this._picking._pickingScene, this._camera);\r\n\r\n    // Render DOM scenes\r\n    this._domRenderer3D.render(this._domScene3D, this._camera);\r\n    this._domRenderer2D.render(this._domScene2D, this._camera);\r\n\r\n    this.emit('postRender');\r\n  }\r\n\r\n  destroy() {\r\n    // Remove any remaining objects from scene\r\n    var child;\r\n    for (var i = this._scene.children.length - 1; i >= 0; i--) {\r\n      child = this._scene.children[i];\r\n\r\n      if (!child) {\r\n        continue;\r\n      }\r\n\r\n      this._scene.remove(child);\r\n\r\n      if (child.geometry) {\r\n        // Dispose of mesh and materials\r\n        child.geometry.dispose();\r\n        child.geometry = null;\r\n      }\r\n\r\n      if (child.material) {\r\n        if (child.material.map) {\r\n          child.material.map.dispose();\r\n          child.material.map = null;\r\n        }\r\n\r\n        child.material.dispose();\r\n        child.material = null;\r\n      }\r\n    };\r\n\r\n    for (var i = this._domScene3D.children.length - 1; i >= 0; i--) {\r\n      child = this._domScene3D.children[i];\r\n\r\n      if (!child) {\r\n        continue;\r\n      }\r\n\r\n      this._domScene3D.remove(child);\r\n    };\r\n\r\n    for (var i = this._domScene2D.children.length - 1; i >= 0; i--) {\r\n      child = this._domScene2D.children[i];\r\n\r\n      if (!child) {\r\n        continue;\r\n      }\r\n\r\n      this._domScene2D.remove(child);\r\n    };\r\n\r\n    this._picking.destroy();\r\n    this._picking = null;\r\n\r\n    this._world = null;\r\n    this._scene = null;\r\n    this._domScene3D = null;\r\n    this._domScene2D = null;\r\n\r\n    this._composer = null;\r\n    this._renderer = null;\r\n\r\n    this._domRenderer3D = null;\r\n    this._domRenderer2D = null;\r\n    this._camera = null;\r\n    this._clock = null;\r\n    this._frustum = null;\r\n  }\r\n}\r\n\r\nexport default Engine;\r\n\r\n// // Initialise without requiring new keyword\r\n// export default function(container, world) {\r\n//   return new Engine(container, world);\r\n// };\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/Engine.js","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"THREE\"\n// module id = 8\n// module chunks = 0","import THREE from 'three';\r\n\r\n// This can be imported from anywhere and will still reference the same scene,\r\n// though there is a helper reference in Engine.scene\r\n\r\nexport default (function() {\r\n  var scene = new THREE.Scene();\r\n\r\n  // TODO: Re-enable when this works with the skybox\r\n  // scene.fog = new THREE.Fog(0xffffff, 1, 15000);\r\n  return scene;\r\n})();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/Scene.js","import THREE from 'three';\r\n\r\n// This can be imported from anywhere and will still reference the same scene,\r\n// though there is a helper reference in Engine.scene\r\n\r\nexport default (function() {\r\n  var scene = new THREE.Scene();\r\n  return scene;\r\n})();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/DOMScene3D.js","import THREE from 'three';\r\n\r\n// This can be imported from anywhere and will still reference the same scene,\r\n// though there is a helper reference in Engine.scene\r\n\r\nexport default (function() {\r\n  var scene = new THREE.Scene();\r\n  return scene;\r\n})();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/DOMScene2D.js","import THREE from 'three';\r\nimport Scene from './Scene';\r\n\r\n// This can only be accessed from Engine.renderer if you want to reference the\r\n// same scene in multiple places\r\n\r\nexport default function(container, antialias) {\r\n  var renderer = new THREE.WebGLRenderer({\r\n    antialias: antialias\r\n\r\n    // Enabling this removes a lot of z-index intersecting but it also removes\r\n    // shadows due to a bug in three.js\r\n    //\r\n    // See: https://github.com/mrdoob/three.js/issues/7815\r\n    // logarithmicDepthBuffer: true\r\n  });\r\n\r\n  // TODO: Re-enable when this works with the skybox\r\n  // renderer.setClearColor(Scene.fog.color, 1);\r\n\r\n  renderer.setClearColor(0xffffff, 1);\r\n\r\n  // TODO: Re-enable this when perf issues can be solved\r\n  //\r\n  // Rendering double the resolution of the screen can be really slow\r\n  // var pixelRatio = window.devicePixelRatio;\r\n  var pixelRatio = 1;\r\n\r\n  renderer.setPixelRatio(pixelRatio);\r\n\r\n  // Gamma settings make things look nicer\r\n  renderer.gammaInput = true;\r\n  renderer.gammaOutput = true;\r\n\r\n  renderer.shadowMap.enabled = true;\r\n\r\n  // TODO: Work out which of the shadowmap types is best\r\n  // https://github.com/mrdoob/three.js/blob/r56/src/Three.js#L107\r\n  // renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n  // TODO: Check that leaving this as default (CullFrontFace) is right\r\n  // renderer.shadowMap.cullFace = THREE.CullFaceBack;\r\n\r\n  container.appendChild(renderer.domElement);\r\n\r\n  var updateSize = function() {\r\n    renderer.setSize(container.clientWidth, container.clientHeight);\r\n  };\r\n\r\n  window.addEventListener('resize', updateSize, false);\r\n  updateSize();\r\n\r\n  return renderer;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/Renderer.js","import THREE from 'three';\r\nimport {CSS3DRenderer} from '../vendor/CSS3DRenderer';\r\nimport DOMScene3D from './DOMScene3D';\r\n\r\n// This can only be accessed from Engine.renderer if you want to reference the\r\n// same scene in multiple places\r\n\r\nexport default function(container) {\r\n  var renderer = new CSS3DRenderer();\r\n\r\n  renderer.domElement.style.position = 'absolute';\r\n  renderer.domElement.style.top = 0;\r\n\r\n  container.appendChild(renderer.domElement);\r\n\r\n  var updateSize = function() {\r\n    renderer.setSize(container.clientWidth, container.clientHeight);\r\n  };\r\n\r\n  window.addEventListener('resize', updateSize, false);\r\n  updateSize();\r\n\r\n  return renderer;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/DOMRenderer3D.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\n/**\r\n * Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nimport THREE from 'three';\r\n\r\nvar CSS3DObject = function ( element ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.element = element;\r\n\tthis.element.style.position = 'absolute';\r\n\r\n\tthis.addEventListener( 'removed', function ( event ) {\r\n\r\n\t\tif ( this.element.parentNode !== null ) {\r\n\r\n\t\t\tthis.element.parentNode.removeChild( this.element );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n};\r\n\r\nCSS3DObject.prototype = Object.create( THREE.Object3D.prototype );\r\nCSS3DObject.prototype.constructor = CSS3DObject;\r\n\r\nvar CSS3DSprite = function ( element ) {\r\n\r\n\tCSS3DObject.call( this, element );\r\n\r\n};\r\n\r\nCSS3DSprite.prototype = Object.create( CSS3DObject.prototype );\r\nCSS3DSprite.prototype.constructor = CSS3DSprite;\r\n\r\n//\r\n\r\nvar CSS3DRenderer = function () {\r\n\r\n\tconsole.log( 'THREE.CSS3DRenderer', THREE.REVISION );\r\n\r\n\tvar _width, _height;\r\n\tvar _widthHalf, _heightHalf;\r\n\r\n\tvar matrix = new THREE.Matrix4();\r\n\r\n\tvar cache = {\r\n\t\tcamera: { fov: 0, style: '' },\r\n\t\tobjects: {}\r\n\t};\r\n\r\n\tvar domElement = document.createElement( 'div' );\r\n\tdomElement.style.overflow = 'hidden';\r\n\r\n\tdomElement.style.WebkitTransformStyle = 'preserve-3d';\r\n\tdomElement.style.MozTransformStyle = 'preserve-3d';\r\n\tdomElement.style.oTransformStyle = 'preserve-3d';\r\n\tdomElement.style.transformStyle = 'preserve-3d';\r\n\r\n\tthis.domElement = domElement;\r\n\r\n\tvar cameraElement = document.createElement( 'div' );\r\n\r\n\tcameraElement.style.WebkitTransformStyle = 'preserve-3d';\r\n\tcameraElement.style.MozTransformStyle = 'preserve-3d';\r\n\tcameraElement.style.oTransformStyle = 'preserve-3d';\r\n\tcameraElement.style.transformStyle = 'preserve-3d';\r\n\r\n\tdomElement.appendChild( cameraElement );\r\n\r\n\tthis.setClearColor = function () {};\r\n\r\n\tthis.getSize = function() {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_widthHalf = _width / 2;\r\n\t\t_heightHalf = _height / 2;\r\n\r\n\t\tdomElement.style.width = width + 'px';\r\n\t\tdomElement.style.height = height + 'px';\r\n\r\n\t\tcameraElement.style.width = width + 'px';\r\n\t\tcameraElement.style.height = height + 'px';\r\n\r\n\t};\r\n\r\n\tvar epsilon = function ( value ) {\r\n\r\n\t\treturn Math.abs( value ) < Number.EPSILON ? 0 : value;\r\n\r\n\t};\r\n\r\n\tvar getCameraCSSMatrix = function ( matrix ) {\r\n\r\n\t\tvar elements = matrix.elements;\r\n\r\n\t\treturn 'matrix3d(' +\r\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 1 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 4 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 6 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 7 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 9 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 13 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 15 ] ) +\r\n\t\t')';\r\n\r\n\t};\r\n\r\n\tvar getObjectCSSMatrix = function ( matrix ) {\r\n\r\n\t\tvar elements = matrix.elements;\r\n\r\n\t\treturn 'translate3d(-50%,-50%,0) matrix3d(' +\r\n\t\t\tepsilon( elements[ 0 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 1 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 2 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 3 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 4 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 5 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 6 ] ) + ',' +\r\n\t\t\tepsilon( - elements[ 7 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 8 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 9 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 10 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 11 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 12 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 13 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 14 ] ) + ',' +\r\n\t\t\tepsilon( elements[ 15 ] ) +\r\n\t\t')';\r\n\r\n\t};\r\n\r\n\tvar renderObject = function ( object, camera ) {\r\n\r\n\t\tif ( object instanceof CSS3DObject ) {\r\n\r\n\t\t\tvar style;\r\n\r\n\t\t\tif ( object instanceof CSS3DSprite ) {\r\n\r\n\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\r\n\r\n\t\t\t\tmatrix.copy( camera.matrixWorldInverse );\r\n\t\t\t\tmatrix.transpose();\r\n\t\t\t\tmatrix.copyPosition( object.matrixWorld );\r\n\t\t\t\tmatrix.scale( object.scale );\r\n\r\n\t\t\t\tmatrix.elements[ 3 ] = 0;\r\n\t\t\t\tmatrix.elements[ 7 ] = 0;\r\n\t\t\t\tmatrix.elements[ 11 ] = 0;\r\n\t\t\t\tmatrix.elements[ 15 ] = 1;\r\n\r\n\t\t\t\tstyle = getObjectCSSMatrix( matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar element = object.element;\r\n\t\t\tvar cachedStyle = cache.objects[ object.id ];\r\n\r\n\t\t\tif ( cachedStyle === undefined || cachedStyle !== style ) {\r\n\r\n\t\t\t\telement.style.WebkitTransform = style;\r\n\t\t\t\telement.style.MozTransform = style;\r\n\t\t\t\telement.style.oTransform = style;\r\n\t\t\t\telement.style.transform = style;\r\n\r\n\t\t\t\tcache.objects[ object.id ] = style;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( element.parentNode !== cameraElement ) {\r\n\r\n\t\t\t\tcameraElement.appendChild( element );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\r\n\r\n\t\t\trenderObject( object.children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tvar fov = 0.5 / Math.tan( THREE.Math.degToRad( camera.fov * 0.5 ) ) * _height;\r\n\r\n\t\tif ( cache.camera.fov !== fov ) {\r\n\r\n\t\t\tdomElement.style.WebkitPerspective = fov + 'px';\r\n\t\t\tdomElement.style.MozPerspective = fov + 'px';\r\n\t\t\tdomElement.style.oPerspective = fov + 'px';\r\n\t\t\tdomElement.style.perspective = fov + 'px';\r\n\r\n\t\t\tcache.camera.fov = fov;\r\n\r\n\t\t}\r\n\r\n\t\tscene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\tvar style = 'translate3d(0,0,' + fov + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse ) +\r\n\t\t\t' translate3d(' + _widthHalf + 'px,' + _heightHalf + 'px, 0)';\r\n\r\n\t\tif ( cache.camera.style !== style ) {\r\n\r\n\t\t\tcameraElement.style.WebkitTransform = style;\r\n\t\t\tcameraElement.style.MozTransform = style;\r\n\t\t\tcameraElement.style.oTransform = style;\r\n\t\t\tcameraElement.style.transform = style;\r\n\r\n\t\t\tcache.camera.style = style;\r\n\r\n\t\t}\r\n\r\n\t\trenderObject( scene, camera );\r\n\r\n\t};\r\n\r\n};\r\n\r\nexport {CSS3DObject as CSS3DObject};\r\nexport {CSS3DSprite as CSS3DSprite};\r\nexport {CSS3DRenderer as CSS3DRenderer};\r\n\r\nTHREE.CSS3DObject = CSS3DObject;\r\nTHREE.CSS3DSprite = CSS3DSprite;\r\nTHREE.CSS3DRenderer = CSS3DRenderer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/CSS3DRenderer.js","import THREE from 'three';\r\nimport {CSS2DRenderer} from '../vendor/CSS2DRenderer';\r\nimport DOMScene2D from './DOMScene2D';\r\n\r\n// This can only be accessed from Engine.renderer if you want to reference the\r\n// same scene in multiple places\r\n\r\nexport default function(container) {\r\n  var renderer = new CSS2DRenderer();\r\n\r\n  renderer.domElement.style.position = 'absolute';\r\n  renderer.domElement.style.top = 0;\r\n\r\n  container.appendChild(renderer.domElement);\r\n\r\n  var updateSize = function() {\r\n    renderer.setSize(container.clientWidth, container.clientHeight);\r\n  };\r\n\r\n  window.addEventListener('resize', updateSize, false);\r\n  updateSize();\r\n\r\n  return renderer;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/DOMRenderer2D.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nimport THREE from 'three';\r\n\r\nvar CSS2DObject = function ( element ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.element = element;\r\n\tthis.element.style.position = 'absolute';\r\n\r\n\tthis.addEventListener( 'removed', function ( event ) {\r\n\r\n\t\tif ( this.element.parentNode !== null ) {\r\n\r\n\t\t\tthis.element.parentNode.removeChild( this.element );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n};\r\n\r\nCSS2DObject.prototype = Object.create( THREE.Object3D.prototype );\r\nCSS2DObject.prototype.constructor = CSS2DObject;\r\n\r\n//\r\n\r\nvar CSS2DRenderer = function () {\r\n\r\n\tconsole.log( 'THREE.CSS2DRenderer', THREE.REVISION );\r\n\r\n\tvar _width, _height;\r\n\tvar _widthHalf, _heightHalf;\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar viewMatrix = new THREE.Matrix4();\r\n\tvar viewProjectionMatrix = new THREE.Matrix4();\r\n\r\n\tvar frustum = new THREE.Frustum();\r\n\r\n\tvar domElement = document.createElement( 'div' );\r\n\tdomElement.style.overflow = 'hidden';\r\n\r\n\tthis.domElement = domElement;\r\n\r\n\tthis.setSize = function ( width, height ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_widthHalf = _width / 2;\r\n\t\t_heightHalf = _height / 2;\r\n\r\n\t\tdomElement.style.width = width + 'px';\r\n\t\tdomElement.style.height = height + 'px';\r\n\r\n\t};\r\n\r\n\tvar renderObject = function ( object, camera ) {\r\n\r\n\t\tif ( object instanceof CSS2DObject ) {\r\n\r\n\t\t\tvector.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\tvector.applyProjection( viewProjectionMatrix );\r\n\r\n\t\t\tvar element = object.element;\r\n\t\t\tvar style = 'translate(-50%,-50%) translate(' + ( vector.x * _widthHalf + _widthHalf ) + 'px,' + ( - vector.y * _heightHalf + _heightHalf ) + 'px)';\r\n\r\n\t\t\telement.style.WebkitTransform = style;\r\n\t\t\telement.style.MozTransform = style;\r\n\t\t\telement.style.oTransform = style;\r\n\t\t\telement.style.transform = style;\r\n\r\n\t\t\tif ( element.parentNode !== domElement ) {\r\n\r\n\t\t\t\tdomElement.appendChild( element );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Hide if outside view frustum\r\n\t\t\tif (!frustum.containsPoint(object.position)) {\r\n\t\t\t\telement.style.display = 'none';\r\n\t\t\t} else {\r\n\t\t\t\telement.style.display = 'block';\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\r\n\r\n\t\t\trenderObject( object.children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tscene.updateMatrixWorld();\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\tviewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n\t\tviewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, viewMatrix );\r\n\r\n\t\tfrustum.setFromMatrix( new THREE.Matrix4().multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse ) );\r\n\r\n\t\trenderObject( scene, camera );\r\n\r\n\t};\r\n\r\n};\r\n\r\nexport {CSS2DObject as CSS2DObject};\r\nexport {CSS2DRenderer as CSS2DRenderer};\r\n\r\nTHREE.CSS2DObject = CSS2DObject;\r\nTHREE.CSS2DRenderer = CSS2DRenderer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/CSS2DRenderer.js","import THREE from 'three';\r\n\r\n// This can only be accessed from Engine.camera if you want to reference the\r\n// same scene in multiple places\r\n\r\n// TODO: Ensure that FOV looks natural on all aspect ratios\r\n// http://stackoverflow.com/q/26655930/997339\r\n\r\nexport default function(container) {\r\n  var camera = new THREE.PerspectiveCamera(45, 1, 1, 2000000);\r\n  camera.position.y = 4000;\r\n  camera.position.z = 4000;\r\n\r\n  var updateSize = function() {\r\n    camera.aspect = container.clientWidth / container.clientHeight;\r\n    camera.updateProjectionMatrix();\r\n  };\r\n\r\n  window.addEventListener('resize', updateSize, false);\r\n  updateSize();\r\n\r\n  return camera;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/Camera.js","import THREE from 'three';\r\nimport {point as Point} from '../geo/Point';\r\nimport PickingScene from './PickingScene';\r\nimport throttle from 'lodash.throttle';\r\n\r\n// TODO: Look into a way of setting this up without passing in a renderer and\r\n// camera from the engine\r\n\r\n// TODO: Add a basic indicator on or around the mouse pointer when it is over\r\n// something pickable / clickable\r\n//\r\n// A simple transparent disc or ring at the mouse point should work to start, or\r\n// even just changing the cursor to the CSS 'pointer' style\r\n//\r\n// Probably want this on mousemove with a throttled update as not to spam the\r\n// picking method\r\n//\r\n// Relies upon the picking method not redrawing the scene every call due to\r\n// the way TileLayer invalidates the picking scene\r\n\r\nvar nextId = 1;\r\n\r\nclass Picking {\r\n  constructor(world, renderer, camera) {\r\n    this._world = world;\r\n    this._renderer = renderer;\r\n    this._camera = camera;\r\n\r\n    this._raycaster = new THREE.Raycaster();\r\n\r\n    // TODO: Match this with the line width used in the picking layers\r\n    this._raycaster.linePrecision = 3;\r\n\r\n    this._pickingScene = PickingScene;\r\n    this._pickingTexture = new THREE.WebGLRenderTarget();\r\n    this._pickingTexture.texture.minFilter = THREE.LinearFilter;\r\n    this._pickingTexture.texture.generateMipmaps = false;\r\n\r\n    this._nextId = 1;\r\n\r\n    this._resizeTexture();\r\n    this._initEvents();\r\n  }\r\n\r\n  _initEvents() {\r\n    this._resizeHandler = this._resizeTexture.bind(this);\r\n    window.addEventListener('resize', this._resizeHandler, false);\r\n\r\n    this._throttledMouseMoveHandler = throttle(this._onMouseMove.bind(this), 50);\r\n    this._mouseUpHandler = this._onMouseUp.bind(this);\r\n    this._world._container.addEventListener('mouseup', this._mouseUpHandler, false);\r\n    this._world._container.addEventListener('mousemove', this._throttledMouseMoveHandler, false);\r\n\r\n    this._world.on('move', this._onWorldMove, this);\r\n  }\r\n\r\n  _onMouseUp(event) {\r\n    // Only react to main button click\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    var point = Point(event.clientX - this._world._container.offsetLeft, event.clientY - this._world._container.offsetTop);\r\n\r\n    var normalisedPoint = Point(0, 0);\r\n    normalisedPoint.x = (point.x / this._width) * 2 - 1;\r\n    normalisedPoint.y = -(point.y / this._height) * 2 + 1;\r\n\r\n    this._pick(point, normalisedPoint);\r\n  }\r\n\r\n  _onMouseMove(event) {\r\n    var point = Point(event.clientX - this._world._container.offsetLeft, event.clientY - this._world._container.offsetTop);\r\n\r\n    var normalisedPoint = Point(0, 0);\r\n    normalisedPoint.x = (point.x / this._width) * 2 - 1;\r\n    normalisedPoint.y = -(point.y / this._height) * 2 + 1;\r\n\r\n    this._pick(point, normalisedPoint, true);\r\n  }\r\n\r\n  _onWorldMove() {\r\n    this._needUpdate = true;\r\n  }\r\n\r\n  // TODO: Ensure this doesn't get out of sync issue with the renderer resize\r\n  _resizeTexture() {\r\n    var size = this._renderer.getSize();\r\n\r\n    this._width = size.width;\r\n    this._height = size.height;\r\n\r\n    this._pickingTexture.setSize(this._width, this._height);\r\n    this._pixelBuffer = new Uint8Array(4 * this._width * this._height);\r\n\r\n    this._needUpdate = true;\r\n  }\r\n\r\n  // TODO: Make this only re-draw the scene if both an update is needed and the\r\n  // camera has moved since the last update\r\n  //\r\n  // Otherwise it re-draws the scene on every click due to the way LOD updates\r\n  // work in TileLayer – spamming this.add() and this.remove()\r\n  //\r\n  // TODO: Pause updates during map move / orbit / zoom as this is unlikely to\r\n  // be a point in time where the user cares for picking functionality\r\n  _update() {\r\n    if (this._needUpdate) {\r\n      var texture = this._pickingTexture;\r\n\r\n      this._renderer.render(this._pickingScene, this._camera, this._pickingTexture);\r\n\r\n      // Read the rendering texture\r\n      this._renderer.readRenderTargetPixels(texture, 0, 0, texture.width, texture.height, this._pixelBuffer);\r\n\r\n      this._needUpdate = false;\r\n    }\r\n  }\r\n\r\n  _pick(point, normalisedPoint, hover) {\r\n    this._update();\r\n\r\n    var index = point.x + (this._pickingTexture.height - point.y) * this._pickingTexture.width;\r\n\r\n    // Interpret the pixel as an ID\r\n    var id = (this._pixelBuffer[index * 4 + 2] * 255 * 255) + (this._pixelBuffer[index * 4 + 1] * 255) + (this._pixelBuffer[index * 4 + 0]);\r\n\r\n    // Skip if ID is 16646655 (white) as the background returns this\r\n    if (id === 16646655) {\r\n      if (hover) {\r\n        this._world.emit('pick-hover-reset');\r\n      } else {\r\n        this._world.emit('pick-click-reset');\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this._raycaster.setFromCamera(normalisedPoint, this._camera);\r\n\r\n    // Perform ray intersection on picking scene\r\n    //\r\n    // TODO: Only perform intersection test on the relevant picking mesh\r\n    var intersects = this._raycaster.intersectObjects(this._pickingScene.children, true);\r\n\r\n    var _point2d = point.clone();\r\n\r\n    var _point3d;\r\n    if (intersects.length > 0) {\r\n      _point3d = intersects[0].point.clone();\r\n    }\r\n\r\n    // Pass along as much data as possible for now until we know more about how\r\n    // people use the picking API and what the returned data should be\r\n    //\r\n    // TODO: Look into the leak potential for passing so much by reference here\r\n    // this._world.emit('pick', id, _point2d, _point3d, intersects);\r\n    // this._world.emit('pick-' + id, _point2d, _point3d, intersects);\r\n\r\n    if (hover) {\r\n      this._world.emit('pick-hover', id, _point2d, _point3d, intersects);\r\n      this._world.emit('pick-hover-' + id, _point2d, _point3d, intersects);\r\n    } else {\r\n      this._world.emit('pick-click', id, _point2d, _point3d, intersects);\r\n      this._world.emit('pick-click-' + id, _point2d, _point3d, intersects);\r\n    }\r\n  }\r\n\r\n  // Add mesh to picking scene\r\n  //\r\n  // Picking ID should already be added as an attribute\r\n  add(mesh) {\r\n    this._pickingScene.add(mesh);\r\n    this._needUpdate = true;\r\n  }\r\n\r\n  // Remove mesh from picking scene\r\n  remove(mesh) {\r\n    this._pickingScene.remove(mesh);\r\n    this._needUpdate = true;\r\n  }\r\n\r\n  // Returns next ID to use for picking\r\n  getNextId() {\r\n    return nextId++;\r\n  }\r\n\r\n  destroy() {\r\n    // TODO: Find a way to properly remove these listeners as they stay\r\n    // active at the moment\r\n    window.removeEventListener('resize', this._resizeHandler, false);\r\n    this._world._container.removeEventListener('mouseup', this._mouseUpHandler, false);\r\n    this._world._container.removeEventListener('mousemove', this._throttledMouseMoveHandler, false);\r\n\r\n    this._world.off('move', this._onWorldMove);\r\n\r\n    if (this._pickingScene.children) {\r\n      // Remove everything else in the layer\r\n      var child;\r\n      for (var i = this._pickingScene.children.length - 1; i >= 0; i--) {\r\n        child = this._pickingScene.children[i];\r\n\r\n        if (!child) {\r\n          continue;\r\n        }\r\n\r\n        this._pickingScene.remove(child);\r\n\r\n        // Probably not a good idea to dispose of geometry due to it being\r\n        // shared with the non-picking scene\r\n        // if (child.geometry) {\r\n        //   // Dispose of mesh and materials\r\n        //   child.geometry.dispose();\r\n        //   child.geometry = null;\r\n        // }\r\n\r\n        if (child.material) {\r\n          if (child.material.map) {\r\n            child.material.map.dispose();\r\n            child.material.map = null;\r\n          }\r\n\r\n          child.material.dispose();\r\n          child.material = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    this._pickingScene = null;\r\n    this._pickingTexture = null;\r\n    this._pixelBuffer = null;\r\n\r\n    this._world = null;\r\n    this._renderer = null;\r\n    this._camera = null;\r\n  }\r\n}\r\n\r\n// Initialise without requiring new keyword\r\nexport default function(world, renderer, camera) {\r\n  return new Picking(world, renderer, camera);\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/Picking.js","import THREE from 'three';\r\n\r\n// This can be imported from anywhere and will still reference the same scene,\r\n// though there is a helper reference in Engine.pickingScene\r\n\r\nexport default (function() {\r\n  var scene = new THREE.Scene();\r\n  return scene;\r\n})();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/PickingScene.js","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.throttle/index.js\n// module id = 20\n// module chunks = 0","import THREE from 'three';\r\nimport EffectComposer from '../vendor/EffectComposer';\r\n\r\nexport default function(renderer, container) {\r\n  var composer = new EffectComposer(renderer);\r\n\r\n  var updateSize = function() {\r\n    // TODO: Re-enable this when perf issues can be solved\r\n    //\r\n    // Rendering double the resolution of the screen can be really slow\r\n    // var pixelRatio = window.devicePixelRatio;\r\n    var pixelRatio = 1;\r\n\r\n    composer.setSize(container.clientWidth * pixelRatio, container.clientHeight * pixelRatio);\r\n  };\r\n\r\n  window.addEventListener('resize', updateSize, false);\r\n  updateSize();\r\n\r\n  return composer;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/EffectComposer.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\nimport CopyShader from './CopyShader';\r\nimport ShaderPass from './ShaderPass';\r\nimport MaskPass, {ClearMaskPass} from './MaskPass';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar EffectComposer = function ( renderer, renderTarget ) {\r\n\r\n\tthis.renderer = renderer;\r\n\r\n\tif ( renderTarget === undefined ) {\r\n\r\n\t\tvar pixelRatio = renderer.getPixelRatio();\r\n\r\n\t\tvar width  = Math.floor( renderer.context.canvas.width  / pixelRatio ) || 1;\r\n\t\tvar height = Math.floor( renderer.context.canvas.height / pixelRatio ) || 1;\r\n\t\tvar parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat, stencilBuffer: false };\r\n\r\n\t\trenderTarget = new THREE.WebGLRenderTarget( width, height, parameters );\r\n\r\n\t}\r\n\r\n\tthis.renderTarget1 = renderTarget;\r\n\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\tthis.writeBuffer = this.renderTarget1;\r\n\tthis.readBuffer = this.renderTarget2;\r\n\r\n\tthis.passes = [];\r\n\r\n\tif ( CopyShader === undefined )\r\n\t\tconsole.error( \"EffectComposer relies on THREE.CopyShader\" );\r\n\r\n\tthis.copyPass = new ShaderPass( CopyShader );\r\n\r\n};\r\n\r\nEffectComposer.prototype = {\r\n\r\n\tswapBuffers: function() {\r\n\r\n\t\tvar tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t},\r\n\r\n\taddPass: function ( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\r\n\t},\r\n\r\n\tinsertPass: function ( pass, index ) {\r\n\r\n\t\tthis.passes.splice( index, 0, pass );\r\n\r\n\t},\r\n\r\n\trender: function ( delta ) {\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t\tvar maskActive = false;\r\n\r\n\t\tvar pass, i, il = this.passes.length;\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tpass = this.passes[ i ];\r\n\r\n\t\t\tif ( ! pass.enabled ) continue;\r\n\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tvar context = this.renderer.context;\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pass instanceof MaskPass ) {\r\n\r\n\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t} else if ( pass instanceof ClearMaskPass ) {\r\n\r\n\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\treset: function ( renderTarget ) {\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = this.renderTarget1.clone();\r\n\r\n\t\t\tvar pixelRatio = this.renderer.getPixelRatio();\r\n\r\n\t\t\trenderTarget.setSize(\r\n\t\t\t\tMath.floor( this.renderer.context.canvas.width  / pixelRatio ),\r\n\t\t\t\tMath.floor( this.renderer.context.canvas.height / pixelRatio )\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2.dispose();\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.renderTarget1.setSize( width, height );\r\n\t\tthis.renderTarget2.setSize( width, height );\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport default EffectComposer;\r\nTHREE.EffectComposer = EffectComposer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/EffectComposer.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\r\n\r\nvar CopyShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { type: \"t\", value: null },\r\n\t\t\"opacity\":  { type: \"f\", value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float opacity;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\r\n\t\t\t\"gl_FragColor = opacity * texel;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport default CopyShader;\r\nTHREE.CopyShader = CopyShader;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/CopyShader.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar ShaderPass = function( shader, textureID ) {\r\n\r\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\r\n\r\n\tif ( shader instanceof THREE.ShaderMaterial ) {\r\n\r\n\t\tthis.uniforms = shader.uniforms;\r\n\r\n\t\tthis.material = shader;\r\n\r\n\t}\r\n\telse if ( shader ) {\r\n\r\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial( {\r\n\r\n\t\t\tdefines: shader.defines || {},\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tthis.renderToScreen = false;\r\n\r\n\tthis.enabled = true;\r\n\tthis.needsSwap = true;\r\n\tthis.clear = false;\r\n\r\n\r\n\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\tthis.scene = new THREE.Scene();\r\n\r\n\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\r\n\tthis.scene.add( this.quad );\r\n\r\n};\r\n\r\nShaderPass.prototype = {\r\n\r\n\trender: function( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n\t\tif ( this.uniforms[ this.textureID ] ) {\r\n\r\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer;\r\n\r\n\t\t}\r\n\r\n\t\tthis.quad.material = this.material;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport default ShaderPass;\r\nTHREE.ShaderPass = ShaderPass;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/ShaderPass.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar MaskPass = function ( scene, camera ) {\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.enabled = true;\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.inverse = false;\r\n\r\n};\r\n\r\nMaskPass.prototype = {\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n\t\tvar context = renderer.context;\r\n\r\n\t\t// don't update color or depth\r\n\r\n\t\tcontext.colorMask( false, false, false, false );\r\n\t\tcontext.depthMask( false );\r\n\r\n\t\t// set up stencil\r\n\r\n\t\tvar writeValue, clearValue;\r\n\r\n\t\tif ( this.inverse ) {\r\n\r\n\t\t\twriteValue = 0;\r\n\t\t\tclearValue = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twriteValue = 1;\r\n\t\t\tclearValue = 0;\r\n\r\n\t\t}\r\n\r\n\t\tcontext.enable( context.STENCIL_TEST );\r\n\t\tcontext.stencilOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n\t\tcontext.stencilFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n\t\tcontext.clearStencil( clearValue );\r\n\r\n\t\t// draw into the stencil buffer\r\n\r\n\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\r\n\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n\t\t// re-enable update of color and depth\r\n\r\n\t\tcontext.colorMask( true, true, true, true );\r\n\t\tcontext.depthMask( true );\r\n\r\n\t\t// only render where stencil is set to 1\r\n\r\n\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\r\n\t\tcontext.stencilOp( context.KEEP, context.KEEP, context.KEEP );\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\nvar ClearMaskPass = function () {\r\n\r\n\tthis.enabled = true;\r\n\r\n};\r\n\r\nClearMaskPass.prototype = {\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n\t\tvar context = renderer.context;\r\n\r\n\t\tcontext.disable( context.STENCIL_TEST );\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport default MaskPass;\r\nexport {ClearMaskPass as ClearMaskPass};\r\n\r\nTHREE.MaskPass = MaskPass;\r\nTHREE.ClearMaskPass = ClearMaskPass;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/MaskPass.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.overrideMaterial = overrideMaterial;\r\n\r\n\tthis.clearColor = clearColor;\r\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 1;\r\n\r\n\tthis.oldClearColor = new THREE.Color();\r\n\tthis.oldClearAlpha = 1;\r\n\r\n\tthis.enabled = true;\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n};\r\n\r\nRenderPass.prototype = {\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\tthis.oldClearColor.copy( renderer.getClearColor() );\r\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport default RenderPass;\r\nTHREE.RenderPass = RenderPass;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/RenderPass.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n * - \"r\" parameter control where \"focused\" horizontal line lies\r\n */\r\n\r\nvar HorizontalTiltShiftShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { type: \"t\", value: null },\r\n\t\t\"h\":        { type: \"f\", value: 1.0 / 512.0 },\r\n\t\t\"r\":        { type: \"f\", value: 0.35 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float h;\",\r\n\t\t\"uniform float r;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 sum = vec4( 0.0 );\",\r\n\r\n\t\t\t\"float hh = h * abs( r - vUv.y );\",\r\n\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\",\r\n\r\n\t\t\t\"gl_FragColor = sum;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport default HorizontalTiltShiftShader;\r\nTHREE.HorizontalTiltShiftShader = HorizontalTiltShiftShader;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/HorizontalTiltShiftShader.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n * - \"r\" parameter control where \"focused\" horizontal line lies\r\n */\r\n\r\nvar VerticalTiltShiftShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { type: \"t\", value: null },\r\n\t\t\"v\":        { type: \"f\", value: 1.0 / 512.0 },\r\n\t\t\"r\":        { type: \"f\", value: 0.35 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float v;\",\r\n\t\t\"uniform float r;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 sum = vec4( 0.0 );\",\r\n\r\n\t\t\t\"float vv = v * abs( r - vUv.y );\",\r\n\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\",\r\n\t\t\t\"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\",\r\n\r\n\t\t\t\"gl_FragColor = sum;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport default VerticalTiltShiftShader;\r\nTHREE.VerticalTiltShiftShader = VerticalTiltShiftShader;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/VerticalTiltShiftShader.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author davidedc / http://www.sketchpatch.net/\r\n *\r\n * NVIDIA FXAA by Timothy Lottes\r\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\r\n * - WebGL port by @supereggbert\r\n * http://www.glge.org/demos/fxaa/\r\n */\r\n\r\nvar FXAAShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\":   { type: \"t\", value: null },\r\n\t\t\"resolution\": { type: \"v2\", value: new THREE.Vector2( 1 / 1024, 1 / 512 ) }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform vec2 resolution;\",\r\n\r\n\t\t\"#define FXAA_REDUCE_MIN   (1.0/128.0)\",\r\n\t\t\"#define FXAA_REDUCE_MUL   (1.0/8.0)\",\r\n\t\t\"#define FXAA_SPAN_MAX     8.0\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;\",\r\n\t\t\t\"vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;\",\r\n\t\t\t\"vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;\",\r\n\t\t\t\"vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;\",\r\n\t\t\t\"vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );\",\r\n\t\t\t\"vec3 rgbM  = rgbaM.xyz;\",\r\n\t\t\t\"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\r\n\r\n\t\t\t\"float lumaNW = dot( rgbNW, luma );\",\r\n\t\t\t\"float lumaNE = dot( rgbNE, luma );\",\r\n\t\t\t\"float lumaSW = dot( rgbSW, luma );\",\r\n\t\t\t\"float lumaSE = dot( rgbSE, luma );\",\r\n\t\t\t\"float lumaM  = dot( rgbM,  luma );\",\r\n\t\t\t\"float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );\",\r\n\t\t\t\"float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );\",\r\n\r\n\t\t\t\"vec2 dir;\",\r\n\t\t\t\"dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\",\r\n\t\t\t\"dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\",\r\n\r\n\t\t\t\"float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );\",\r\n\r\n\t\t\t\"float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );\",\r\n\t\t\t\"dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\",\r\n\t\t\t\t  \"max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\",\r\n\t\t\t\t\t\t\"dir * rcpDirMin)) * resolution;\",\r\n\t\t\t\"vec4 rgbA = (1.0/2.0) * (\",\r\n        \t\"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (1.0/3.0 - 0.5)) +\",\r\n\t\t\t\"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (2.0/3.0 - 0.5)));\",\r\n    \t\t\"vec4 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\",\r\n\t\t\t\"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (0.0/3.0 - 0.5)) +\",\r\n      \t\t\"texture2D(tDiffuse,  gl_FragCoord.xy  * resolution + dir * (3.0/3.0 - 0.5)));\",\r\n    \t\t\"float lumaB = dot(rgbB, vec4(luma, 0.0));\",\r\n\r\n\t\t\t\"if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {\",\r\n\r\n\t\t\t\t\"gl_FragColor = rgbA;\",\r\n\r\n\t\t\t\"} else {\",\r\n\t\t\t\t\"gl_FragColor = rgbB;\",\r\n\r\n\t\t\t\"}\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\r\n\r\nexport default FXAAShader;\r\nTHREE.FXAAShader = FXAAShader;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/FXAAShader.js","import Layer from '../Layer';\r\nimport extend from 'lodash.assign';\r\nimport THREE from 'three';\r\nimport Skybox from './Skybox';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\nclass EnvironmentLayer extends Layer {\r\n  constructor(options) {\r\n    var defaults = {\r\n      skybox: false\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    super(_options);\r\n  }\r\n\r\n  _onAdd() {\r\n    this._initLights();\r\n\r\n    if (this._options.skybox) {\r\n      this._initSkybox();\r\n    }\r\n\r\n    // this._initGrid();\r\n\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  // Not fleshed out or thought through yet\r\n  //\r\n  // Lights could potentially be put it their own 'layer' to keep this class\r\n  // much simpler and less messy\r\n  _initLights() {\r\n    // Position doesn't really matter (the angle is important), however it's\r\n    // used here so the helpers look more natural.\r\n\r\n    if (!this._options.skybox) {\r\n      var directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n      directionalLight.position.x = 10000;\r\n      directionalLight.position.y = 10000;\r\n      directionalLight.position.z = 10000;\r\n\r\n      // TODO: Get shadows working in non-PBR scenes\r\n\r\n      // directionalLight.castShadow = true;\r\n      //\r\n      // var d = 100;\r\n      // directionalLight.shadow.camera.left = -d;\r\n      // directionalLight.shadow.camera.right = d;\r\n      // directionalLight.shadow.camera.top = d;\r\n      // directionalLight.shadow.camera.bottom = -d;\r\n      //\r\n      // directionalLight.shadow.camera.near = 10;\r\n      // directionalLight.shadow.camera.far = 100;\r\n      //\r\n      // // TODO: Need to dial in on a good shadowmap size\r\n      // directionalLight.shadow.mapSize.width = 2048;\r\n      // directionalLight.shadow.mapSize.height = 2048;\r\n      //\r\n      // // directionalLight.shadowBias = -0.0010;\r\n      // // directionalLight.shadow.darkness = 0.15;\r\n\r\n      var directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n      directionalLight2.position.x = -10000;\r\n      directionalLight2.position.y = 10000;\r\n      directionalLight2.position.z = 0;\r\n\r\n      var directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n      directionalLight3.position.x = 10000;\r\n      directionalLight3.position.y = 10000;\r\n      directionalLight3.position.z = -10000;\r\n\r\n      this.add(directionalLight);\r\n      this.add(directionalLight2);\r\n      this.add(directionalLight3);\r\n\r\n      // var helper = new THREE.DirectionalLightHelper(directionalLight, 10);\r\n      // var helper2 = new THREE.DirectionalLightHelper(directionalLight2, 10);\r\n      // var helper3 = new THREE.DirectionalLightHelper(directionalLight3, 10);\r\n      //\r\n      // this.add(helper);\r\n      // this.add(helper2);\r\n      // this.add(helper3);\r\n    } else {\r\n      // Directional light that will be projected from the sun\r\n      this._skyboxLight = new THREE.DirectionalLight(0xffffff, 1);\r\n\r\n      this._skyboxLight.castShadow = true;\r\n\r\n      var d = 10000;\r\n      this._skyboxLight.shadow.camera.left = -d;\r\n      this._skyboxLight.shadow.camera.right = d;\r\n      this._skyboxLight.shadow.camera.top = d;\r\n      this._skyboxLight.shadow.camera.bottom = -d;\r\n\r\n      this._skyboxLight.shadow.camera.near = 10000;\r\n      this._skyboxLight.shadow.camera.far = 70000;\r\n\r\n      // TODO: Need to dial in on a good shadowmap size\r\n      this._skyboxLight.shadow.mapSize.width = 2048;\r\n      this._skyboxLight.shadow.mapSize.height = 2048;\r\n\r\n      // this._skyboxLight.shadowBias = -0.0010;\r\n      // this._skyboxLight.shadow.darkness = 0.15;\r\n\r\n      // this._object3D.add(new THREE.CameraHelper(this._skyboxLight.shadow.camera));\r\n\r\n      this.add(this._skyboxLight);\r\n    }\r\n  }\r\n\r\n  _initSkybox() {\r\n    this._skybox = new Skybox(this._world, this._skyboxLight);\r\n    this.add(this._skybox._mesh);\r\n  }\r\n\r\n  // Add grid helper for context during initial development\r\n  _initGrid() {\r\n    var size = 4000;\r\n    var step = 100;\r\n\r\n    var gridHelper = new THREE.GridHelper(size, step);\r\n    this.add(gridHelper);\r\n  }\r\n\r\n  // Clean up environment\r\n  destroy() {\r\n    this._skyboxLight = null;\r\n\r\n    if (this._skybox) {\r\n      this.remove(this._skybox._mesh);\r\n      this._skybox.destroy();\r\n      this._skybox = null;\r\n    }\r\n\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default EnvironmentLayer;\r\n\r\nvar noNew = function(options) {\r\n  return new EnvironmentLayer(options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as environmentLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/environment/EnvironmentLayer.js","import EventEmitter from 'eventemitter3';\r\nimport extend from 'lodash.assign';\r\nimport shortid from 'shortid';\r\nimport THREE from 'three';\r\nimport Scene from '../engine/Scene';\r\nimport {CSS3DObject} from '../vendor/CSS3DRenderer';\r\nimport {CSS2DObject} from '../vendor/CSS2DRenderer';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// TODO: Need a single move method that handles moving all the various object\r\n// layers so that the DOM layers stay in sync with the 3D layer\r\n\r\n// TODO: Double check that objects within the _object3D Object3D parent are frustum\r\n// culled even if the layer position stays at the default (0,0,0) and the child\r\n// objects are positioned much further away\r\n//\r\n// Or does the layer being at (0,0,0) prevent the child objects from being\r\n// culled because the layer parent is effectively always in view even if the\r\n// child is actually out of camera\r\n\r\nclass Layer extends EventEmitter {\r\n  constructor(options) {\r\n    super();\r\n\r\n    var defaults = {\r\n      id: shortid.generate(),\r\n      output: true,\r\n      outputToScene: true\r\n    };\r\n\r\n    this._options = extend({}, defaults, options);\r\n\r\n    if (this.isOutput()) {\r\n      this._object3D = new THREE.Object3D();\r\n\r\n      this._dom3D = document.createElement('div');\r\n      this._domObject3D = new CSS3DObject(this._dom3D);\r\n\r\n      this._dom2D = document.createElement('div');\r\n      this._domObject2D = new CSS2DObject(this._dom2D);\r\n    }\r\n  }\r\n\r\n  // Add THREE object directly to layer\r\n  add(object) {\r\n    this._object3D.add(object);\r\n  }\r\n\r\n  // Remove THREE object from to layer\r\n  remove(object) {\r\n    this._object3D.remove(object);\r\n  }\r\n\r\n  addDOM3D(object) {\r\n    this._domObject3D.add(object);\r\n  }\r\n\r\n  removeDOM3D(object) {\r\n    this._domObject3D.remove(object);\r\n  }\r\n\r\n  addDOM2D(object) {\r\n    this._domObject2D.add(object);\r\n  }\r\n\r\n  removeDOM2D(object) {\r\n    this._domObject2D.remove(object);\r\n  }\r\n\r\n  // Add layer to world instance and store world reference\r\n  addTo(world) {\r\n    return world.addLayer(this);\r\n  }\r\n\r\n  // Internal method called by World.addLayer to actually add the layer\r\n  _addToWorld(world) {\r\n    this._world = world;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this._onAdd(world).then(() => {\r\n        this.emit('added');\r\n        resolve(this);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // Must return a promise\r\n  _onAdd(world) {\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  getPickingId() {\r\n    if (this._world._engine._picking) {\r\n      return this._world._engine._picking.getNextId();\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // TODO: Tidy this up and don't access so many private properties to work\r\n  addToPicking(object) {\r\n    if (!this._world._engine._picking) {\r\n      return;\r\n    }\r\n\r\n    this._world._engine._picking.add(object);\r\n  }\r\n\r\n  removeFromPicking(object) {\r\n    if (!this._world._engine._picking) {\r\n      return;\r\n    }\r\n\r\n    this._world._engine._picking.remove(object);\r\n  }\r\n\r\n  isOutput() {\r\n    return this._options.output;\r\n  }\r\n\r\n  isOutputToScene() {\r\n    return this._options.outputToScene;\r\n  }\r\n\r\n  // TODO: Also hide any attached DOM layers\r\n  hide() {\r\n    this._object3D.visible = false;\r\n\r\n    if (this._pickingMesh) {\r\n      this._pickingMesh.visible = false;\r\n    }\r\n  }\r\n\r\n  // TODO: Also show any attached DOM layers\r\n  show() {\r\n    this._object3D.visible = true;\r\n\r\n    if (this._pickingMesh) {\r\n      this._pickingMesh.visible = true;\r\n    }\r\n  }\r\n\r\n  // Destroys the layer and removes it from the scene and memory\r\n  destroy() {\r\n    if (this._object3D && this._object3D.children) {\r\n      // Remove everything else in the layer\r\n      var child;\r\n      for (var i = this._object3D.children.length - 1; i >= 0; i--) {\r\n        child = this._object3D.children[i];\r\n\r\n        if (!child) {\r\n          continue;\r\n        }\r\n\r\n        this.remove(child);\r\n\r\n        if (child.geometry) {\r\n          // Dispose of mesh and materials\r\n          child.geometry.dispose();\r\n          child.geometry = null;\r\n        }\r\n\r\n        if (child.material) {\r\n          if (child.material.map) {\r\n            child.material.map.dispose();\r\n            child.material.map = null;\r\n          }\r\n\r\n          child.material.dispose();\r\n          child.material = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this._domObject3D && this._domObject3D.children) {\r\n      // Remove everything else in the layer\r\n      var child;\r\n      for (var i = this._domObject3D.children.length - 1; i >= 0; i--) {\r\n        child = this._domObject3D.children[i];\r\n\r\n        if (!child) {\r\n          continue;\r\n        }\r\n\r\n        this.removeDOM3D(child);\r\n      }\r\n    }\r\n\r\n    if (this._domObject2D && this._domObject2D.children) {\r\n      // Remove everything else in the layer\r\n      var child;\r\n      for (var i = this._domObject2D.children.length - 1; i >= 0; i--) {\r\n        child = this._domObject2D.children[i];\r\n\r\n        if (!child) {\r\n          continue;\r\n        }\r\n\r\n        this.removeDOM2D(child);\r\n      }\r\n    }\r\n\r\n    this._domObject3D = null;\r\n    this._domObject2D = null;\r\n\r\n    this._world = null;\r\n    this._object3D = null;\r\n  }\r\n}\r\n\r\nexport default Layer;\r\n\r\nvar noNew = function(options) {\r\n  return new Layer(options);\r\n};\r\n\r\nexport {noNew as layer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/Layer.js","'use strict';\nmodule.exports = require('./lib/index');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/index.js\n// module id = 32\n// module chunks = 0","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/index.js\n// module id = 33\n// module chunks = 0","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/alphabet.js\n// module id = 34\n// module chunks = 0","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/random/random-from-seed.js\n// module id = 35\n// module chunks = 0","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1459707606518;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 6;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/build.js\n// module id = 36\n// module chunks = 0","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/generate.js\n// module id = 37\n// module chunks = 0","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/random/random-byte-browser.js\n// module id = 38\n// module chunks = 0","/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n  size = +size\n\n  var id = ''\n  while (true) {\n    var bytes = random(step)\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask\n      if (alphabet[byte]) {\n        id += alphabet[byte]\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nanoid/format.js\n// module id = 39\n// module chunks = 0","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/is-valid.js\n// module id = 40\n// module chunks = 0","'use strict';\n\nmodule.exports = 0;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/shortid/lib/util/cluster-worker-id-browser.js\n// module id = 41\n// module chunks = 0","import THREE from 'three';\r\nimport Sky from './Sky';\r\nimport throttle from 'lodash.throttle';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\nvar cubemap = {\r\n  vertexShader: [\r\n\t\t'varying vec3 vPosition;',\r\n\t\t'void main() {',\r\n\t\t\t'vPosition = position;',\r\n\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\t\t'}'\r\n\t].join('\\n'),\r\n\r\n  fragmentShader: [\r\n    'uniform samplerCube cubemap;',\r\n    'varying vec3 vPosition;',\r\n\r\n    'void main() {',\r\n      'gl_FragColor = textureCube(cubemap, normalize(vPosition));',\r\n    '}'\r\n  ].join('\\n')\r\n};\r\n\r\nclass Skybox {\r\n  constructor(world, light) {\r\n    this._world = world;\r\n    this._light = light;\r\n\r\n    this._settings = {\r\n      distance: 38000,\r\n      turbidity: 10,\r\n      reileigh: 2,\r\n      mieCoefficient: 0.005,\r\n      mieDirectionalG: 0.8,\r\n      luminance: 1,\r\n      // 0.48 is a cracking dusk / sunset\r\n      // 0.4 is a beautiful early-morning / late-afternoon\r\n      // 0.2 is a nice day time\r\n      inclination: 0.48, // Elevation / inclination\r\n      azimuth: 0.25, // Facing front\r\n    };\r\n\r\n    this._initSkybox();\r\n    this._updateUniforms();\r\n    this._initEvents();\r\n  }\r\n\r\n  _initEvents() {\r\n    // Throttled to 1 per 100ms\r\n    this._throttledWorldUpdate = throttle(this._update, 100);\r\n    this._world.on('preUpdate', this._throttledWorldUpdate, this);\r\n  }\r\n\r\n  _initSkybox() {\r\n    // Cube camera for skybox\r\n    this._cubeCamera = new THREE.CubeCamera(1, 20000000, 128);\r\n\r\n    // Cube material\r\n    var cubeTarget = this._cubeCamera.renderTarget;\r\n\r\n    // Add Sky Mesh\r\n    this._sky = new Sky();\r\n    this._skyScene = new THREE.Scene();\r\n    this._skyScene.add(this._sky.mesh);\r\n\r\n    // Add Sun Helper\r\n    this._sunSphere = new THREE.Mesh(\r\n      new THREE.SphereBufferGeometry(2000, 16, 8),\r\n      new THREE.MeshBasicMaterial({\r\n        color: 0xffffff\r\n      })\r\n    );\r\n\r\n    // TODO: This isn't actually visible because it's not added to the layer\r\n    // this._sunSphere.visible = true;\r\n\r\n    var skyboxUniforms = {\r\n      cubemap: { type: 't', value: cubeTarget }\r\n    };\r\n\r\n    var skyboxMat = new THREE.ShaderMaterial({\r\n      uniforms: skyboxUniforms,\r\n      vertexShader: cubemap.vertexShader,\r\n      fragmentShader: cubemap.fragmentShader,\r\n      side: THREE.BackSide\r\n    });\r\n\r\n    this._mesh = new THREE.Mesh(new THREE.BoxGeometry(1900000, 1900000, 1900000), skyboxMat);\r\n\r\n    this._updateSkybox = true;\r\n  }\r\n\r\n  _updateUniforms() {\r\n    var settings = this._settings;\r\n    var uniforms = this._sky.uniforms;\r\n    uniforms.turbidity.value = settings.turbidity;\r\n    uniforms.reileigh.value = settings.reileigh;\r\n    uniforms.luminance.value = settings.luminance;\r\n    uniforms.mieCoefficient.value = settings.mieCoefficient;\r\n    uniforms.mieDirectionalG.value = settings.mieDirectionalG;\r\n\r\n    var theta = Math.PI * (settings.inclination - 0.5);\r\n    var phi = 2 * Math.PI * (settings.azimuth - 0.5);\r\n\r\n    this._sunSphere.position.x = settings.distance * Math.cos(phi);\r\n    this._sunSphere.position.y = settings.distance * Math.sin(phi) * Math.sin(theta);\r\n    this._sunSphere.position.z = settings.distance * Math.sin(phi) * Math.cos(theta);\r\n\r\n    // Move directional light to sun position\r\n    this._light.position.copy(this._sunSphere.position);\r\n\r\n    this._sky.uniforms.sunPosition.value.copy(this._sunSphere.position);\r\n  }\r\n\r\n  _update(delta) {\r\n    if (this._updateSkybox) {\r\n      this._updateSkybox = false;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    // if (!this._angle) {\r\n    //   this._angle = 0;\r\n    // }\r\n    //\r\n    // // Animate inclination\r\n    // this._angle += Math.PI * delta;\r\n    // this._settings.inclination = 0.5 * (Math.sin(this._angle) / 2 + 0.5);\r\n\r\n    // Update light intensity depending on elevation of sun (day to night)\r\n    this._light.intensity = 1 - 0.95 * (this._settings.inclination / 0.5);\r\n\r\n    // // console.log(delta, this._angle, this._settings.inclination);\r\n    //\r\n    // TODO: Only do this when the uniforms have been changed\r\n    this._updateUniforms();\r\n\r\n    // TODO: Only do this when the cubemap has actually changed\r\n    this._cubeCamera.updateCubeMap(this._world._engine._renderer, this._skyScene);\r\n  }\r\n\r\n  getRenderTarget() {\r\n    return this._cubeCamera.renderTarget;\r\n  }\r\n\r\n  setInclination(inclination) {\r\n    this._settings.inclination = inclination;\r\n    this._updateSkybox = true;\r\n  }\r\n\r\n  // Destroy the skybox and remove it from memory\r\n  destroy() {\r\n    this._world.off('preUpdate', this._throttledWorldUpdate);\r\n    this._throttledWorldUpdate = null;\r\n\r\n    this._world = null;\r\n    this._light = null;\r\n\r\n    this._cubeCamera = null;\r\n\r\n    this._sky.mesh.geometry.dispose();\r\n    this._sky.mesh.geometry = null;\r\n\r\n    if (this._sky.mesh.material.map) {\r\n      this._sky.mesh.material.map.dispose();\r\n      this._sky.mesh.material.map = null;\r\n    }\r\n\r\n    this._sky.mesh.material.dispose();\r\n    this._sky.mesh.material = null;\r\n\r\n    this._sky.mesh = null;\r\n    this._sky = null;\r\n\r\n    this._skyScene = null;\r\n\r\n    this._sunSphere.geometry.dispose();\r\n    this._sunSphere.geometry = null;\r\n\r\n    if (this._sunSphere.material.map) {\r\n      this._sunSphere.material.map.dispose();\r\n      this._sunSphere.material.map = null;\r\n    }\r\n\r\n    this._sunSphere.material.dispose();\r\n    this._sunSphere.material = null;\r\n\r\n    this._sunSphere = null;\r\n\r\n    this._mesh.geometry.dispose();\r\n    this._mesh.geometry = null;\r\n\r\n    if (this._mesh.material.map) {\r\n      this._mesh.material.map.dispose();\r\n      this._mesh.material.map = null;\r\n    }\r\n\r\n    this._mesh.material.dispose();\r\n    this._mesh.material = null;\r\n  }\r\n}\r\n\r\nexport default Skybox;\r\n\r\nvar noNew = function(world, light) {\r\n  return new Skybox(world, light);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as skybox};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/environment/Skybox.js","// jscs:disable\r\n/*eslint eqeqeq:0*/\r\n\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n *\r\n * Based on 'A Practical Analytic Model for Daylight'\r\n * aka The Preetham Model, the de facto standard analytic skydome model\r\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\r\n *\r\n * First implemented by Simon Wallner\r\n * http://www.simonwallner.at/projects/atmospheric-scattering\r\n *\r\n * Improved by Martin Upitis\r\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\r\n *\r\n * Three.js integration by zz85 http://twitter.com/blurspline\r\n*/\r\n\r\nimport THREE from 'three';\r\n\r\nTHREE.ShaderLib[ 'sky' ] = {\r\n\r\n\tuniforms: {\r\n\r\n\t\tluminance:\t { type: 'f', value: 1 },\r\n\t\tturbidity:\t { type: 'f', value: 2 },\r\n\t\treileigh:\t { type: 'f', value: 1 },\r\n\t\tmieCoefficient:\t { type: 'f', value: 0.005 },\r\n\t\tmieDirectionalG: { type: 'f', value: 0.8 },\r\n\t\tsunPosition: \t { type: 'v3', value: new THREE.Vector3() }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t'varying vec3 vWorldPosition;',\r\n\r\n\t\t'void main() {',\r\n\r\n\t\t\t'vec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\r\n\t\t\t'vWorldPosition = worldPosition.xyz;',\r\n\r\n\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t'}',\r\n\r\n\t].join( '\\n' ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t'uniform sampler2D skySampler;',\r\n\t\t'uniform vec3 sunPosition;',\r\n\t\t'varying vec3 vWorldPosition;',\r\n\r\n\t\t'vec3 cameraPos = vec3(0., 0., 0.);',\r\n\t\t'// uniform sampler2D sDiffuse;',\r\n\t\t'// const float turbidity = 10.0; //',\r\n\t\t'// const float reileigh = 2.; //',\r\n\t\t'// const float luminance = 1.0; //',\r\n\t\t'// const float mieCoefficient = 0.005;',\r\n\t\t'// const float mieDirectionalG = 0.8;',\r\n\r\n\t\t'uniform float luminance;',\r\n\t\t'uniform float turbidity;',\r\n\t\t'uniform float reileigh;',\r\n\t\t'uniform float mieCoefficient;',\r\n\t\t'uniform float mieDirectionalG;',\r\n\r\n\t\t'// constants for atmospheric scattering',\r\n\t\t'const float e = 2.71828182845904523536028747135266249775724709369995957;',\r\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\r\n\r\n\t\t'const float n = 1.0003; // refractive index of air',\r\n\t\t'const float N = 2.545E25; // number of molecules per unit volume for air at',\r\n\t\t\t\t\t\t\t\t'// 288.15K and 1013mb (sea level -45 celsius)',\r\n\t\t'const float pn = 0.035;\t// depolatization factor for standard air',\r\n\r\n\t\t'// wavelength of used primaries, according to preetham',\r\n\t\t'const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);',\r\n\r\n\t\t'// mie stuff',\r\n\t\t'// K coefficient for the primaries',\r\n\t\t'const vec3 K = vec3(0.686, 0.678, 0.666);',\r\n\t\t'const float v = 4.0;',\r\n\r\n\t\t'// optical length at zenith for molecules',\r\n\t\t'const float rayleighZenithLength = 8.4E3;',\r\n\t\t'const float mieZenithLength = 1.25E3;',\r\n\t\t'const vec3 up = vec3(0.0, 1.0, 0.0);',\r\n\r\n\t\t'const float EE = 1000.0;',\r\n\t\t'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\r\n\t\t'// 66 arc seconds -> degrees, and the cosine of that',\r\n\r\n\t\t'// earth shadow hack',\r\n\t\t'const float cutoffAngle = pi/1.95;',\r\n\t\t'const float steepness = 1.5;',\r\n\r\n\r\n\t\t'vec3 totalRayleigh(vec3 lambda)',\r\n\t\t'{',\r\n\t\t\t'return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));',\r\n\t\t'}',\r\n\r\n\t\t// see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\r\n\t\t'// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE',\r\n\t\t'vec3 simplifiedRayleigh()',\r\n\t\t'{',\r\n\t\t\t'return 0.0005 / vec3(94, 40, 18);',\r\n\t\t\t// return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\r\n\t\t'}',\r\n\r\n\t\t'float rayleighPhase(float cosTheta)',\r\n\t\t'{\t ',\r\n\t\t\t'return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\r\n\t\t'//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\r\n\t\t'//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));',\r\n\t\t'}',\r\n\r\n\t\t'vec3 totalMie(vec3 lambda, vec3 K, float T)',\r\n\t\t'{',\r\n\t\t\t'float c = (0.2 * T ) * 10E-18;',\r\n\t\t\t'return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;',\r\n\t\t'}',\r\n\r\n\t\t'float hgPhase(float cosTheta, float g)',\r\n\t\t'{',\r\n\t\t\t'return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));',\r\n\t\t'}',\r\n\r\n\t\t'float sunIntensity(float zenithAngleCos)',\r\n\t\t'{',\r\n\t\t\t'return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));',\r\n\t\t'}',\r\n\r\n\t\t'// float logLuminance(vec3 c)',\r\n\t\t'// {',\r\n\t\t'// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);',\r\n\t\t'// }',\r\n\r\n\t\t'// Filmic ToneMapping http://filmicgames.com/archives/75',\r\n\t\t'float A = 0.15;',\r\n\t\t'float B = 0.50;',\r\n\t\t'float C = 0.10;',\r\n\t\t'float D = 0.20;',\r\n\t\t'float E = 0.02;',\r\n\t\t'float F = 0.30;',\r\n\t\t'float W = 1000.0;',\r\n\r\n\t\t'vec3 Uncharted2Tonemap(vec3 x)',\r\n\t\t'{',\r\n\t\t   'return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;',\r\n\t\t'}',\r\n\r\n\r\n\t\t'void main() ',\r\n\t\t'{',\r\n\t\t\t'float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);',\r\n\r\n\t\t\t'// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;',\r\n\r\n\t\t\t '// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);',\r\n\r\n\t\t\t'float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));',\r\n\r\n\t\t\t'vec3 sunDirection = normalize(sunPosition);',\r\n\r\n\t\t\t'float sunE = sunIntensity(dot(sunDirection, up));',\r\n\r\n\t\t\t'// extinction (absorbtion + out scattering) ',\r\n\t\t\t'// rayleigh coefficients',\r\n\r\n\t\t\t// 'vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;',\r\n\t\t\t'vec3 betaR = simplifiedRayleigh() * reileighCoefficient;',\r\n\r\n\t\t\t'// mie coefficients',\r\n\t\t\t'vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;',\r\n\r\n\t\t\t'// optical length',\r\n\t\t\t'// cutoff angle at 90 to avoid singularity in next formula.',\r\n\t\t\t'float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));',\r\n\t\t\t'float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\r\n\t\t\t'float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\r\n\r\n\r\n\r\n\t\t\t'// combined extinction factor\t',\r\n\t\t\t'vec3 Fex = exp(-(betaR * sR + betaM * sM));',\r\n\r\n\t\t\t'// in scattering',\r\n\t\t\t'float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);',\r\n\r\n\t\t\t'float rPhase = rayleighPhase(cosTheta*0.5+0.5);',\r\n\t\t\t'vec3 betaRTheta = betaR * rPhase;',\r\n\r\n\t\t\t'float mPhase = hgPhase(cosTheta, mieDirectionalG);',\r\n\t\t\t'vec3 betaMTheta = betaM * mPhase;',\r\n\r\n\r\n\t\t\t'vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));',\r\n\t\t\t'Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));',\r\n\r\n\t\t\t'//nightsky',\r\n\t\t\t'vec3 direction = normalize(vWorldPosition - cameraPos);',\r\n\t\t\t'float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]',\r\n\t\t\t'float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]',\r\n\t\t\t'vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);',\r\n\t\t\t'// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;',\r\n\t\t\t'vec3 L0 = vec3(0.1) * Fex;',\r\n\r\n\t\t\t'// composition + solar disc',\r\n\t\t\t'//if (cosTheta > sunAngularDiameterCos)',\r\n\t\t\t'float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);',\r\n\t\t\t'// if (normalize(vWorldPosition - cameraPos).y>0.0)',\r\n\t\t\t'L0 += (sunE * 19000.0 * Fex)*sundisk;',\r\n\r\n\r\n\t\t\t'vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));',\r\n\r\n\t\t\t'vec3 texColor = (Lin+L0);   ',\r\n\t\t\t'texColor *= 0.04 ;',\r\n\t\t\t'texColor += vec3(0.0,0.001,0.0025)*0.3;',\r\n\r\n\t\t\t'float g_fMaxLuminance = 1.0;',\r\n\t\t\t'float fLumScaled = 0.1 / luminance;     ',\r\n\t\t\t'float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); ',\r\n\r\n\t\t\t'float ExposureBias = fLumCompressed;',\r\n\r\n\t\t\t'vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);',\r\n\t\t\t'vec3 color = curr*whiteScale;',\r\n\r\n\t\t\t'vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));',\r\n\r\n\r\n\t\t\t'gl_FragColor.rgb = retColor;',\r\n\r\n\t\t\t'gl_FragColor.a = 1.0;',\r\n\t\t'}',\r\n\r\n\t].join( '\\n' )\r\n\r\n};\r\n\r\nvar Sky = function () {\r\n\r\n\tvar skyShader = THREE.ShaderLib[ 'sky' ];\r\n\tvar skyUniforms = THREE.UniformsUtils.clone( skyShader.uniforms );\r\n\r\n\tvar skyMat = new THREE.ShaderMaterial( {\r\n\t\tfragmentShader: skyShader.fragmentShader,\r\n\t\tvertexShader: skyShader.vertexShader,\r\n\t\tuniforms: skyUniforms,\r\n\t\tside: THREE.BackSide\r\n\t} );\r\n\r\n\tvar skyGeo = new THREE.SphereBufferGeometry( 450000, 32, 15 );\r\n\tvar skyMesh = new THREE.Mesh( skyGeo, skyMat );\r\n\r\n\r\n\t// Expose variables\r\n\tthis.mesh = skyMesh;\r\n\tthis.uniforms = skyUniforms;\r\n\r\n};\r\n\r\nexport default Sky;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/environment/Sky.js","import WorkerPool from './WorkerPool';\r\n\r\nvar Worker = (function() {\r\n  var _maxWorkers = 2;\r\n  var pool;\r\n\r\n  var createWorkers = function(maxWorkers, workerScript) {\r\n    pool = new WorkerPool({\r\n      numThreads: (maxWorkers) ? maxWorkers : _maxWorkers,\r\n      workerScript: (workerScript) ? workerScript : 'vizicities-worker.js'\r\n    });\r\n\r\n    return pool.createWorkers();\r\n  };\r\n\r\n  var exec = function(method, args, transferrables) {\r\n    return pool.exec(method, args, transferrables);\r\n  };\r\n\r\n  return {\r\n    createWorkers: createWorkers,\r\n    exec: exec\r\n  };\r\n})();\r\n\r\nexport default Worker;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/Worker.js","import WorkerPoolWorker from './WorkerPoolWorker';\r\n\r\nconst DEBUG = false;\r\n\r\n// Polyfill for Array.find\r\nif (!Array.prototype.find) {\r\n  Object.defineProperty(Array.prototype, 'find', {\r\n    value: function(predicate) {\r\n      'use strict';\r\n      if (this == null) {\r\n        throw new TypeError('Array.prototype.find called on null or undefined');\r\n      }\r\n      if (typeof predicate !== 'function') {\r\n        throw new TypeError('predicate must be a function');\r\n      }\r\n      var list = Object(this);\r\n      var length = list.length >>> 0;\r\n      var thisArg = arguments[1];\r\n      var value;\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        value = list[i];\r\n        if (predicate.call(thisArg, value, i, list)) {\r\n          return value;\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n  });\r\n}\r\n\r\nclass WorkerPool {\r\n  constructor(options) {\r\n    this.numThreads = options.numThreads || 2;\r\n    this.workerScript = options.workerScript;\r\n\r\n    this.workers = [];\r\n    this.tasks = [];\r\n  }\r\n\r\n  createWorkers() {\r\n    return new Promise((resolve, reject) => {\r\n      var workerPromises = [];\r\n\r\n      for (var i = 0; i < this.numThreads; i++) {\r\n        workerPromises.push(this.createWorker());\r\n      }\r\n\r\n      Promise.all(workerPromises).then(() => {\r\n        if (DEBUG) { console.log('All workers ready', (performance || Date).now()); }\r\n        resolve();\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  createWorker() {\r\n    return new Promise((resolve, reject) => {\r\n      // Initialise worker\r\n      var worker = new WorkerPoolWorker({\r\n        workerScript: this.workerScript\r\n      });\r\n\r\n      // Start worker and wait for it to be ready\r\n      return worker.start().then(() => {\r\n        if (DEBUG) { console.log('Worker ready', (performance || Date).now()); }\r\n\r\n        // Add worker to pool\r\n        this.workers.push(worker);\r\n\r\n        resolve();\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  getFreeWorker() {\r\n    return this.workers.find((worker) => {\r\n      return !worker.busy;\r\n    });\r\n  }\r\n\r\n  // Execute task on a worker\r\n  exec(method, args, transferrables) {\r\n    var deferred = Promise.deferred();\r\n\r\n    // Create task\r\n    var task = {\r\n      method: method,\r\n      args: args,\r\n      transferrables: transferrables,\r\n      deferred: deferred\r\n    };\r\n\r\n    // Add task to queue\r\n    this.tasks.push(task);\r\n\r\n    // Trigger task processing\r\n    this.processTasks();\r\n\r\n    // Return task promise\r\n    return task.deferred.promise;\r\n  }\r\n\r\n  processTasks() {\r\n    if (DEBUG) { console.log('Processing tasks'); }\r\n\r\n    if (this.tasks.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Find free worker\r\n    var worker = this.getFreeWorker();\r\n\r\n    if (!worker) {\r\n      if (DEBUG) { console.log('No workers free'); }\r\n      return;\r\n    }\r\n\r\n    // Get oldest task\r\n    var task = this.tasks.shift();\r\n\r\n    // Execute task on worker\r\n    worker.exec(task.method, task.args, task.transferrables).then((result) => {\r\n      // Trigger task processing\r\n      this.processTasks();\r\n\r\n      // Return result in deferred task promise\r\n      task.deferred.resolve(result);\r\n    }).catch((err) => {\r\n      // Trigger task processing\r\n      this.processTasks();\r\n\r\n      task.deferred.reject(err);\r\n    });\r\n  }\r\n}\r\n\r\nexport default WorkerPool;\r\n\r\n// Quick shim to create deferred native promises\r\nPromise.deferred = function() {\r\n  var result = {};\r\n\r\n  result.promise = new Promise((resolve, reject) => {\r\n    result.resolve = resolve;\r\n    result.reject = reject;\r\n  });\r\n\r\n  return result;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/WorkerPool.js","const DEBUG = false;\r\n\r\nclass WorkerPoolWorker {\r\n  constructor(options) {\r\n    this.workerScript = options.workerScript;\r\n\r\n    this.ready = false;\r\n    this.busy = false;\r\n    this.deferred = null;\r\n  }\r\n\r\n  start() {\r\n    return new Promise((resolve, reject) => {\r\n      this.worker = new Worker(this.workerScript);\r\n\r\n      var onStartup = (event) => {\r\n        if (!event.data || event.data.type !== 'startup') {\r\n          reject();\r\n          return;\r\n        }\r\n\r\n        this.ready = true;\r\n\r\n        // Remove temporary message handler\r\n        this.worker.removeEventListener('message', onStartup);\r\n\r\n        // Set up listener to respond to normal events now\r\n        this.worker.addEventListener('message', (event) => {\r\n          this.onMessage(event);\r\n        });\r\n\r\n        // Resolve once worker is ready\r\n        resolve();\r\n      };\r\n\r\n      // Set up temporary event listener for warmup\r\n      this.worker.addEventListener('message', onStartup);\r\n    });\r\n  }\r\n\r\n  exec(method, args, transferrables) {\r\n    if (DEBUG) { console.log('Execute', method, args, transferrables); }\r\n\r\n    var deferred = Promise.deferred();\r\n\r\n    this.busy = true;\r\n    this.deferred = deferred;\r\n\r\n    this.worker.postMessage({\r\n      method: method,\r\n      args: args\r\n    }, transferrables);\r\n\r\n    return deferred.promise;\r\n  }\r\n\r\n  onMessage(event) {\r\n    if (DEBUG) { console.log('Message received from worker', (performance || Date).now()); }\r\n\r\n    this.busy = false;\r\n\r\n    if (!event.data || event.data.type === 'error' || event.data.type !== 'result') {\r\n      this.deferred.reject(event.data.payload);\r\n      return;\r\n    }\r\n\r\n    this.deferred.resolve(event.data.payload);\r\n  }\r\n}\r\n\r\nexport default WorkerPoolWorker;\r\n\r\n// Quick shim to create deferred native promises\r\nPromise.deferred = function() {\r\n  var result = {};\r\n\r\n  result.promise = new Promise((resolve, reject) => {\r\n    result.resolve = resolve;\r\n    result.reject = reject;\r\n  });\r\n\r\n  return result;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/WorkerPoolWorker.js","import Orbit, {orbit} from './Controls.Orbit';\r\n\r\nconst Controls = {\r\n  Orbit: Orbit,\r\n  orbit, orbit\r\n};\r\n\r\nexport default Controls;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/controls/index.js","import EventEmitter from 'eventemitter3';\r\nimport THREE from 'three';\r\nimport OrbitControls from '../vendor/OrbitControls';\r\nimport TweenLite from 'TweenLite';\r\n\r\nclass Orbit extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n\r\n    // Prevent animation from pausing when tab is inactive\r\n    TweenLite.lagSmoothing(0);\r\n  }\r\n\r\n  // Proxy control events\r\n  //\r\n  // There's currently no distinction between pan, orbit and zoom events\r\n  _initEvents() {\r\n    this._controls.addEventListener('start', (event) => {\r\n      this.startPosition = this._controls.target.clone();\r\n      this.startPolar = this._controls.getPolarAngle();\r\n      this.startAzimuth = this._controls.getAzimuthalAngle();\r\n\r\n      this._world.emit('controlsMoveStart', event.target.target);\r\n    });\r\n\r\n    this._controls.addEventListener('change', (event) => {\r\n      this._world.emit('controlsMove', event.target.target);\r\n    });\r\n\r\n    this._controls.addEventListener('end', (event) => {\r\n      var endPosition = this._controls.target.clone();\r\n      var endPolar = this._controls.getPolarAngle();\r\n      var endAzimuth = this._controls.getAzimuthalAngle();\r\n\r\n      // Did controls change?\r\n      var changed = false;\r\n\r\n      // Panned\r\n      if (Math.abs(endPosition.distanceTo(this.startPosition)) > 0) {\r\n        changed = true;\r\n      }\r\n\r\n      // Tilted\r\n      if (Math.abs(endPolar - this.startPolar) > 0) {\r\n        changed = true;\r\n      }\r\n\r\n      // Obited\r\n      if (Math.abs(endAzimuth - this.startAzimuth) > 0) {\r\n        changed = true;\r\n      }\r\n\r\n      this._world.emit('controlsMoveEnd', event.target.target, changed);\r\n    });\r\n  }\r\n\r\n  // Moving the camera along the [x,y] axis based on a target position\r\n  // Positive x and y goes up and right\r\n  panTo(point, animate) {\r\n    var controls = this._controls;\r\n    var target = controls.target;\r\n\r\n    var deltaX = point.x - target.x;\r\n    var deltaY = point.y - target.z;\r\n\r\n    controls.panLeft(-deltaX, controls.object.matrix);\r\n    controls.panUp(-deltaY, controls.object.matrix);\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  panBy(pointDelta, animate) {\r\n    this._controls.pan(-pointDelta.x, pointDelta.y);\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  // Zooming the camera in and out\r\n  zoomTo(metres, animate) {}\r\n  zoomBy(metresDelta, animate) {\r\n    var controls = this._controls;\r\n\r\n    if (metresDelta < 0) {\r\n      controls.dollyIn(Math.abs(metresDelta));\r\n    } else {\r\n      controls.dollyOut(metresDelta);\r\n    }\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  // Force camera to look at something other than the target\r\n  lookAt(point, animate) {}\r\n\r\n  // Make camera look at the target\r\n  lookAtTarget() {}\r\n\r\n  // Tilt (up and down)\r\n  // 0 is straight down\r\n  // Math.PI / 180 * 90 is flat on the ground\r\n  tiltTo(angle, animate) {\r\n    var controls = this._controls;\r\n    var theta = controls.getPolarAngle();\r\n    var delta = angle - theta;\r\n    controls.rotateUp(-delta);\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  tiltBy(angleDelta, animate) {\r\n    var controls = this._controls;\r\n    controls.rotateUp(-angleDelta);\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  // Rotate (left and right)\r\n  // Right is positive, left negative\r\n  rotateTo(angle, animate) {\r\n    var controls = this._controls;\r\n    var theta = controls.getAzimuthalAngle();\r\n    var delta = angle - theta;\r\n    controls.rotateLeft(-delta);\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  // Right is positive, left negative\r\n  rotateBy(angleDelta, animate) {\r\n    var controls = this._controls;\r\n    controls.rotateLeft(-angleDelta);\r\n\r\n    this.update();\r\n    this._world.emit('controlsMoveEnd', this._controls.target);\r\n  }\r\n\r\n  // Fly to the given point, animating pan and tilt/rotation to final position\r\n  // with nice zoom out and in\r\n  //\r\n  // TODO: Calling flyTo a second time before the previous animation has\r\n  // completed should immediately start the new animation from wherever the\r\n  // previous one has got to\r\n  //\r\n  // TODO: Long-distance pans should prevent the quadtree grid from trying to\r\n  // update by not firing the control update events every frame until the\r\n  // pan velocity calms down a bit\r\n  //\r\n  // TODO: Long-distance plans should zoom out further\r\n  //\r\n  // TODO: Return a promise?\r\n  flyToPoint(point, duration, zoom) {\r\n    // Animation time in seconds\r\n    var animationTime = duration || 2;\r\n\r\n    this._flyTarget = new THREE.Vector3(point.x, 0, point.y);\r\n\r\n    // Calculate delta from current position to fly target\r\n    var diff = new THREE.Vector3().subVectors(this._controls.target, this._flyTarget);\r\n\r\n    this._flyTween = new TweenLite(\r\n      {\r\n        x: 0,\r\n        z: 0,\r\n        // zoom: 0,\r\n        prev: {\r\n          x: 0,\r\n          z: 0\r\n        }\r\n      },\r\n      animationTime,\r\n      {\r\n        x: diff.x,\r\n        z: diff.z,\r\n        // zoom: 1,\r\n        onUpdate: function(tween) {\r\n          var controls = this._controls;\r\n\r\n          // Work out difference since last frame\r\n          var deltaX = tween.target.x - tween.target.prev.x;\r\n          var deltaZ = tween.target.z - tween.target.prev.z;\r\n\r\n          // Move some fraction toward the target point\r\n          controls.panLeft(deltaX, controls.object.matrix);\r\n          controls.panUp(deltaZ, controls.object.matrix);\r\n\r\n          tween.target.prev.x = tween.target.x;\r\n          tween.target.prev.z = tween.target.z;\r\n\r\n          // console.log(Math.sin((tween.target.zoom - 0.5) * Math.PI));\r\n\r\n          // TODO: Get zoom to dolly in and out on pan\r\n          // controls.object.zoom -= Math.sin((tween.target.zoom - 0.5) * Math.PI);\r\n          // controls.object.updateProjectionMatrix();\r\n        },\r\n        onComplete: function(tween) {\r\n          // console.log(`Arrived at flyTarget`);\r\n          this._flyTarget = null;\r\n        },\r\n        onUpdateParams: ['{self}'],\r\n        onCompleteParams: ['{self}'],\r\n        callbackScope: this,\r\n        ease: Power1.easeInOut\r\n      }\r\n    );\r\n\r\n    if (!zoom) {\r\n      return;\r\n    }\r\n\r\n    var zoomTime = animationTime / 2;\r\n\r\n    this._zoomTweenIn = new TweenLite(\r\n      {\r\n        zoom: 0\r\n      },\r\n      zoomTime,\r\n      {\r\n        zoom: 1,\r\n        onUpdate: function(tween) {\r\n          var controls = this._controls;\r\n          controls.dollyIn(1 - 0.01 * tween.target.zoom);\r\n        },\r\n        onComplete: function(tween) {},\r\n        onUpdateParams: ['{self}'],\r\n        onCompleteParams: ['{self}'],\r\n        callbackScope: this,\r\n        ease: Power1.easeInOut\r\n      }\r\n    );\r\n\r\n    this._zoomTweenOut = new TweenLite(\r\n      {\r\n        zoom: 0\r\n      },\r\n      zoomTime,\r\n      {\r\n        zoom: 1,\r\n        delay: zoomTime,\r\n        onUpdate: function(tween) {\r\n          var controls = this._controls;\r\n          controls.dollyOut(0.99 + 0.01 * tween.target.zoom);\r\n        },\r\n        onComplete: function(tween) {},\r\n        onUpdateParams: ['{self}'],\r\n        onCompleteParams: ['{self}'],\r\n        callbackScope: this,\r\n        ease: Power1.easeInOut\r\n      }\r\n    );\r\n  }\r\n\r\n  // TODO: Return a promise?\r\n  flyToLatLon(latlon, duration, noZoom) {\r\n    var point = this._world.latLonToPoint(latlon);\r\n    this.flyToPoint(point, duration, noZoom);\r\n  }\r\n\r\n  // TODO: Make this animate over a user-defined period of time\r\n  //\r\n  // Perhaps use TweenMax for now and implement as a more lightweight solution\r\n  // later on once it all works\r\n  // _animateFlyTo(delta) {\r\n  //   var controls = this._controls;\r\n  //\r\n  //   // this._controls.panLeft(50, controls._controls.object.matrix);\r\n  //   // this._controls.panUp(50, controls._controls.object.matrix);\r\n  //   // this._controls.dollyIn(this._controls.getZoomScale());\r\n  //   // this._controls.dollyOut(this._controls.getZoomScale());\r\n  //\r\n  //   // Calculate delta from current position to fly target\r\n  //   var diff = new THREE.Vector3().subVectors(this._controls.target, this._flyTarget);\r\n  //\r\n  //   // 1000 units per second\r\n  //   var speed = 1000 * (delta / 1000);\r\n  //\r\n  //   // Remove fly target after arrival and snap to target\r\n  //   if (diff.length() < 0.01) {\r\n  //     console.log(`Arrived at flyTarget`);\r\n  //     this._flyTarget = null;\r\n  //     speed = 1;\r\n  //   }\r\n  //\r\n  //   // Move some fraction toward the target point\r\n  //   controls.panLeft(diff.x * speed, controls.object.matrix);\r\n  //   controls.panUp(diff.z * speed, controls.object.matrix);\r\n  // }\r\n\r\n  // Proxy to OrbitControls.update()\r\n  update(delta) {\r\n    this._controls.update(delta);\r\n  }\r\n\r\n  // Add controls to world instance and store world reference\r\n  addTo(world) {\r\n    return world.addControls(this);\r\n  }\r\n\r\n  // Internal method called by World.addControls to actually add the controls\r\n  _addToWorld(world) {\r\n    this._world = world;\r\n\r\n    // TODO: Override panLeft and panUp methods to prevent panning on Y axis\r\n    // See: http://stackoverflow.com/a/26188674/997339\r\n    this._controls = new OrbitControls(world._engine._camera, world._container);\r\n\r\n    // 89 degrees\r\n    this._controls.maxPolarAngle = 1.5533;\r\n\r\n    // this._controls.enableDamping = true;\r\n    // this._controls.dampingFactor = 0.25;\r\n\r\n    this._initEvents();\r\n\r\n    // TODO: Remove now that this is a promise?\r\n    this.emit('added');\r\n\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  // Destroys the controls and removes them from memory\r\n  destroy() {\r\n    // TODO: Remove event listeners\r\n\r\n    this._controls.dispose();\r\n\r\n    this._world = null;\r\n    this._controls = null;\r\n  }\r\n}\r\n\r\nexport default Orbit;\r\n\r\nvar noNew = function() {\r\n  return new Orbit();\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as orbit};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/controls/Controls.Orbit.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\nimport Hammer from 'hammerjs';\r\n\r\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n */\r\n\r\n// This set of controls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\nvar OrbitControls = function ( object, domElement ) {\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n\t// Set to false to disable this control\r\n\tthis.enabled = true;\r\n\r\n\t// \"target\" sets the location of focus, where the object orbits around\r\n\tthis.target = new THREE.Vector3();\r\n\r\n\t// How far you can dolly in and out ( PerspectiveCamera only )\r\n\tthis.minDistance = 0;\r\n\tthis.maxDistance = Infinity;\r\n\r\n\t// How far you can zoom in and out ( OrthographicCamera only )\r\n\tthis.minZoom = 0;\r\n\tthis.maxZoom = Infinity;\r\n\r\n\t// How far you can orbit vertically, upper and lower limits.\r\n\t// Range is 0 to Math.PI radians.\r\n\tthis.minPolarAngle = 0; // radians\r\n\tthis.maxPolarAngle = Math.PI; // radians\r\n\r\n\t// How far you can orbit horizontally, upper and lower limits.\r\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n\tthis.minAzimuthAngle = - Infinity; // radians\r\n\tthis.maxAzimuthAngle = Infinity; // radians\r\n\r\n\t// Set to true to enable damping (inertia)\r\n\t// If damping is enabled, you must call controls.update() in your animation loop\r\n\tthis.enableDamping = false;\r\n\tthis.dampingFactor = 0.25;\r\n\r\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n\t// Set to false to disable zooming\r\n\tthis.enableZoom = true;\r\n\tthis.zoomSpeed = 1.0;\r\n\r\n\t// Set to false to disable rotating\r\n\tthis.enableRotate = true;\r\n\tthis.rotateSpeed = 1.0;\r\n\r\n\t// Set to false to disable panning\r\n\tthis.enablePan = true;\r\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\r\n\r\n\t// Set to true to automatically rotate around the target\r\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n\tthis.autoRotate = false;\r\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n\t// Set to false to disable use of the keys\r\n\tthis.enableKeys = true;\r\n\r\n\t// The four arrow keys\r\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40, CTRL: 17 };\r\n\r\n\t// Mouse buttons\r\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\r\n\r\n\t// for reset\r\n\tthis.target0 = this.target.clone();\r\n\tthis.position0 = this.object.position.clone();\r\n\tthis.zoom0 = this.object.zoom;\r\n\r\n\t//\r\n\t// public methods\r\n\t//\r\n\r\n\tthis.getPolarAngle = function () {\r\n\r\n\t\treturn phi;\r\n\r\n\t};\r\n\r\n\tthis.getAzimuthalAngle = function () {\r\n\r\n\t\treturn theta;\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tscope.target.copy( scope.target0 );\r\n\t\tscope.object.position.copy( scope.position0 );\r\n\t\tscope.object.zoom = scope.zoom0;\r\n\r\n\t\tscope.object.updateProjectionMatrix();\r\n\t\tscope.dispatchEvent( changeEvent );\r\n\r\n\t\tscope.update();\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t};\r\n\r\n\t// this method is exposed, but perhaps it would be better if we can make it private...\r\n\tthis.update = function() {\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\t// so camera.up is the orbit axis\r\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\r\n\t\tvar quatInverse = quat.clone().inverse();\r\n\r\n\t\tvar lastPosition = new THREE.Vector3();\r\n\t\tvar lastQuaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tvar position = scope.object.position;\r\n\r\n\t\t\toffset.copy( position ).sub( scope.target );\r\n\r\n\t\t\t// rotate offset to \"y-axis-is-up\" space\r\n\t\t\toffset.applyQuaternion( quat );\r\n\r\n\t\t\t// angle from z-axis around y-axis\r\n\r\n\t\t\ttheta = Math.atan2( offset.x, offset.z );\r\n\r\n\t\t\t// angle from y-axis\r\n\r\n\t\t\tphi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\r\n\r\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n\t\t\t\trotateLeft( getAutoRotationAngle() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttheta += thetaDelta;\r\n\t\t\tphi += phiDelta;\r\n\r\n\t\t\t// restrict theta to be between desired limits\r\n\t\t\ttheta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, theta ) );\r\n\r\n\t\t\t// restrict phi to be between desired limits\r\n\t\t\tphi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, phi ) );\r\n\r\n\t\t\t// restrict phi to be betwee EPS and PI-EPS\r\n\t\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\r\n\r\n\t\t\tvar radius = offset.length() * scale;\r\n\r\n\t\t\t// restrict radius to be between desired limits\r\n\t\t\tradius = Math.max( scope.minDistance, Math.min( scope.maxDistance, radius ) );\r\n\r\n\t\t\t// move target to panned location\r\n\t\t\tscope.target.add( panOffset );\r\n\r\n\t\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\r\n\t\t\toffset.y = radius * Math.cos( phi );\r\n\t\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\r\n\r\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\r\n\t\t\toffset.applyQuaternion( quatInverse );\r\n\r\n\t\t\tposition.copy( scope.target ).add( offset );\r\n\r\n\t\t\tscope.object.lookAt( scope.target );\r\n\r\n\t\t\tif ( scope.enableDamping === true ) {\r\n\r\n\t\t\t\tthetaDelta *= ( 1 - scope.dampingFactor );\r\n\t\t\t\tphiDelta *= ( 1 - scope.dampingFactor );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthetaDelta = 0;\r\n\t\t\t\tphiDelta = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscale = 1;\r\n\t\t\tpanOffset.set( 0, 0, 0 );\r\n\r\n\t\t\t// update condition is:\r\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\r\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n\t\t\tif ( zoomChanged ||\r\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\r\n\r\n\t\t\t\tscope.dispatchEvent( changeEvent );\r\n\r\n\t\t\t\tlastPosition.copy( scope.object.position );\r\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\r\n\t\t\t\tzoomChanged = false;\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tthis.dispose = function() {\r\n\r\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\r\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\r\n\t\tscope.domElement.removeEventListener( 'mousewheel', onMouseWheel, false );\r\n\t\tscope.domElement.removeEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox\r\n\r\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\r\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\r\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\r\n\r\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\r\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\r\n\t\tdocument.removeEventListener( 'mouseout', onMouseUp, false );\r\n\r\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\r\n\t\twindow.removeEventListener( 'keyup', onKeyUp, false );\r\n\r\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n\r\n\t};\r\n\r\n\t//\r\n\t// internals\r\n\t//\r\n\r\n\tvar scope = this;\r\n\r\n\tvar changeEvent = { type: 'change' };\r\n\tvar startEvent = { type: 'start' };\r\n\tvar endEvent = { type: 'end' };\r\n\r\n\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\r\n\r\n\tvar KEY_STATE = { CTRL : false };\r\n\r\n\tvar state = STATE.NONE;\r\n\r\n\tvar EPS = 0.000001;\r\n\r\n\t// current position in spherical coordinates\r\n\tvar theta;\r\n\tvar phi;\r\n\r\n\tvar phiDelta = 0;\r\n\tvar thetaDelta = 0;\r\n\tvar scale = 1;\r\n\tvar panOffset = new THREE.Vector3();\r\n\tvar zoomChanged = false;\r\n\r\n\tvar rotateStart = new THREE.Vector2();\r\n\tvar rotateEnd = new THREE.Vector2();\r\n\tvar rotateDelta = new THREE.Vector2();\r\n\r\n\tvar panStart = new THREE.Vector2();\r\n\tvar panEnd = new THREE.Vector2();\r\n\tvar panDelta = new THREE.Vector2();\r\n\r\n\tvar dollyStart = new THREE.Vector2();\r\n\tvar dollyEnd = new THREE.Vector2();\r\n\tvar dollyDelta = new THREE.Vector2();\r\n\r\n\tfunction getAutoRotationAngle() {\r\n\r\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n\t}\r\n\r\n\tfunction getZoomScale() {\r\n\r\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n\t}\r\n\r\n\tfunction rotateLeft( angle ) {\r\n\r\n\t\tthetaDelta -= angle;\r\n\r\n\t}\r\n\r\n\tfunction rotateUp( angle ) {\r\n\r\n\t\tphiDelta -= angle;\r\n\r\n\t}\r\n\r\n\tvar panLeft = function() {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\t// return function panLeft( distance, objectMatrix ) {\r\n    //\r\n\t\t// \tvar te = objectMatrix.elements;\r\n    //\r\n\t\t// \t// get X column of objectMatrix\r\n\t\t// \tv.set( te[ 0 ], te[ 1 ], te[ 2 ] );\r\n    //\r\n\t\t// \tv.multiplyScalar( - distance );\r\n    //\r\n\t\t// \tpanOffset.add( v );\r\n    //\r\n\t\t// };\r\n\r\n    // Fixed panning to x/y plane\r\n    return function panLeft(distance, objectMatrix) {\r\n\t    var te = objectMatrix.elements;\r\n\t    // var adjDist = distance / Math.cos(phi);\r\n\r\n\t    v.set(te[ 0 ], 0, te[ 2 ]);\r\n\t    v.multiplyScalar(-distance);\r\n\r\n\t    panOffset.add(v);\r\n\t  };\r\n\r\n\t}();\r\n\r\n  // Fixed panning to x/y plane\r\n\tvar panUp = function() {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\t// return function panUp( distance, objectMatrix ) {\r\n    //\r\n\t\t// \tvar te = objectMatrix.elements;\r\n    //\r\n\t\t// \t// get Y column of objectMatrix\r\n\t\t// \tv.set( te[ 4 ], te[ 5 ], te[ 6 ] );\r\n    //\r\n\t\t// \tv.multiplyScalar( distance );\r\n    //\r\n\t\t// \tpanOffset.add( v );\r\n    //\r\n\t\t// };\r\n\r\n    return function panUp(distance, objectMatrix) {\r\n\t    var te = objectMatrix.elements;\r\n\t    var adjDist = distance / Math.cos(phi);\r\n\r\n\t    v.set(te[ 4 ], 0, te[ 6 ]);\r\n\t    v.multiplyScalar(adjDist);\r\n\r\n\t    panOffset.add(v);\r\n\t  };\r\n\r\n\t}();\r\n\r\n\t// deltaX and deltaY are in pixels; right and down are positive\r\n\tvar pan = function() {\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\treturn function( deltaX, deltaY ) {\r\n\r\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\t\t// perspective\r\n\t\t\t\tvar position = scope.object.position;\r\n\t\t\t\toffset.copy( position ).sub( scope.target );\r\n\t\t\t\tvar targetDistance = offset.length();\r\n\r\n\t\t\t\t// half of the fov is center to top of screen\r\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\t\t// orthographic\r\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / element.clientWidth, scope.object.matrix );\r\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / element.clientHeight, scope.object.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// camera neither orthographic nor perspective\r\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n\t\t\t\tscope.enablePan = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tfunction dollyIn( dollyScale ) {\r\n\r\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\tscale /= dollyScale;\r\n\r\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\r\n\t\t\tscope.object.updateProjectionMatrix();\r\n\t\t\tzoomChanged = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n\t\t\tscope.enableZoom = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction dollyOut( dollyScale ) {\r\n\r\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\tscale *= dollyScale;\r\n\r\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\r\n\t\t\tscope.object.updateProjectionMatrix();\r\n\t\t\tzoomChanged = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n\t\t\tscope.enableZoom = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\t// event callbacks - update the object state\r\n\t//\r\n\r\n\tfunction handleMouseDownRotate( event ) {\r\n\r\n\t\t//console.log( 'handleMouseDownRotate' );\r\n\r\n\t\trotateStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseDownDolly( event ) {\r\n\r\n\t\t//console.log( 'handleMouseDownDolly' );\r\n\r\n\t\tdollyStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseDownPan( event ) {\r\n\r\n\t\t//console.log( 'handleMouseDownPan' );\r\n\r\n\t\tpanStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseMoveRotate( event ) {\r\n\r\n\t\t//console.log( 'handleMouseMoveRotate' );\r\n\r\n\t\trotateEnd.set( event.clientX, event.clientY );\r\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\t// rotating across whole screen goes 360 degrees around\r\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n\r\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\r\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n\t\trotateStart.copy( rotateEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleMouseMoveDolly( event ) {\r\n\r\n\t\t//console.log( 'handleMouseMoveDolly' );\r\n\r\n\t\tdollyEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n\t\tif ( dollyDelta.y > 0 ) {\r\n\r\n\t\t\tdollyIn( getZoomScale() );\r\n\r\n\t\t} else if ( dollyDelta.y < 0 ) {\r\n\r\n\t\t\tdollyOut( getZoomScale() );\r\n\r\n\t\t}\r\n\r\n\t\tdollyStart.copy( dollyEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleMouseMovePan( event ) {\r\n\r\n\t\t//console.log( 'handleMouseMovePan' );\r\n\r\n\t\tpanEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tpanDelta.subVectors( panEnd, panStart );\r\n\r\n\t\tpan( panDelta.x, panDelta.y );\r\n\r\n\t\tpanStart.copy( panEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleMouseUp( event ) {\r\n\r\n\t\t//console.log( 'handleMouseUp' );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseWheel( event ) {\r\n\r\n\t\t//console.log( 'handleMouseWheel' );\r\n\r\n\t\tvar delta = 0;\r\n\r\n\t\tif ( event.wheelDelta !== undefined ) {\r\n\r\n\t\t\t// WebKit / Opera / Explorer 9\r\n\r\n\t\t\tdelta = event.wheelDelta;\r\n\r\n\t\t} else if ( event.detail !== undefined ) {\r\n\r\n\t\t\t// Firefox\r\n\r\n\t\t\tdelta = - event.detail;\r\n\r\n\t\t}\r\n\r\n\t\tif ( delta > 0 ) {\r\n\r\n\t\t\tdollyOut( getZoomScale() );\r\n\r\n\t\t} else if ( delta < 0 ) {\r\n\r\n\t\t\tdollyIn( getZoomScale() );\r\n\r\n\t\t}\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleKeyDown( event ) {\r\n\r\n\t\t//console.log( 'handleKeyDown' );\r\n\r\n\t\tswitch ( event.keyCode ) {\r\n\r\n\t\t\tcase scope.keys.UP:\r\n\t\t\t\tpan( 0, scope.keyPanSpeed );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tscope.dispatchEvent( endEvent );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.BOTTOM:\r\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tscope.dispatchEvent( endEvent );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.LEFT:\r\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tscope.dispatchEvent( endEvent );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.RIGHT:\r\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tscope.dispatchEvent( endEvent );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.CTRL:\r\n\t\t\t\tKEY_STATE.CTRL = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction handleKeyUp( event ) {\r\n\r\n\t\tswitch ( event.keyCode ) {\r\n\t\t\tcase scope.keys.CTRL:\r\n\t\t\t\tKEY_STATE.CTRL = false;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction handleTouchStartRotate( event ) {\r\n\r\n\t\t//console.log( 'handleTouchStartRotate' );\r\n\r\n\t\trotateStart.set( event.pointers[ 0 ].pageX, event.pointers[ 0 ].pageY );\r\n\r\n\t}\r\n\r\n\tfunction handleTouchStartDolly( event ) {\r\n\r\n\t\t//console.log( 'handleTouchStartDolly' );\r\n\r\n\t\tvar dx = event.pointers[ 0 ].pageX - event.pointers[ 1 ].pageX;\r\n\t\tvar dy = event.pointers[ 0 ].pageY - event.pointers[ 1 ].pageY;\r\n\r\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\tdollyStart.set( 0, distance );\r\n\r\n\t}\r\n\r\n\tfunction handleTouchStartPan( event ) {\r\n\r\n\t\t//console.log( 'handleTouchStartPan' );\r\n\r\n\t\tpanStart.set( event.deltaX, event.deltaY );\r\n\r\n\t}\r\n\r\n\tfunction handleTouchMoveRotate( event ) {\r\n\r\n\t\t//console.log( 'handleTouchMoveRotate' );\r\n\r\n\t\trotateEnd.set( event.pointers[ 0 ].pageX, event.pointers[ 0 ].pageY );\r\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\t// rotating across whole screen goes 360 degrees around\r\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n\r\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\r\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n\t\trotateStart.copy( rotateEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleTouchMoveDolly( event ) {\r\n\r\n\t\t//console.log( 'handleTouchMoveDolly' );\r\n\r\n\t\tvar dx = event.pointers[ 0 ].pageX - event.pointers[ 1 ].pageX;\r\n\t\tvar dy = event.pointers[ 0 ].pageY - event.pointers[ 1 ].pageY;\r\n\r\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\tdollyEnd.set( 0, distance );\r\n\r\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n\t\tif ( dollyDelta.y > 0 ) {\r\n\r\n\t\t\tdollyOut( getZoomScale() );\r\n\r\n\t\t} else if ( dollyDelta.y < 0 ) {\r\n\r\n\t\t\tdollyIn( getZoomScale() );\r\n\r\n\t\t}\r\n\r\n\t\tdollyStart.copy( dollyEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleTouchMovePan( event ) {\r\n\r\n\t\t//console.log( 'handleTouchMovePan' );\r\n\r\n\t\tpanEnd.set( event.deltaX, event.deltaY );\r\n\r\n\t\tpanDelta.subVectors( panEnd, panStart );\r\n\r\n\t\tpan( panDelta.x, panDelta.y );\r\n\r\n\t\tpanStart.copy( panEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleTouchEnd( event ) {\r\n\r\n\t\t//console.log( 'handleTouchEnd' );\r\n\r\n\t}\r\n\r\n\t//\r\n\t// event handlers - FSM: listen for events and reset state\r\n\t//\r\n\r\n\tfunction onMouseDown( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\r\n\r\n\t\t\tif (KEY_STATE.CTRL) {\r\n\t\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\t\thandleMouseDownPan( event );\r\n\r\n\t\t\t\tstate = STATE.PAN;\r\n\t\t\t} else {\r\n\t\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\t\thandleMouseDownRotate( event );\r\n\r\n\t\t\t\tstate = STATE.ROTATE;\r\n\t\t\t}\r\n\r\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\r\n\r\n\t\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\t\thandleMouseDownDolly( event );\r\n\r\n\t\t\tstate = STATE.DOLLY;\r\n\r\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\r\n\r\n\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\thandleMouseDownPan( event );\r\n\r\n\t\t\tstate = STATE.PAN;\r\n\r\n\t\t}\r\n\r\n\t\tif ( state !== STATE.NONE ) {\r\n\r\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\r\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\r\n\t\t\tdocument.addEventListener( 'mouseout', onMouseUp, false );\r\n\r\n\t\t\tscope.dispatchEvent( startEvent );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onMouseMove( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif ( state === STATE.ROTATE ) {\r\n\r\n\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\thandleMouseMoveRotate( event );\r\n\r\n\t\t} else if ( state === STATE.DOLLY ) {\r\n\r\n\t\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\t\thandleMouseMoveDolly( event );\r\n\r\n\t\t} else if ( state === STATE.PAN ) {\r\n\r\n\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\thandleMouseMovePan( event );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onMouseUp( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\thandleMouseUp( event );\r\n\r\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\r\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\r\n\t\tdocument.removeEventListener( 'mouseout', onMouseUp, false );\r\n\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t}\r\n\r\n\tfunction onMouseWheel( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\r\n\t\thandleMouseWheel( event );\r\n\r\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t}\r\n\r\n\tfunction onKeyDown( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\r\n\r\n\t\thandleKeyDown( event );\r\n\r\n\t}\r\n\r\n\tfunction onKeyUp( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\r\n\r\n\t\thandleKeyUp( event );\r\n\r\n\t}\r\n\r\n\tfunction onTouchStart( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tswitch ( event.touches.length ) {\r\n\r\n\t\t\tcase 1:\t// one-fingered touch: rotate\r\n\r\n\t\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\t\thandleTouchStartRotate( event );\r\n\r\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\t// two-fingered touch: dolly\r\n\r\n\t\t\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\t\t\thandleTouchStartDolly( event );\r\n\r\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3: // three-fingered touch: pan\r\n\r\n\t\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\t\thandleTouchStartPan( event );\r\n\r\n\t\t\t\tstate = STATE.TOUCH_PAN;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tstate = STATE.NONE;\r\n\r\n\t\t}\r\n\r\n\t\tif ( state !== STATE.NONE ) {\r\n\r\n\t\t\tscope.dispatchEvent( startEvent );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onTouchMove( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\r\n\t\tswitch ( event.touches.length ) {\r\n\r\n\t\t\tcase 1: // one-fingered touch: rotate\r\n\r\n\t\t\t\tif ( scope.enableRotate === false ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\r\n\r\n\t\t\t\thandleTouchMoveRotate( event );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2: // two-fingered touch: dolly\r\n\r\n\t\t\t\tif ( scope.enableZoom === false ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\r\n\r\n\t\t\t\thandleTouchMoveDolly( event );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3: // three-fingered touch: pan\r\n\r\n\t\t\t\tif ( scope.enablePan === false ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\r\n\r\n\t\t\t\thandleTouchMovePan( event );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tstate = STATE.NONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onTouchEnd( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\thandleTouchEnd( event );\r\n\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t}\r\n\r\n\tfunction onContextMenu( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\r\n\r\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\r\n\tscope.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\r\n\tscope.domElement.addEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox\r\n\r\n\t// scope.domElement.addEventListener( 'touchstart', onTouchStart, false );\r\n\t// scope.domElement.addEventListener( 'touchend', onTouchEnd, false );\r\n\t// scope.domElement.addEventListener( 'touchmove', onTouchMove, false );\r\n\r\n\tscope.hammer = new Hammer(scope.domElement);\r\n\r\n\tscope.hammer.get('pan').set({\r\n\t\tpointers: 0,\r\n\t\tdirection: Hammer.DIRECTION_ALL\r\n\t});\r\n\r\n\tscope.hammer.get('pinch').set({\r\n\t\tenable: true,\r\n\t\tthreshold: 0.1\r\n\t});\r\n\r\n\tscope.hammer.on('panstart', function(event) {\r\n\t\tif (scope.enabled === false) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (event.pointerType === 'mouse') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (event.pointers.length === 1) {\r\n\t\t\tif (scope.enablePan === false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\thandleTouchStartPan(event);\r\n\t\t\t// panStart.set(event.deltaX, event.deltaY);\r\n\r\n\t\t\tstate = STATE.TOUCH_PAN;\r\n\t\t} else if (event.pointers.length === 2) {\r\n\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\thandleTouchStartRotate( event );\r\n\r\n\t\t\tstate = STATE.TOUCH_ROTATE;\r\n\t\t}\r\n\r\n\t\tif (state !== STATE.NONE) {\r\n\t\t\tscope.dispatchEvent(startEvent);\r\n\t\t}\r\n\t});\r\n\r\n\tscope.hammer.on('panend', function(event) {\r\n\t\tif (event.pointerType === 'mouse') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tonTouchEnd(event);\r\n\t});\r\n\r\n\tscope.hammer.on('panmove', function(event) {\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tif (event.pointerType === 'mouse') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// event.preventDefault();\r\n\t\t// event.stopPropagation();\r\n\r\n\t\tif (event.pointers.length === 1) {\r\n\t\t\tif ( scope.enablePan === false ) return;\r\n\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\r\n\r\n\t\t\thandleTouchMovePan( event );\r\n\r\n\t\t\t// panEnd.set( event.deltaX, event.deltaY );\r\n\t\t\t//\r\n\t\t\t// panDelta.subVectors( panEnd, panStart );\r\n\t\t\t//\r\n\t\t\t// pan( panDelta.x, panDelta.y );\r\n\t\t\t//\r\n\t\t\t// panStart.copy( panEnd );\r\n\t\t\t//\r\n\t\t\t// scope.update();\r\n\t\t} else if (event.pointers.length === 2) {\r\n\t\t\tif ( scope.enableRotate === false ) return;\r\n\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\r\n\r\n\t\t\thandleTouchMoveRotate( event );\r\n\t\t}\r\n\t});\r\n\r\n\tscope.hammer.on('pinchstart', function(event) {\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tif (event.pointerType === 'mouse') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\thandleTouchStartDolly( event );\r\n\r\n\t\t// var dx = event.pointers[ 0 ].pageX - event.pointers[ 1 ].pageX;\r\n\t\t// var dy = event.pointers[ 0 ].pageY - event.pointers[ 1 ].pageY;\r\n\t\t//\r\n\t\t// var distance = Math.sqrt( dx * dx + dy * dy );\r\n\t\t//\r\n\t\t// dollyStart.set( 0, distance );\r\n\t\t//\r\n\t\tstate = STATE.TOUCH_DOLLY;\r\n\r\n\t\tif (state !== STATE.NONE) {\r\n\t\t\tscope.dispatchEvent(startEvent);\r\n\t\t}\r\n\t});\r\n\r\n\tscope.hammer.on('pinchend', function(event) {\r\n\t\tif (event.pointerType === 'mouse') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tonTouchEnd(event);\r\n\t});\r\n\r\n\tscope.hammer.on('pinchmove', function(event) {\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tif (event.pointerType === 'mouse') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// event.preventDefault();\r\n\t\t// event.stopPropagation();\r\n\r\n\t\tif ( scope.enableZoom === false ) return;\r\n\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\r\n\r\n\t\thandleTouchMoveDolly( event );\r\n\r\n\t\t// var dx = event.pointers[ 0 ].pageX - event.pointers[ 1 ].pageX;\r\n\t\t// var dy = event.pointers[ 0 ].pageY - event.pointers[ 1 ].pageY;\r\n\t\t//\r\n\t\t// var distance = Math.sqrt( dx * dx + dy * dy );\r\n\t\t//\r\n\t\t// dollyEnd.set( 0, distance );\r\n\t\t//\r\n\t\t// dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\t\t//\r\n\t\t// if ( dollyDelta.y > 0 ) {\r\n\t\t//\r\n\t\t// \tdollyOut( getZoomScale() );\r\n\t\t//\r\n\t\t// } else if ( dollyDelta.y < 0 ) {\r\n\t\t//\r\n\t\t// \tdollyIn( getZoomScale() );\r\n\t\t//\r\n\t\t// }\r\n\t\t//\r\n\t\t// dollyStart.copy( dollyEnd );\r\n\t\t//\r\n\t\t// scope.update();\r\n\t});\r\n\r\n\twindow.addEventListener( 'keydown', onKeyDown, false );\r\n\twindow.addEventListener( 'keyup', onKeyUp, false );\r\n\r\n\t// Expose controls methods for programmatic control\r\n\tthis.panLeft = panLeft;\r\n\tthis.panUp = panUp;\r\n\tthis.pan = pan;\r\n\tthis.dollyIn = dollyIn;\r\n\tthis.dollyOut = dollyOut;\r\n\tthis.getZoomScale = getZoomScale;\r\n\tthis.rotateLeft = rotateLeft;\r\n\tthis.rotateUp = rotateUp;\r\n\r\n\t// force an update at start\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\r\nOrbitControls.prototype.constructor = THREE.OrbitControls;\r\n\r\nObject.defineProperties( OrbitControls.prototype, {\r\n\r\n\tcenter: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\r\n\t\t\treturn this.target;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// backward compatibility\r\n\r\n\tnoZoom: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\r\n\t\t\treturn ! this.enableZoom;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\r\n\t\t\tthis.enableZoom = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnoRotate: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\r\n\t\t\treturn ! this.enableRotate;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\r\n\t\t\tthis.enableRotate = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnoPan: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\r\n\t\t\treturn ! this.enablePan;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\r\n\t\t\tthis.enablePan = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnoKeys: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\r\n\t\t\treturn ! this.enableKeys;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\r\n\t\t\tthis.enableKeys = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tstaticMoving : {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\r\n\t\t\treturn ! this.constraint.enableDamping;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\r\n\t\t\tthis.constraint.enableDamping = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdynamicDampingFactor : {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\r\n\t\t\treturn this.constraint.dampingFactor;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\r\n\t\t\tthis.constraint.dampingFactor = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nexport default OrbitControls;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/OrbitControls.js","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hammerjs/hammer.js\n// module id = 50\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_51__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"TweenLite\"\n// module id = 51\n// module chunks = 0","import Layer from './Layer';\r\nimport extend from 'lodash.assign';\r\n\r\nclass LayerGroup extends Layer {\r\n  constructor(options) {\r\n    var defaults = {\r\n      output: false\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    super(_options);\r\n\r\n    this._layers = [];\r\n  }\r\n\r\n  addLayer(layer) {\r\n    this._layers.push(layer);\r\n    return this._world.addLayer(layer);\r\n  }\r\n\r\n  removeLayer(layer) {\r\n    var layerIndex = this._layers.indexOf(layer);\r\n\r\n    if (layerIndex > -1) {\r\n      // Remove from this._layers\r\n      this._layers.splice(layerIndex, 1);\r\n    };\r\n\r\n    this._world.removeLayer(layer);\r\n  }\r\n\r\n  _onAdd(world) {\r\n    return Promise.resolve(this);\r\n  }\r\n\r\n  // Destroy the layers and remove them from the scene and memory\r\n  destroy() {\r\n    // TODO: Sometimes this is already null, find out why\r\n    if (this._layers) {\r\n      for (var i = 0; i < this._layers.length; i++) {\r\n        this._layers[i].destroy();\r\n      }\r\n\r\n      this._layers = null;\r\n    }\r\n\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default LayerGroup;\r\n\r\nvar noNew = function(options) {\r\n  return new LayerGroup(options);\r\n};\r\n\r\nexport {noNew as layerGroup};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/LayerGroup.js","import TileLayer from './TileLayer';\r\nimport ImageTile from './ImageTile';\r\nimport ImageTileLayerBaseMaterial from './ImageTileLayerBaseMaterial';\r\nimport throttle from 'lodash.throttle';\r\nimport THREE from 'three';\r\nimport extend from 'lodash.assign';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// DONE: Find a way to avoid the flashing caused by the gap between old tiles\r\n// being removed and the new tiles being ready for display\r\n//\r\n// DONE: Simplest first step for MVP would be to give each tile mesh the colour\r\n// of the basemap ground so it blends in a little more, or have a huge ground\r\n// plane underneath all the tiles that shows through between tile updates.\r\n//\r\n// Could keep the old tiles around until the new ones are ready, though they'd\r\n// probably need to be layered in a way so the old tiles don't overlap new ones,\r\n// which is similar to how Leaflet approaches this (it has 2 layers)\r\n//\r\n// Could keep the tile from the previous quadtree level visible until all 4\r\n// tiles at the new / current level have finished loading and are displayed.\r\n// Perhaps by keeping a map of tiles by quadcode and a boolean for each of the\r\n// child quadcodes showing whether they are loaded and in view. If all true then\r\n// remove the parent tile, otherwise keep it on a lower layer.\r\n\r\n// TODO: Load and display a base layer separate to the LOD grid that is at a low\r\n// resolution – used as a backup / background to fill in empty areas / distance\r\n\r\n// DONE: Fix the issue where some tiles just don't load, or at least the texture\r\n// never shows up – tends to happen if you quickly zoom in / out past it while\r\n// it's still loading, leaving a blank space\r\n\r\n// TODO: Optimise the request of many image tiles – look at how Leaflet and\r\n// OpenWebGlobe approach this (eg. batching, queues, etc)\r\n\r\n// TODO: Cancel pending tile requests if they get removed from view before they\r\n// reach a ready state (eg. cancel image requests, etc). Need to ensure that the\r\n// images are re-requested when the tile is next in scene (even if from cache)\r\n\r\n// TODO: Consider not performing an LOD calculation on every frame, instead only\r\n// on move end so panning, orbiting and zooming stays smooth. Otherwise it's\r\n// possible for performance to tank if you pan, orbit or zoom rapidly while all\r\n// the LOD calculations are being made and new tiles requested.\r\n//\r\n// Pending tiles should continue to be requested and output to the scene on each\r\n// frame, but no new LOD calculations should be made.\r\n\r\n// This tile layer both updates the quadtree and outputs tiles on every frame\r\n// (throttled to some amount)\r\n//\r\n// This is because the computational complexity of image tiles is generally low\r\n// and so there isn't much jank when running these calculations and outputs in\r\n// realtime\r\n//\r\n// The benefit to doing this is that the underlying map layer continues to\r\n// refresh and update during movement, which is an arguably better experience\r\n\r\nclass ImageTileLayer extends TileLayer {\r\n  constructor(path, options) {\r\n    var defaults = {\r\n      distance: 300000\r\n    };\r\n\r\n    options = extend({}, defaults, options);\r\n\r\n    super(options);\r\n\r\n    this._path = path;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    return new Promise((resolve, reject) => {\r\n      super._onAdd(world).then(() => {\r\n        // TODO: Removed because it causes depth buffer intersection issues\r\n        // with layer on top for some reason. Need to work out why and fix.\r\n        //\r\n        // Add base layer\r\n        // var geom = new THREE.PlaneBufferGeometry(2000000, 2000000, 1);\r\n\r\n        // var baseMaterial;\r\n        // if (this._world._environment._skybox) {\r\n        //   baseMaterial = ImageTileLayerBaseMaterial('#f5f5f3', this._world._environment._skybox.getRenderTarget());\r\n        // } else {\r\n        //   baseMaterial = ImageTileLayerBaseMaterial('#f5f5f3');\r\n        // }\r\n\r\n        // var mesh = new THREE.Mesh(geom, baseMaterial);\r\n\r\n        // // Setting this causes a depth-buffer intersection issue on the\r\n        // // all-the-things example\r\n        // // mesh.renderOrder = -1;\r\n\r\n        // mesh.rotation.x = -90 * Math.PI / 180;\r\n\r\n        // // TODO: It might be overkill to receive a shadow on the base layer as it's\r\n        // // rarely seen (good to have if performance difference is negligible)\r\n        // mesh.receiveShadow = true;\r\n\r\n        // this._baseLayer = mesh;\r\n        // this.add(mesh);\r\n\r\n        // Trigger initial quadtree calculation on the next frame\r\n        //\r\n        // TODO: This is a hack to ensure the camera is all set up - a better\r\n        // solution should be found\r\n        setTimeout(() => {\r\n          this._calculateLOD();\r\n          this._initEvents();\r\n          resolve(this);\r\n        }, 0);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  _initEvents() {\r\n    // Run LOD calculations based on render calls\r\n    //\r\n    // Throttled to 1 LOD calculation per 100ms\r\n    this._throttledWorldUpdate = throttle(this._onWorldUpdate, 100);\r\n\r\n    this._world.on('preUpdate', this._throttledWorldUpdate, this);\r\n    // this._world.on('move', this._onWorldMove, this);\r\n  }\r\n\r\n  _onWorldUpdate() {\r\n    this._calculateLOD();\r\n    this._outputTiles();\r\n  }\r\n\r\n  _onWorldMove(latlon, point) {\r\n    // this._moveBaseLayer(point);\r\n  }\r\n\r\n  _moveBaseLayer(point) {\r\n    this._baseLayer.position.x = point.x;\r\n    this._baseLayer.position.z = point.y;\r\n  }\r\n\r\n  _createTile(quadcode, layer) {\r\n    return new ImageTile(quadcode, this._path, layer);\r\n  }\r\n\r\n  // Destroys the layer and removes it from the scene and memory\r\n  destroy() {\r\n    this._world.off('preUpdate', this._throttledWorldUpdate);\r\n    this._world.off('move', this._onWorldMove);\r\n\r\n    this._throttledWorldUpdate = null;\r\n\r\n    // Dispose of mesh and materials\r\n    // this._baseLayer.geometry.dispose();\r\n    // this._baseLayer.geometry = null;\r\n\r\n    // if (this._baseLayer.material.map) {\r\n    //   this._baseLayer.material.map.dispose();\r\n    //   this._baseLayer.material.map = null;\r\n    // }\r\n\r\n    // this._baseLayer.material.dispose();\r\n    // this._baseLayer.material = null;\r\n\r\n    // this._baseLayer = null;\r\n\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default ImageTileLayer;\r\n\r\nvar noNew = function(path, options) {\r\n  return new ImageTileLayer(path, options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as imageTileLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/ImageTileLayer.js","import Layer from '../Layer';\r\nimport extend from 'lodash.assign';\r\nimport TileCache from './TileCache';\r\nimport THREE from 'three';\r\n\r\n// TODO: Consider removing picking from TileLayer instances as there aren't\r\n// (m)any situations where it would be practical\r\n//\r\n// For example, how would you even know what picking IDs to listen to and what\r\n// to do with them?\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// TODO: Consider keeping a single TileLayer / LOD instance running by default\r\n// that keeps a standard LOD grid for other layers to utilise, rather than\r\n// having to create their own, unique LOD grid and duplicate calculations when\r\n// they're going to use the same grid setup anyway\r\n//\r\n// It still makes sense to be able to have a custom LOD grid for some layers as\r\n// they may want to customise things, maybe not even using a quadtree at all!\r\n//\r\n// Perhaps it makes sense to split out the quadtree stuff into a singleton and\r\n// pass in the necessary parameters each time for the calculation step.\r\n//\r\n// Either way, it seems silly to force layers to have to create a new LOD grid\r\n// each time and create extra, duplicated processing every frame.\r\n\r\n// TODO: Allow passing in of options to define min/max LOD and a distance to use\r\n// for culling tiles beyond that distance.\r\n\r\n// DONE: Prevent tiles from being loaded if they are further than a certain\r\n// distance from the camera and are unlikely to be seen anyway\r\n\r\n// TODO: Avoid performing LOD calculation when it isn't required. For example,\r\n// when nothing has changed since the last frame and there are no tiles to be\r\n// loaded or in need of rendering\r\n\r\n// TODO: Only remove tiles from the layer that aren't to be rendered in the\r\n// current frame – it seems excessive to remove all tiles and re-add them on\r\n// every single frame, even if it's just array manipulation\r\n\r\n// TODO: Fix LOD calculation so min and max LOD can be changed without causing\r\n// problems (eg. making min above 5 causes all sorts of issues)\r\n\r\n// TODO: Reuse THREE objects where possible instead of creating new instances\r\n// on every LOD calculation\r\n\r\n// TODO: Consider not using THREE or LatLon / Point objects in LOD calculations\r\n// to avoid creating unnecessary memory for garbage collection\r\n\r\n// TODO: Prioritise loading of tiles at highest level in the quadtree (those\r\n// closest to the camera) so visual inconsistancies during loading are minimised\r\n\r\nclass TileLayer extends Layer {\r\n  constructor(options) {\r\n    var defaults = {\r\n      picking: false,\r\n      maxCache: 1000,\r\n      maxLOD: 18\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    super(_options);\r\n\r\n    this._destroy = false;\r\n\r\n    this._tileCache = new TileCache(this._options.maxCache, tile => {\r\n      this._destroyTile(tile);\r\n    });\r\n\r\n    // List of tiles from the previous LOD calculation\r\n    this._tileList = [];\r\n\r\n    // TODO: Work out why changing the minLOD causes loads of issues\r\n    this._minLOD = 3;\r\n    this._maxLOD = this._options.maxLOD;\r\n\r\n    this._frustum = new THREE.Frustum();\r\n    this._tiles = new THREE.Object3D();\r\n    this._tilesPicking = new THREE.Object3D();\r\n  }\r\n\r\n  _onAdd(world) {\r\n    this.addToPicking(this._tilesPicking);\r\n    this.add(this._tiles);\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  _updateFrustum() {\r\n    var camera = this._world.getCamera();\r\n    var projScreenMatrix = new THREE.Matrix4();\r\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\r\n\r\n    this._frustum.setFromMatrix(camera.projectionMatrix);\r\n    this._frustum.setFromMatrix(new THREE.Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));\r\n  }\r\n\r\n  _tileInFrustum(tile) {\r\n    var bounds = tile.getBounds();\r\n    return this._frustum.intersectsBox(new THREE.Box3(new THREE.Vector3(bounds[0], 0, bounds[3]), new THREE.Vector3(bounds[2], 0, bounds[1])));\r\n  }\r\n\r\n  // Update and output tiles from the previous LOD checklist\r\n  _outputTiles() {\r\n    if (!this._tiles || this._destroy) {\r\n      return;\r\n    }\r\n\r\n    // Remove all tiles from layer\r\n    this._removeTiles();\r\n\r\n    // Add / re-add tiles\r\n    this._tileList.forEach(tile => {\r\n      // Are the mesh and texture ready?\r\n      //\r\n      // If yes, continue\r\n      // If no, skip\r\n      if (!tile.isReady()) {\r\n        return;\r\n      }\r\n\r\n      // Add tile to layer (and to scene) if not already there\r\n      this._tiles.add(tile.getMesh());\r\n\r\n      if (tile.getPickingMesh()) {\r\n        this._tilesPicking.add(tile.getPickingMesh());\r\n      }\r\n    });\r\n\r\n    // Emit event notifying of new tiles\r\n    this.emit('tilesList', this._tileList.map((tile) => tile));\r\n  }\r\n\r\n  // Works out tiles in the view frustum and stores them in an array\r\n  //\r\n  // Does not output the tiles, deferring this to _outputTiles()\r\n  _calculateLOD() {\r\n    if (this._stop || !this._world || this._destroy) {\r\n      return;\r\n    }\r\n\r\n    // var start = (performance || Date).now();\r\n\r\n    var camera = this._world.getCamera();\r\n\r\n    // 1. Update and retrieve camera frustum\r\n    this._updateFrustum(this._frustum, camera);\r\n\r\n    // 2. Add the four root items of the quadtree to a check list\r\n    var checkList = this._checklist;\r\n    checkList = [];\r\n    checkList.push(this._requestTile('0', this));\r\n    checkList.push(this._requestTile('1', this));\r\n    checkList.push(this._requestTile('2', this));\r\n    checkList.push(this._requestTile('3', this));\r\n\r\n    // 3. Call Divide, passing in the check list\r\n    this._divide(checkList);\r\n\r\n    // // 4. Remove all tiles from layer\r\n    //\r\n    // Moved to _outputTiles() for now\r\n    // this._removeTiles();\r\n\r\n    // Order tile-list by zoom so nearest tiles are requested first\r\n    checkList.sort((a, b) => {\r\n      return a._quadcode.length < b._quadcode.length;\r\n    });\r\n\r\n    // 5. Filter the tiles remaining in the check list\r\n    var tileList = checkList.filter((tile, index) => {\r\n      // Skip tile if it's not in the current view frustum\r\n      if (!this._tileInFrustum(tile)) {\r\n        return false;\r\n      }\r\n\r\n      if (this._options.distance && this._options.distance > 0) {\r\n        // TODO: Can probably speed this up\r\n        var center = tile.getCenter();\r\n        var dist = (new THREE.Vector3(center[0], 0, center[1])).sub(camera.position).length();\r\n\r\n        // Manual distance limit to cut down on tiles so far away\r\n        if (dist > this._options.distance) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Does the tile have a mesh?\r\n      //\r\n      // If yes, continue\r\n      // If no, generate tile mesh, request texture and skip\r\n      if (!tile.getMesh() || tile.isAborted()) {\r\n        tile.requestTileAsync();\r\n      }\r\n\r\n      return true;\r\n\r\n      // Are the mesh and texture ready?\r\n      //\r\n      // If yes, continue\r\n      // If no, skip\r\n      // if (!tile.isReady()) {\r\n      //   return;\r\n      // }\r\n      //\r\n      // // Add tile to layer (and to scene)\r\n      // this._tiles.add(tile.getMesh());\r\n    });\r\n\r\n    // Get list of tiles that were in the previous update but not the\r\n    // current one (for aborting requests, etc)\r\n    var missingTiles = this._tileList.filter((item) => {\r\n      return tileList.indexOf(item) < 0;\r\n    });\r\n\r\n    // Abort tiles that are no longer in view\r\n    missingTiles.forEach((tile) => tile._abortRequest());\r\n\r\n    this._tileList = tileList;\r\n\r\n    // console.log((performance || Date).now() - start);\r\n  }\r\n\r\n  _divide(checkList) {\r\n    var count = 0;\r\n    var currentItem;\r\n    var quadcode;\r\n\r\n    // 1. Loop until count equals check list length\r\n    while (count != checkList.length) {\r\n      currentItem = checkList[count];\r\n      quadcode = currentItem.getQuadcode();\r\n\r\n      // 2. Increase count and continue loop if quadcode equals max LOD / zoom\r\n      if (currentItem.length === this._maxLOD) {\r\n        count++;\r\n        continue;\r\n      }\r\n\r\n      // 3. Else, calculate screen-space error metric for quadcode\r\n      if (this._screenSpaceError(currentItem)) {\r\n        // 4. If error is sufficient...\r\n\r\n        // 4a. Remove parent item from the check list\r\n        checkList.splice(count, 1);\r\n\r\n        // 4b. Add 4 child items to the check list\r\n        checkList.push(this._requestTile(quadcode + '0', this));\r\n        checkList.push(this._requestTile(quadcode + '1', this));\r\n        checkList.push(this._requestTile(quadcode + '2', this));\r\n        checkList.push(this._requestTile(quadcode + '3', this));\r\n\r\n        // 4d. Continue the loop without increasing count\r\n        continue;\r\n      } else {\r\n        // 5. Else, increase count and continue loop\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n  _screenSpaceError(tile) {\r\n    var minDepth = this._minLOD;\r\n    var maxDepth = this._maxLOD;\r\n\r\n    var quadcode = tile.getQuadcode();\r\n\r\n    var camera = this._world.getCamera();\r\n\r\n    // Tweak this value to refine specific point that each quad is subdivided\r\n    //\r\n    // It's used to multiple the dimensions of the tile sides before\r\n    // comparing against the tile distance from camera\r\n    var quality = 3.0;\r\n\r\n    // 1. Return false if quadcode length equals maxDepth (stop dividing)\r\n    if (quadcode.length === maxDepth) {\r\n      return false;\r\n    }\r\n\r\n    // 2. Return true if quadcode length is less than minDepth\r\n    if (quadcode.length < minDepth) {\r\n      return true;\r\n    }\r\n\r\n    // 3. Return false if quadcode bounds are not in view frustum\r\n    if (!this._tileInFrustum(tile)) {\r\n      return false;\r\n    }\r\n\r\n    var center = tile.getCenter();\r\n\r\n    // 4. Calculate screen-space error metric\r\n    // TODO: Use closest distance to one of the 4 tile corners\r\n    var dist = (new THREE.Vector3(center[0], 0, center[1])).sub(camera.position).length();\r\n\r\n    var error = quality * tile.getSide() / dist;\r\n\r\n    // 5. Return true if error is greater than 1.0, else return false\r\n    return (error > 1.0);\r\n  }\r\n\r\n  _removeTiles() {\r\n    if (!this._tiles || !this._tiles.children) {\r\n      return;\r\n    }\r\n\r\n    for (var i = this._tiles.children.length - 1; i >= 0; i--) {\r\n      this._tiles.remove(this._tiles.children[i]);\r\n    }\r\n\r\n    if (!this._tilesPicking || !this._tilesPicking.children) {\r\n      return;\r\n    }\r\n\r\n    for (var i = this._tilesPicking.children.length - 1; i >= 0; i--) {\r\n      this._tilesPicking.remove(this._tilesPicking.children[i]);\r\n    }\r\n  }\r\n\r\n  // Return a new tile instance\r\n  _createTile(quadcode, layer) {}\r\n\r\n  // Get a cached tile or request a new one if not in cache\r\n  _requestTile(quadcode, layer) {\r\n    var tile = this._tileCache.getTile(quadcode);\r\n\r\n    if (!tile) {\r\n      // Set up a brand new tile\r\n      tile = this._createTile(quadcode, layer);\r\n\r\n      // Add tile to cache, though it won't be ready yet as the data is being\r\n      // requested from various places asynchronously\r\n      this._tileCache.setTile(quadcode, tile);\r\n    }\r\n\r\n    return tile;\r\n  }\r\n\r\n  _destroyTile(tile) {\r\n    // Remove tile from scene\r\n    this._tiles.remove(tile.getMesh());\r\n\r\n    // Delete any references to the tile within this component\r\n\r\n    // Call destory on tile instance\r\n    tile.destroy();\r\n  }\r\n\r\n  show() {\r\n    this._stop = false;\r\n\r\n    if (this._tilesPicking) {\r\n      this._tilesPicking.visible = true;\r\n    }\r\n\r\n    this._calculateLOD();\r\n    super.show();\r\n  }\r\n\r\n  hide() {\r\n    this._stop = true;\r\n\r\n    if (this._tilesPicking) {\r\n      this._tilesPicking.visible = false;\r\n    }\r\n\r\n    super.hide();\r\n  }\r\n\r\n  // Destroys the layer and removes it from the scene and memory\r\n  destroy() {\r\n    this._destroy = true;\r\n\r\n    if (this._tiles.children) {\r\n      // Remove all tiles\r\n      for (var i = this._tiles.children.length - 1; i >= 0; i--) {\r\n        this._tiles.remove(this._tiles.children[i]);\r\n      }\r\n    }\r\n\r\n    // Remove tile from picking scene\r\n    this.removeFromPicking(this._tilesPicking);\r\n\r\n    if (this._tilesPicking.children) {\r\n      // Remove all tiles\r\n      for (var i = this._tilesPicking.children.length - 1; i >= 0; i--) {\r\n        this._tilesPicking.remove(this._tilesPicking.children[i]);\r\n      }\r\n    }\r\n\r\n    this._tileCache.destroy();\r\n    this._tileCache = null;\r\n\r\n    this._tiles = null;\r\n    this._tilesPicking = null;\r\n    this._frustum = null;\r\n\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default TileLayer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/TileLayer.js","import LRUCache from 'lru-cache';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// This process is based on a similar approach taken by OpenWebGlobe\r\n// See: https://github.com/OpenWebGlobe/WebViewer/blob/master/source/core/globecache.js\r\n\r\nclass TileCache {\r\n  constructor(cacheLimit, onDestroyTile) {\r\n    this._cache = LRUCache({\r\n      max: cacheLimit,\r\n      dispose: (key, tile) => {\r\n        onDestroyTile(tile);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Returns true if all specified tile providers are ready to be used\r\n  // Otherwise, returns false\r\n  isReady() {\r\n    return false;\r\n  }\r\n\r\n  // Get a cached tile without requesting a new one\r\n  getTile(quadcode) {\r\n    return this._cache.get(quadcode);\r\n  }\r\n\r\n  // Add tile to cache\r\n  setTile(quadcode, tile) {\r\n    this._cache.set(quadcode, tile);\r\n  }\r\n\r\n  // Destroy the cache and remove it from memory\r\n  //\r\n  // TODO: Call destroy method on items in cache\r\n  destroy() {\r\n    this._cache.reset();\r\n    this._cache = null;\r\n  }\r\n}\r\n\r\nexport default TileCache;\r\n\r\nvar noNew = function(cacheLimit, onDestroyTile) {\r\n  return new TileCache(cacheLimit, onDestroyTile);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as tileCache};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/TileCache.js","'use strict'\n\nmodule.exports = LRUCache\n\n// This will be a proper iterable 'Map' in engines that support it,\n// or a fakey-fake PseudoMap in older versions.\nvar Map = require('pseudomap')\nvar util = require('util')\n\n// A linked list to keep track of recently-used-ness\nvar Yallist = require('yallist')\n\n// use symbols if possible, otherwise just _props\nvar hasSymbol = typeof Symbol === 'function' && process.env._nodeLRUCacheForceNoSymbol !== '1'\nvar makeSymbol\nif (hasSymbol) {\n  makeSymbol = function (key) {\n    return Symbol(key)\n  }\n} else {\n  makeSymbol = function (key) {\n    return '_' + key\n  }\n}\n\nvar MAX = makeSymbol('max')\nvar LENGTH = makeSymbol('length')\nvar LENGTH_CALCULATOR = makeSymbol('lengthCalculator')\nvar ALLOW_STALE = makeSymbol('allowStale')\nvar MAX_AGE = makeSymbol('maxAge')\nvar DISPOSE = makeSymbol('dispose')\nvar NO_DISPOSE_ON_SET = makeSymbol('noDisposeOnSet')\nvar LRU_LIST = makeSymbol('lruList')\nvar CACHE = makeSymbol('cache')\n\nfunction naiveLength () { return 1 }\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nfunction LRUCache (options) {\n  if (!(this instanceof LRUCache)) {\n    return new LRUCache(options)\n  }\n\n  if (typeof options === 'number') {\n    options = { max: options }\n  }\n\n  if (!options) {\n    options = {}\n  }\n\n  var max = this[MAX] = options.max\n  // Kind of weird to have a default max of Infinity, but oh well.\n  if (!max ||\n      !(typeof max === 'number') ||\n      max <= 0) {\n    this[MAX] = Infinity\n  }\n\n  var lc = options.length || naiveLength\n  if (typeof lc !== 'function') {\n    lc = naiveLength\n  }\n  this[LENGTH_CALCULATOR] = lc\n\n  this[ALLOW_STALE] = options.stale || false\n  this[MAX_AGE] = options.maxAge || 0\n  this[DISPOSE] = options.dispose\n  this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n  this.reset()\n}\n\n// resize the cache when the max changes.\nObject.defineProperty(LRUCache.prototype, 'max', {\n  set: function (mL) {\n    if (!mL || !(typeof mL === 'number') || mL <= 0) {\n      mL = Infinity\n    }\n    this[MAX] = mL\n    trim(this)\n  },\n  get: function () {\n    return this[MAX]\n  },\n  enumerable: true\n})\n\nObject.defineProperty(LRUCache.prototype, 'allowStale', {\n  set: function (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  },\n  get: function () {\n    return this[ALLOW_STALE]\n  },\n  enumerable: true\n})\n\nObject.defineProperty(LRUCache.prototype, 'maxAge', {\n  set: function (mA) {\n    if (!mA || !(typeof mA === 'number') || mA < 0) {\n      mA = 0\n    }\n    this[MAX_AGE] = mA\n    trim(this)\n  },\n  get: function () {\n    return this[MAX_AGE]\n  },\n  enumerable: true\n})\n\n// resize the cache when the lengthCalculator changes.\nObject.defineProperty(LRUCache.prototype, 'lengthCalculator', {\n  set: function (lC) {\n    if (typeof lC !== 'function') {\n      lC = naiveLength\n    }\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(function (hit) {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      }, this)\n    }\n    trim(this)\n  },\n  get: function () { return this[LENGTH_CALCULATOR] },\n  enumerable: true\n})\n\nObject.defineProperty(LRUCache.prototype, 'length', {\n  get: function () { return this[LENGTH] },\n  enumerable: true\n})\n\nObject.defineProperty(LRUCache.prototype, 'itemCount', {\n  get: function () { return this[LRU_LIST].length },\n  enumerable: true\n})\n\nLRUCache.prototype.rforEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this[LRU_LIST].tail; walker !== null;) {\n    var prev = walker.prev\n    forEachStep(this, fn, walker, thisp)\n    walker = prev\n  }\n}\n\nfunction forEachStep (self, fn, node, thisp) {\n  var hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE]) {\n      hit = undefined\n    }\n  }\n  if (hit) {\n    fn.call(thisp, hit.value, hit.key, self)\n  }\n}\n\nLRUCache.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this[LRU_LIST].head; walker !== null;) {\n    var next = walker.next\n    forEachStep(this, fn, walker, thisp)\n    walker = next\n  }\n}\n\nLRUCache.prototype.keys = function () {\n  return this[LRU_LIST].toArray().map(function (k) {\n    return k.key\n  }, this)\n}\n\nLRUCache.prototype.values = function () {\n  return this[LRU_LIST].toArray().map(function (k) {\n    return k.value\n  }, this)\n}\n\nLRUCache.prototype.reset = function () {\n  if (this[DISPOSE] &&\n      this[LRU_LIST] &&\n      this[LRU_LIST].length) {\n    this[LRU_LIST].forEach(function (hit) {\n      this[DISPOSE](hit.key, hit.value)\n    }, this)\n  }\n\n  this[CACHE] = new Map() // hash of items by key\n  this[LRU_LIST] = new Yallist() // list of items in order of use recency\n  this[LENGTH] = 0 // length of items in the list\n}\n\nLRUCache.prototype.dump = function () {\n  return this[LRU_LIST].map(function (hit) {\n    if (!isStale(this, hit)) {\n      return {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }\n    }\n  }, this).toArray().filter(function (h) {\n    return h\n  })\n}\n\nLRUCache.prototype.dumpLru = function () {\n  return this[LRU_LIST]\n}\n\n/* istanbul ignore next */\nLRUCache.prototype.inspect = function (n, opts) {\n  var str = 'LRUCache {'\n  var extras = false\n\n  var as = this[ALLOW_STALE]\n  if (as) {\n    str += '\\n  allowStale: true'\n    extras = true\n  }\n\n  var max = this[MAX]\n  if (max && max !== Infinity) {\n    if (extras) {\n      str += ','\n    }\n    str += '\\n  max: ' + util.inspect(max, opts)\n    extras = true\n  }\n\n  var maxAge = this[MAX_AGE]\n  if (maxAge) {\n    if (extras) {\n      str += ','\n    }\n    str += '\\n  maxAge: ' + util.inspect(maxAge, opts)\n    extras = true\n  }\n\n  var lc = this[LENGTH_CALCULATOR]\n  if (lc && lc !== naiveLength) {\n    if (extras) {\n      str += ','\n    }\n    str += '\\n  length: ' + util.inspect(this[LENGTH], opts)\n    extras = true\n  }\n\n  var didFirst = false\n  this[LRU_LIST].forEach(function (item) {\n    if (didFirst) {\n      str += ',\\n  '\n    } else {\n      if (extras) {\n        str += ',\\n'\n      }\n      didFirst = true\n      str += '\\n  '\n    }\n    var key = util.inspect(item.key).split('\\n').join('\\n  ')\n    var val = { value: item.value }\n    if (item.maxAge !== maxAge) {\n      val.maxAge = item.maxAge\n    }\n    if (lc !== naiveLength) {\n      val.length = item.length\n    }\n    if (isStale(this, item)) {\n      val.stale = true\n    }\n\n    val = util.inspect(val, opts).split('\\n').join('\\n  ')\n    str += key + ' => ' + val\n  })\n\n  if (didFirst || extras) {\n    str += '\\n'\n  }\n  str += '}'\n\n  return str\n}\n\nLRUCache.prototype.set = function (key, value, maxAge) {\n  maxAge = maxAge || this[MAX_AGE]\n\n  var now = maxAge ? Date.now() : 0\n  var len = this[LENGTH_CALCULATOR](value, key)\n\n  if (this[CACHE].has(key)) {\n    if (len > this[MAX]) {\n      del(this, this[CACHE].get(key))\n      return false\n    }\n\n    var node = this[CACHE].get(key)\n    var item = node.value\n\n    // dispose of the old one before overwriting\n    // split out into 2 ifs for better coverage tracking\n    if (this[DISPOSE]) {\n      if (!this[NO_DISPOSE_ON_SET]) {\n        this[DISPOSE](key, item.value)\n      }\n    }\n\n    item.now = now\n    item.maxAge = maxAge\n    item.value = value\n    this[LENGTH] += len - item.length\n    item.length = len\n    this.get(key)\n    trim(this)\n    return true\n  }\n\n  var hit = new Entry(key, value, len, now, maxAge)\n\n  // oversized objects fall out of cache automatically.\n  if (hit.length > this[MAX]) {\n    if (this[DISPOSE]) {\n      this[DISPOSE](key, value)\n    }\n    return false\n  }\n\n  this[LENGTH] += hit.length\n  this[LRU_LIST].unshift(hit)\n  this[CACHE].set(key, this[LRU_LIST].head)\n  trim(this)\n  return true\n}\n\nLRUCache.prototype.has = function (key) {\n  if (!this[CACHE].has(key)) return false\n  var hit = this[CACHE].get(key).value\n  if (isStale(this, hit)) {\n    return false\n  }\n  return true\n}\n\nLRUCache.prototype.get = function (key) {\n  return get(this, key, true)\n}\n\nLRUCache.prototype.peek = function (key) {\n  return get(this, key, false)\n}\n\nLRUCache.prototype.pop = function () {\n  var node = this[LRU_LIST].tail\n  if (!node) return null\n  del(this, node)\n  return node.value\n}\n\nLRUCache.prototype.del = function (key) {\n  del(this, this[CACHE].get(key))\n}\n\nLRUCache.prototype.load = function (arr) {\n  // reset the cache\n  this.reset()\n\n  var now = Date.now()\n  // A previous serialized cache has the most recent items first\n  for (var l = arr.length - 1; l >= 0; l--) {\n    var hit = arr[l]\n    var expiresAt = hit.e || 0\n    if (expiresAt === 0) {\n      // the item was created without expiration in a non aged cache\n      this.set(hit.k, hit.v)\n    } else {\n      var maxAge = expiresAt - now\n      // dont add already expired items\n      if (maxAge > 0) {\n        this.set(hit.k, hit.v, maxAge)\n      }\n    }\n  }\n}\n\nLRUCache.prototype.prune = function () {\n  var self = this\n  this[CACHE].forEach(function (value, key) {\n    get(self, key, false)\n  })\n}\n\nfunction get (self, key, doUse) {\n  var node = self[CACHE].get(key)\n  if (node) {\n    var hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE]) hit = undefined\n    } else {\n      if (doUse) {\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    if (hit) hit = hit.value\n  }\n  return hit\n}\n\nfunction isStale (self, hit) {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE])) {\n    return false\n  }\n  var stale = false\n  var diff = Date.now() - hit.now\n  if (hit.maxAge) {\n    stale = diff > hit.maxAge\n  } else {\n    stale = self[MAX_AGE] && (diff > self[MAX_AGE])\n  }\n  return stale\n}\n\nfunction trim (self) {\n  if (self[LENGTH] > self[MAX]) {\n    for (var walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      var prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nfunction del (self, node) {\n  if (node) {\n    var hit = node.value\n    if (self[DISPOSE]) {\n      self[DISPOSE](hit.key, hit.value)\n    }\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\n// classy, since V8 prefers predictable objects.\nfunction Entry (key, value, length, now, maxAge) {\n  this.key = key\n  this.value = value\n  this.length = length\n  this.now = now\n  this.maxAge = maxAge || 0\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lru-cache/index.js\n// module id = 56\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 57\n// module chunks = 0","if (process.env.npm_package_name === 'pseudomap' &&\n    process.env.npm_lifecycle_script === 'test')\n  process.env.TEST_PSEUDOMAP = 'true'\n\nif (typeof Map === 'function' && !process.env.TEST_PSEUDOMAP) {\n  module.exports = Map\n} else {\n  module.exports = require('./pseudomap')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pseudomap/map.js\n// module id = 58\n// module chunks = 0","var hasOwnProperty = Object.prototype.hasOwnProperty\n\nmodule.exports = PseudoMap\n\nfunction PseudoMap (set) {\n  if (!(this instanceof PseudoMap)) // whyyyyyyy\n    throw new TypeError(\"Constructor PseudoMap requires 'new'\")\n\n  this.clear()\n\n  if (set) {\n    if ((set instanceof PseudoMap) ||\n        (typeof Map === 'function' && set instanceof Map))\n      set.forEach(function (value, key) {\n        this.set(key, value)\n      }, this)\n    else if (Array.isArray(set))\n      set.forEach(function (kv) {\n        this.set(kv[0], kv[1])\n      }, this)\n    else\n      throw new TypeError('invalid argument')\n  }\n}\n\nPseudoMap.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  Object.keys(this._data).forEach(function (k) {\n    if (k !== 'size')\n      fn.call(thisp, this._data[k].value, this._data[k].key)\n  }, this)\n}\n\nPseudoMap.prototype.has = function (k) {\n  return !!find(this._data, k)\n}\n\nPseudoMap.prototype.get = function (k) {\n  var res = find(this._data, k)\n  return res && res.value\n}\n\nPseudoMap.prototype.set = function (k, v) {\n  set(this._data, k, v)\n}\n\nPseudoMap.prototype.delete = function (k) {\n  var res = find(this._data, k)\n  if (res) {\n    delete this._data[res._index]\n    this._data.size--\n  }\n}\n\nPseudoMap.prototype.clear = function () {\n  var data = Object.create(null)\n  data.size = 0\n\n  Object.defineProperty(this, '_data', {\n    value: data,\n    enumerable: false,\n    configurable: true,\n    writable: false\n  })\n}\n\nObject.defineProperty(PseudoMap.prototype, 'size', {\n  get: function () {\n    return this._data.size\n  },\n  set: function (n) {},\n  enumerable: true,\n  configurable: true\n})\n\nPseudoMap.prototype.values =\nPseudoMap.prototype.keys =\nPseudoMap.prototype.entries = function () {\n  throw new Error('iterators are not implemented in this version')\n}\n\n// Either identical, or both NaN\nfunction same (a, b) {\n  return a === b || a !== a && b !== b\n}\n\nfunction Entry (k, v, i) {\n  this.key = k\n  this.value = v\n  this._index = i\n}\n\nfunction find (data, k) {\n  for (var i = 0, s = '_' + k, key = s;\n       hasOwnProperty.call(data, key);\n       key = s + i++) {\n    if (same(data[key].key, k))\n      return data[key]\n  }\n}\n\nfunction set (data, k, v) {\n  for (var i = 0, s = '_' + k, key = s;\n       hasOwnProperty.call(data, key);\n       key = s + i++) {\n    if (same(data[key].key, k)) {\n      data[key].value = v\n      return\n    }\n  }\n  data.size++\n  data[key] = new Entry(k, v, key)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pseudomap/pseudomap.js\n// module id = 59\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = require('./support/types');\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/util.js\n// module id = 60\n// module chunks = 0","// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n'use strict';\n\nvar isBuffer = require('./isBuffer');\n\nvar isArgumentsObject = require('is-arguments');\nvar isGeneratorFunction = require('is-generator-function');\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\nvar SymbolToStringTagSupported = SymbolSupported && typeof Symbol.toStringTag !== 'undefined';\nvar Uint8ArraySupported = typeof Uint8Array !== 'undefined';\nvar ArrayBufferSupported = typeof ArrayBuffer !== 'undefined';\n\nif (Uint8ArraySupported && SymbolToStringTagSupported) {\n  var TypedArrayPrototype = Object.getPrototypeOf(Uint8Array.prototype);\n\n  var TypedArrayProto_toStringTag =\n      uncurryThis(\n        Object.getOwnPropertyDescriptor(TypedArrayPrototype,\n                                        Symbol.toStringTag).get);\n\n}\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\n\nexports.isGeneratorFunction = isGeneratorFunction;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (ArrayBufferSupported && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\nfunction isTypedArray(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) !== undefined;\n  } else {\n    return (\n      isUint8Array(value) ||\n      isUint8ClampedArray(value) ||\n      isUint16Array(value) ||\n      isUint32Array(value) ||\n      isInt8Array(value) ||\n      isInt16Array(value) ||\n      isInt32Array(value) ||\n      isFloat32Array(value) ||\n      isFloat64Array(value) ||\n      isBigInt64Array(value) ||\n      isBigUint64Array(value)\n    );\n  }\n}\nexports.isTypedArray = isTypedArray;\n\nfunction isUint8Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Uint8Array';\n  } else {\n    return (\n      ObjectToString(value) === '[object Uint8Array]' ||\n      // If it's a Buffer instance _and_ has a `.buffer` property,\n      // this is an ArrayBuffer based buffer; thus it's an Uint8Array\n      // (Old Node.js had a custom non-Uint8Array implementation)\n      isBuffer(value) && value.buffer !== undefined\n    );\n  }\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Uint8ClampedArray';\n  } else {\n    return ObjectToString(value) === '[object Uint8ClampedArray]';\n  }\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Uint16Array';\n  } else {\n    return ObjectToString(value) === '[object Uint16Array]';\n  }\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Uint32Array';\n  } else {\n    return ObjectToString(value) === '[object Uint32Array]';\n  }\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Int8Array';\n  } else {\n    return ObjectToString(value) === '[object Int8Array]';\n  }\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Int16Array';\n  } else {\n    return ObjectToString(value) === '[object Int16Array]';\n  }\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Int32Array';\n  } else {\n    return ObjectToString(value) === '[object Int32Array]';\n  }\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Float32Array';\n  } else {\n    return ObjectToString(value) === '[object Float32Array]';\n  }\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'Float64Array';\n  } else {\n    return ObjectToString(value) === '[object Float64Array]';\n  }\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'BigInt64Array';\n  } else {\n    return ObjectToString(value) === '[object BigInt64Array]';\n  }\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  if (Uint8ArraySupported && SymbolToStringTagSupported) {\n    return TypedArrayProto_toStringTag(value) === 'BigUint64Array';\n  } else {\n    return ObjectToString(value) === '[object BigUint64Array]';\n  }\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n  if (typeof WeakSet === 'undefined') {\n    return false;\n  }\n\n  return isWeakSetToString.working\n    ? isWeakSetToString(value)\n    : value instanceof WeakSet;\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nisSharedArrayBufferToString.working = (\n  typeof SharedArrayBuffer !== 'undefined' &&\n  isSharedArrayBufferToString(new SharedArrayBuffer())\n);\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBuffer;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return Uint8ArraySupported && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/support/types.js\n// module id = 61\n// module chunks = 0","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/support/isBufferBrowser.js\n// module id = 62\n// module chunks = 0","'use strict';\n\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar toStr = Object.prototype.toString;\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn toStr.call(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\ttoStr.call(value) !== '[object Array]' &&\n\t\ttoStr.call(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/is-arguments/index.js\n// module id = 63\n// module chunks = 0","'use strict';\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar generatorFunc = getGeneratorFunc();\nvar GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/is-generator-function/index.js\n// module id = 64\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inherits/inherits_browser.js\n// module id = 65\n// module chunks = 0","module.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lru-cache/~/yallist/yallist.js\n// module id = 66\n// module chunks = 0","import Tile from './Tile';\r\nimport BoxHelper from '../../vendor/BoxHelper';\r\nimport THREE from 'three';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\nclass ImageTile extends Tile {\r\n  constructor(quadcode, path, layer) {\r\n    super(quadcode, path, layer);\r\n  }\r\n\r\n  // Request data for the tile\r\n  requestTileAsync() {\r\n    // Making this asynchronous really speeds up the LOD framerate\r\n    setTimeout(() => {\r\n      if (!this._mesh) {\r\n        this._mesh = this._createMesh();\r\n      }\r\n\r\n      this._requestTile();\r\n    }, 0);\r\n  }\r\n\r\n  destroy() {\r\n    // Cancel any pending requests\r\n    this._abortRequest();\r\n\r\n    // Clear image reference\r\n    this._image = null;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  _createMesh() {\r\n    // Something went wrong and the tile\r\n    //\r\n    // Possibly removed by the cache before loaded\r\n    if (!this._center) {\r\n      return;\r\n    }\r\n\r\n    var mesh = new THREE.Object3D();\r\n    var geom = new THREE.PlaneBufferGeometry(this._side, this._side, 1);\r\n\r\n    var material;\r\n    if (!this._world._environment._skybox) {\r\n      material = new THREE.MeshBasicMaterial({\r\n        depthWrite: false\r\n      });\r\n\r\n      // var material = new THREE.MeshPhongMaterial({\r\n      //   depthWrite: false\r\n      // });\r\n    } else {\r\n      // Other MeshStandardMaterial settings\r\n      //\r\n      // material.envMapIntensity will change the amount of colour reflected(?)\r\n      // from the environment map – can be greater than 1 for more intensity\r\n\r\n      material = new THREE.MeshStandardMaterial({\r\n        depthWrite: false\r\n      });\r\n      material.roughness = 1;\r\n      material.metalness = 0.1;\r\n      material.envMap = this._world._environment._skybox.getRenderTarget();\r\n    }\r\n\r\n    var localMesh = new THREE.Mesh(geom, material);\r\n    localMesh.rotation.x = -90 * Math.PI / 180;\r\n\r\n    localMesh.receiveShadow = true;\r\n\r\n    // Setting this causes a depth-buffer intersection issue on the\r\n    // all-the-things example\r\n    // localMesh.renderOrder = 2;\r\n\r\n    mesh.add(localMesh);\r\n\r\n    // Setting this causes a depth-buffer intersection issue on the\r\n    // all-the-things example\r\n    // mesh.renderOrder = 2;\r\n\r\n    mesh.position.x = this._center[0];\r\n    mesh.position.z = this._center[1];\r\n\r\n    // var box = new BoxHelper(localMesh);\r\n    // mesh.add(box);\r\n    //\r\n    // mesh.add(this._createDebugMesh());\r\n\r\n    return mesh;\r\n  }\r\n\r\n  _createDebugMesh() {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 256;\r\n    canvas.height = 256;\r\n\r\n    var context = canvas.getContext('2d');\r\n    context.font = 'Bold 20px Helvetica Neue, Verdana, Arial';\r\n    context.fillStyle = '#ff0000';\r\n    context.fillText(this._quadcode, 20, canvas.width / 2 - 5);\r\n    context.fillText(this._tile.toString(), 20, canvas.width / 2 + 25);\r\n\r\n    var texture = new THREE.Texture(canvas);\r\n\r\n    // Silky smooth images when tilted\r\n    texture.magFilter = THREE.LinearFilter;\r\n    texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n\r\n    // TODO: Set this to renderer.getMaxAnisotropy() / 4\r\n    texture.anisotropy = 4;\r\n\r\n    texture.needsUpdate = true;\r\n\r\n    var material = new THREE.MeshBasicMaterial({\r\n      map: texture,\r\n      transparent: true,\r\n      depthWrite: false\r\n    });\r\n\r\n    var geom = new THREE.PlaneBufferGeometry(this._side, this._side, 1);\r\n    var mesh = new THREE.Mesh(geom, material);\r\n\r\n    mesh.rotation.x = -90 * Math.PI / 180;\r\n    mesh.position.y = 0.1;\r\n\r\n    return mesh;\r\n  }\r\n\r\n  _requestTile() {\r\n    var urlParams = {\r\n      x: this._tile[0],\r\n      y: this._tile[1],\r\n      z: this._tile[2]\r\n    };\r\n\r\n    var url = this._getTileURL(urlParams);\r\n\r\n    var image = document.createElement('img');\r\n\r\n    this._aborted = false;\r\n\r\n    image.addEventListener('load', event => {\r\n      if (this.isAborted()) {\r\n        return;\r\n      }\r\n\r\n      var texture = new THREE.Texture();\r\n\r\n      texture.image = image;\r\n      texture.needsUpdate = true;\r\n\r\n      // Silky smooth images when tilted\r\n      texture.magFilter = THREE.LinearFilter;\r\n      texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n\r\n      // TODO: Set this to renderer.getMaxAnisotropy() / 4\r\n      texture.anisotropy = 4;\r\n\r\n      texture.needsUpdate = true;\r\n\r\n      // Something went wrong and the tile or its material is missing\r\n      //\r\n      // Possibly removed by the cache before the image loaded\r\n      if (!this._mesh || !this._mesh.children[0] || !this._mesh.children[0].material) {\r\n        return;\r\n      }\r\n\r\n      this._mesh.children[0].material.map = texture;\r\n      this._mesh.children[0].material.needsUpdate = true;\r\n\r\n      this._texture = texture;\r\n      this._ready = true;\r\n    }, false);\r\n\r\n    // image.addEventListener('progress', event => {}, false);\r\n    // image.addEventListener('error', event => {}, false);\r\n\r\n    image.crossOrigin = '';\r\n\r\n    // Load image\r\n    image.src = url;\r\n\r\n    this._image = image;\r\n  }\r\n\r\n  _abortRequest() {\r\n    if (!this._image || this._ready) {\r\n      return;\r\n    }\r\n\r\n    this._aborted = true;\r\n\r\n    this._image.src = '';\r\n  }\r\n}\r\n\r\nexport default ImageTile;\r\n\r\nvar noNew = function(quadcode, path, layer) {\r\n  return new ImageTile(quadcode, path, layer);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as imageTile};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/ImageTile.js","import {point as Point} from '../../geo/Point';\r\nimport {latLon as LatLon} from '../../geo/LatLon';\r\nimport THREE from 'three';\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// Manages a single tile and its layers\r\n\r\nvar r2d = 180 / Math.PI;\r\n\r\nvar tileURLRegex = /\\{([szxy])\\}/g;\r\n\r\nclass Tile {\r\n  constructor(quadcode, path, layer) {\r\n    this._layer = layer;\r\n    this._world = layer._world;\r\n    this._quadcode = quadcode;\r\n    this._path = path;\r\n\r\n    this._ready = false;\r\n    this._aborted = false;\r\n\r\n    this._tile = this._quadcodeToTile(quadcode);\r\n\r\n    // Bottom-left and top-right bounds in WGS84 coordinates\r\n    this._boundsLatLon = this._tileBoundsWGS84(this._tile);\r\n\r\n    // Bottom-left and top-right bounds in world coordinates\r\n    this._boundsWorld = this._tileBoundsFromWGS84(this._boundsLatLon);\r\n\r\n    // Tile center in world coordinates\r\n    this._center = this._boundsToCenter(this._boundsWorld);\r\n\r\n    // Tile center in projected coordinates\r\n    this._centerLatlon = this._world.pointToLatLon(Point(this._center[0], this._center[1]));\r\n\r\n    // Length of a tile side in world coorindates\r\n    this._side = this._getSide(this._boundsWorld);\r\n\r\n    // Point scale for tile (for unit conversion)\r\n    this._pointScale = this._world.pointScale(this._centerLatlon);\r\n  }\r\n\r\n  // Returns true if the tile mesh and texture are ready to be used\r\n  // Otherwise, returns false\r\n  isReady() {\r\n    return this._ready;\r\n  }\r\n\r\n  isAborted() {\r\n    return this._aborted;\r\n  }\r\n\r\n  // Request data for the tile\r\n  requestTileAsync() {}\r\n\r\n  getQuadcode() {\r\n    return this._quadcode;\r\n  }\r\n\r\n  getBounds() {\r\n    return this._boundsWorld;\r\n  }\r\n\r\n  getCenter() {\r\n    return this._center;\r\n  }\r\n\r\n  getSide() {\r\n    return this._side;\r\n  }\r\n\r\n  getMesh() {\r\n    return this._mesh;\r\n  }\r\n\r\n  getPickingMesh() {\r\n    return this._pickingMesh;\r\n  }\r\n\r\n  // Destroys the tile and removes it from the layer and memory\r\n  //\r\n  // Ensure that this leaves no trace of the tile – no textures, no meshes,\r\n  // nothing in memory or the GPU\r\n  destroy() {\r\n    // console.log('Destroying tile', this._quadcode);\r\n\r\n    // Delete reference to layer and world\r\n    this._layer = null;\r\n    this._world = null;\r\n\r\n    // Delete location references\r\n    this._boundsLatLon = null;\r\n    this._boundsWorld = null;\r\n    this._center = null;\r\n\r\n    // Done if no mesh\r\n    if (!this._mesh && !this._pickingMesh) {\r\n      return;\r\n    }\r\n\r\n    this.destroyMesh(this._mesh);\r\n    this.destroyMesh(this._pickingMesh);\r\n\r\n    this._mesh = null;\r\n    this._pickingMesh = null;\r\n  }\r\n\r\n  destroyMesh(mesh, dispose = true) {\r\n    if (mesh) {\r\n      if (mesh.children) {\r\n        mesh.children.forEach((child) => {\r\n          mesh.remove(child);\r\n          this.destroyMesh(child);\r\n        });\r\n      }\r\n\r\n      if (dispose) {\r\n        if (mesh.geometry) {\r\n          mesh.geometry.dispose();\r\n          mesh.geometry = null;\r\n        }\r\n\r\n        if (mesh.material) {\r\n          if (mesh.material.map) {\r\n            mesh.material.map.dispose();\r\n            mesh.material.map = null;\r\n          }\r\n\r\n          mesh.material.dispose();\r\n          mesh.material = null;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _createMesh() {}\r\n  _createDebugMesh() {}\r\n\r\n  _getTileURL(urlParams) {\r\n    if (!urlParams.s) {\r\n      // Default to a random choice of a, b or c\r\n      urlParams.s = String.fromCharCode(97 + Math.floor(Math.random() * 3));\r\n    }\r\n\r\n    tileURLRegex.lastIndex = 0;\r\n    return this._path.replace(tileURLRegex, function(value, key) {\r\n      // Replace with paramter, otherwise keep existing value\r\n      return urlParams[key];\r\n    });\r\n  }\r\n\r\n  // Convert from quadcode to TMS tile coordinates\r\n  _quadcodeToTile(quadcode) {\r\n    var x = 0;\r\n    var y = 0;\r\n    var z = quadcode.length;\r\n\r\n    for (var i = z; i > 0; i--) {\r\n      var mask = 1 << (i - 1);\r\n      var q = +quadcode[z - i];\r\n      if (q === 1) {\r\n        x |= mask;\r\n      }\r\n      if (q === 2) {\r\n        y |= mask;\r\n      }\r\n      if (q === 3) {\r\n        x |= mask;\r\n        y |= mask;\r\n      }\r\n    }\r\n\r\n    return [x, y, z];\r\n  }\r\n\r\n  // Convert WGS84 tile bounds to world coordinates\r\n  _tileBoundsFromWGS84(boundsWGS84) {\r\n    var sw = this._layer._world.latLonToPoint(LatLon(boundsWGS84[1], boundsWGS84[0]));\r\n    var ne = this._layer._world.latLonToPoint(LatLon(boundsWGS84[3], boundsWGS84[2]));\r\n\r\n    return [sw.x, sw.y, ne.x, ne.y];\r\n  }\r\n\r\n  // Get tile bounds in WGS84 coordinates\r\n  _tileBoundsWGS84(tile) {\r\n    var e = this._tile2lon(tile[0] + 1, tile[2]);\r\n    var w = this._tile2lon(tile[0], tile[2]);\r\n    var s = this._tile2lat(tile[1] + 1, tile[2]);\r\n    var n = this._tile2lat(tile[1], tile[2]);\r\n    return [w, s, e, n];\r\n  }\r\n\r\n  _tile2lon(x, z) {\r\n    return x / Math.pow(2, z) * 360 - 180;\r\n  }\r\n\r\n  _tile2lat(y, z) {\r\n    var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\r\n    return r2d * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\r\n  }\r\n\r\n  _boundsToCenter(bounds) {\r\n    var x = bounds[0] + (bounds[2] - bounds[0]) / 2;\r\n    var y = bounds[1] + (bounds[3] - bounds[1]) / 2;\r\n\r\n    return [x, y];\r\n  }\r\n\r\n  _getSide(bounds) {\r\n    return (new THREE.Vector3(bounds[0], 0, bounds[3])).sub(new THREE.Vector3(bounds[0], 0, bounds[1])).length();\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/Tile.js","// jscs:disable\r\n/* eslint-disable */\r\n\r\nimport THREE from 'three';\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nBoxHelper = function ( object ) {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { linewidth: 2, color: 0xff0000 } ) );\r\n\r\n\tif ( object !== undefined ) {\r\n\r\n\t\tthis.update( object );\r\n\r\n\t}\r\n\r\n};\r\n\r\nBoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nBoxHelper.prototype.constructor = BoxHelper;\r\n\r\nBoxHelper.prototype.update = ( function () {\r\n\r\n\tvar box = new THREE.Box3();\r\n\r\n\treturn function ( object ) {\r\n\r\n\t\tbox.setFromObject( object );\r\n\r\n\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\tvar min = box.min;\r\n\t\tvar max = box.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport default BoxHelper;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/BoxHelper.js","import THREE from 'three';\r\n\r\nexport default function(colour, skyboxTarget) {\r\n  var canvas = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n\r\n  var context = canvas.getContext('2d');\r\n  context.fillStyle = colour;\r\n  context.fillRect(0, 0, canvas.width, canvas.height);\r\n  // context.strokeStyle = '#D0D0CF';\r\n  // context.strokeRect(0, 0, canvas.width, canvas.height);\r\n\r\n  var texture = new THREE.Texture(canvas);\r\n\r\n  // // Silky smooth images when tilted\r\n  // texture.magFilter = THREE.LinearFilter;\r\n  // texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n  // //\r\n  // // // TODO: Set this to renderer.getMaxAnisotropy() / 4\r\n  // texture.anisotropy = 4;\r\n\r\n  // texture.wrapS = THREE.RepeatWrapping;\r\n  // texture.wrapT = THREE.RepeatWrapping;\r\n  // texture.repeat.set(segments, segments);\r\n\r\n  texture.needsUpdate = true;\r\n\r\n  var material;\r\n\r\n  if (!skyboxTarget) {\r\n    material = new THREE.MeshBasicMaterial({\r\n      map: texture,\r\n      depthWrite: false\r\n    });\r\n  } else {\r\n    material = new THREE.MeshStandardMaterial({\r\n      map: texture,\r\n      depthWrite: false\r\n    });\r\n    material.roughness = 1;\r\n    material.metalness = 0.1;\r\n    material.envMap = skyboxTarget;\r\n  }\r\n\r\n  return material;\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/ImageTileLayerBaseMaterial.js","import TileLayer from './TileLayer';\r\nimport extend from 'lodash.assign';\r\nimport GeoJSONTile from './GeoJSONTile';\r\nimport throttle from 'lodash.throttle';\r\nimport THREE from 'three';\r\n\r\n// TODO: Offer on-the-fly slicing of static, non-tile-based GeoJSON files into a\r\n// tile grid using geojson-vt\r\n//\r\n// See: https://github.com/mapbox/geojson-vt\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// TODO: Consider pausing per-frame output during movement so there's little to\r\n// no jank caused by previous tiles still processing\r\n\r\n// This tile layer only updates the quadtree after world movement has occurred\r\n//\r\n// Tiles from previous quadtree updates are updated and outputted every frame\r\n// (or at least every frame, throttled to some amount)\r\n//\r\n// This is because the complexity of TopoJSON tiles requires a lot of processing\r\n// and so makes movement janky if updates occur every frame – only updating\r\n// after movement means frame drops are less obvious due to heavy processing\r\n// occurring while the view is generally stationary\r\n//\r\n// The downside is that until new tiles are requested and outputted you will\r\n// see blank spaces as you orbit and move around\r\n//\r\n// An added benefit is that it dramatically reduces the number of tiles being\r\n// requested over a period of time and the time it takes to go from request to\r\n// screen output\r\n//\r\n// It may be possible to perform these updates per-frame once Web Worker\r\n// processing is added\r\n\r\nclass GeoJSONTileLayer extends TileLayer {\r\n  constructor(path, options) {\r\n    var defaults = {\r\n      maxLOD: 14,\r\n      distance: 30000,\r\n      workers: false\r\n    };\r\n\r\n    options = extend({}, defaults, options);\r\n\r\n    super(options);\r\n\r\n    this.defaults = defaults;\r\n\r\n    this._path = path;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    return new Promise((resolve, reject) => {\r\n      super._onAdd(world).then(() => {\r\n        // Trigger initial quadtree calculation on the next frame\r\n        //\r\n        // TODO: This is a hack to ensure the camera is all set up - a better\r\n        // solution should be found\r\n        setTimeout(() => {\r\n          this._calculateLOD();\r\n          this._initEvents();\r\n        }, 0);\r\n\r\n        resolve(this);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  _initEvents() {\r\n    // Run LOD calculations based on render calls\r\n    //\r\n    // Throttled to 1 LOD calculation per 100ms\r\n    this._throttledWorldUpdate = throttle(this._onWorldUpdate, 100);\r\n\r\n    this._world.on('preUpdate', this._throttledWorldUpdate, this);\r\n    this._world.on('move', this._onWorldMove, this);\r\n    this._world.on('controlsMove', this._onControlsMove, this);\r\n  }\r\n\r\n  // Update and output tiles each frame (throttled)\r\n  _onWorldUpdate() {\r\n    if (this._pauseOutput || this._disableOutput) {\r\n      return;\r\n    }\r\n\r\n    this._outputTiles();\r\n  }\r\n\r\n  // Update tiles grid after world move, but don't output them\r\n  _onWorldMove(latlon, point) {\r\n    if (this._disableOutput) {\r\n      return;\r\n    }\r\n\r\n    this._pauseOutput = false;\r\n    this._calculateLOD();\r\n  }\r\n\r\n  // Pause updates during control movement for less visual jank\r\n  _onControlsMove() {\r\n    if (this._disableOutput) {\r\n      return;\r\n    }\r\n\r\n    this._pauseOutput = true;\r\n  }\r\n\r\n  _createTile(quadcode, layer) {\r\n    var newOptions = extend({}, this.defaults, this._options, {\r\n      outputToScene: false\r\n    });\r\n\r\n    delete newOptions.attribution;\r\n\r\n    return new GeoJSONTile(quadcode, this._path, layer, newOptions);\r\n  }\r\n\r\n  hide() {\r\n    this._pauseOutput = true;\r\n    super.hide();\r\n  }\r\n\r\n  show() {\r\n    this._pauseOutput = false;\r\n    super.show();\r\n  }\r\n\r\n  // Destroys the layer and removes it from the scene and memory\r\n  destroy() {\r\n    this._world.off('preUpdate', this._throttledWorldUpdate);\r\n    this._world.off('move', this._onWorldMove);\r\n\r\n    this._throttledWorldUpdate = null;\r\n\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default GeoJSONTileLayer;\r\n\r\nvar noNew = function(path, options) {\r\n  return new GeoJSONTileLayer(path, options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as geoJSONTileLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/GeoJSONTileLayer.js","import Tile from './Tile';\r\nimport {geoJSONLayer as GeoJSONLayer} from '../GeoJSONLayer';\r\nimport {geoJSONWorkerLayer as GeoJSONWorkerLayer} from '../GeoJSONWorkerLayer';\r\nimport BoxHelper from '../../vendor/BoxHelper';\r\nimport THREE from 'three';\r\nimport reqwest from 'reqwest';\r\nimport {point as Point} from '../../geo/Point';\r\nimport {latLon as LatLon} from '../../geo/LatLon';\r\nimport extend from 'lodash.assign';\r\n// import Offset from 'polygon-offset';\r\nimport GeoJSON from '../../util/GeoJSON';\r\nimport Buffer from '../../util/Buffer';\r\nimport PickingMaterial from '../../engine/PickingMaterial';\r\n\r\n// TODO: Map picking IDs to some reference within the tile data / geometry so\r\n// that something useful can be done when an object is picked / clicked on\r\n\r\n// TODO: Make sure nothing is left behind in the heap after calling destroy()\r\n\r\n// TODO: Perform tile request and processing in a Web Worker\r\n//\r\n// Use Operative (https://github.com/padolsey/operative)\r\n//\r\n// Would it make sense to have the worker functionality defined in a static\r\n// method so it only gets initialised once and not on every tile instance?\r\n//\r\n// Otherwise, worker processing logic would have to go in the tile layer so not\r\n// to waste loads of time setting up a brand new worker with three.js for each\r\n// tile every single time.\r\n//\r\n// Unsure of the best way to get three.js and VIZI into the worker\r\n//\r\n// Would need to set up a CRS / projection identical to the world instance\r\n//\r\n// Is it possible to bypass requirements on external script by having multiple\r\n// simple worker methods that each take enough inputs to perform a single task\r\n// without requiring VIZI or three.js? So long as the heaviest logic is done in\r\n// the worker and transferrable objects are used then it should be better than\r\n// nothing. Would probably still need things like earcut...\r\n//\r\n// After all, the three.js logic and object creation will still need to be\r\n// done on the main thread regardless so the worker should try to do as much as\r\n// possible with as few dependencies as possible.\r\n//\r\n// Have a look at how this is done in Tangram before implementing anything as\r\n// the approach there is pretty similar and robust.\r\n\r\nclass GeoJSONTile extends Tile {\r\n  constructor(quadcode, path, layer, options) {\r\n    super(quadcode, path, layer);\r\n\r\n    this._defaultStyle = GeoJSON.defaultStyle;\r\n\r\n    var defaults = {\r\n      workers: false,\r\n      output: true,\r\n      outputToScene: false,\r\n      interactive: false,\r\n      topojson: false,\r\n      filter: null,\r\n      onEachFeature: null,\r\n      polygonMaterial: null,\r\n      onPolygonMesh: null,\r\n      onPolygonBufferAttributes: null,\r\n      polylineMaterial: null,\r\n      onPolylineMesh: null,\r\n      onPolylineBufferAttributes: null,\r\n      pointGeometry: null,\r\n      pointMaterial: null,\r\n      onPointMesh: null,\r\n      style: GeoJSON.defaultStyle,\r\n      keepFeatures: false\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    if (typeof options.style === 'function') {\r\n      _options.style = options.style;\r\n    } else {\r\n      _options.style = extend({}, defaults.style, options.style);\r\n    }\r\n\r\n    this._options = _options;\r\n  }\r\n\r\n  // Request data for the tile\r\n  requestTileAsync() {\r\n    // Making this asynchronous really speeds up the LOD framerate\r\n    setTimeout(() => {\r\n      if (!this._mesh) {\r\n        this._mesh = this._createMesh();\r\n        // this._shadowCanvas = this._createShadowCanvas();\r\n      }\r\n\r\n      this._requestTile();\r\n    }, 0);\r\n  }\r\n\r\n  // TODO: Destroy GeoJSONLayer\r\n  destroy() {\r\n    // Cancel any pending requests\r\n    this._abortRequest();\r\n\r\n    // Clear request reference\r\n    this._request = null;\r\n\r\n    if (this._geojsonLayer) {\r\n      this._geojsonLayer.destroy();\r\n      this._geojsonLayer = null;\r\n    }\r\n\r\n    this._mesh = null;\r\n\r\n    // TODO: Properly dispose of picking mesh\r\n    this._pickingMesh = null;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  _createMesh() {\r\n    // Something went wrong and the tile\r\n    //\r\n    // Possibly removed by the cache before loaded\r\n    if (!this._center) {\r\n      return;\r\n    }\r\n\r\n    var mesh = new THREE.Object3D();\r\n    // mesh.add(this._createDebugMesh());\r\n\r\n    return mesh;\r\n  }\r\n\r\n  _createDebugMesh() {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 256;\r\n    canvas.height = 256;\r\n\r\n    var context = canvas.getContext('2d');\r\n    context.font = 'Bold 20px Helvetica Neue, Verdana, Arial';\r\n    context.fillStyle = '#ff0000';\r\n    context.fillText(this._quadcode, 20, canvas.width / 2 - 5);\r\n    context.fillText(this._tile.toString(), 20, canvas.width / 2 + 25);\r\n\r\n    var texture = new THREE.Texture(canvas);\r\n\r\n    // Silky smooth images when tilted\r\n    texture.magFilter = THREE.LinearFilter;\r\n    texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n\r\n    // TODO: Set this to renderer.getMaxAnisotropy() / 4\r\n    texture.anisotropy = 4;\r\n\r\n    texture.needsUpdate = true;\r\n\r\n    var material = new THREE.MeshBasicMaterial({\r\n      map: texture,\r\n      transparent: true,\r\n      depthWrite: false\r\n    });\r\n\r\n    var geom = new THREE.PlaneBufferGeometry(this._side, this._side, 1);\r\n    var mesh = new THREE.Mesh(geom, material);\r\n\r\n    mesh.rotation.x = -90 * Math.PI / 180;\r\n    mesh.position.y = 0.1;\r\n\r\n    return mesh;\r\n  }\r\n\r\n  // _createShadowCanvas() {\r\n  //   var canvas = document.createElement('canvas');\r\n  //\r\n  //   // Rendered at a low resolution and later scaled up for a low-quality blur\r\n  //   canvas.width = 512;\r\n  //   canvas.height = 512;\r\n  //\r\n  //   return canvas;\r\n  // }\r\n\r\n  // _addShadow(coordinates) {\r\n  //   var ctx = this._shadowCanvas.getContext('2d');\r\n  //   var width = this._shadowCanvas.width;\r\n  //   var height = this._shadowCanvas.height;\r\n  //\r\n  //   var _coords;\r\n  //   var _offset;\r\n  //   var offset = new Offset();\r\n  //\r\n  //   // Transform coordinates to shadowCanvas space and draw on canvas\r\n  //   coordinates.forEach((ring, index) => {\r\n  //     ctx.beginPath();\r\n  //\r\n  //     _coords = ring.map(coord => {\r\n  //       var xFrac = (coord[0] - this._boundsWorld[0]) / this._side;\r\n  //       var yFrac = (coord[1] - this._boundsWorld[3]) / this._side;\r\n  //       return [xFrac * width, yFrac * height];\r\n  //     });\r\n  //\r\n  //     if (index > 0) {\r\n  //       _offset = _coords;\r\n  //     } else {\r\n  //       _offset = offset.data(_coords).padding(1.3);\r\n  //     }\r\n  //\r\n  //     // TODO: This is super flaky and crashes the browser if run on anything\r\n  //     // put the outer ring (potentially due to winding)\r\n  //     _offset.forEach((coord, index) => {\r\n  //       // var xFrac = (coord[0] - this._boundsWorld[0]) / this._side;\r\n  //       // var yFrac = (coord[1] - this._boundsWorld[3]) / this._side;\r\n  //\r\n  //       if (index === 0) {\r\n  //         ctx.moveTo(coord[0], coord[1]);\r\n  //       } else {\r\n  //         ctx.lineTo(coord[0], coord[1]);\r\n  //       }\r\n  //     });\r\n  //\r\n  //     ctx.closePath();\r\n  //   });\r\n  //\r\n  //   ctx.fillStyle = 'rgba(80, 80, 80, 0.7)';\r\n  //   ctx.fill();\r\n  // }\r\n\r\n  _requestTile() {\r\n    var urlParams = {\r\n      x: this._tile[0],\r\n      y: this._tile[1],\r\n      z: this._tile[2]\r\n    };\r\n\r\n    var url = this._getTileURL(urlParams);\r\n\r\n    this._aborted = false;\r\n\r\n    if (!this._options.workers) {\r\n      this._request = reqwest({\r\n        url: url,\r\n        type: 'json',\r\n        crossOrigin: true,\r\n        headers: this._options.headers\r\n      }).then(res => {\r\n        // Clear request reference\r\n        this._request = null;\r\n        this._processTileData(res);\r\n      }).catch(err => {\r\n        // Clear request reference\r\n        this._request = null;\r\n      });\r\n    } else {\r\n      this._processTileData(url);\r\n    }\r\n  }\r\n\r\n  _processTileData(data) {\r\n    // console.time(this._tile);\r\n\r\n    var GeoJSONClass = (!this._options.workers) ? GeoJSONLayer : GeoJSONWorkerLayer;\r\n\r\n    // Using this creates a huge amount of memory due to the quantity of tiles\r\n    this._geojsonLayer = GeoJSONClass(data, this._options);\r\n    this._geojsonLayer.addTo(this._world).then(() => {\r\n      // TODO: This never seems to be called on worker layers. Find out why.\r\n      if (this.isAborted()) {\r\n        // this._geojsonLayer._aborted = true;\r\n        // this._geojsonLayer = null;\r\n        return;\r\n      }\r\n\r\n      // TODO: This is a hack to stop old tile meshes hanging around. Fix or\r\n      // move to somewhere more robust.\r\n      //\r\n      // Could potentially just overwrite mesh on first index each time\r\n      //\r\n      // This makes some worker tiles to not appear properly – showing the\r\n      // points mesh but not the polygon mesh, etc.\r\n      //\r\n      // Only do this for non-worker layers for now as it seems to cause issues\r\n      // with worker tiles showing for a moment and then disappearing forever\r\n      if (!this._options.workers) {\r\n        this.destroyMesh(this._mesh);\r\n      }\r\n\r\n      // TOSO: Work out if the picking mesh needs destroying here\r\n      // this.destroyMesh(this._pickingMesh);\r\n\r\n      this._mesh.add(this._geojsonLayer._object3D);\r\n      this._pickingMesh = this._geojsonLayer._pickingMesh;\r\n\r\n      // Free the GeoJSON memory as we don't need it\r\n      //\r\n      // TODO: This should probably be a method within GeoJSONLayer\r\n      if (this._geojsonLayer._geojson) {\r\n        this._geojsonLayer._geojson = null;\r\n      }\r\n\r\n      // TODO: Fix or store shadow canvas stuff and get rid of this code\r\n      // Draw footprint on shadow canvas\r\n      //\r\n      // TODO: Disabled for the time-being until it can be sped up / moved to\r\n      // a worker\r\n      // this._addShadow(coordinates);\r\n\r\n      // Output shadow canvas\r\n\r\n      // TODO: Disabled for the time-being until it can be sped up / moved to\r\n      // a worker\r\n\r\n      // var texture = new THREE.Texture(this._shadowCanvas);\r\n      //\r\n      // // Silky smooth images when tilted\r\n      // texture.magFilter = THREE.LinearFilter;\r\n      // texture.minFilter = THREE.LinearMipMapLinearFilter;\r\n      //\r\n      // // TODO: Set this to renderer.getMaxAnisotropy() / 4\r\n      // texture.anisotropy = 4;\r\n      //\r\n      // texture.needsUpdate = true;\r\n      //\r\n      // var material;\r\n      // if (!this._world._environment._skybox) {\r\n      //   material = new THREE.MeshBasicMaterial({\r\n      //     map: texture,\r\n      //     transparent: true,\r\n      //     depthWrite: false\r\n      //   });\r\n      // } else {\r\n      //   material = new THREE.MeshStandardMaterial({\r\n      //     map: texture,\r\n      //     transparent: true,\r\n      //     depthWrite: false\r\n      //   });\r\n      //   material.roughness = 1;\r\n      //   material.metalness = 0.1;\r\n      //   material.envMap = this._world._environment._skybox.getRenderTarget();\r\n      // }\r\n      //\r\n      // var geom = new THREE.PlaneBufferGeometry(this._side, this._side, 1);\r\n      // var mesh = new THREE.Mesh(geom, material);\r\n      //\r\n      // mesh.castShadow = false;\r\n      // mesh.receiveShadow = false;\r\n      // mesh.renderOrder = 1;\r\n      //\r\n      // mesh.rotation.x = -90 * Math.PI / 180;\r\n      //\r\n      // this._mesh.add(mesh);\r\n\r\n      this._ready = true;\r\n      // console.timeEnd(this._tile);\r\n    }).catch((err) => {\r\n      console.error(err);\r\n    });\r\n  }\r\n\r\n  _abortRequest() {\r\n    if ((!this._request && !this._options.workers) || this._ready) {\r\n      return;\r\n    }\r\n\r\n    this._aborted = true;\r\n\r\n    if (this._request) {\r\n      this._request.abort();\r\n    }\r\n  }\r\n}\r\n\r\nexport default GeoJSONTile;\r\n\r\nvar noNew = function(quadcode, path, layer, options) {\r\n  return new GeoJSONTile(quadcode, path, layer, options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as geoJSONTile};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/GeoJSONTile.js","// TODO: Consider adopting GeoJSON CSS\r\n// http://wiki.openstreetmap.org/wiki/Geojson_CSS\r\n\r\n// TODO: Allow interaction to be defined per-layer to save on resources\r\n//\r\n// For example, only allow polygons to be interactive via a polygonInteractive\r\n// option\r\n\r\nimport LayerGroup from './LayerGroup';\r\nimport extend from 'lodash.assign';\r\nimport reqwest from 'reqwest';\r\nimport GeoJSON from '../util/GeoJSON';\r\nimport Buffer from '../util/Buffer';\r\nimport PickingMaterial from '../engine/PickingMaterial';\r\nimport PolygonLayer from './geometry/PolygonLayer';\r\nimport PolylineLayer from './geometry/PolylineLayer';\r\nimport PointLayer from './geometry/PointLayer';\r\n\r\nclass GeoJSONLayer extends LayerGroup {\r\n  constructor(geojson, options) {\r\n    var defaults = {\r\n      output: false,\r\n      interactive: false,\r\n      topojson: false,\r\n      filter: null,\r\n      onEachFeature: null,\r\n      polygonMaterial: null,\r\n      onPolygonMesh: null,\r\n      onPolygonBufferAttributes: null,\r\n      polylineMaterial: null,\r\n      onPolylineMesh: null,\r\n      onPolylineBufferAttributes: null,\r\n      pointGeometry: null,\r\n      pointMaterial: null,\r\n      onPointMesh: null,\r\n      style: GeoJSON.defaultStyle,\r\n      keepFeatures: true\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    if (typeof options.style === 'function') {\r\n      _options.style = options.style;\r\n    } else {\r\n      _options.style = extend({}, defaults.style, options.style);\r\n    }\r\n\r\n    super(_options);\r\n\r\n    this._geojson = geojson;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    // Only add to picking mesh if this layer is controlling output\r\n    //\r\n    // Otherwise, assume another component will eventually add a mesh to\r\n    // the picking scene\r\n    if (this.isOutput()) {\r\n      this._pickingMesh = new THREE.Object3D();\r\n      this.addToPicking(this._pickingMesh);\r\n    }\r\n\r\n    // Request data from URL if needed\r\n    if (typeof this._geojson === 'string') {\r\n      return this._requestData(this._geojson);\r\n    } else {\r\n      // Process and add GeoJSON to layer\r\n      return this._processData(this._geojson);\r\n    }\r\n  }\r\n\r\n  _requestData(url) {\r\n    return new Promise((resolve, reject) => {\r\n      this._request = reqwest({\r\n        url: url,\r\n        type: 'json',\r\n        crossOrigin: true\r\n      }).then(res => {\r\n        // Clear request reference\r\n        this._request = null;\r\n        this._processData(res).then(() => {\r\n          resolve(this);\r\n        });\r\n      }).catch(err => {\r\n        console.error(err);\r\n\r\n        // Clear request reference\r\n        this._request = null;\r\n\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  // TODO: Wrap into a helper method so this isn't duplicated in the tiled\r\n  // GeoJSON output layer\r\n  //\r\n  // Need to be careful as to not make it impossible to fork this off into a\r\n  // worker script at a later stage\r\n  _processData(data) {\r\n    return new Promise((resolve) => {\r\n      // Collects features into a single FeatureCollection\r\n      //\r\n      // Also converts TopoJSON to GeoJSON if instructed\r\n      this._geojson = GeoJSON.collectFeatures(data, this._options.topojson);\r\n\r\n      // TODO: Check that GeoJSON is valid / usable\r\n\r\n      var features = this._geojson.features;\r\n\r\n      // Run filter, if provided\r\n      if (this._options.filter) {\r\n        features = this._geojson.features.filter(this._options.filter);\r\n      }\r\n\r\n      var defaults = {};\r\n\r\n      // Assume that a style won't be set per feature\r\n      var style = this._options.style;\r\n\r\n      var layerPromises = [];\r\n\r\n      var options;\r\n      features.forEach(feature => {\r\n        // Get per-feature style object, if provided\r\n        if (typeof this._options.style === 'function') {\r\n          style = extend({}, GeoJSON.defaultStyle, this._options.style(feature));\r\n        }\r\n\r\n        options = extend({}, defaults, {\r\n          // If merging feature layers, stop them outputting themselves\r\n          // If not, let feature layers output themselves to the world\r\n          output: !this.isOutput(),\r\n          interactive: this._options.interactive,\r\n          style: style\r\n        });\r\n\r\n        var layer = this._featureToLayer(feature, options);\r\n\r\n        if (!layer) {\r\n          return;\r\n        }\r\n\r\n        // Sometimes you don't want to store a reference to the feature\r\n        //\r\n        // For example, to save memory when being used by tile layers\r\n        if (this._options.keepFeatures) {\r\n          layer.feature = feature;\r\n        }\r\n\r\n        // If defined, call a function for each feature\r\n        //\r\n        // This is commonly used for adding event listeners from the user script\r\n        if (this._options.onEachFeature) {\r\n          this._options.onEachFeature(feature, layer);\r\n        }\r\n\r\n        // TODO: Make this a promise array and only continue on completion\r\n        layerPromises.push(this.addLayer(layer));\r\n      });\r\n\r\n      Promise.all(layerPromises).then((results) => {\r\n        // If merging layers do that now, otherwise skip as the geometry layers\r\n        // should have already outputted themselves\r\n        if (!this.isOutput()) {\r\n          resolve();\r\n          return;\r\n        }\r\n\r\n        // From here on we can assume that we want to merge the layers\r\n\r\n        var polygonAttributes = [];\r\n        var polygonOutlineAttributes = [];\r\n        var polygonAttributeLengths = {\r\n          positions: 3,\r\n          normals: 3,\r\n          colors: 3\r\n        };\r\n        var polygonFlat = true;\r\n\r\n        var polylineAttributes = [];\r\n        var polylineAttributeLengths = {\r\n          positions: 3,\r\n          colors: 3\r\n        };\r\n        var polylineFlat = true;\r\n\r\n        var pointAttributes = [];\r\n        var pointAttributeLengths = {\r\n          positions: 3,\r\n          normals: 3,\r\n          colors: 3\r\n        };\r\n        var pointFlat = true;\r\n\r\n        this._layers.forEach(layer => {\r\n          if (layer instanceof PolygonLayer) {\r\n            polygonAttributes.push(layer.getBufferAttributes());\r\n\r\n            var outlineBufferAttributes = layer.getOutlineBufferAttributes();\r\n            if (outlineBufferAttributes) {\r\n              polygonOutlineAttributes.push(outlineBufferAttributes);\r\n            }\r\n\r\n            if (polygonFlat && !layer.isFlat()) {\r\n              polygonFlat = false;\r\n            }\r\n\r\n            if (this._options.interactive) {\r\n              polygonAttributeLengths.pickingIds = 1;\r\n            }\r\n          } else if (layer instanceof PolylineLayer) {\r\n            polylineAttributes.push(layer.getBufferAttributes());\r\n\r\n            if (polylineFlat && !layer.isFlat()) {\r\n              polylineFlat = false;\r\n            }\r\n\r\n            if (this._options.interactive) {\r\n              polylineAttributeLengths.pickingIds = 1;\r\n            }\r\n          } else if (layer instanceof PointLayer) {\r\n            pointAttributes.push(layer.getBufferAttributes());\r\n\r\n            if (pointFlat && !layer.isFlat()) {\r\n              pointFlat = false;\r\n            }\r\n\r\n            if (this._options.interactive) {\r\n              pointAttributeLengths.pickingIds = 1;\r\n            }\r\n          }\r\n        });\r\n\r\n        var style;\r\n\r\n        if (polygonAttributes.length > 0) {\r\n          var mergedPolygonAttributes = Buffer.mergeAttributes(polygonAttributes);\r\n\r\n          var mergedPolygonOutlineAttributes;\r\n          if (polygonOutlineAttributes.length > 0) {\r\n            mergedPolygonOutlineAttributes = Buffer.mergeAttributes(polygonOutlineAttributes);\r\n          }\r\n\r\n          style = (typeof this._options.style === 'function') ? this._options.style(this._geojson.features[0]) : this._options.style;\r\n          style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n          this._setPolygonMesh(mergedPolygonAttributes, polygonAttributeLengths, style, polygonFlat).then((result) => {\r\n            this._polygonMesh = result.mesh;\r\n            this.add(this._polygonMesh);\r\n\r\n            if (mergedPolygonOutlineAttributes) {\r\n              style = (typeof this._options.style === 'function') ? this._options.style(this._geojson.features[0]) : this._options.style;\r\n              style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n              if (style.outlineRenderOrder !== undefined) {\r\n                style.lineRenderOrder = style.outlineRenderOrder;\r\n              } else {\r\n                style.lineRenderOrder = (style.renderOrder) ? style.renderOrder + 1 : 4;\r\n              }\r\n\r\n              if (style.outlineWidth) {\r\n                style.lineWidth = style.outlineWidth;\r\n              }\r\n\r\n              this._setPolylineMesh(mergedPolygonOutlineAttributes, polylineAttributeLengths, style, true).then((result) => {\r\n                this.add(result.mesh);\r\n              });\r\n            }\r\n\r\n            if (result.pickingMesh) {\r\n              this._pickingMesh.add(result.pickingMesh);\r\n            }\r\n          });\r\n        }\r\n\r\n        if (polylineAttributes.length > 0) {\r\n          var mergedPolylineAttributes = Buffer.mergeAttributes(polylineAttributes);\r\n\r\n          style = (typeof this._options.style === 'function') ? this._options.style(this._geojson.features[0]) : this._options.style;\r\n          style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n          this._setPolylineMesh(mergedPolylineAttributes, polylineAttributeLengths, style, polylineFlat).then((result) => {\r\n            this._polylineMesh = result.mesh;\r\n            this.add(this._polylineMesh);\r\n\r\n            if (result.pickingMesh) {\r\n              this._pickingMesh.add(result.pickingMesh);\r\n            }\r\n          });\r\n        }\r\n\r\n        if (pointAttributes.length > 0) {\r\n          var mergedPointAttributes = Buffer.mergeAttributes(pointAttributes);\r\n\r\n          style = (typeof this._options.style === 'function') ? this._options.style(this._geojson.features[0]) : this._options.style;\r\n          style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n          this._setPointMesh(mergedPointAttributes, pointAttributeLengths, style, pointFlat).then((result) => {\r\n            this._pointMesh = result.mesh;\r\n            this.add(this._pointMesh);\r\n\r\n            if (result.pickingMesh) {\r\n              this._pickingMesh.add(result.pickingMesh);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Clean up layers\r\n        //\r\n        // TODO: Are there ever situations where the unmerged buffer attributes\r\n        // and coordinates would still be required?\r\n        this._layers.forEach(layer => {\r\n          layer.clearBufferAttributes();\r\n          layer.clearCoordinates();\r\n        });\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  // Create and store mesh from buffer attributes\r\n  //\r\n  // TODO: Probably remove this and call static method directly as it's just a proxy\r\n  _setPolygonMesh(attributes, attributeLengths, style, flat) {\r\n    return PolygonLayer.SetMesh(attributes, attributeLengths, flat, style, this._options, this._world._environment._skybox);\r\n  }\r\n\r\n  _setPolylineMesh(attributes, attributeLengths, style, flat) {\r\n    return PolylineLayer.SetMesh(attributes, attributeLengths, flat, style, this._options);\r\n  }\r\n\r\n  _setPointMesh(attributes, attributeLengths, style, flat) {\r\n    return PointLayer.SetMesh(attributes, attributeLengths, flat, style, this._options);\r\n  }\r\n\r\n  // TODO: Support all GeoJSON geometry types\r\n  _featureToLayer(feature, options) {\r\n    var geometry = feature.geometry;\r\n    var coordinates = (geometry.coordinates) ? geometry.coordinates : null;\r\n\r\n    if (!coordinates || !geometry) {\r\n      return;\r\n    }\r\n\r\n    if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\r\n      // Get material instance to use for polygon, if provided\r\n      if (typeof this._options.polygonMaterial === 'function') {\r\n        options.polygonMaterial = this._options.polygonMaterial(feature);\r\n      }\r\n\r\n      if (typeof this._options.onPolygonMesh === 'function') {\r\n        options.onPolygonMesh = this._options.onPolygonMesh;\r\n      }\r\n\r\n      // Pass onBufferAttributes callback, if defined\r\n      if (typeof this._options.onPolygonBufferAttributes === 'function') {\r\n        options.onBufferAttributes = this._options.onPolygonBufferAttributes;\r\n      }\r\n\r\n      return new PolygonLayer(coordinates, options);\r\n    }\r\n\r\n    if (geometry.type === 'LineString' || geometry.type === 'MultiLineString') {\r\n      // Get material instance to use for line, if provided\r\n      if (typeof this._options.lineMaterial === 'function') {\r\n        options.lineMaterial = this._options.lineMaterial(feature);\r\n      }\r\n\r\n      if (typeof this._options.onPolylineMesh === 'function') {\r\n        options.onPolylineMesh = this._options.onPolylineMesh;\r\n      }\r\n\r\n      // Pass onBufferAttributes callback, if defined\r\n      if (typeof this._options.onPolylineBufferAttributes === 'function') {\r\n        options.onBufferAttributes = this._options.onPolylineBufferAttributes;\r\n      }\r\n\r\n      return new PolylineLayer(coordinates, options);\r\n    }\r\n\r\n    if (geometry.type === 'Point' || geometry.type === 'MultiPoint') {\r\n      // Get geometry object to use for point, if provided\r\n      if (typeof this._options.pointGeometry === 'function') {\r\n        options.pointGeometry = this._options.pointGeometry(feature);\r\n      }\r\n\r\n      // Get material instance to use for point, if provided\r\n      if (typeof this._options.pointMaterial === 'function') {\r\n        options.pointMaterial = this._options.pointMaterial(feature);\r\n      }\r\n\r\n      if (typeof this._options.onPointMesh === 'function') {\r\n        options.onPointMesh = this._options.onPointMesh;\r\n      }\r\n\r\n      return new PointLayer(coordinates, options);\r\n    }\r\n  }\r\n\r\n  _abortRequest() {\r\n    if (!this._request) {\r\n      return;\r\n    }\r\n\r\n    this._request.abort();\r\n  }\r\n\r\n  // Destroy the layers and remove them from the scene and memory\r\n  destroy() {\r\n    // Cancel any pending requests\r\n    this._abortRequest();\r\n\r\n    // Clear request reference\r\n    this._request = null;\r\n\r\n    this._geojson = null;\r\n\r\n    if (this._pickingMesh) {\r\n      // TODO: Properly dispose of picking mesh\r\n      this._pickingMesh = null;\r\n    }\r\n\r\n    if (this._polygonMesh) {\r\n      this._polygonMesh = null;\r\n    }\r\n\r\n    if (this._polylineMesh) {\r\n      this._polylineMesh = null;\r\n    }\r\n\r\n    if (this._pointMesh) {\r\n      this._pointMesh = null;\r\n    }\r\n\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default GeoJSONLayer;\r\n\r\nvar noNew = function(geojson, options) {\r\n  return new GeoJSONLayer(geojson, options);\r\n};\r\n\r\nexport {noNew as geoJSONLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/GeoJSONLayer.js","/*!\n  * Reqwest! A general purpose XHR connection manager\n  * license MIT (c) Dustin Diaz 2015\n  * https://github.com/ded/reqwest\n  */\n\n!function (name, context, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else context[name] = definition()\n}('reqwest', this, function () {\n\n  var context = this\n\n  if ('window' in context) {\n    var doc = document\n      , byTag = 'getElementsByTagName'\n      , head = doc[byTag]('head')[0]\n  } else {\n    var XHR2\n    try {\n      XHR2 = require('xhr2')\n    } catch (ex) {\n      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')\n    }\n  }\n\n\n  var httpsRe = /^http/\n    , protocolRe = /(^\\w+):\\/\\//\n    , twoHundo = /^(20\\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n    , readyState = 'readyState'\n    , contentType = 'Content-Type'\n    , requestedWith = 'X-Requested-With'\n    , uniqid = 0\n    , callbackPrefix = 'reqwest_' + (+new Date())\n    , lastValue // data stored by the most recent JSONP callback\n    , xmlHttpRequest = 'XMLHttpRequest'\n    , xDomainRequest = 'XDomainRequest'\n    , noop = function () {}\n\n    , isArray = typeof Array.isArray == 'function'\n        ? Array.isArray\n        : function (a) {\n            return a instanceof Array\n          }\n\n    , defaultHeaders = {\n          'contentType': 'application/x-www-form-urlencoded'\n        , 'requestedWith': xmlHttpRequest\n        , 'accept': {\n              '*':  'text/javascript, text/html, application/xml, text/xml, */*'\n            , 'xml':  'application/xml, text/xml'\n            , 'html': 'text/html'\n            , 'text': 'text/plain'\n            , 'json': 'application/json, text/javascript'\n            , 'js':   'application/javascript, text/javascript'\n          }\n      }\n\n    , xhr = function(o) {\n        // is it x-domain\n        if (o['crossOrigin'] === true) {\n          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null\n          if (xhr && 'withCredentials' in xhr) {\n            return xhr\n          } else if (context[xDomainRequest]) {\n            return new XDomainRequest()\n          } else {\n            throw new Error('Browser does not support cross-origin requests')\n          }\n        } else if (context[xmlHttpRequest]) {\n          return new XMLHttpRequest()\n        } else if (XHR2) {\n          return new XHR2()\n        } else {\n          return new ActiveXObject('Microsoft.XMLHTTP')\n        }\n      }\n    , globalSetupOptions = {\n        dataFilter: function (data) {\n          return data\n        }\n      }\n\n  function succeed(r) {\n    var protocol = protocolRe.exec(r.url)\n    protocol = (protocol && protocol[1]) || context.location.protocol\n    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response\n  }\n\n  function handleReadyState(r, success, error) {\n    return function () {\n      // use _aborted to mitigate against IE err c00c023f\n      // (can't read props on aborted request objects)\n      if (r._aborted) return error(r.request)\n      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')\n      if (r.request && r.request[readyState] == 4) {\n        r.request.onreadystatechange = noop\n        if (succeed(r)) success(r.request)\n        else\n          error(r.request)\n      }\n    }\n  }\n\n  function setHeaders(http, o) {\n    var headers = o['headers'] || {}\n      , h\n\n    headers['Accept'] = headers['Accept']\n      || defaultHeaders['accept'][o['type']]\n      || defaultHeaders['accept']['*']\n\n    var isAFormData = typeof FormData !== 'undefined' && (o['data'] instanceof FormData);\n    // breaks cross-origin requests with legacy browsers\n    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']\n    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']\n    for (h in headers)\n      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])\n  }\n\n  function setCredentials(http, o) {\n    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {\n      http.withCredentials = !!o['withCredentials']\n    }\n  }\n\n  function generalCallback(data) {\n    lastValue = data\n  }\n\n  function urlappend (url, s) {\n    return url + (/\\?/.test(url) ? '&' : '?') + s\n  }\n\n  function handleJsonp(o, fn, err, url) {\n    var reqId = uniqid++\n      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key\n      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)\n      , cbreg = new RegExp('((^|\\\\?|&)' + cbkey + ')=([^&]+)')\n      , match = url.match(cbreg)\n      , script = doc.createElement('script')\n      , loaded = 0\n      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1\n\n    if (match) {\n      if (match[3] === '?') {\n        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name\n      } else {\n        cbval = match[3] // provided callback func name\n      }\n    } else {\n      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em\n    }\n\n    context[cbval] = generalCallback\n\n    script.type = 'text/javascript'\n    script.src = url\n    script.async = true\n    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {\n      // need this for IE due to out-of-order onreadystatechange(), binding script\n      // execution to an event listener gives us control over when the script\n      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n      script.htmlFor = script.id = '_reqwest_' + reqId\n    }\n\n    script.onload = script.onreadystatechange = function () {\n      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {\n        return false\n      }\n      script.onload = script.onreadystatechange = null\n      script.onclick && script.onclick()\n      // Call the user callback with the last value stored and clean up values and scripts.\n      fn(lastValue)\n      lastValue = undefined\n      head.removeChild(script)\n      loaded = 1\n    }\n\n    // Add the script to the DOM head\n    head.appendChild(script)\n\n    // Enable JSONP timeout\n    return {\n      abort: function () {\n        script.onload = script.onreadystatechange = null\n        err({}, 'Request is aborted: timeout', {})\n        lastValue = undefined\n        head.removeChild(script)\n        loaded = 1\n      }\n    }\n  }\n\n  function getRequest(fn, err) {\n    var o = this.o\n      , method = (o['method'] || 'GET').toUpperCase()\n      , url = typeof o === 'string' ? o : o['url']\n      // convert non-string objects to query-string form unless o['processData'] is false\n      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')\n        ? reqwest.toQueryString(o['data'])\n        : (o['data'] || null)\n      , http\n      , sendWait = false\n\n    // if we're working on a GET request and we have data then we should append\n    // query string to end of URL and not post data\n    if ((o['type'] == 'jsonp' || method == 'GET') && data) {\n      url = urlappend(url, data)\n      data = null\n    }\n\n    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)\n\n    // get the xhr from the factory if passed\n    // if the factory returns null, fall-back to ours\n    http = (o.xhr && o.xhr(o)) || xhr(o)\n\n    http.open(method, url, o['async'] === false ? false : true)\n    setHeaders(http, o)\n    setCredentials(http, o)\n    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {\n        http.onload = fn\n        http.onerror = err\n        // NOTE: see\n        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e\n        http.onprogress = function() {}\n        sendWait = true\n    } else {\n      http.onreadystatechange = handleReadyState(this, fn, err)\n    }\n    o['before'] && o['before'](http)\n    if (sendWait) {\n      setTimeout(function () {\n        http.send(data)\n      }, 200)\n    } else {\n      http.send(data)\n    }\n    return http\n  }\n\n  function Reqwest(o, fn) {\n    this.o = o\n    this.fn = fn\n\n    init.apply(this, arguments)\n  }\n\n  function setType(header) {\n    // json, javascript, text/plain, text/html, xml\n    if (header === null) return undefined; //In case of no content-type.\n    if (header.match('json')) return 'json'\n    if (header.match('javascript')) return 'js'\n    if (header.match('text')) return 'html'\n    if (header.match('xml')) return 'xml'\n  }\n\n  function init(o, fn) {\n\n    this.url = typeof o == 'string' ? o : o['url']\n    this.timeout = null\n\n    // whether request has been fulfilled for purpose\n    // of tracking the Promises\n    this._fulfilled = false\n    // success handlers\n    this._successHandler = function(){}\n    this._fulfillmentHandlers = []\n    // error handlers\n    this._errorHandlers = []\n    // complete (both success and fail) handlers\n    this._completeHandlers = []\n    this._erred = false\n    this._responseArgs = {}\n\n    var self = this\n\n    fn = fn || function () {}\n\n    if (o['timeout']) {\n      this.timeout = setTimeout(function () {\n        timedOut()\n      }, o['timeout'])\n    }\n\n    if (o['success']) {\n      this._successHandler = function () {\n        o['success'].apply(o, arguments)\n      }\n    }\n\n    if (o['error']) {\n      this._errorHandlers.push(function () {\n        o['error'].apply(o, arguments)\n      })\n    }\n\n    if (o['complete']) {\n      this._completeHandlers.push(function () {\n        o['complete'].apply(o, arguments)\n      })\n    }\n\n    function complete (resp) {\n      o['timeout'] && clearTimeout(self.timeout)\n      self.timeout = null\n      while (self._completeHandlers.length > 0) {\n        self._completeHandlers.shift()(resp)\n      }\n    }\n\n    function success (resp) {\n      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE\n      resp = (type !== 'jsonp') ? self.request : resp\n      // use global data filter on response text\n      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)\n        , r = filteredResponse\n      try {\n        resp.responseText = r\n      } catch (e) {\n        // can't assign this in IE<=8, just ignore\n      }\n      if (r) {\n        switch (type) {\n        case 'json':\n          try {\n            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')\n          } catch (err) {\n            return error(resp, 'Could not parse JSON in response', err)\n          }\n          break\n        case 'js':\n          resp = eval(r)\n          break\n        case 'html':\n          resp = r\n          break\n        case 'xml':\n          resp = resp.responseXML\n              && resp.responseXML.parseError // IE trololo\n              && resp.responseXML.parseError.errorCode\n              && resp.responseXML.parseError.reason\n            ? null\n            : resp.responseXML\n          break\n        }\n      }\n\n      self._responseArgs.resp = resp\n      self._fulfilled = true\n      fn(resp)\n      self._successHandler(resp)\n      while (self._fulfillmentHandlers.length > 0) {\n        resp = self._fulfillmentHandlers.shift()(resp)\n      }\n\n      complete(resp)\n    }\n\n    function timedOut() {\n      self._timedOut = true\n      self.request.abort()\n    }\n\n    function error(resp, msg, t) {\n      resp = self.request\n      self._responseArgs.resp = resp\n      self._responseArgs.msg = msg\n      self._responseArgs.t = t\n      self._erred = true\n      while (self._errorHandlers.length > 0) {\n        self._errorHandlers.shift()(resp, msg, t)\n      }\n      complete(resp)\n    }\n\n    this.request = getRequest.call(this, success, error)\n  }\n\n  Reqwest.prototype = {\n    abort: function () {\n      this._aborted = true\n      this.request.abort()\n    }\n\n  , retry: function () {\n      init.call(this, this.o, this.fn)\n    }\n\n    /**\n     * Small deviation from the Promises A CommonJs specification\n     * http://wiki.commonjs.org/wiki/Promises/A\n     */\n\n    /**\n     * `then` will execute upon successful requests\n     */\n  , then: function (success, fail) {\n      success = success || function () {}\n      fail = fail || function () {}\n      if (this._fulfilled) {\n        this._responseArgs.resp = success(this._responseArgs.resp)\n      } else if (this._erred) {\n        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n      } else {\n        this._fulfillmentHandlers.push(success)\n        this._errorHandlers.push(fail)\n      }\n      return this\n    }\n\n    /**\n     * `always` will execute whether the request succeeds or fails\n     */\n  , always: function (fn) {\n      if (this._fulfilled || this._erred) {\n        fn(this._responseArgs.resp)\n      } else {\n        this._completeHandlers.push(fn)\n      }\n      return this\n    }\n\n    /**\n     * `fail` will execute when the request fails\n     */\n  , fail: function (fn) {\n      if (this._erred) {\n        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n      } else {\n        this._errorHandlers.push(fn)\n      }\n      return this\n    }\n  , 'catch': function (fn) {\n      return this.fail(fn)\n    }\n  }\n\n  function reqwest(o, fn) {\n    return new Reqwest(o, fn)\n  }\n\n  // normalize newline variants according to spec -> CRLF\n  function normalize(s) {\n    return s ? s.replace(/\\r?\\n/g, '\\r\\n') : ''\n  }\n\n  function serial(el, cb) {\n    var n = el.name\n      , t = el.tagName.toLowerCase()\n      , optCb = function (o) {\n          // IE gives value=\"\" even where there is no value attribute\n          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273\n          if (o && !o['disabled'])\n            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))\n        }\n      , ch, ra, val, i\n\n    // don't serialize elements that are disabled or without a name\n    if (el.disabled || !n) return\n\n    switch (t) {\n    case 'input':\n      if (!/reset|button|image|file/i.test(el.type)) {\n        ch = /checkbox/i.test(el.type)\n        ra = /radio/i.test(el.type)\n        val = el.value\n        // WebKit gives us \"\" instead of \"on\" if a checkbox has no value, so correct it here\n        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))\n      }\n      break\n    case 'textarea':\n      cb(n, normalize(el.value))\n      break\n    case 'select':\n      if (el.type.toLowerCase() === 'select-one') {\n        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)\n      } else {\n        for (i = 0; el.length && i < el.length; i++) {\n          el.options[i].selected && optCb(el.options[i])\n        }\n      }\n      break\n    }\n  }\n\n  // collect up all form elements found from the passed argument elements all\n  // the way down to child elements; pass a '<form>' or form fields.\n  // called with 'this'=callback to use for serial() on each element\n  function eachFormElement() {\n    var cb = this\n      , e, i\n      , serializeSubtags = function (e, tags) {\n          var i, j, fa\n          for (i = 0; i < tags.length; i++) {\n            fa = e[byTag](tags[i])\n            for (j = 0; j < fa.length; j++) serial(fa[j], cb)\n          }\n        }\n\n    for (i = 0; i < arguments.length; i++) {\n      e = arguments[i]\n      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)\n      serializeSubtags(e, [ 'input', 'select', 'textarea' ])\n    }\n  }\n\n  // standard query string style serialization\n  function serializeQueryString() {\n    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))\n  }\n\n  // { 'name': 'value', ... } style serialization\n  function serializeHash() {\n    var hash = {}\n    eachFormElement.apply(function (name, value) {\n      if (name in hash) {\n        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])\n        hash[name].push(value)\n      } else hash[name] = value\n    }, arguments)\n    return hash\n  }\n\n  // [ { name: 'name', value: 'value' }, ... ] style serialization\n  reqwest.serializeArray = function () {\n    var arr = []\n    eachFormElement.apply(function (name, value) {\n      arr.push({name: name, value: value})\n    }, arguments)\n    return arr\n  }\n\n  reqwest.serialize = function () {\n    if (arguments.length === 0) return ''\n    var opt, fn\n      , args = Array.prototype.slice.call(arguments, 0)\n\n    opt = args.pop()\n    opt && opt.nodeType && args.push(opt) && (opt = null)\n    opt && (opt = opt.type)\n\n    if (opt == 'map') fn = serializeHash\n    else if (opt == 'array') fn = reqwest.serializeArray\n    else fn = serializeQueryString\n\n    return fn.apply(null, args)\n  }\n\n  reqwest.toQueryString = function (o, trad) {\n    var prefix, i\n      , traditional = trad || false\n      , s = []\n      , enc = encodeURIComponent\n      , add = function (key, value) {\n          // If value is a function, invoke it and return its value\n          value = ('function' === typeof value) ? value() : (value == null ? '' : value)\n          s[s.length] = enc(key) + '=' + enc(value)\n        }\n    // If an array was passed in, assume that it is an array of form elements.\n    if (isArray(o)) {\n      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in o) {\n        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)\n      }\n    }\n\n    // spaces should be + according to spec\n    return s.join('&').replace(/%20/g, '+')\n  }\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name, i, v\n      , rbracket = /\\[\\]$/\n\n    if (isArray(obj)) {\n      // Serialize array item.\n      for (i = 0; obj && i < obj.length; i++) {\n        v = obj[i]\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v)\n        } else {\n          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)\n        }\n      }\n    } else if (obj && obj.toString() === '[object Object]') {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)\n      }\n\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj)\n    }\n  }\n\n  reqwest.getcallbackPrefix = function () {\n    return callbackPrefix\n  }\n\n  // jQuery and Zepto compatibility, differences can be remapped here so you can call\n  // .ajax.compat(options, callback)\n  reqwest.compat = function (o, fn) {\n    if (o) {\n      o['type'] && (o['method'] = o['type']) && delete o['type']\n      o['dataType'] && (o['type'] = o['dataType'])\n      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']\n      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])\n    }\n    return new Reqwest(o, fn)\n  }\n\n  reqwest.ajaxSetup = function (options) {\n    options = options || {}\n    for (var k in options) {\n      globalSetupOptions[k] = options[k]\n    }\n  }\n\n  return reqwest\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/reqwest/reqwest.js\n// module id = 74\n// module chunks = 0","/*\r\n * GeoJSON helpers for handling data and generating objects\r\n */\r\n\r\nimport THREE from 'three';\r\nimport * as topojson from 'topojson';\r\nimport geojsonMerge from 'geojson-merge';\r\nimport earcut from 'earcut';\r\nimport extrudePolygon from './extrudePolygon';\r\n\r\n// TODO: Make it so height can be per-coordinate / point but connected together\r\n// as a linestring (eg. GPS points with an elevation at each point)\r\n//\r\n// This isn't really valid GeoJSON so perhaps something best left to an external\r\n// component for now, until a better approach can be considered\r\n//\r\n// See: http://lists.geojson.org/pipermail/geojson-geojson.org/2009-June/000489.html\r\n\r\n// Light and dark colours used for poor-mans AO gradient on object sides\r\nvar light = new THREE.Color(0xffffff);\r\nvar shadow  = new THREE.Color(0x666666);\r\n\r\nvar GeoJSON = (function() {\r\n  var defaultStyle = {\r\n    color: '#ffffff',\r\n    outline: false,\r\n    outlineColor: '#000000',\r\n    transparent: false,\r\n    opacity: 1,\r\n    blending: THREE.NormalBlending,\r\n    height: 0,\r\n    lineOpacity: 1,\r\n    lineTransparent: false,\r\n    lineColor: '#ffffff',\r\n    lineWidth: 1,\r\n    lineBlending: THREE.NormalBlending\r\n  };\r\n\r\n  // Attempts to merge together multiple GeoJSON Features or FeatureCollections\r\n  // into a single FeatureCollection\r\n  var collectFeatures = function(data, _topojson) {\r\n    var collections = [];\r\n\r\n    if (_topojson) {\r\n      // TODO: Allow TopoJSON objects to be overridden as an option\r\n\r\n      // If not overridden, merge all features from all objects\r\n      for (var tk in data.objects) {\r\n        collections.push(topojson.feature(data, data.objects[tk]));\r\n      }\r\n\r\n      return geojsonMerge(collections);\r\n    } else {\r\n      // If root doesn't have a type then let's see if there are features in the\r\n      // next step down\r\n      if (!data.type) {\r\n        // TODO: Allow GeoJSON objects to be overridden as an option\r\n\r\n        // If not overridden, merge all features from all objects\r\n        for (var gk in data) {\r\n          if (!data[gk].type) {\r\n            continue;\r\n          }\r\n\r\n          collections.push(data[gk]);\r\n        }\r\n\r\n        return geojsonMerge(collections);\r\n      } else if (Array.isArray(data)) {\r\n        return geojsonMerge(data);\r\n      } else {\r\n        return data;\r\n      }\r\n    }\r\n  };\r\n\r\n  // TODO: This is only used by GeoJSONTile so either roll it into that or\r\n  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\r\n  var lineStringAttributes = function(coordinates, colour, height) {\r\n    var _coords = [];\r\n    var _colours = [];\r\n\r\n    var nextCoord;\r\n\r\n    // Connect coordinate with the next to make a pair\r\n    //\r\n    // LineSegments requires pairs of vertices so repeat the last point if\r\n    // there's an odd number of vertices\r\n    coordinates.forEach((coordinate, index) => {\r\n      _colours.push([colour.r, colour.g, colour.b]);\r\n      _coords.push([coordinate[0], height, coordinate[1]]);\r\n\r\n      nextCoord = (coordinates[index + 1]) ? coordinates[index + 1] : coordinate;\r\n\r\n      _colours.push([colour.r, colour.g, colour.b]);\r\n      _coords.push([nextCoord[0], height, nextCoord[1]]);\r\n    });\r\n\r\n    return {\r\n      vertices: _coords,\r\n      colours: _colours\r\n    };\r\n  };\r\n\r\n  // TODO: This is only used by GeoJSONTile so either roll it into that or\r\n  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\r\n  var multiLineStringAttributes = function(coordinates, colour, height) {\r\n    var _coords = [];\r\n    var _colours = [];\r\n\r\n    var result;\r\n    coordinates.forEach(coordinate => {\r\n      result = lineStringAttributes(coordinate, colour, height);\r\n\r\n      result.vertices.forEach(coord => {\r\n        _coords.push(coord);\r\n      });\r\n\r\n      result.colours.forEach(colour => {\r\n        _colours.push(colour);\r\n      });\r\n    });\r\n\r\n    return {\r\n      vertices: _coords,\r\n      colours: _colours\r\n    };\r\n  };\r\n\r\n  // TODO: This is only used by GeoJSONTile so either roll it into that or\r\n  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\r\n  var polygonAttributes = function(coordinates, colour, height) {\r\n    var earcutData = _toEarcut(coordinates);\r\n\r\n    var faces = _triangulate(earcutData.vertices, earcutData.holes, earcutData.dimensions);\r\n\r\n    var groupedVertices = [];\r\n    for (i = 0, il = earcutData.vertices.length; i < il; i += earcutData.dimensions) {\r\n      groupedVertices.push(earcutData.vertices.slice(i, i + earcutData.dimensions));\r\n    }\r\n\r\n    var extruded = extrudePolygon(groupedVertices, faces, {\r\n      bottom: 0,\r\n      top: height\r\n    });\r\n\r\n    var topColor = colour.clone().multiply(light);\r\n    var bottomColor = colour.clone().multiply(shadow);\r\n\r\n    var _vertices = extruded.positions;\r\n    var _faces = [];\r\n    var _colours = [];\r\n\r\n    var _colour;\r\n    extruded.top.forEach((face, fi) => {\r\n      _colour = [];\r\n\r\n      _colour.push([colour.r, colour.g, colour.b]);\r\n      _colour.push([colour.r, colour.g, colour.b]);\r\n      _colour.push([colour.r, colour.g, colour.b]);\r\n\r\n      _faces.push(face);\r\n      _colours.push(_colour);\r\n    });\r\n\r\n    var allFlat = true;\r\n\r\n    if (extruded.sides) {\r\n      if (allFlat) {\r\n        allFlat = false;\r\n      }\r\n\r\n      // Set up colours for every vertex with poor-mans AO on the sides\r\n      extruded.sides.forEach((face, fi) => {\r\n        _colour = [];\r\n\r\n        // First face is always bottom-bottom-top\r\n        if (fi % 2 === 0) {\r\n          _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\r\n          _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\r\n          _colour.push([topColor.r, topColor.g, topColor.b]);\r\n        // Reverse winding for the second face\r\n        // top-top-bottom\r\n        } else {\r\n          _colour.push([topColor.r, topColor.g, topColor.b]);\r\n          _colour.push([topColor.r, topColor.g, topColor.b]);\r\n          _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\r\n        }\r\n\r\n        _faces.push(face);\r\n        _colours.push(_colour);\r\n      });\r\n    }\r\n\r\n    // Skip bottom as there's no point rendering it\r\n    // allFaces.push(extruded.faces);\r\n\r\n    return {\r\n      vertices: _vertices,\r\n      faces: _faces,\r\n      colours: _colours,\r\n      flat: allFlat\r\n    };\r\n  };\r\n\r\n  // TODO: This is only used by GeoJSONTile so either roll it into that or\r\n  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\r\n  var _toEarcut = function(data) {\r\n    var dim = data[0][0].length;\r\n    var result = {vertices: [], holes: [], dimensions: dim};\r\n    var holeIndex = 0;\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n      for (var j = 0; j < data[i].length; j++) {\r\n        for (var d = 0; d < dim; d++) {\r\n          result.vertices.push(data[i][j][d]);\r\n        }\r\n      }\r\n      if (i > 0) {\r\n        holeIndex += data[i - 1].length;\r\n        result.holes.push(holeIndex);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // TODO: This is only used by GeoJSONTile so either roll it into that or\r\n  // update GeoJSONTile to use the new GeoJSONLayer or geometry layers\r\n  var _triangulate = function(contour, holes, dim) {\r\n    // console.time('earcut');\r\n\r\n    var faces = earcut(contour, holes, dim);\r\n    var result = [];\r\n\r\n    for (i = 0, il = faces.length; i < il; i += 3) {\r\n      result.push(faces.slice(i, i + 3));\r\n    }\r\n\r\n    // console.timeEnd('earcut');\r\n\r\n    return result;\r\n  };\r\n\r\n  return {\r\n    defaultStyle: defaultStyle,\r\n    collectFeatures: collectFeatures,\r\n    lineStringAttributes: lineStringAttributes,\r\n    multiLineStringAttributes: multiLineStringAttributes,\r\n    polygonAttributes: polygonAttributes\r\n  };\r\n})();\r\n\r\nexport default GeoJSON;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/GeoJSON.js","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.topojson = global.topojson || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction noop() {}\n\nfunction transformAbsolute(transform) {\n  if (!transform) return noop;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    point[0] = (x0 += point[0]) * kx + dx;\n    point[1] = (y0 += point[1]) * ky + dy;\n  };\n}\n\nfunction transformRelative(transform) {\n  if (!transform) return noop;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0;\n    point[1] = y1 - y0;\n    x0 = x1;\n    y0 = y1;\n  };\n}\n\nfunction reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\nfunction bisect(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n\nfunction feature(topology, o) {\n  return o.type === \"GeometryCollection\" ? {\n    type: \"FeatureCollection\",\n    features: o.geometries.map(function(o) { return feature$1(topology, o); })\n  } : feature$1(topology, o);\n}\n\nfunction feature$1(topology, o) {\n  var f = {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties || {},\n    geometry: object(topology, o)\n  };\n  if (o.id == null) delete f.id;\n  return f;\n}\n\nfunction object(topology, o) {\n  var absolute = transformAbsolute(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {\n      points.push(p = a[k].slice());\n      absolute(p, k);\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    p = p.slice();\n    absolute(p, 0);\n    return p;\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0].slice());\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0].slice());\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var t = o.type;\n    return t === \"GeometryCollection\" ? {type: t, geometries: o.geometries.map(geometry)}\n        : t in geometryType ? {type: t, coordinates: geometryType[t](o)}\n        : null;\n  }\n\n  var geometryType = {\n    Point: function(o) { return point(o.coordinates); },\n    MultiPoint: function(o) { return o.coordinates.map(point); },\n    LineString: function(o) { return line(o.arcs); },\n    MultiLineString: function(o) { return o.arcs.map(line); },\n    Polygon: function(o) { return polygon(o.arcs); },\n    MultiPolygon: function(o) { return o.arcs.map(polygon); }\n  };\n\n  return geometry(o);\n}\n\nfunction stitchArcs(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n\nfunction mesh(topology) {\n  return object(topology, meshArcs.apply(this, arguments));\n}\n\nfunction meshArcs(topology, o, filter) {\n  var arcs = [];\n\n  function arc(i) {\n    var j = i < 0 ? ~i : i;\n    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});\n  }\n\n  function line(arcs) {\n    arcs.forEach(arc);\n  }\n\n  function polygon(arcs) {\n    arcs.forEach(line);\n  }\n\n  function geometry(o) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(geometry);\n    else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);\n  }\n\n  if (arguments.length > 1) {\n    var geomsByArc = [],\n        geom;\n\n    var geometryType = {\n      LineString: line,\n      MultiLineString: polygon,\n      Polygon: polygon,\n      MultiPolygon: function(arcs) { arcs.forEach(polygon); }\n    };\n\n    geometry(o);\n\n    geomsByArc.forEach(arguments.length < 3\n        ? function(geoms) { arcs.push(geoms[0].i); }\n        : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });\n  } else {\n    for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);\n  }\n\n  return {type: \"MultiLineString\", arcs: stitchArcs(topology, arcs)};\n}\n\nfunction cartesianTriangleArea(triangle) {\n  var a = triangle[0], b = triangle[1], c = triangle[2];\n  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));\n}\n\nfunction ring(ring) {\n  var i = -1,\n      n = ring.length,\n      a,\n      b = ring[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = ring[i];\n    area += a[0] * b[1] - a[1] * b[0];\n  }\n\n  return area / 2;\n}\n\nfunction merge(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nfunction mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      components = [];\n\n  objects.forEach(function(o) {\n    if (o.type === \"Polygon\") register(o.arcs);\n    else if (o.type === \"MultiPolygon\") o.arcs.forEach(register);\n  });\n\n  function register(polygon) {\n    polygon.forEach(function(ring$$) {\n      ring$$.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring$$) {\n    return Math.abs(ring(object(topology, {type: \"Polygon\", arcs: [ring$$]}).coordinates[0]));\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var component = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      components.push(component);\n      while (polygon = neighbors.pop()) {\n        component.push(polygon);\n        polygon.forEach(function(ring$$) {\n          ring$$.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: components.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring$$) {\n          ring$$.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitchArcs(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    })\n  };\n}\n\nfunction neighbors(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nfunction compareArea(a, b) {\n  return a[1][2] - b[1][2];\n}\n\nfunction minAreaHeap() {\n  var heap = {},\n      array = [],\n      size = 0;\n\n  heap.push = function(object) {\n    up(array[object._ = size] = object, size++);\n    return size;\n  };\n\n  heap.pop = function() {\n    if (size <= 0) return;\n    var removed = array[0], object;\n    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);\n    return removed;\n  };\n\n  heap.remove = function(removed) {\n    var i = removed._, object;\n    if (array[i] !== removed) return; // invalid request\n    if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);\n    return i;\n  };\n\n  function up(object, i) {\n    while (i > 0) {\n      var j = ((i + 1) >> 1) - 1,\n          parent = array[j];\n      if (compareArea(object, parent) >= 0) break;\n      array[parent._ = i] = parent;\n      array[object._ = i = j] = object;\n    }\n  }\n\n  function down(object, i) {\n    while (true) {\n      var r = (i + 1) << 1,\n          l = r - 1,\n          j = i,\n          child = array[j];\n      if (l < size && compareArea(array[l], child) < 0) child = array[j = l];\n      if (r < size && compareArea(array[r], child) < 0) child = array[j = r];\n      if (j === i) break;\n      array[child._ = i] = child;\n      array[object._ = i = j] = object;\n    }\n  }\n\n  return heap;\n}\n\nfunction presimplify(topology, triangleArea) {\n  var absolute = transformAbsolute(topology.transform),\n      relative = transformRelative(topology.transform),\n      heap = minAreaHeap();\n\n  if (!triangleArea) triangleArea = cartesianTriangleArea;\n\n  topology.arcs.forEach(function(arc) {\n    var triangles = [],\n        maxArea = 0,\n        triangle,\n        i,\n        n,\n        p;\n\n    // To store each point’s effective area, we create a new array rather than\n    // extending the passed-in point to workaround a Chrome/V8 bug (getting\n    // stuck in smi mode). For midpoints, the initial effective area of\n    // Infinity will be computed in the next step.\n    for (i = 0, n = arc.length; i < n; ++i) {\n      p = arc[i];\n      absolute(arc[i] = [p[0], p[1], Infinity], i);\n    }\n\n    for (i = 1, n = arc.length - 1; i < n; ++i) {\n      triangle = arc.slice(i - 1, i + 2);\n      triangle[1][2] = triangleArea(triangle);\n      triangles.push(triangle);\n      heap.push(triangle);\n    }\n\n    for (i = 0, n = triangles.length; i < n; ++i) {\n      triangle = triangles[i];\n      triangle.previous = triangles[i - 1];\n      triangle.next = triangles[i + 1];\n    }\n\n    while (triangle = heap.pop()) {\n      var previous = triangle.previous,\n          next = triangle.next;\n\n      // If the area of the current point is less than that of the previous point\n      // to be eliminated, use the latter's area instead. This ensures that the\n      // current point cannot be eliminated without eliminating previously-\n      // eliminated points.\n      if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;\n      else maxArea = triangle[1][2];\n\n      if (previous) {\n        previous.next = next;\n        previous[2] = triangle[2];\n        update(previous);\n      }\n\n      if (next) {\n        next.previous = previous;\n        next[0] = triangle[0];\n        update(next);\n      }\n    }\n\n    arc.forEach(relative);\n  });\n\n  function update(triangle) {\n    heap.remove(triangle);\n    triangle[1][2] = triangleArea(triangle);\n    heap.push(triangle);\n  }\n\n  return topology;\n}\n\nvar version = \"1.6.27\";\n\nexports.version = version;\nexports.mesh = mesh;\nexports.meshArcs = meshArcs;\nexports.merge = merge;\nexports.mergeArcs = mergeArcs;\nexports.feature = feature;\nexports.neighbors = neighbors;\nexports.presimplify = presimplify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/topojson/build/topojson.js\n// module id = 77\n// module chunks = 0","var normalize = require('geojson-normalize');\n\nmodule.exports = function(inputs) {\n    return {\n        type: 'FeatureCollection',\n        features: inputs.reduce(function(memo, input) {\n            return memo.concat(normalize(input).features);\n        }, [])\n    };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/geojson-merge/index.js\n// module id = 78\n// module chunks = 0","module.exports = normalize;\n\nvar types = {\n    Point: 'geometry',\n    MultiPoint: 'geometry',\n    LineString: 'geometry',\n    MultiLineString: 'geometry',\n    Polygon: 'geometry',\n    MultiPolygon: 'geometry',\n    GeometryCollection: 'geometry',\n    Feature: 'feature',\n    FeatureCollection: 'featurecollection'\n};\n\n/**\n * Normalize a GeoJSON feature into a FeatureCollection.\n *\n * @param {object} gj geojson data\n * @returns {object} normalized geojson data\n */\nfunction normalize(gj) {\n    if (!gj || !gj.type) return null;\n    var type = types[gj.type];\n    if (!type) return null;\n\n    if (type === 'geometry') {\n        return {\n            type: 'FeatureCollection',\n            features: [{\n                type: 'Feature',\n                properties: {},\n                geometry: gj\n            }]\n        };\n    } else if (type === 'feature') {\n        return {\n            type: 'FeatureCollection',\n            features: [gj]\n        };\n    } else if (type === 'featurecollection') {\n        return gj;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/geojson-normalize/index.js\n// module id = 79\n// module chunks = 0","'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(ear, triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return p;\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m.next;\n\n    while (p !== stop) {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    }\n\n    return m;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&\n           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    if ((equals(p1, q1) && equals(p2, q2)) ||\n        (equals(p1, q2) && equals(p2, q1))) return true;\n    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&\n           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/earcut/src/earcut.js\n// module id = 80\n// module chunks = 0","/*\r\n * Extrude a polygon given its vertices and triangulated faces\r\n *\r\n * Based on:\r\n * https://github.com/freeman-lab/extrude\r\n */\r\n\r\nimport extend from 'lodash.assign';\r\n\r\nvar extrudePolygon = function(points, faces, _options) {\r\n  var defaults = {\r\n    top: 1,\r\n    bottom: 0,\r\n    closed: true\r\n  };\r\n\r\n  var options = extend({}, defaults, _options);\r\n\r\n  var n = points.length;\r\n  var positions;\r\n  var cells;\r\n  var topCells;\r\n  var bottomCells;\r\n  var sideCells;\r\n\r\n  // If bottom and top values are identical then return the flat shape\r\n  (options.top === options.bottom) ? flat() : full();\r\n\r\n  function flat() {\r\n    positions = points.map(function(p) { return [p[0], options.top, p[1]]; });\r\n    cells = faces;\r\n    topCells = faces;\r\n  }\r\n\r\n  function full() {\r\n    positions = [];\r\n    points.forEach(function(p) { positions.push([p[0], options.top, p[1]]); });\r\n    points.forEach(function(p) { positions.push([p[0], options.bottom, p[1]]); });\r\n\r\n    cells = [];\r\n    for (var i = 0; i < n; i++) {\r\n      if (i === (n - 1)) {\r\n        cells.push([i + n, n, i]);\r\n        cells.push([0, i, n]);\r\n      } else {\r\n        cells.push([i + n, i + n + 1, i]);\r\n        cells.push([i + 1, i, i + n + 1]);\r\n      }\r\n    }\r\n\r\n    sideCells = [].concat(cells);\r\n\r\n    if (options.closed) {\r\n      var top = faces;\r\n      var bottom = top.map(function(p) { return p.map(function(v) { return v + n; }); });\r\n      bottom = bottom.map(function(p) { return [p[0], p[2], p[1]]; });\r\n      cells = cells.concat(top).concat(bottom);\r\n\r\n      topCells = top;\r\n      bottomCells = bottom;\r\n    }\r\n  }\r\n\r\n  return {\r\n    positions: positions,\r\n    faces: cells,\r\n    top: topCells,\r\n    bottom: bottomCells,\r\n    sides: sideCells\r\n  };\r\n};\r\n\r\nexport default extrudePolygon;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/extrudePolygon.js","/*\r\n * BufferGeometry helpers\r\n */\r\n\r\nimport THREE from 'three';\r\nimport {TextEncoder, TextDecoder} from 'text-encoding';\r\n\r\nvar Buffer = (function() {\r\n  // Merge TypedArrays of the same type\r\n  // Returns merged array as well as indexes for splitting the array\r\n  var mergeFloat32Arrays = function(arrays) {\r\n    var size = 0;\r\n    var map = new Int32Array(arrays.length * 2);\r\n\r\n    var lastIndex = 0;\r\n    var length;\r\n\r\n    // Find size of each array\r\n    arrays.forEach((_array, index) => {\r\n      length = _array.length;\r\n      size += length;\r\n      map.set([lastIndex, lastIndex + length], index * 2);\r\n      lastIndex += length;\r\n    });\r\n\r\n    // Create a new array of total size\r\n    var mergedArray = new Float32Array(size);\r\n\r\n    // Add each array to the new array\r\n    arrays.forEach((_array, index) => {\r\n      mergedArray.set(_array, map[index * 2]);\r\n    });\r\n\r\n    return [\r\n      mergedArray,\r\n      map\r\n    ];\r\n  };\r\n\r\n  var splitFloat32Array = function(data) {\r\n    var arr = data[0];\r\n    var map = data[1];\r\n\r\n    var start;\r\n    var arrays = [];\r\n\r\n    // Iterate over map\r\n    for (var i = 0; i < map.length / 2; i++) {\r\n      start = i * 2;\r\n      arrays.push(arr.subarray(map[start], map[start + 1]));\r\n    }\r\n\r\n    return arrays;\r\n  };\r\n\r\n  // TODO: Create a generic method that can work for any typed array\r\n  var mergeUint8Arrays = function(arrays) {\r\n    var size = 0;\r\n    var map = new Int32Array(arrays.length * 2);\r\n\r\n    var lastIndex = 0;\r\n    var length;\r\n\r\n    // Find size of each array\r\n    arrays.forEach((_array, index) => {\r\n      length = _array.length;\r\n      size += length;\r\n      map.set([lastIndex, lastIndex + length], index * 2);\r\n      lastIndex += length;\r\n    });\r\n\r\n    // Create a new array of total size\r\n    var mergedArray = new Uint8Array(size);\r\n\r\n    // Add each array to the new array\r\n    arrays.forEach((_array, index) => {\r\n      mergedArray.set(_array, map[index * 2]);\r\n    });\r\n\r\n    return [\r\n      mergedArray,\r\n      map\r\n    ];\r\n  };\r\n\r\n  // TODO: Dedupe with splitFloat32Array\r\n  var splitUint8Array = function(data) {\r\n    var arr = data[0];\r\n    var map = data[1];\r\n\r\n    var start;\r\n    var arrays = [];\r\n\r\n    // Iterate over map\r\n    for (var i = 0; i < map.length / 2; i++) {\r\n      start = i * 2;\r\n      arrays.push(arr.subarray(map[start], map[start + 1]));\r\n    }\r\n\r\n    return arrays;\r\n  };\r\n\r\n  // Merge multiple attribute objects into a single attribute object\r\n  //\r\n  // Attribute objects must all use the same attribute keys\r\n  var mergeAttributes = function(attributes) {\r\n    var lengths = {};\r\n\r\n    // Find array lengths\r\n    attributes.forEach(_attributes => {\r\n      for (var k in _attributes) {\r\n        if (!lengths[k]) {\r\n          lengths[k] = 0;\r\n        }\r\n\r\n        lengths[k] += _attributes[k].length;\r\n      }\r\n    });\r\n\r\n    var mergedAttributes = {};\r\n\r\n    // Set up arrays to merge into\r\n    for (var k in lengths) {\r\n      mergedAttributes[k] = new Float32Array(lengths[k]);\r\n    }\r\n\r\n    var lastLengths = {};\r\n\r\n    attributes.forEach(_attributes => {\r\n      for (var k in _attributes) {\r\n        if (!lastLengths[k]) {\r\n          lastLengths[k] = 0;\r\n        }\r\n\r\n        mergedAttributes[k].set(_attributes[k], lastLengths[k]);\r\n\r\n        lastLengths[k] += _attributes[k].length;\r\n      }\r\n    });\r\n\r\n    return mergedAttributes;\r\n  };\r\n\r\n  var createLineGeometry = function(lines, offset) {\r\n    var geometry = new THREE.BufferGeometry();\r\n\r\n    var vertices = new Float32Array(lines.verticesCount * 3);\r\n    var colours = new Float32Array(lines.verticesCount * 3);\r\n\r\n    var pickingIds;\r\n    if (lines.pickingIds) {\r\n      // One component per vertex (1)\r\n      pickingIds = new Float32Array(lines.verticesCount);\r\n    }\r\n\r\n    var _vertices;\r\n    var _colour;\r\n    var _pickingId;\r\n\r\n    var lastIndex = 0;\r\n\r\n    for (var i = 0; i < lines.vertices.length; i++) {\r\n      _vertices = lines.vertices[i];\r\n      _colour = lines.colours[i];\r\n\r\n      if (pickingIds) {\r\n        _pickingId = lines.pickingIds[i];\r\n      }\r\n\r\n      for (var j = 0; j < _vertices.length; j++) {\r\n        var ax = _vertices[j][0] + offset.x;\r\n        var ay = _vertices[j][1];\r\n        var az = _vertices[j][2] + offset.y;\r\n\r\n        var c1 = _colour[j];\r\n\r\n        vertices[lastIndex * 3 + 0] = ax;\r\n        vertices[lastIndex * 3 + 1] = ay;\r\n        vertices[lastIndex * 3 + 2] = az;\r\n\r\n        colours[lastIndex * 3 + 0] = c1[0];\r\n        colours[lastIndex * 3 + 1] = c1[1];\r\n        colours[lastIndex * 3 + 2] = c1[2];\r\n\r\n        if (pickingIds) {\r\n          pickingIds[lastIndex] = _pickingId;\r\n        }\r\n\r\n        lastIndex++;\r\n      }\r\n    }\r\n\r\n    // itemSize = 3 because there are 3 values (components) per vertex\r\n    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n    geometry.addAttribute('color', new THREE.BufferAttribute(colours, 3));\r\n\r\n    if (pickingIds) {\r\n      geometry.addAttribute('pickingId', new THREE.BufferAttribute(pickingIds, 1));\r\n    }\r\n\r\n    geometry.computeBoundingBox();\r\n\r\n    return geometry;\r\n  };\r\n\r\n  // TODO: Make picking IDs optional\r\n  var createGeometry = function(attributes, offset) {\r\n    var geometry = new THREE.BufferGeometry();\r\n\r\n    // Three components per vertex per face (3 x 3 = 9)\r\n    var vertices = new Float32Array(attributes.facesCount * 9);\r\n    var normals = new Float32Array(attributes.facesCount * 9);\r\n    var colours = new Float32Array(attributes.facesCount * 9);\r\n\r\n    var pickingIds;\r\n    if (attributes.pickingIds) {\r\n      // One component per vertex per face (1 x 3 = 3)\r\n      pickingIds = new Float32Array(attributes.facesCount * 3);\r\n    }\r\n\r\n    var pA = new THREE.Vector3();\r\n    var pB = new THREE.Vector3();\r\n    var pC = new THREE.Vector3();\r\n\r\n    var cb = new THREE.Vector3();\r\n    var ab = new THREE.Vector3();\r\n\r\n    var index;\r\n    var _faces;\r\n    var _vertices;\r\n    var _colour;\r\n    var _pickingId;\r\n    var lastIndex = 0;\r\n    for (var i = 0; i < attributes.faces.length; i++) {\r\n      _faces = attributes.faces[i];\r\n      _vertices = attributes.vertices[i];\r\n      _colour = attributes.colours[i];\r\n\r\n      if (pickingIds) {\r\n        _pickingId = attributes.pickingIds[i];\r\n      }\r\n\r\n      for (var j = 0; j < _faces.length; j++) {\r\n        // Array of vertex indexes for the face\r\n        index = _faces[j][0];\r\n\r\n        var ax = _vertices[index][0] + offset.x;\r\n        var ay = _vertices[index][1];\r\n        var az = _vertices[index][2] + offset.y;\r\n\r\n        var c1 = _colour[j][0];\r\n\r\n        index = _faces[j][1];\r\n\r\n        var bx = _vertices[index][0] + offset.x;\r\n        var by = _vertices[index][1];\r\n        var bz = _vertices[index][2] + offset.y;\r\n\r\n        var c2 = _colour[j][1];\r\n\r\n        index = _faces[j][2];\r\n\r\n        var cx = _vertices[index][0] + offset.x;\r\n        var cy = _vertices[index][1];\r\n        var cz = _vertices[index][2] + offset.y;\r\n\r\n        var c3 = _colour[j][2];\r\n\r\n        // Flat face normals\r\n        // From: http://threejs.org/examples/webgl_buffergeometry.html\r\n        pA.set(ax, ay, az);\r\n        pB.set(bx, by, bz);\r\n        pC.set(cx, cy, cz);\r\n\r\n        cb.subVectors(pC, pB);\r\n        ab.subVectors(pA, pB);\r\n        cb.cross(ab);\r\n\r\n        cb.normalize();\r\n\r\n        var nx = cb.x;\r\n        var ny = cb.y;\r\n        var nz = cb.z;\r\n\r\n        vertices[lastIndex * 9 + 0] = ax;\r\n        vertices[lastIndex * 9 + 1] = ay;\r\n        vertices[lastIndex * 9 + 2] = az;\r\n\r\n        normals[lastIndex * 9 + 0] = nx;\r\n        normals[lastIndex * 9 + 1] = ny;\r\n        normals[lastIndex * 9 + 2] = nz;\r\n\r\n        colours[lastIndex * 9 + 0] = c1[0];\r\n        colours[lastIndex * 9 + 1] = c1[1];\r\n        colours[lastIndex * 9 + 2] = c1[2];\r\n\r\n        vertices[lastIndex * 9 + 3] = bx;\r\n        vertices[lastIndex * 9 + 4] = by;\r\n        vertices[lastIndex * 9 + 5] = bz;\r\n\r\n        normals[lastIndex * 9 + 3] = nx;\r\n        normals[lastIndex * 9 + 4] = ny;\r\n        normals[lastIndex * 9 + 5] = nz;\r\n\r\n        colours[lastIndex * 9 + 3] = c2[0];\r\n        colours[lastIndex * 9 + 4] = c2[1];\r\n        colours[lastIndex * 9 + 5] = c2[2];\r\n\r\n        vertices[lastIndex * 9 + 6] = cx;\r\n        vertices[lastIndex * 9 + 7] = cy;\r\n        vertices[lastIndex * 9 + 8] = cz;\r\n\r\n        normals[lastIndex * 9 + 6] = nx;\r\n        normals[lastIndex * 9 + 7] = ny;\r\n        normals[lastIndex * 9 + 8] = nz;\r\n\r\n        colours[lastIndex * 9 + 6] = c3[0];\r\n        colours[lastIndex * 9 + 7] = c3[1];\r\n        colours[lastIndex * 9 + 8] = c3[2];\r\n\r\n        if (pickingIds) {\r\n          pickingIds[lastIndex * 3 + 0] = _pickingId;\r\n          pickingIds[lastIndex * 3 + 1] = _pickingId;\r\n          pickingIds[lastIndex * 3 + 2] = _pickingId;\r\n        }\r\n\r\n        lastIndex++;\r\n      }\r\n    }\r\n\r\n    // itemSize = 3 because there are 3 values (components) per vertex\r\n    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n    geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\r\n    geometry.addAttribute('color', new THREE.BufferAttribute(colours, 3));\r\n\r\n    if (pickingIds) {\r\n      geometry.addAttribute('pickingId', new THREE.BufferAttribute(pickingIds, 1));\r\n    }\r\n\r\n    geometry.computeBoundingBox();\r\n\r\n    return geometry;\r\n  };\r\n\r\n  var textEncoder = new TextEncoder('utf-8');\r\n  var textDecoder = new TextDecoder('utf-8');\r\n\r\n  var stringToUint8Array = function(str) {\r\n    return textEncoder.encode(str);\r\n  };\r\n\r\n  var uint8ArrayToString = function(ab) {\r\n    return textDecoder.decode(ab);\r\n  };\r\n\r\n  var fillTypedArray = function(arr, value) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      arr[i] = value;\r\n    }\r\n  };\r\n\r\n  return {\r\n    mergeFloat32Arrays: mergeFloat32Arrays,\r\n    splitFloat32Array: splitFloat32Array,\r\n    mergeUint8Arrays: mergeUint8Arrays,\r\n    splitUint8Array: splitUint8Array,\r\n    mergeAttributes: mergeAttributes,\r\n    createLineGeometry: createLineGeometry,\r\n    createGeometry: createGeometry,\r\n    stringToUint8Array: stringToUint8Array,\r\n    uint8ArrayToString: uint8ArrayToString,\r\n    fillTypedArray: fillTypedArray\r\n  };\r\n})();\r\n\r\nexport default Buffer;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/Buffer.js","// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\nvar encoding = require(\"./lib/encoding.js\");\n\nmodule.exports = {\n  TextEncoder: encoding.TextEncoder,\n  TextDecoder: encoding.TextDecoder,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/text-encoding/index.js\n// module id = 83\n// module chunks = 0","// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n/**\n * @fileoverview Global |this| required for resolving indexes in node.\n * @suppress {globalThis}\n */\n(function(global) {\n  'use strict';\n\n  // If we're in node require encoding-indexes and attach it to the global.\n  if (typeof module !== \"undefined\" && module.exports &&\n    !global[\"encoding-indexes\"]) {\n    global[\"encoding-indexes\"] =\n      require(\"./encoding-indexes.js\")[\"encoding-indexes\"];\n  }\n\n  //\n  // Utilities\n  //\n\n  /**\n   * @param {number} a The number to test.\n   * @param {number} min The minimum value in the range, inclusive.\n   * @param {number} max The maximum value in the range, inclusive.\n   * @return {boolean} True if a >= min and a <= max.\n   */\n  function inRange(a, min, max) {\n    return min <= a && a <= max;\n  }\n\n  /**\n   * @param {!Array.<*>} array The array to check.\n   * @param {*} item The item to look for in the array.\n   * @return {boolean} True if the item appears in the array.\n   */\n  function includes(array, item) {\n    return array.indexOf(item) !== -1;\n  }\n\n  var floor = Math.floor;\n\n  /**\n   * @param {*} o\n   * @return {Object}\n   */\n  function ToDictionary(o) {\n    if (o === undefined) return {};\n    if (o === Object(o)) return o;\n    throw TypeError('Could not convert argument to dictionary');\n  }\n\n  /**\n   * @param {string} string Input string of UTF-16 code units.\n   * @return {!Array.<number>} Code points.\n   */\n  function stringToCodePoints(string) {\n    // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n    // 1. Let S be the DOMString value.\n    var s = String(string);\n\n    // 2. Let n be the length of S.\n    var n = s.length;\n\n    // 3. Initialize i to 0.\n    var i = 0;\n\n    // 4. Initialize U to be an empty sequence of Unicode characters.\n    var u = [];\n\n    // 5. While i < n:\n    while (i < n) {\n\n      // 1. Let c be the code unit in S at index i.\n      var c = s.charCodeAt(i);\n\n      // 2. Depending on the value of c:\n\n      // c < 0xD800 or c > 0xDFFF\n      if (c < 0xD800 || c > 0xDFFF) {\n        // Append to U the Unicode character with code point c.\n        u.push(c);\n      }\n\n      // 0xDC00 ≤ c ≤ 0xDFFF\n      else if (0xDC00 <= c && c <= 0xDFFF) {\n        // Append to U a U+FFFD REPLACEMENT CHARACTER.\n        u.push(0xFFFD);\n      }\n\n      // 0xD800 ≤ c ≤ 0xDBFF\n      else if (0xD800 <= c && c <= 0xDBFF) {\n        // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n        // CHARACTER.\n        if (i === n - 1) {\n          u.push(0xFFFD);\n        }\n        // 2. Otherwise, i < n−1:\n        else {\n          // 1. Let d be the code unit in S at index i+1.\n          var d = s.charCodeAt(i + 1);\n\n          // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n          if (0xDC00 <= d && d <= 0xDFFF) {\n            // 1. Let a be c & 0x3FF.\n            var a = c & 0x3FF;\n\n            // 2. Let b be d & 0x3FF.\n            var b = d & 0x3FF;\n\n            // 3. Append to U the Unicode character with code point\n            // 2^16+2^10*a+b.\n            u.push(0x10000 + (a << 10) + b);\n\n            // 4. Set i to i+1.\n            i += 1;\n          }\n\n          // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n          // U+FFFD REPLACEMENT CHARACTER.\n          else  {\n            u.push(0xFFFD);\n          }\n        }\n      }\n\n      // 3. Set i to i+1.\n      i += 1;\n    }\n\n    // 6. Return U.\n    return u;\n  }\n\n  /**\n   * @param {!Array.<number>} code_points Array of code points.\n   * @return {string} string String of UTF-16 code units.\n   */\n  function codePointsToString(code_points) {\n    var s = '';\n    for (var i = 0; i < code_points.length; ++i) {\n      var cp = code_points[i];\n      if (cp <= 0xFFFF) {\n        s += String.fromCharCode(cp);\n      } else {\n        cp -= 0x10000;\n        s += String.fromCharCode((cp >> 10) + 0xD800,\n                                 (cp & 0x3FF) + 0xDC00);\n      }\n    }\n    return s;\n  }\n\n\n  //\n  // Implementation of Encoding specification\n  // https://encoding.spec.whatwg.org/\n  //\n\n  //\n  // 4. Terminology\n  //\n\n  /**\n   * An ASCII byte is a byte in the range 0x00 to 0x7F, inclusive.\n   * @param {number} a The number to test.\n   * @return {boolean} True if a is in the range 0x00 to 0x7F, inclusive.\n   */\n  function isASCIIByte(a) {\n    return 0x00 <= a && a <= 0x7F;\n  }\n\n  /**\n   * An ASCII code point is a code point in the range U+0000 to\n   * U+007F, inclusive.\n   */\n  var isASCIICodePoint = isASCIIByte;\n\n\n  /**\n   * End-of-stream is a special token that signifies no more tokens\n   * are in the stream.\n   * @const\n   */ var end_of_stream = -1;\n\n  /**\n   * A stream represents an ordered sequence of tokens.\n   *\n   * @constructor\n   * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide\n   * the stream.\n   */\n  function Stream(tokens) {\n    /** @type {!Array.<number>} */\n    this.tokens = [].slice.call(tokens);\n    // Reversed as push/pop is more efficient than shift/unshift.\n    this.tokens.reverse();\n  }\n\n  Stream.prototype = {\n    /**\n     * @return {boolean} True if end-of-stream has been hit.\n     */\n    endOfStream: function() {\n      return !this.tokens.length;\n    },\n\n    /**\n     * When a token is read from a stream, the first token in the\n     * stream must be returned and subsequently removed, and\n     * end-of-stream must be returned otherwise.\n     *\n     * @return {number} Get the next token from the stream, or\n     * end_of_stream.\n     */\n     read: function() {\n      if (!this.tokens.length)\n        return end_of_stream;\n       return this.tokens.pop();\n     },\n\n    /**\n     * When one or more tokens are prepended to a stream, those tokens\n     * must be inserted, in given order, before the first token in the\n     * stream.\n     *\n     * @param {(number|!Array.<number>)} token The token(s) to prepend to the\n     * stream.\n     */\n    prepend: function(token) {\n      if (Array.isArray(token)) {\n        var tokens = /**@type {!Array.<number>}*/(token);\n        while (tokens.length)\n          this.tokens.push(tokens.pop());\n      } else {\n        this.tokens.push(token);\n      }\n    },\n\n    /**\n     * When one or more tokens are pushed to a stream, those tokens\n     * must be inserted, in given order, after the last token in the\n     * stream.\n     *\n     * @param {(number|!Array.<number>)} token The tokens(s) to push to the\n     * stream.\n     */\n    push: function(token) {\n      if (Array.isArray(token)) {\n        var tokens = /**@type {!Array.<number>}*/(token);\n        while (tokens.length)\n          this.tokens.unshift(tokens.shift());\n      } else {\n        this.tokens.unshift(token);\n      }\n    }\n  };\n\n  //\n  // 5. Encodings\n  //\n\n  // 5.1 Encoders and decoders\n\n  /** @const */\n  var finished = -1;\n\n  /**\n   * @param {boolean} fatal If true, decoding errors raise an exception.\n   * @param {number=} opt_code_point Override the standard fallback code point.\n   * @return {number} The code point to insert on a decoding error.\n   */\n  function decoderError(fatal, opt_code_point) {\n    if (fatal)\n      throw TypeError('Decoder error');\n    return opt_code_point || 0xFFFD;\n  }\n\n  /**\n   * @param {number} code_point The code point that could not be encoded.\n   * @return {number} Always throws, no value is actually returned.\n   */\n  function encoderError(code_point) {\n    throw TypeError('The code point ' + code_point + ' could not be encoded.');\n  }\n\n  /** @interface */\n  function Decoder() {}\n  Decoder.prototype = {\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point, or |finished|.\n     */\n    handler: function(stream, bite) {}\n  };\n\n  /** @interface */\n  function Encoder() {}\n  Encoder.prototype = {\n    /**\n     * @param {Stream} stream The stream of code points being encoded.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n     */\n    handler: function(stream, code_point) {}\n  };\n\n  // 5.2 Names and labels\n\n  // TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}\n  // https://github.com/google/closure-compiler/issues/247\n\n  /**\n   * @param {string} label The encoding label.\n   * @return {?{name:string,labels:Array.<string>}}\n   */\n  function getEncoding(label) {\n    // 1. Remove any leading and trailing ASCII whitespace from label.\n    label = String(label).trim().toLowerCase();\n\n    // 2. If label is an ASCII case-insensitive match for any of the\n    // labels listed in the table below, return the corresponding\n    // encoding, and failure otherwise.\n    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {\n      return label_to_encoding[label];\n    }\n    return null;\n  }\n\n  /**\n   * Encodings table: https://encoding.spec.whatwg.org/encodings.json\n   * @const\n   * @type {!Array.<{\n   *          heading: string,\n   *          encodings: Array.<{name:string,labels:Array.<string>}>\n   *        }>}\n   */\n  var encodings = [\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"unicode-1-1-utf-8\",\n            \"utf-8\",\n            \"utf8\"\n          ],\n          \"name\": \"UTF-8\"\n        }\n      ],\n      \"heading\": \"The Encoding\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"866\",\n            \"cp866\",\n            \"csibm866\",\n            \"ibm866\"\n          ],\n          \"name\": \"IBM866\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin2\",\n            \"iso-8859-2\",\n            \"iso-ir-101\",\n            \"iso8859-2\",\n            \"iso88592\",\n            \"iso_8859-2\",\n            \"iso_8859-2:1987\",\n            \"l2\",\n            \"latin2\"\n          ],\n          \"name\": \"ISO-8859-2\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin3\",\n            \"iso-8859-3\",\n            \"iso-ir-109\",\n            \"iso8859-3\",\n            \"iso88593\",\n            \"iso_8859-3\",\n            \"iso_8859-3:1988\",\n            \"l3\",\n            \"latin3\"\n          ],\n          \"name\": \"ISO-8859-3\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin4\",\n            \"iso-8859-4\",\n            \"iso-ir-110\",\n            \"iso8859-4\",\n            \"iso88594\",\n            \"iso_8859-4\",\n            \"iso_8859-4:1988\",\n            \"l4\",\n            \"latin4\"\n          ],\n          \"name\": \"ISO-8859-4\"\n        },\n        {\n          \"labels\": [\n            \"csisolatincyrillic\",\n            \"cyrillic\",\n            \"iso-8859-5\",\n            \"iso-ir-144\",\n            \"iso8859-5\",\n            \"iso88595\",\n            \"iso_8859-5\",\n            \"iso_8859-5:1988\"\n          ],\n          \"name\": \"ISO-8859-5\"\n        },\n        {\n          \"labels\": [\n            \"arabic\",\n            \"asmo-708\",\n            \"csiso88596e\",\n            \"csiso88596i\",\n            \"csisolatinarabic\",\n            \"ecma-114\",\n            \"iso-8859-6\",\n            \"iso-8859-6-e\",\n            \"iso-8859-6-i\",\n            \"iso-ir-127\",\n            \"iso8859-6\",\n            \"iso88596\",\n            \"iso_8859-6\",\n            \"iso_8859-6:1987\"\n          ],\n          \"name\": \"ISO-8859-6\"\n        },\n        {\n          \"labels\": [\n            \"csisolatingreek\",\n            \"ecma-118\",\n            \"elot_928\",\n            \"greek\",\n            \"greek8\",\n            \"iso-8859-7\",\n            \"iso-ir-126\",\n            \"iso8859-7\",\n            \"iso88597\",\n            \"iso_8859-7\",\n            \"iso_8859-7:1987\",\n            \"sun_eu_greek\"\n          ],\n          \"name\": \"ISO-8859-7\"\n        },\n        {\n          \"labels\": [\n            \"csiso88598e\",\n            \"csisolatinhebrew\",\n            \"hebrew\",\n            \"iso-8859-8\",\n            \"iso-8859-8-e\",\n            \"iso-ir-138\",\n            \"iso8859-8\",\n            \"iso88598\",\n            \"iso_8859-8\",\n            \"iso_8859-8:1988\",\n            \"visual\"\n          ],\n          \"name\": \"ISO-8859-8\"\n        },\n        {\n          \"labels\": [\n            \"csiso88598i\",\n            \"iso-8859-8-i\",\n            \"logical\"\n          ],\n          \"name\": \"ISO-8859-8-I\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin6\",\n            \"iso-8859-10\",\n            \"iso-ir-157\",\n            \"iso8859-10\",\n            \"iso885910\",\n            \"l6\",\n            \"latin6\"\n          ],\n          \"name\": \"ISO-8859-10\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-13\",\n            \"iso8859-13\",\n            \"iso885913\"\n          ],\n          \"name\": \"ISO-8859-13\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-14\",\n            \"iso8859-14\",\n            \"iso885914\"\n          ],\n          \"name\": \"ISO-8859-14\"\n        },\n        {\n          \"labels\": [\n            \"csisolatin9\",\n            \"iso-8859-15\",\n            \"iso8859-15\",\n            \"iso885915\",\n            \"iso_8859-15\",\n            \"l9\"\n          ],\n          \"name\": \"ISO-8859-15\"\n        },\n        {\n          \"labels\": [\n            \"iso-8859-16\"\n          ],\n          \"name\": \"ISO-8859-16\"\n        },\n        {\n          \"labels\": [\n            \"cskoi8r\",\n            \"koi\",\n            \"koi8\",\n            \"koi8-r\",\n            \"koi8_r\"\n          ],\n          \"name\": \"KOI8-R\"\n        },\n        {\n          \"labels\": [\n            \"koi8-ru\",\n            \"koi8-u\"\n          ],\n          \"name\": \"KOI8-U\"\n        },\n        {\n          \"labels\": [\n            \"csmacintosh\",\n            \"mac\",\n            \"macintosh\",\n            \"x-mac-roman\"\n          ],\n          \"name\": \"macintosh\"\n        },\n        {\n          \"labels\": [\n            \"dos-874\",\n            \"iso-8859-11\",\n            \"iso8859-11\",\n            \"iso885911\",\n            \"tis-620\",\n            \"windows-874\"\n          ],\n          \"name\": \"windows-874\"\n        },\n        {\n          \"labels\": [\n            \"cp1250\",\n            \"windows-1250\",\n            \"x-cp1250\"\n          ],\n          \"name\": \"windows-1250\"\n        },\n        {\n          \"labels\": [\n            \"cp1251\",\n            \"windows-1251\",\n            \"x-cp1251\"\n          ],\n          \"name\": \"windows-1251\"\n        },\n        {\n          \"labels\": [\n            \"ansi_x3.4-1968\",\n            \"ascii\",\n            \"cp1252\",\n            \"cp819\",\n            \"csisolatin1\",\n            \"ibm819\",\n            \"iso-8859-1\",\n            \"iso-ir-100\",\n            \"iso8859-1\",\n            \"iso88591\",\n            \"iso_8859-1\",\n            \"iso_8859-1:1987\",\n            \"l1\",\n            \"latin1\",\n            \"us-ascii\",\n            \"windows-1252\",\n            \"x-cp1252\"\n          ],\n          \"name\": \"windows-1252\"\n        },\n        {\n          \"labels\": [\n            \"cp1253\",\n            \"windows-1253\",\n            \"x-cp1253\"\n          ],\n          \"name\": \"windows-1253\"\n        },\n        {\n          \"labels\": [\n            \"cp1254\",\n            \"csisolatin5\",\n            \"iso-8859-9\",\n            \"iso-ir-148\",\n            \"iso8859-9\",\n            \"iso88599\",\n            \"iso_8859-9\",\n            \"iso_8859-9:1989\",\n            \"l5\",\n            \"latin5\",\n            \"windows-1254\",\n            \"x-cp1254\"\n          ],\n          \"name\": \"windows-1254\"\n        },\n        {\n          \"labels\": [\n            \"cp1255\",\n            \"windows-1255\",\n            \"x-cp1255\"\n          ],\n          \"name\": \"windows-1255\"\n        },\n        {\n          \"labels\": [\n            \"cp1256\",\n            \"windows-1256\",\n            \"x-cp1256\"\n          ],\n          \"name\": \"windows-1256\"\n        },\n        {\n          \"labels\": [\n            \"cp1257\",\n            \"windows-1257\",\n            \"x-cp1257\"\n          ],\n          \"name\": \"windows-1257\"\n        },\n        {\n          \"labels\": [\n            \"cp1258\",\n            \"windows-1258\",\n            \"x-cp1258\"\n          ],\n          \"name\": \"windows-1258\"\n        },\n        {\n          \"labels\": [\n            \"x-mac-cyrillic\",\n            \"x-mac-ukrainian\"\n          ],\n          \"name\": \"x-mac-cyrillic\"\n        }\n      ],\n      \"heading\": \"Legacy single-byte encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"chinese\",\n            \"csgb2312\",\n            \"csiso58gb231280\",\n            \"gb2312\",\n            \"gb_2312\",\n            \"gb_2312-80\",\n            \"gbk\",\n            \"iso-ir-58\",\n            \"x-gbk\"\n          ],\n          \"name\": \"GBK\"\n        },\n        {\n          \"labels\": [\n            \"gb18030\"\n          ],\n          \"name\": \"gb18030\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Chinese (simplified) encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"big5\",\n            \"big5-hkscs\",\n            \"cn-big5\",\n            \"csbig5\",\n            \"x-x-big5\"\n          ],\n          \"name\": \"Big5\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Chinese (traditional) encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"cseucpkdfmtjapanese\",\n            \"euc-jp\",\n            \"x-euc-jp\"\n          ],\n          \"name\": \"EUC-JP\"\n        },\n        {\n          \"labels\": [\n            \"csiso2022jp\",\n            \"iso-2022-jp\"\n          ],\n          \"name\": \"ISO-2022-JP\"\n        },\n        {\n          \"labels\": [\n            \"csshiftjis\",\n            \"ms932\",\n            \"ms_kanji\",\n            \"shift-jis\",\n            \"shift_jis\",\n            \"sjis\",\n            \"windows-31j\",\n            \"x-sjis\"\n          ],\n          \"name\": \"Shift_JIS\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Japanese encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"cseuckr\",\n            \"csksc56011987\",\n            \"euc-kr\",\n            \"iso-ir-149\",\n            \"korean\",\n            \"ks_c_5601-1987\",\n            \"ks_c_5601-1989\",\n            \"ksc5601\",\n            \"ksc_5601\",\n            \"windows-949\"\n          ],\n          \"name\": \"EUC-KR\"\n        }\n      ],\n      \"heading\": \"Legacy multi-byte Korean encodings\"\n    },\n    {\n      \"encodings\": [\n        {\n          \"labels\": [\n            \"csiso2022kr\",\n            \"hz-gb-2312\",\n            \"iso-2022-cn\",\n            \"iso-2022-cn-ext\",\n            \"iso-2022-kr\"\n          ],\n          \"name\": \"replacement\"\n        },\n        {\n          \"labels\": [\n            \"utf-16be\"\n          ],\n          \"name\": \"UTF-16BE\"\n        },\n        {\n          \"labels\": [\n            \"utf-16\",\n            \"utf-16le\"\n          ],\n          \"name\": \"UTF-16LE\"\n        },\n        {\n          \"labels\": [\n            \"x-user-defined\"\n          ],\n          \"name\": \"x-user-defined\"\n        }\n      ],\n      \"heading\": \"Legacy miscellaneous encodings\"\n    }\n  ];\n\n  // Label to encoding registry.\n  /** @type {Object.<string,{name:string,labels:Array.<string>}>} */\n  var label_to_encoding = {};\n  encodings.forEach(function(category) {\n    category.encodings.forEach(function(encoding) {\n      encoding.labels.forEach(function(label) {\n        label_to_encoding[label] = encoding;\n      });\n    });\n  });\n\n  // Registry of of encoder/decoder factories, by encoding name.\n  /** @type {Object.<string, function({fatal:boolean}): Encoder>} */\n  var encoders = {};\n  /** @type {Object.<string, function({fatal:boolean}): Decoder>} */\n  var decoders = {};\n\n  //\n  // 6. Indexes\n  //\n\n  /**\n   * @param {number} pointer The |pointer| to search for.\n   * @param {(!Array.<?number>|undefined)} index The |index| to search within.\n   * @return {?number} The code point corresponding to |pointer| in |index|,\n   *     or null if |code point| is not in |index|.\n   */\n  function indexCodePointFor(pointer, index) {\n    if (!index) return null;\n    return index[pointer] || null;\n  }\n\n  /**\n   * @param {number} code_point The |code point| to search for.\n   * @param {!Array.<?number>} index The |index| to search within.\n   * @return {?number} The first pointer corresponding to |code point| in\n   *     |index|, or null if |code point| is not in |index|.\n   */\n  function indexPointerFor(code_point, index) {\n    var pointer = index.indexOf(code_point);\n    return pointer === -1 ? null : pointer;\n  }\n\n  /**\n   * @param {string} name Name of the index.\n   * @return {(!Array.<number>|!Array.<Array.<number>>)}\n   *  */\n  function index(name) {\n    if (!('encoding-indexes' in global)) {\n      throw Error(\"Indexes missing.\" +\n                  \" Did you forget to include encoding-indexes.js first?\");\n    }\n    return global['encoding-indexes'][name];\n  }\n\n  /**\n   * @param {number} pointer The |pointer| to search for in the gb18030 index.\n   * @return {?number} The code point corresponding to |pointer| in |index|,\n   *     or null if |code point| is not in the gb18030 index.\n   */\n  function indexGB18030RangesCodePointFor(pointer) {\n    // 1. If pointer is greater than 39419 and less than 189000, or\n    // pointer is greater than 1237575, return null.\n    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575))\n      return null;\n\n    // 2. If pointer is 7457, return code point U+E7C7.\n    if (pointer === 7457) return 0xE7C7;\n\n    // 3. Let offset be the last pointer in index gb18030 ranges that\n    // is equal to or less than pointer and let code point offset be\n    // its corresponding code point.\n    var offset = 0;\n    var code_point_offset = 0;\n    var idx = index('gb18030-ranges');\n    var i;\n    for (i = 0; i < idx.length; ++i) {\n      /** @type {!Array.<number>} */\n      var entry = idx[i];\n      if (entry[0] <= pointer) {\n        offset = entry[0];\n        code_point_offset = entry[1];\n      } else {\n        break;\n      }\n    }\n\n    // 4. Return a code point whose value is code point offset +\n    // pointer − offset.\n    return code_point_offset + pointer - offset;\n  }\n\n  /**\n   * @param {number} code_point The |code point| to locate in the gb18030 index.\n   * @return {number} The first pointer corresponding to |code point| in the\n   *     gb18030 index.\n   */\n  function indexGB18030RangesPointerFor(code_point) {\n    // 1. If code point is U+E7C7, return pointer 7457.\n    if (code_point === 0xE7C7) return 7457;\n\n    // 2. Let offset be the last code point in index gb18030 ranges\n    // that is equal to or less than code point and let pointer offset\n    // be its corresponding pointer.\n    var offset = 0;\n    var pointer_offset = 0;\n    var idx = index('gb18030-ranges');\n    var i;\n    for (i = 0; i < idx.length; ++i) {\n      /** @type {!Array.<number>} */\n      var entry = idx[i];\n      if (entry[1] <= code_point) {\n        offset = entry[1];\n        pointer_offset = entry[0];\n      } else {\n        break;\n      }\n    }\n\n    // 3. Return a pointer whose value is pointer offset + code point\n    // − offset.\n    return pointer_offset + code_point - offset;\n  }\n\n  /**\n   * @param {number} code_point The |code_point| to search for in the Shift_JIS\n   *     index.\n   * @return {?number} The code point corresponding to |pointer| in |index|,\n   *     or null if |code point| is not in the Shift_JIS index.\n   */\n  function indexShiftJISPointerFor(code_point) {\n    // 1. Let index be index jis0208 excluding all entries whose\n    // pointer is in the range 8272 to 8835, inclusive.\n    shift_jis_index = shift_jis_index ||\n      index('jis0208').map(function(code_point, pointer) {\n        return inRange(pointer, 8272, 8835) ? null : code_point;\n      });\n    var index_ = shift_jis_index;\n\n    // 2. Return the index pointer for code point in index.\n    return index_.indexOf(code_point);\n  }\n  var shift_jis_index;\n\n  /**\n   * @param {number} code_point The |code_point| to search for in the big5\n   *     index.\n   * @return {?number} The code point corresponding to |pointer| in |index|,\n   *     or null if |code point| is not in the big5 index.\n   */\n  function indexBig5PointerFor(code_point) {\n    // 1. Let index be index Big5 excluding all entries whose pointer\n    big5_index_no_hkscs = big5_index_no_hkscs ||\n      index('big5').map(function(code_point, pointer) {\n        return (pointer < (0xA1 - 0x81) * 157) ? null : code_point;\n      });\n    var index_ = big5_index_no_hkscs;\n\n    // 2. If code point is U+2550, U+255E, U+2561, U+256A, U+5341, or\n    // U+5345, return the last pointer corresponding to code point in\n    // index.\n    if (code_point === 0x2550 || code_point === 0x255E ||\n        code_point === 0x2561 || code_point === 0x256A ||\n        code_point === 0x5341 || code_point === 0x5345) {\n      return index_.lastIndexOf(code_point);\n    }\n\n    // 3. Return the index pointer for code point in index.\n    return indexPointerFor(code_point, index_);\n  }\n  var big5_index_no_hkscs;\n\n  //\n  // 8. API\n  //\n\n  /** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n  // 8.1 Interface TextDecoder\n\n  /**\n   * @constructor\n   * @param {string=} label The label of the encoding;\n   *     defaults to 'utf-8'.\n   * @param {Object=} options\n   */\n  function TextDecoder(label, options) {\n    // Web IDL conventions\n    if (!(this instanceof TextDecoder))\n      throw TypeError('Called as a function. Did you forget \\'new\\'?');\n    label = label !== undefined ? String(label) : DEFAULT_ENCODING;\n    options = ToDictionary(options);\n\n    // A TextDecoder object has an associated encoding, decoder,\n    // stream, ignore BOM flag (initially unset), BOM seen flag\n    // (initially unset), error mode (initially replacement), and do\n    // not flush flag (initially unset).\n\n    /** @private */\n    this._encoding = null;\n    /** @private @type {?Decoder} */\n    this._decoder = null;\n    /** @private @type {boolean} */\n    this._ignoreBOM = false;\n    /** @private @type {boolean} */\n    this._BOMseen = false;\n    /** @private @type {string} */\n    this._error_mode = 'replacement';\n    /** @private @type {boolean} */\n    this._do_not_flush = false;\n\n\n    // 1. Let encoding be the result of getting an encoding from\n    // label.\n    var encoding = getEncoding(label);\n\n    // 2. If encoding is failure or replacement, throw a RangeError.\n    if (encoding === null || encoding.name === 'replacement')\n      throw RangeError('Unknown encoding: ' + label);\n    if (!decoders[encoding.name]) {\n      throw Error('Decoder not present.' +\n                  ' Did you forget to include encoding-indexes.js first?');\n    }\n\n    // 3. Let dec be a new TextDecoder object.\n    var dec = this;\n\n    // 4. Set dec's encoding to encoding.\n    dec._encoding = encoding;\n\n    // 5. If options's fatal member is true, set dec's error mode to\n    // fatal.\n    if (Boolean(options['fatal']))\n      dec._error_mode = 'fatal';\n\n    // 6. If options's ignoreBOM member is true, set dec's ignore BOM\n    // flag.\n    if (Boolean(options['ignoreBOM']))\n      dec._ignoreBOM = true;\n\n    // For pre-ES5 runtimes:\n    if (!Object.defineProperty) {\n      this.encoding = dec._encoding.name.toLowerCase();\n      this.fatal = dec._error_mode === 'fatal';\n      this.ignoreBOM = dec._ignoreBOM;\n    }\n\n    // 7. Return dec.\n    return dec;\n  }\n\n  if (Object.defineProperty) {\n    // The encoding attribute's getter must return encoding's name.\n    Object.defineProperty(TextDecoder.prototype, 'encoding', {\n      /** @this {TextDecoder} */\n      get: function() { return this._encoding.name.toLowerCase(); }\n    });\n\n    // The fatal attribute's getter must return true if error mode\n    // is fatal, and false otherwise.\n    Object.defineProperty(TextDecoder.prototype, 'fatal', {\n      /** @this {TextDecoder} */\n      get: function() { return this._error_mode === 'fatal'; }\n    });\n\n    // The ignoreBOM attribute's getter must return true if ignore\n    // BOM flag is set, and false otherwise.\n    Object.defineProperty(TextDecoder.prototype, 'ignoreBOM', {\n      /** @this {TextDecoder} */\n      get: function() { return this._ignoreBOM; }\n    });\n  }\n\n  /**\n   * @param {BufferSource=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  TextDecoder.prototype.decode = function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    // 1. If the do not flush flag is unset, set decoder to a new\n    // encoding's decoder, set stream to a new stream, and unset the\n    // BOM seen flag.\n    if (!this._do_not_flush) {\n      this._decoder = decoders[this._encoding.name]({\n        fatal: this._error_mode === 'fatal'});\n      this._BOMseen = false;\n    }\n\n    // 2. If options's stream is true, set the do not flush flag, and\n    // unset the do not flush flag otherwise.\n    this._do_not_flush = Boolean(options['stream']);\n\n    // 3. If input is given, push a copy of input to stream.\n    // TODO: Align with spec algorithm - maintain stream on instance.\n    var input_stream = new Stream(bytes);\n\n    // 4. Let output be a new stream.\n    var output = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    // 5. While true:\n    while (true) {\n      // 1. Let token be the result of reading from stream.\n      var token = input_stream.read();\n\n      // 2. If token is end-of-stream and the do not flush flag is\n      // set, return output, serialized.\n      // TODO: Align with spec algorithm.\n      if (token === end_of_stream)\n        break;\n\n      // 3. Otherwise, run these subsubsteps:\n\n      // 1. Let result be the result of processing token for decoder,\n      // stream, output, and error mode.\n      result = this._decoder.handler(input_stream, token);\n\n      // 2. If result is finished, return output, serialized.\n      if (result === finished)\n        break;\n\n      if (result !== null) {\n        if (Array.isArray(result))\n          output.push.apply(output, /**@type {!Array.<number>}*/(result));\n        else\n          output.push(result);\n      }\n\n      // 3. Otherwise, if result is error, throw a TypeError.\n      // (Thrown in handler)\n\n      // 4. Otherwise, do nothing.\n    }\n    // TODO: Align with spec algorithm.\n    if (!this._do_not_flush) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          output.push.apply(output, /**@type {!Array.<number>}*/(result));\n        else\n          output.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    // A TextDecoder object also has an associated serialize stream\n    // algorithm...\n    /**\n     * @param {!Array.<number>} stream\n     * @return {string}\n     * @this {TextDecoder}\n     */\n    function serializeStream(stream) {\n      // 1. Let token be the result of reading from stream.\n      // (Done in-place on array, rather than as a stream)\n\n      // 2. If encoding is UTF-8, UTF-16BE, or UTF-16LE, and ignore\n      // BOM flag and BOM seen flag are unset, run these subsubsteps:\n      if (includes(['UTF-8', 'UTF-16LE', 'UTF-16BE'], this._encoding.name) &&\n          !this._ignoreBOM && !this._BOMseen) {\n        if (stream.length > 0 && stream[0] === 0xFEFF) {\n          // 1. If token is U+FEFF, set BOM seen flag.\n          this._BOMseen = true;\n          stream.shift();\n        } else if (stream.length > 0) {\n          // 2. Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to stream.\n          this._BOMseen = true;\n        } else {\n          // 3. Otherwise, if token is not end-of-stream, append token\n          // to output.\n          // (no-op)\n        }\n      }\n      // 4. Otherwise, return output.\n      return codePointsToString(stream);\n    }\n\n    return serializeStream.call(this, output);\n  };\n\n  // 8.2 Interface TextEncoder\n\n  /**\n   * @constructor\n   * @param {string=} label The label of the encoding. NONSTANDARD.\n   * @param {Object=} options NONSTANDARD.\n   */\n  function TextEncoder(label, options) {\n    // Web IDL conventions\n    if (!(this instanceof TextEncoder))\n      throw TypeError('Called as a function. Did you forget \\'new\\'?');\n    options = ToDictionary(options);\n\n    // A TextEncoder object has an associated encoding and encoder.\n\n    /** @private */\n    this._encoding = null;\n    /** @private @type {?Encoder} */\n    this._encoder = null;\n\n    // Non-standard\n    /** @private @type {boolean} */\n    this._do_not_flush = false;\n    /** @private @type {string} */\n    this._fatal = Boolean(options['fatal']) ? 'fatal' : 'replacement';\n\n    // 1. Let enc be a new TextEncoder object.\n    var enc = this;\n\n    // 2. Set enc's encoding to UTF-8's encoder.\n    if (Boolean(options['NONSTANDARD_allowLegacyEncoding'])) {\n      // NONSTANDARD behavior.\n      label = label !== undefined ? String(label) : DEFAULT_ENCODING;\n      var encoding = getEncoding(label);\n      if (encoding === null || encoding.name === 'replacement')\n        throw RangeError('Unknown encoding: ' + label);\n      if (!encoders[encoding.name]) {\n        throw Error('Encoder not present.' +\n                    ' Did you forget to include encoding-indexes.js first?');\n      }\n      enc._encoding = encoding;\n    } else {\n      // Standard behavior.\n      enc._encoding = getEncoding('utf-8');\n\n      if (label !== undefined && 'console' in global) {\n        console.warn('TextEncoder constructor called with encoding label, '\n                     + 'which is ignored.');\n      }\n    }\n\n    // For pre-ES5 runtimes:\n    if (!Object.defineProperty)\n      this.encoding = enc._encoding.name.toLowerCase();\n\n    // 3. Return enc.\n    return enc;\n  }\n\n  if (Object.defineProperty) {\n    // The encoding attribute's getter must return encoding's name.\n    Object.defineProperty(TextEncoder.prototype, 'encoding', {\n      /** @this {TextEncoder} */\n      get: function() { return this._encoding.name.toLowerCase(); }\n    });\n  }\n\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {!Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  TextEncoder.prototype.encode = function encode(opt_string, options) {\n    opt_string = opt_string === undefined ? '' : String(opt_string);\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when\n    // the input is a USVString so streaming is not necessary.\n    if (!this._do_not_flush)\n      this._encoder = encoders[this._encoding.name]({\n        fatal: this._fatal === 'fatal'});\n    this._do_not_flush = Boolean(options['stream']);\n\n    // 1. Convert input to a stream.\n    var input = new Stream(stringToCodePoints(opt_string));\n\n    // 2. Let output be a new stream\n    var output = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    // 3. While true, run these substeps:\n    while (true) {\n      // 1. Let token be the result of reading from input.\n      var token = input.read();\n      if (token === end_of_stream)\n        break;\n      // 2. Let result be the result of processing token for encoder,\n      // input, output.\n      result = this._encoder.handler(input, token);\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        output.push.apply(output, /**@type {!Array.<number>}*/(result));\n      else\n        output.push(result);\n    }\n    // TODO: Align with spec algorithm.\n    if (!this._do_not_flush) {\n      while (true) {\n        result = this._encoder.handler(input, input.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          output.push.apply(output, /**@type {!Array.<number>}*/(result));\n        else\n          output.push(result);\n      }\n      this._encoder = null;\n    }\n    // 3. If result is finished, convert output into a byte sequence,\n    // and then return a Uint8Array object wrapping an ArrayBuffer\n    // containing output.\n    return new Uint8Array(output);\n  };\n\n\n  //\n  // 9. The encoding\n  //\n\n  // 9.1 utf-8\n\n  // 9.1.1 utf-8 decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function UTF8Decoder(options) {\n    var fatal = options.fatal;\n\n    // utf-8's decoder's has an associated utf-8 code point, utf-8\n    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n    // lower boundary (initially 0x80), and a utf-8 upper boundary\n    // (initially 0xBF).\n    var /** @type {number} */ utf8_code_point = 0,\n        /** @type {number} */ utf8_bytes_seen = 0,\n        /** @type {number} */ utf8_bytes_needed = 0,\n        /** @type {number} */ utf8_lower_boundary = 0x80,\n        /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n      // set utf-8 bytes needed to 0 and return error.\n      if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n        utf8_bytes_needed = 0;\n        return decoderError(fatal);\n      }\n\n      // 2. If byte is end-of-stream, return finished.\n      if (bite === end_of_stream)\n        return finished;\n\n      // 3. If utf-8 bytes needed is 0, based on byte:\n      if (utf8_bytes_needed === 0) {\n\n        // 0x00 to 0x7F\n        if (inRange(bite, 0x00, 0x7F)) {\n          // Return a code point whose value is byte.\n          return bite;\n        }\n\n        // 0xC2 to 0xDF\n        else if (inRange(bite, 0xC2, 0xDF)) {\n          // 1. Set utf-8 bytes needed to 1.\n          utf8_bytes_needed = 1;\n\n          // 2. Set UTF-8 code point to byte & 0x1F.\n          utf8_code_point = bite & 0x1F;\n        }\n\n        // 0xE0 to 0xEF\n        else if (inRange(bite, 0xE0, 0xEF)) {\n          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n          if (bite === 0xE0)\n            utf8_lower_boundary = 0xA0;\n          // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n          if (bite === 0xED)\n            utf8_upper_boundary = 0x9F;\n          // 3. Set utf-8 bytes needed to 2.\n          utf8_bytes_needed = 2;\n          // 4. Set UTF-8 code point to byte & 0xF.\n          utf8_code_point = bite & 0xF;\n        }\n\n        // 0xF0 to 0xF4\n        else if (inRange(bite, 0xF0, 0xF4)) {\n          // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n          if (bite === 0xF0)\n            utf8_lower_boundary = 0x90;\n          // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n          if (bite === 0xF4)\n            utf8_upper_boundary = 0x8F;\n          // 3. Set utf-8 bytes needed to 3.\n          utf8_bytes_needed = 3;\n          // 4. Set UTF-8 code point to byte & 0x7.\n          utf8_code_point = bite & 0x7;\n        }\n\n        // Otherwise\n        else {\n          // Return error.\n          return decoderError(fatal);\n        }\n\n        // Return continue.\n        return null;\n      }\n\n      // 4. If byte is not in the range utf-8 lower boundary to utf-8\n      // upper boundary, inclusive, run these substeps:\n      if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n        // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n        // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n        // utf-8 upper boundary to 0xBF.\n        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n        utf8_lower_boundary = 0x80;\n        utf8_upper_boundary = 0xBF;\n\n        // 2. Prepend byte to stream.\n        stream.prepend(bite);\n\n        // 3. Return error.\n        return decoderError(fatal);\n      }\n\n      // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n      // to 0xBF.\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &\n      // 0x3F)\n      utf8_code_point = (utf8_code_point << 6) | (bite & 0x3F);\n\n      // 7. Increase utf-8 bytes seen by one.\n      utf8_bytes_seen += 1;\n\n      // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n      // continue.\n      if (utf8_bytes_seen !== utf8_bytes_needed)\n        return null;\n\n      // 9. Let code point be utf-8 code point.\n      var code_point = utf8_code_point;\n\n      // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n      // seen to 0.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n      // 11. Return a code point whose value is code point.\n      return code_point;\n    };\n  }\n\n  // 9.1.2 utf-8 encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function UTF8Encoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. Set count and offset based on the range code point is in:\n      var count, offset;\n      // U+0080 to U+07FF, inclusive:\n      if (inRange(code_point, 0x0080, 0x07FF)) {\n        // 1 and 0xC0\n        count = 1;\n        offset = 0xC0;\n      }\n      // U+0800 to U+FFFF, inclusive:\n      else if (inRange(code_point, 0x0800, 0xFFFF)) {\n        // 2 and 0xE0\n        count = 2;\n        offset = 0xE0;\n      }\n      // U+10000 to U+10FFFF, inclusive:\n      else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n        // 3 and 0xF0\n        count = 3;\n        offset = 0xF0;\n      }\n\n      // 4. Let bytes be a byte sequence whose first byte is (code\n      // point >> (6 × count)) + offset.\n      var bytes = [(code_point >> (6 * count)) + offset];\n\n      // 5. Run these substeps while count is greater than 0:\n      while (count > 0) {\n\n        // 1. Set temp to code point >> (6 × (count − 1)).\n        var temp = code_point >> (6 * (count - 1));\n\n        // 2. Append to bytes 0x80 | (temp & 0x3F).\n        bytes.push(0x80 | (temp & 0x3F));\n\n        // 3. Decrease count by one.\n        count -= 1;\n      }\n\n      // 6. Return bytes bytes, in order.\n      return bytes;\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['UTF-8'] = function(options) {\n    return new UTF8Encoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['UTF-8'] = function(options) {\n    return new UTF8Decoder(options);\n  };\n\n  //\n  // 10. Legacy single-byte encodings\n  //\n\n  // 10.1 single-byte decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {!Array.<number>} index The encoding index.\n   * @param {{fatal: boolean}} options\n   */\n  function SingleByteDecoder(index, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream, return finished.\n      if (bite === end_of_stream)\n        return finished;\n\n      // 2. If byte is an ASCII byte, return a code point whose value\n      // is byte.\n      if (isASCIIByte(bite))\n        return bite;\n\n      // 3. Let code point be the index code point for byte − 0x80 in\n      // index single-byte.\n      var code_point = index[bite - 0x80];\n\n      // 4. If code point is null, return error.\n      if (code_point === null)\n        return decoderError(fatal);\n\n      // 5. Return a code point whose value is code point.\n      return code_point;\n    };\n  }\n\n  // 10.2 single-byte encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {!Array.<?number>} index The encoding index.\n   * @param {{fatal: boolean}} options\n   */\n  function SingleByteEncoder(index, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. Let pointer be the index pointer for code point in index\n      // single-byte.\n      var pointer = indexPointerFor(code_point, index);\n\n      // 4. If pointer is null, return error with code point.\n      if (pointer === null)\n        encoderError(code_point);\n\n      // 5. Return a byte whose value is pointer + 0x80.\n      return pointer + 0x80;\n    };\n  }\n\n  (function() {\n    if (!('encoding-indexes' in global))\n      return;\n    encodings.forEach(function(category) {\n      if (category.heading !== 'Legacy single-byte encodings')\n        return;\n      category.encodings.forEach(function(encoding) {\n        var name = encoding.name;\n        var idx = index(name.toLowerCase());\n        /** @param {{fatal: boolean}} options */\n        decoders[name] = function(options) {\n          return new SingleByteDecoder(idx, options);\n        };\n        /** @param {{fatal: boolean}} options */\n        encoders[name] = function(options) {\n          return new SingleByteEncoder(idx, options);\n        };\n      });\n    });\n  }());\n\n  //\n  // 11. Legacy multi-byte Chinese (simplified) encodings\n  //\n\n  // 11.1 gbk\n\n  // 11.1.1 gbk decoder\n  // gbk's decoder is gb18030's decoder.\n  /** @param {{fatal: boolean}} options */\n  decoders['GBK'] = function(options) {\n    return new GB18030Decoder(options);\n  };\n\n  // 11.1.2 gbk encoder\n  // gbk's encoder is gb18030's encoder with its gbk flag set.\n  /** @param {{fatal: boolean}} options */\n  encoders['GBK'] = function(options) {\n    return new GB18030Encoder(options, true);\n  };\n\n  // 11.2 gb18030\n\n  // 11.2.1 gb18030 decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function GB18030Decoder(options) {\n    var fatal = options.fatal;\n    // gb18030's decoder has an associated gb18030 first, gb18030\n    // second, and gb18030 third (all initially 0x00).\n    var /** @type {number} */ gb18030_first = 0x00,\n        /** @type {number} */ gb18030_second = 0x00,\n        /** @type {number} */ gb18030_third = 0x00;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and gb18030 first, gb18030\n      // second, and gb18030 third are 0x00, return finished.\n      if (bite === end_of_stream && gb18030_first === 0x00 &&\n          gb18030_second === 0x00 && gb18030_third === 0x00) {\n        return finished;\n      }\n      // 2. If byte is end-of-stream, and gb18030 first, gb18030\n      // second, or gb18030 third is not 0x00, set gb18030 first,\n      // gb18030 second, and gb18030 third to 0x00, and return error.\n      if (bite === end_of_stream &&\n          (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||\n           gb18030_third !== 0x00)) {\n        gb18030_first = 0x00;\n        gb18030_second = 0x00;\n        gb18030_third = 0x00;\n        decoderError(fatal);\n      }\n      var code_point;\n      // 3. If gb18030 third is not 0x00, run these substeps:\n      if (gb18030_third !== 0x00) {\n        // 1. Let code point be null.\n        code_point = null;\n        // 2. If byte is in the range 0x30 to 0x39, inclusive, set\n        // code point to the index gb18030 ranges code point for\n        // (((gb18030 first − 0x81) × 10 + gb18030 second − 0x30) ×\n        // 126 + gb18030 third − 0x81) × 10 + byte − 0x30.\n        if (inRange(bite, 0x30, 0x39)) {\n          code_point = indexGB18030RangesCodePointFor(\n              (((gb18030_first - 0x81) * 10 + gb18030_second - 0x30) * 126 +\n               gb18030_third - 0x81) * 10 + bite - 0x30);\n        }\n\n        // 3. Let buffer be a byte sequence consisting of gb18030\n        // second, gb18030 third, and byte, in order.\n        var buffer = [gb18030_second, gb18030_third, bite];\n\n        // 4. Set gb18030 first, gb18030 second, and gb18030 third to\n        // 0x00.\n        gb18030_first = 0x00;\n        gb18030_second = 0x00;\n        gb18030_third = 0x00;\n\n        // 5. If code point is null, prepend buffer to stream and\n        // return error.\n        if (code_point === null) {\n          stream.prepend(buffer);\n          return decoderError(fatal);\n        }\n\n        // 6. Return a code point whose value is code point.\n        return code_point;\n      }\n\n      // 4. If gb18030 second is not 0x00, run these substeps:\n      if (gb18030_second !== 0x00) {\n\n        // 1. If byte is in the range 0x81 to 0xFE, inclusive, set\n        // gb18030 third to byte and return continue.\n        if (inRange(bite, 0x81, 0xFE)) {\n          gb18030_third = bite;\n          return null;\n        }\n\n        // 2. Prepend gb18030 second followed by byte to stream, set\n        // gb18030 first and gb18030 second to 0x00, and return error.\n        stream.prepend([gb18030_second, bite]);\n        gb18030_first = 0x00;\n        gb18030_second = 0x00;\n        return decoderError(fatal);\n      }\n\n      // 5. If gb18030 first is not 0x00, run these substeps:\n      if (gb18030_first !== 0x00) {\n\n        // 1. If byte is in the range 0x30 to 0x39, inclusive, set\n        // gb18030 second to byte and return continue.\n        if (inRange(bite, 0x30, 0x39)) {\n          gb18030_second = bite;\n          return null;\n        }\n\n        // 2. Let lead be gb18030 first, let pointer be null, and set\n        // gb18030 first to 0x00.\n        var lead = gb18030_first;\n        var pointer = null;\n        gb18030_first = 0x00;\n\n        // 3. Let offset be 0x40 if byte is less than 0x7F and 0x41\n        // otherwise.\n        var offset = bite < 0x7F ? 0x40 : 0x41;\n\n        // 4. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80\n        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 190 +\n        // (byte − offset).\n        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE))\n          pointer = (lead - 0x81) * 190 + (bite - offset);\n\n        // 5. Let code point be null if pointer is null and the index\n        // code point for pointer in index gb18030 otherwise.\n        code_point = pointer === null ? null :\n            indexCodePointFor(pointer, index('gb18030'));\n\n        // 6. If code point is null and byte is an ASCII byte, prepend\n        // byte to stream.\n        if (code_point === null && isASCIIByte(bite))\n          stream.prepend(bite);\n\n        // 7. If code point is null, return error.\n        if (code_point === null)\n          return decoderError(fatal);\n\n        // 8. Return a code point whose value is code point.\n        return code_point;\n      }\n\n      // 6. If byte is an ASCII byte, return a code point whose value\n      // is byte.\n      if (isASCIIByte(bite))\n        return bite;\n\n      // 7. If byte is 0x80, return code point U+20AC.\n      if (bite === 0x80)\n        return 0x20AC;\n\n      // 8. If byte is in the range 0x81 to 0xFE, inclusive, set\n      // gb18030 first to byte and return continue.\n      if (inRange(bite, 0x81, 0xFE)) {\n        gb18030_first = bite;\n        return null;\n      }\n\n      // 9. Return error.\n      return decoderError(fatal);\n    };\n  }\n\n  // 11.2.2 gb18030 encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   * @param {boolean=} gbk_flag\n   */\n  function GB18030Encoder(options, gbk_flag) {\n    var fatal = options.fatal;\n    // gb18030's decoder has an associated gbk flag (initially unset).\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. If code point is U+E5E5, return error with code point.\n      if (code_point === 0xE5E5)\n        return encoderError(code_point);\n\n      // 4. If the gbk flag is set and code point is U+20AC, return\n      // byte 0x80.\n      if (gbk_flag && code_point === 0x20AC)\n        return 0x80;\n\n      // 5. Let pointer be the index pointer for code point in index\n      // gb18030.\n      var pointer = indexPointerFor(code_point, index('gb18030'));\n\n      // 6. If pointer is not null, run these substeps:\n      if (pointer !== null) {\n\n        // 1. Let lead be floor(pointer / 190) + 0x81.\n        var lead = floor(pointer / 190) + 0x81;\n\n        // 2. Let trail be pointer % 190.\n        var trail = pointer % 190;\n\n        // 3. Let offset be 0x40 if trail is less than 0x3F and 0x41 otherwise.\n        var offset = trail < 0x3F ? 0x40 : 0x41;\n\n        // 4. Return two bytes whose values are lead and trail + offset.\n        return [lead, trail + offset];\n      }\n\n      // 7. If gbk flag is set, return error with code point.\n      if (gbk_flag)\n        return encoderError(code_point);\n\n      // 8. Set pointer to the index gb18030 ranges pointer for code\n      // point.\n      pointer = indexGB18030RangesPointerFor(code_point);\n\n      // 9. Let byte1 be floor(pointer / 10 / 126 / 10).\n      var byte1 = floor(pointer / 10 / 126 / 10);\n\n      // 10. Set pointer to pointer − byte1 × 10 × 126 × 10.\n      pointer = pointer - byte1 * 10 * 126 * 10;\n\n      // 11. Let byte2 be floor(pointer / 10 / 126).\n      var byte2 = floor(pointer / 10 / 126);\n\n      // 12. Set pointer to pointer − byte2 × 10 × 126.\n      pointer = pointer - byte2 * 10 * 126;\n\n      // 13. Let byte3 be floor(pointer / 10).\n      var byte3 = floor(pointer / 10);\n\n      // 14. Let byte4 be pointer − byte3 × 10.\n      var byte4 = pointer - byte3 * 10;\n\n      // 15. Return four bytes whose values are byte1 + 0x81, byte2 +\n      // 0x30, byte3 + 0x81, byte4 + 0x30.\n      return [byte1 + 0x81,\n              byte2 + 0x30,\n              byte3 + 0x81,\n              byte4 + 0x30];\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['gb18030'] = function(options) {\n    return new GB18030Encoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['gb18030'] = function(options) {\n    return new GB18030Decoder(options);\n  };\n\n\n  //\n  // 12. Legacy multi-byte Chinese (traditional) encodings\n  //\n\n  // 12.1 Big5\n\n  // 12.1.1 Big5 decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function Big5Decoder(options) {\n    var fatal = options.fatal;\n    // Big5's decoder has an associated Big5 lead (initially 0x00).\n    var /** @type {number} */ Big5_lead = 0x00;\n\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and Big5 lead is not 0x00, set\n      // Big5 lead to 0x00 and return error.\n      if (bite === end_of_stream && Big5_lead !== 0x00) {\n        Big5_lead = 0x00;\n        return decoderError(fatal);\n      }\n\n      // 2. If byte is end-of-stream and Big5 lead is 0x00, return\n      // finished.\n      if (bite === end_of_stream && Big5_lead === 0x00)\n        return finished;\n\n      // 3. If Big5 lead is not 0x00, let lead be Big5 lead, let\n      // pointer be null, set Big5 lead to 0x00, and then run these\n      // substeps:\n      if (Big5_lead !== 0x00) {\n        var lead = Big5_lead;\n        var pointer = null;\n        Big5_lead = 0x00;\n\n        // 1. Let offset be 0x40 if byte is less than 0x7F and 0x62\n        // otherwise.\n        var offset = bite < 0x7F ? 0x40 : 0x62;\n\n        // 2. If byte is in the range 0x40 to 0x7E, inclusive, or 0xA1\n        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 157 +\n        // (byte − offset).\n        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE))\n          pointer = (lead - 0x81) * 157 + (bite - offset);\n\n        // 3. If there is a row in the table below whose first column\n        // is pointer, return the two code points listed in its second\n        // column\n        // Pointer | Code points\n        // --------+--------------\n        // 1133    | U+00CA U+0304\n        // 1135    | U+00CA U+030C\n        // 1164    | U+00EA U+0304\n        // 1166    | U+00EA U+030C\n        switch (pointer) {\n          case 1133: return [0x00CA, 0x0304];\n          case 1135: return [0x00CA, 0x030C];\n          case 1164: return [0x00EA, 0x0304];\n          case 1166: return [0x00EA, 0x030C];\n        }\n\n        // 4. Let code point be null if pointer is null and the index\n        // code point for pointer in index Big5 otherwise.\n        var code_point = (pointer === null) ? null :\n            indexCodePointFor(pointer, index('big5'));\n\n        // 5. If code point is null and byte is an ASCII byte, prepend\n        // byte to stream.\n        if (code_point === null && isASCIIByte(bite))\n          stream.prepend(bite);\n\n        // 6. If code point is null, return error.\n        if (code_point === null)\n          return decoderError(fatal);\n\n        // 7. Return a code point whose value is code point.\n        return code_point;\n      }\n\n      // 4. If byte is an ASCII byte, return a code point whose value\n      // is byte.\n      if (isASCIIByte(bite))\n        return bite;\n\n      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set Big5\n      // lead to byte and return continue.\n      if (inRange(bite, 0x81, 0xFE)) {\n        Big5_lead = bite;\n        return null;\n      }\n\n      // 6. Return error.\n      return decoderError(fatal);\n    };\n  }\n\n  // 12.1.2 Big5 encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function Big5Encoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. Let pointer be the index Big5 pointer for code point.\n      var pointer = indexBig5PointerFor(code_point);\n\n      // 4. If pointer is null, return error with code point.\n      if (pointer === null)\n        return encoderError(code_point);\n\n      // 5. Let lead be floor(pointer / 157) + 0x81.\n      var lead = floor(pointer / 157) + 0x81;\n\n      // 6. If lead is less than 0xA1, return error with code point.\n      if (lead < 0xA1)\n        return encoderError(code_point);\n\n      // 7. Let trail be pointer % 157.\n      var trail = pointer % 157;\n\n      // 8. Let offset be 0x40 if trail is less than 0x3F and 0x62\n      // otherwise.\n      var offset = trail < 0x3F ? 0x40 : 0x62;\n\n      // Return two bytes whose values are lead and trail + offset.\n      return [lead, trail + offset];\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['Big5'] = function(options) {\n    return new Big5Encoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['Big5'] = function(options) {\n    return new Big5Decoder(options);\n  };\n\n\n  //\n  // 13. Legacy multi-byte Japanese encodings\n  //\n\n  // 13.1 euc-jp\n\n  // 13.1.1 euc-jp decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function EUCJPDecoder(options) {\n    var fatal = options.fatal;\n\n    // euc-jp's decoder has an associated euc-jp jis0212 flag\n    // (initially unset) and euc-jp lead (initially 0x00).\n    var /** @type {boolean} */ eucjp_jis0212_flag = false,\n        /** @type {number} */ eucjp_lead = 0x00;\n\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and euc-jp lead is not 0x00, set\n      // euc-jp lead to 0x00, and return error.\n      if (bite === end_of_stream && eucjp_lead !== 0x00) {\n        eucjp_lead = 0x00;\n        return decoderError(fatal);\n      }\n\n      // 2. If byte is end-of-stream and euc-jp lead is 0x00, return\n      // finished.\n      if (bite === end_of_stream && eucjp_lead === 0x00)\n        return finished;\n\n      // 3. If euc-jp lead is 0x8E and byte is in the range 0xA1 to\n      // 0xDF, inclusive, set euc-jp lead to 0x00 and return a code\n      // point whose value is 0xFF61 − 0xA1 + byte.\n      if (eucjp_lead === 0x8E && inRange(bite, 0xA1, 0xDF)) {\n        eucjp_lead = 0x00;\n        return 0xFF61 - 0xA1 + bite;\n      }\n\n      // 4. If euc-jp lead is 0x8F and byte is in the range 0xA1 to\n      // 0xFE, inclusive, set the euc-jp jis0212 flag, set euc-jp lead\n      // to byte, and return continue.\n      if (eucjp_lead === 0x8F && inRange(bite, 0xA1, 0xFE)) {\n        eucjp_jis0212_flag = true;\n        eucjp_lead = bite;\n        return null;\n      }\n\n      // 5. If euc-jp lead is not 0x00, let lead be euc-jp lead, set\n      // euc-jp lead to 0x00, and run these substeps:\n      if (eucjp_lead !== 0x00) {\n        var lead = eucjp_lead;\n        eucjp_lead = 0x00;\n\n        // 1. Let code point be null.\n        var code_point = null;\n\n        // 2. If lead and byte are both in the range 0xA1 to 0xFE,\n        // inclusive, set code point to the index code point for (lead\n        // − 0xA1) × 94 + byte − 0xA1 in index jis0208 if the euc-jp\n        // jis0212 flag is unset and in index jis0212 otherwise.\n        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {\n          code_point = indexCodePointFor(\n            (lead - 0xA1) * 94 + (bite - 0xA1),\n            index(!eucjp_jis0212_flag ? 'jis0208' : 'jis0212'));\n        }\n\n        // 3. Unset the euc-jp jis0212 flag.\n        eucjp_jis0212_flag = false;\n\n        // 4. If byte is not in the range 0xA1 to 0xFE, inclusive,\n        // prepend byte to stream.\n        if (!inRange(bite, 0xA1, 0xFE))\n          stream.prepend(bite);\n\n        // 5. If code point is null, return error.\n        if (code_point === null)\n          return decoderError(fatal);\n\n        // 6. Return a code point whose value is code point.\n        return code_point;\n      }\n\n      // 6. If byte is an ASCII byte, return a code point whose value\n      // is byte.\n      if (isASCIIByte(bite))\n        return bite;\n\n      // 7. If byte is 0x8E, 0x8F, or in the range 0xA1 to 0xFE,\n      // inclusive, set euc-jp lead to byte and return continue.\n      if (bite === 0x8E || bite === 0x8F || inRange(bite, 0xA1, 0xFE)) {\n        eucjp_lead = bite;\n        return null;\n      }\n\n      // 8. Return error.\n      return decoderError(fatal);\n    };\n  }\n\n  // 13.1.2 euc-jp encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function EUCJPEncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. If code point is U+00A5, return byte 0x5C.\n      if (code_point === 0x00A5)\n        return 0x5C;\n\n      // 4. If code point is U+203E, return byte 0x7E.\n      if (code_point === 0x203E)\n        return 0x7E;\n\n      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,\n      // return two bytes whose values are 0x8E and code point −\n      // 0xFF61 + 0xA1.\n      if (inRange(code_point, 0xFF61, 0xFF9F))\n        return [0x8E, code_point - 0xFF61 + 0xA1];\n\n      // 6. If code point is U+2212, set it to U+FF0D.\n      if (code_point === 0x2212)\n        code_point = 0xFF0D;\n\n      // 7. Let pointer be the index pointer for code point in index\n      // jis0208.\n      var pointer = indexPointerFor(code_point, index('jis0208'));\n\n      // 8. If pointer is null, return error with code point.\n      if (pointer === null)\n        return encoderError(code_point);\n\n      // 9. Let lead be floor(pointer / 94) + 0xA1.\n      var lead = floor(pointer / 94) + 0xA1;\n\n      // 10. Let trail be pointer % 94 + 0xA1.\n      var trail = pointer % 94 + 0xA1;\n\n      // 11. Return two bytes whose values are lead and trail.\n      return [lead, trail];\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['EUC-JP'] = function(options) {\n    return new EUCJPEncoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['EUC-JP'] = function(options) {\n    return new EUCJPDecoder(options);\n  };\n\n  // 13.2 iso-2022-jp\n\n  // 13.2.1 iso-2022-jp decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function ISO2022JPDecoder(options) {\n    var fatal = options.fatal;\n    /** @enum */\n    var states = {\n      ASCII: 0,\n      Roman: 1,\n      Katakana: 2,\n      LeadByte: 3,\n      TrailByte: 4,\n      EscapeStart: 5,\n      Escape: 6\n    };\n    // iso-2022-jp's decoder has an associated iso-2022-jp decoder\n    // state (initially ASCII), iso-2022-jp decoder output state\n    // (initially ASCII), iso-2022-jp lead (initially 0x00), and\n    // iso-2022-jp output flag (initially unset).\n    var /** @type {number} */ iso2022jp_decoder_state = states.ASCII,\n        /** @type {number} */ iso2022jp_decoder_output_state = states.ASCII,\n        /** @type {number} */ iso2022jp_lead = 0x00,\n        /** @type {boolean} */ iso2022jp_output_flag = false;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // switching on iso-2022-jp decoder state:\n      switch (iso2022jp_decoder_state) {\n      default:\n      case states.ASCII:\n        // ASCII\n        // Based on byte:\n\n        // 0x1B\n        if (bite === 0x1B) {\n          // Set iso-2022-jp decoder state to escape start and return\n          // continue.\n          iso2022jp_decoder_state = states.EscapeStart;\n          return null;\n        }\n\n        // 0x00 to 0x7F, excluding 0x0E, 0x0F, and 0x1B\n        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E\n            && bite !== 0x0F && bite !== 0x1B) {\n          // Unset the iso-2022-jp output flag and return a code point\n          // whose value is byte.\n          iso2022jp_output_flag = false;\n          return bite;\n        }\n\n        // end-of-stream\n        if (bite === end_of_stream) {\n          // Return finished.\n          return finished;\n        }\n\n        // Otherwise\n        // Unset the iso-2022-jp output flag and return error.\n        iso2022jp_output_flag = false;\n        return decoderError(fatal);\n\n      case states.Roman:\n        // Roman\n        // Based on byte:\n\n        // 0x1B\n        if (bite === 0x1B) {\n          // Set iso-2022-jp decoder state to escape start and return\n          // continue.\n          iso2022jp_decoder_state = states.EscapeStart;\n          return null;\n        }\n\n        // 0x5C\n        if (bite === 0x5C) {\n          // Unset the iso-2022-jp output flag and return code point\n          // U+00A5.\n          iso2022jp_output_flag = false;\n          return 0x00A5;\n        }\n\n        // 0x7E\n        if (bite === 0x7E) {\n          // Unset the iso-2022-jp output flag and return code point\n          // U+203E.\n          iso2022jp_output_flag = false;\n          return 0x203E;\n        }\n\n        // 0x00 to 0x7F, excluding 0x0E, 0x0F, 0x1B, 0x5C, and 0x7E\n        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E && bite !== 0x0F\n            && bite !== 0x1B && bite !== 0x5C && bite !== 0x7E) {\n          // Unset the iso-2022-jp output flag and return a code point\n          // whose value is byte.\n          iso2022jp_output_flag = false;\n          return bite;\n        }\n\n        // end-of-stream\n        if (bite === end_of_stream) {\n          // Return finished.\n          return finished;\n        }\n\n        // Otherwise\n        // Unset the iso-2022-jp output flag and return error.\n        iso2022jp_output_flag = false;\n        return decoderError(fatal);\n\n      case states.Katakana:\n        // Katakana\n        // Based on byte:\n\n        // 0x1B\n        if (bite === 0x1B) {\n          // Set iso-2022-jp decoder state to escape start and return\n          // continue.\n          iso2022jp_decoder_state = states.EscapeStart;\n          return null;\n        }\n\n        // 0x21 to 0x5F\n        if (inRange(bite, 0x21, 0x5F)) {\n          // Unset the iso-2022-jp output flag and return a code point\n          // whose value is 0xFF61 − 0x21 + byte.\n          iso2022jp_output_flag = false;\n          return 0xFF61 - 0x21 + bite;\n        }\n\n        // end-of-stream\n        if (bite === end_of_stream) {\n          // Return finished.\n          return finished;\n        }\n\n        // Otherwise\n        // Unset the iso-2022-jp output flag and return error.\n        iso2022jp_output_flag = false;\n        return decoderError(fatal);\n\n      case states.LeadByte:\n        // Lead byte\n        // Based on byte:\n\n        // 0x1B\n        if (bite === 0x1B) {\n          // Set iso-2022-jp decoder state to escape start and return\n          // continue.\n          iso2022jp_decoder_state = states.EscapeStart;\n          return null;\n        }\n\n        // 0x21 to 0x7E\n        if (inRange(bite, 0x21, 0x7E)) {\n          // Unset the iso-2022-jp output flag, set iso-2022-jp lead\n          // to byte, iso-2022-jp decoder state to trail byte, and\n          // return continue.\n          iso2022jp_output_flag = false;\n          iso2022jp_lead = bite;\n          iso2022jp_decoder_state = states.TrailByte;\n          return null;\n        }\n\n        // end-of-stream\n        if (bite === end_of_stream) {\n          // Return finished.\n          return finished;\n        }\n\n        // Otherwise\n        // Unset the iso-2022-jp output flag and return error.\n        iso2022jp_output_flag = false;\n        return decoderError(fatal);\n\n      case states.TrailByte:\n        // Trail byte\n        // Based on byte:\n\n        // 0x1B\n        if (bite === 0x1B) {\n          // Set iso-2022-jp decoder state to escape start and return\n          // continue.\n          iso2022jp_decoder_state = states.EscapeStart;\n          return decoderError(fatal);\n        }\n\n        // 0x21 to 0x7E\n        if (inRange(bite, 0x21, 0x7E)) {\n          // 1. Set the iso-2022-jp decoder state to lead byte.\n          iso2022jp_decoder_state = states.LeadByte;\n\n          // 2. Let pointer be (iso-2022-jp lead − 0x21) × 94 + byte − 0x21.\n          var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;\n\n          // 3. Let code point be the index code point for pointer in\n          // index jis0208.\n          var code_point = indexCodePointFor(pointer, index('jis0208'));\n\n          // 4. If code point is null, return error.\n          if (code_point === null)\n            return decoderError(fatal);\n\n          // 5. Return a code point whose value is code point.\n          return code_point;\n        }\n\n        // end-of-stream\n        if (bite === end_of_stream) {\n          // Set the iso-2022-jp decoder state to lead byte, prepend\n          // byte to stream, and return error.\n          iso2022jp_decoder_state = states.LeadByte;\n          stream.prepend(bite);\n          return decoderError(fatal);\n        }\n\n        // Otherwise\n        // Set iso-2022-jp decoder state to lead byte and return\n        // error.\n        iso2022jp_decoder_state = states.LeadByte;\n        return decoderError(fatal);\n\n      case states.EscapeStart:\n        // Escape start\n\n        // 1. If byte is either 0x24 or 0x28, set iso-2022-jp lead to\n        // byte, iso-2022-jp decoder state to escape, and return\n        // continue.\n        if (bite === 0x24 || bite === 0x28) {\n          iso2022jp_lead = bite;\n          iso2022jp_decoder_state = states.Escape;\n          return null;\n        }\n\n        // 2. Prepend byte to stream.\n        stream.prepend(bite);\n\n        // 3. Unset the iso-2022-jp output flag, set iso-2022-jp\n        // decoder state to iso-2022-jp decoder output state, and\n        // return error.\n        iso2022jp_output_flag = false;\n        iso2022jp_decoder_state = iso2022jp_decoder_output_state;\n        return decoderError(fatal);\n\n      case states.Escape:\n        // Escape\n\n        // 1. Let lead be iso-2022-jp lead and set iso-2022-jp lead to\n        // 0x00.\n        var lead = iso2022jp_lead;\n        iso2022jp_lead = 0x00;\n\n        // 2. Let state be null.\n        var state = null;\n\n        // 3. If lead is 0x28 and byte is 0x42, set state to ASCII.\n        if (lead === 0x28 && bite === 0x42)\n          state = states.ASCII;\n\n        // 4. If lead is 0x28 and byte is 0x4A, set state to Roman.\n        if (lead === 0x28 && bite === 0x4A)\n          state = states.Roman;\n\n        // 5. If lead is 0x28 and byte is 0x49, set state to Katakana.\n        if (lead === 0x28 && bite === 0x49)\n          state = states.Katakana;\n\n        // 6. If lead is 0x24 and byte is either 0x40 or 0x42, set\n        // state to lead byte.\n        if (lead === 0x24 && (bite === 0x40 || bite === 0x42))\n          state = states.LeadByte;\n\n        // 7. If state is non-null, run these substeps:\n        if (state !== null) {\n          // 1. Set iso-2022-jp decoder state and iso-2022-jp decoder\n          // output state to states.\n          iso2022jp_decoder_state = iso2022jp_decoder_state = state;\n\n          // 2. Let output flag be the iso-2022-jp output flag.\n          var output_flag = iso2022jp_output_flag;\n\n          // 3. Set the iso-2022-jp output flag.\n          iso2022jp_output_flag = true;\n\n          // 4. Return continue, if output flag is unset, and error\n          // otherwise.\n          return !output_flag ? null : decoderError(fatal);\n        }\n\n        // 8. Prepend lead and byte to stream.\n        stream.prepend([lead, bite]);\n\n        // 9. Unset the iso-2022-jp output flag, set iso-2022-jp\n        // decoder state to iso-2022-jp decoder output state and\n        // return error.\n        iso2022jp_output_flag = false;\n        iso2022jp_decoder_state = iso2022jp_decoder_output_state;\n        return decoderError(fatal);\n      }\n    };\n  }\n\n  // 13.2.2 iso-2022-jp encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function ISO2022JPEncoder(options) {\n    var fatal = options.fatal;\n    // iso-2022-jp's encoder has an associated iso-2022-jp encoder\n    // state which is one of ASCII, Roman, and jis0208 (initially\n    // ASCII).\n    /** @enum */\n    var states = {\n      ASCII: 0,\n      Roman: 1,\n      jis0208: 2\n    };\n    var /** @type {number} */ iso2022jp_state = states.ASCII;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream and iso-2022-jp encoder\n      // state is not ASCII, prepend code point to stream, set\n      // iso-2022-jp encoder state to ASCII, and return three bytes\n      // 0x1B 0x28 0x42.\n      if (code_point === end_of_stream &&\n          iso2022jp_state !== states.ASCII) {\n        stream.prepend(code_point);\n        iso2022jp_state = states.ASCII;\n        return [0x1B, 0x28, 0x42];\n      }\n\n      // 2. If code point is end-of-stream and iso-2022-jp encoder\n      // state is ASCII, return finished.\n      if (code_point === end_of_stream && iso2022jp_state === states.ASCII)\n        return finished;\n\n      // 3. If ISO-2022-JP encoder state is ASCII or Roman, and code\n      // point is U+000E, U+000F, or U+001B, return error with U+FFFD.\n      if ((iso2022jp_state === states.ASCII ||\n           iso2022jp_state === states.Roman) &&\n          (code_point === 0x000E || code_point === 0x000F ||\n           code_point === 0x001B)) {\n        return encoderError(0xFFFD);\n      }\n\n      // 4. If iso-2022-jp encoder state is ASCII and code point is an\n      // ASCII code point, return a byte whose value is code point.\n      if (iso2022jp_state === states.ASCII &&\n          isASCIICodePoint(code_point))\n        return code_point;\n\n      // 5. If iso-2022-jp encoder state is Roman and code point is an\n      // ASCII code point, excluding U+005C and U+007E, or is U+00A5\n      // or U+203E, run these substeps:\n      if (iso2022jp_state === states.Roman &&\n          ((isASCIICodePoint(code_point) &&\n           code_point !== 0x005C && code_point !== 0x007E) ||\n          (code_point == 0x00A5 || code_point == 0x203E))) {\n\n        // 1. If code point is an ASCII code point, return a byte\n        // whose value is code point.\n        if (isASCIICodePoint(code_point))\n          return code_point;\n\n        // 2. If code point is U+00A5, return byte 0x5C.\n        if (code_point === 0x00A5)\n          return 0x5C;\n\n        // 3. If code point is U+203E, return byte 0x7E.\n        if (code_point === 0x203E)\n          return 0x7E;\n      }\n\n      // 6. If code point is an ASCII code point, and iso-2022-jp\n      // encoder state is not ASCII, prepend code point to stream, set\n      // iso-2022-jp encoder state to ASCII, and return three bytes\n      // 0x1B 0x28 0x42.\n      if (isASCIICodePoint(code_point) &&\n          iso2022jp_state !== states.ASCII) {\n        stream.prepend(code_point);\n        iso2022jp_state = states.ASCII;\n        return [0x1B, 0x28, 0x42];\n      }\n\n      // 7. If code point is either U+00A5 or U+203E, and iso-2022-jp\n      // encoder state is not Roman, prepend code point to stream, set\n      // iso-2022-jp encoder state to Roman, and return three bytes\n      // 0x1B 0x28 0x4A.\n      if ((code_point === 0x00A5 || code_point === 0x203E) &&\n          iso2022jp_state !== states.Roman) {\n        stream.prepend(code_point);\n        iso2022jp_state = states.Roman;\n        return [0x1B, 0x28, 0x4A];\n      }\n\n      // 8. If code point is U+2212, set it to U+FF0D.\n      if (code_point === 0x2212)\n        code_point = 0xFF0D;\n\n      // 9. Let pointer be the index pointer for code point in index\n      // jis0208.\n      var pointer = indexPointerFor(code_point, index('jis0208'));\n\n      // 10. If pointer is null, return error with code point.\n      if (pointer === null)\n        return encoderError(code_point);\n\n      // 11. If iso-2022-jp encoder state is not jis0208, prepend code\n      // point to stream, set iso-2022-jp encoder state to jis0208,\n      // and return three bytes 0x1B 0x24 0x42.\n      if (iso2022jp_state !== states.jis0208) {\n        stream.prepend(code_point);\n        iso2022jp_state = states.jis0208;\n        return [0x1B, 0x24, 0x42];\n      }\n\n      // 12. Let lead be floor(pointer / 94) + 0x21.\n      var lead = floor(pointer / 94) + 0x21;\n\n      // 13. Let trail be pointer % 94 + 0x21.\n      var trail = pointer % 94 + 0x21;\n\n      // 14. Return two bytes whose values are lead and trail.\n      return [lead, trail];\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['ISO-2022-JP'] = function(options) {\n    return new ISO2022JPEncoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['ISO-2022-JP'] = function(options) {\n    return new ISO2022JPDecoder(options);\n  };\n\n  // 13.3 Shift_JIS\n\n  // 13.3.1 Shift_JIS decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function ShiftJISDecoder(options) {\n    var fatal = options.fatal;\n    // Shift_JIS's decoder has an associated Shift_JIS lead (initially\n    // 0x00).\n    var /** @type {number} */ Shift_JIS_lead = 0x00;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and Shift_JIS lead is not 0x00,\n      // set Shift_JIS lead to 0x00 and return error.\n      if (bite === end_of_stream && Shift_JIS_lead !== 0x00) {\n        Shift_JIS_lead = 0x00;\n        return decoderError(fatal);\n      }\n\n      // 2. If byte is end-of-stream and Shift_JIS lead is 0x00,\n      // return finished.\n      if (bite === end_of_stream && Shift_JIS_lead === 0x00)\n        return finished;\n\n      // 3. If Shift_JIS lead is not 0x00, let lead be Shift_JIS lead,\n      // let pointer be null, set Shift_JIS lead to 0x00, and then run\n      // these substeps:\n      if (Shift_JIS_lead !== 0x00) {\n        var lead = Shift_JIS_lead;\n        var pointer = null;\n        Shift_JIS_lead = 0x00;\n\n        // 1. Let offset be 0x40, if byte is less than 0x7F, and 0x41\n        // otherwise.\n        var offset = (bite < 0x7F) ? 0x40 : 0x41;\n\n        // 2. Let lead offset be 0x81, if lead is less than 0xA0, and\n        // 0xC1 otherwise.\n        var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;\n\n        // 3. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80\n        // to 0xFC, inclusive, set pointer to (lead − lead offset) ×\n        // 188 + byte − offset.\n        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC))\n          pointer = (lead - lead_offset) * 188 + bite - offset;\n\n        // 4. If pointer is in the range 8836 to 10715, inclusive,\n        // return a code point whose value is 0xE000 − 8836 + pointer.\n        if (inRange(pointer, 8836, 10715))\n          return 0xE000 - 8836 + pointer;\n\n        // 5. Let code point be null, if pointer is null, and the\n        // index code point for pointer in index jis0208 otherwise.\n        var code_point = (pointer === null) ? null :\n              indexCodePointFor(pointer, index('jis0208'));\n\n        // 6. If code point is null and byte is an ASCII byte, prepend\n        // byte to stream.\n        if (code_point === null && isASCIIByte(bite))\n          stream.prepend(bite);\n\n        // 7. If code point is null, return error.\n        if (code_point === null)\n          return decoderError(fatal);\n\n        // 8. Return a code point whose value is code point.\n        return code_point;\n      }\n\n      // 4. If byte is an ASCII byte or 0x80, return a code point\n      // whose value is byte.\n      if (isASCIIByte(bite) || bite === 0x80)\n        return bite;\n\n      // 5. If byte is in the range 0xA1 to 0xDF, inclusive, return a\n      // code point whose value is 0xFF61 − 0xA1 + byte.\n      if (inRange(bite, 0xA1, 0xDF))\n        return 0xFF61 - 0xA1 + bite;\n\n      // 6. If byte is in the range 0x81 to 0x9F, inclusive, or 0xE0\n      // to 0xFC, inclusive, set Shift_JIS lead to byte and return\n      // continue.\n      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {\n        Shift_JIS_lead = bite;\n        return null;\n      }\n\n      // 7. Return error.\n      return decoderError(fatal);\n    };\n  }\n\n  // 13.3.2 Shift_JIS encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function ShiftJISEncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point or U+0080, return a\n      // byte whose value is code point.\n      if (isASCIICodePoint(code_point) || code_point === 0x0080)\n        return code_point;\n\n      // 3. If code point is U+00A5, return byte 0x5C.\n      if (code_point === 0x00A5)\n        return 0x5C;\n\n      // 4. If code point is U+203E, return byte 0x7E.\n      if (code_point === 0x203E)\n        return 0x7E;\n\n      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,\n      // return a byte whose value is code point − 0xFF61 + 0xA1.\n      if (inRange(code_point, 0xFF61, 0xFF9F))\n        return code_point - 0xFF61 + 0xA1;\n\n      // 6. If code point is U+2212, set it to U+FF0D.\n      if (code_point === 0x2212)\n        code_point = 0xFF0D;\n\n      // 7. Let pointer be the index Shift_JIS pointer for code point.\n      var pointer = indexShiftJISPointerFor(code_point);\n\n      // 8. If pointer is null, return error with code point.\n      if (pointer === null)\n        return encoderError(code_point);\n\n      // 9. Let lead be floor(pointer / 188).\n      var lead = floor(pointer / 188);\n\n      // 10. Let lead offset be 0x81, if lead is less than 0x1F, and\n      // 0xC1 otherwise.\n      var lead_offset = (lead < 0x1F) ? 0x81 : 0xC1;\n\n      // 11. Let trail be pointer % 188.\n      var trail = pointer % 188;\n\n      // 12. Let offset be 0x40, if trail is less than 0x3F, and 0x41\n      // otherwise.\n      var offset = (trail < 0x3F) ? 0x40 : 0x41;\n\n      // 13. Return two bytes whose values are lead + lead offset and\n      // trail + offset.\n      return [lead + lead_offset, trail + offset];\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['Shift_JIS'] = function(options) {\n    return new ShiftJISEncoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['Shift_JIS'] = function(options) {\n    return new ShiftJISDecoder(options);\n  };\n\n  //\n  // 14. Legacy multi-byte Korean encodings\n  //\n\n  // 14.1 euc-kr\n\n  // 14.1.1 euc-kr decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function EUCKRDecoder(options) {\n    var fatal = options.fatal;\n\n    // euc-kr's decoder has an associated euc-kr lead (initially 0x00).\n    var /** @type {number} */ euckr_lead = 0x00;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and euc-kr lead is not 0x00, set\n      // euc-kr lead to 0x00 and return error.\n      if (bite === end_of_stream && euckr_lead !== 0) {\n        euckr_lead = 0x00;\n        return decoderError(fatal);\n      }\n\n      // 2. If byte is end-of-stream and euc-kr lead is 0x00, return\n      // finished.\n      if (bite === end_of_stream && euckr_lead === 0)\n        return finished;\n\n      // 3. If euc-kr lead is not 0x00, let lead be euc-kr lead, let\n      // pointer be null, set euc-kr lead to 0x00, and then run these\n      // substeps:\n      if (euckr_lead !== 0x00) {\n        var lead = euckr_lead;\n        var pointer = null;\n        euckr_lead = 0x00;\n\n        // 1. If byte is in the range 0x41 to 0xFE, inclusive, set\n        // pointer to (lead − 0x81) × 190 + (byte − 0x41).\n        if (inRange(bite, 0x41, 0xFE))\n          pointer = (lead - 0x81) * 190 + (bite - 0x41);\n\n        // 2. Let code point be null, if pointer is null, and the\n        // index code point for pointer in index euc-kr otherwise.\n        var code_point = (pointer === null)\n              ? null : indexCodePointFor(pointer, index('euc-kr'));\n\n        // 3. If code point is null and byte is an ASCII byte, prepend\n        // byte to stream.\n        if (pointer === null && isASCIIByte(bite))\n          stream.prepend(bite);\n\n        // 4. If code point is null, return error.\n        if (code_point === null)\n          return decoderError(fatal);\n\n        // 5. Return a code point whose value is code point.\n        return code_point;\n      }\n\n      // 4. If byte is an ASCII byte, return a code point whose value\n      // is byte.\n      if (isASCIIByte(bite))\n        return bite;\n\n      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set\n      // euc-kr lead to byte and return continue.\n      if (inRange(bite, 0x81, 0xFE)) {\n        euckr_lead = bite;\n        return null;\n      }\n\n      // 6. Return error.\n      return decoderError(fatal);\n    };\n  }\n\n  // 14.1.2 euc-kr encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function EUCKREncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. Let pointer be the index pointer for code point in index\n      // euc-kr.\n      var pointer = indexPointerFor(code_point, index('euc-kr'));\n\n      // 4. If pointer is null, return error with code point.\n      if (pointer === null)\n        return encoderError(code_point);\n\n      // 5. Let lead be floor(pointer / 190) + 0x81.\n      var lead = floor(pointer / 190) + 0x81;\n\n      // 6. Let trail be pointer % 190 + 0x41.\n      var trail = (pointer % 190) + 0x41;\n\n      // 7. Return two bytes whose values are lead and trail.\n      return [lead, trail];\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['EUC-KR'] = function(options) {\n    return new EUCKREncoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['EUC-KR'] = function(options) {\n    return new EUCKRDecoder(options);\n  };\n\n\n  //\n  // 15. Legacy miscellaneous encodings\n  //\n\n  // 15.1 replacement\n\n  // Not needed - API throws RangeError\n\n  // 15.2 Common infrastructure for utf-16be and utf-16le\n\n  /**\n   * @param {number} code_unit\n   * @param {boolean} utf16be\n   * @return {!Array.<number>} bytes\n   */\n  function convertCodeUnitToBytes(code_unit, utf16be) {\n    // 1. Let byte1 be code unit >> 8.\n    var byte1 = code_unit >> 8;\n\n    // 2. Let byte2 be code unit & 0x00FF.\n    var byte2 = code_unit & 0x00FF;\n\n    // 3. Then return the bytes in order:\n        // utf-16be flag is set: byte1, then byte2.\n    if (utf16be)\n      return [byte1, byte2];\n    // utf-16be flag is unset: byte2, then byte1.\n    return [byte2, byte1];\n  }\n\n  // 15.2.1 shared utf-16 decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n   * @param {{fatal: boolean}} options\n   */\n  function UTF16Decoder(utf16_be, options) {\n    var fatal = options.fatal;\n    var /** @type {?number} */ utf16_lead_byte = null,\n        /** @type {?number} */ utf16_lead_surrogate = null;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream and either utf-16 lead byte or\n      // utf-16 lead surrogate is not null, set utf-16 lead byte and\n      // utf-16 lead surrogate to null, and return error.\n      if (bite === end_of_stream && (utf16_lead_byte !== null ||\n                                utf16_lead_surrogate !== null)) {\n        return decoderError(fatal);\n      }\n\n      // 2. If byte is end-of-stream and utf-16 lead byte and utf-16\n      // lead surrogate are null, return finished.\n      if (bite === end_of_stream && utf16_lead_byte === null &&\n          utf16_lead_surrogate === null) {\n        return finished;\n      }\n\n      // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte\n      // and return continue.\n      if (utf16_lead_byte === null) {\n        utf16_lead_byte = bite;\n        return null;\n      }\n\n      // 4. Let code unit be the result of:\n      var code_unit;\n      if (utf16_be) {\n        // utf-16be decoder flag is set\n        //   (utf-16 lead byte << 8) + byte.\n        code_unit = (utf16_lead_byte << 8) + bite;\n      } else {\n        // utf-16be decoder flag is unset\n        //   (byte << 8) + utf-16 lead byte.\n        code_unit = (bite << 8) + utf16_lead_byte;\n      }\n      // Then set utf-16 lead byte to null.\n      utf16_lead_byte = null;\n\n      // 5. If utf-16 lead surrogate is not null, let lead surrogate\n      // be utf-16 lead surrogate, set utf-16 lead surrogate to null,\n      // and then run these substeps:\n      if (utf16_lead_surrogate !== null) {\n        var lead_surrogate = utf16_lead_surrogate;\n        utf16_lead_surrogate = null;\n\n        // 1. If code unit is in the range U+DC00 to U+DFFF,\n        // inclusive, return a code point whose value is 0x10000 +\n        // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).\n        if (inRange(code_unit, 0xDC00, 0xDFFF)) {\n          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +\n              (code_unit - 0xDC00);\n        }\n\n        // 2. Prepend the sequence resulting of converting code unit\n        // to bytes using utf-16be decoder flag to stream and return\n        // error.\n        stream.prepend(convertCodeUnitToBytes(code_unit, utf16_be));\n        return decoderError(fatal);\n      }\n\n      // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,\n      // set utf-16 lead surrogate to code unit and return continue.\n      if (inRange(code_unit, 0xD800, 0xDBFF)) {\n        utf16_lead_surrogate = code_unit;\n        return null;\n      }\n\n      // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,\n      // return error.\n      if (inRange(code_unit, 0xDC00, 0xDFFF))\n        return decoderError(fatal);\n\n      // 8. Return code point code unit.\n      return code_unit;\n    };\n  }\n\n  // 15.2.2 shared utf-16 encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n   * @param {{fatal: boolean}} options\n   */\n  function UTF16Encoder(utf16_be, options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1. If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is in the range U+0000 to U+FFFF, inclusive,\n      // return the sequence resulting of converting code point to\n      // bytes using utf-16be encoder flag.\n      if (inRange(code_point, 0x0000, 0xFFFF))\n        return convertCodeUnitToBytes(code_point, utf16_be);\n\n      // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,\n      // converted to bytes using utf-16be encoder flag.\n      var lead = convertCodeUnitToBytes(\n        ((code_point - 0x10000) >> 10) + 0xD800, utf16_be);\n\n      // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,\n      // converted to bytes using utf-16be encoder flag.\n      var trail = convertCodeUnitToBytes(\n        ((code_point - 0x10000) & 0x3FF) + 0xDC00, utf16_be);\n\n      // 5. Return a byte sequence of lead followed by trail.\n      return lead.concat(trail);\n    };\n  }\n\n  // 15.3 utf-16be\n  // 15.3.1 utf-16be decoder\n  /** @param {{fatal: boolean}} options */\n  encoders['UTF-16BE'] = function(options) {\n    return new UTF16Encoder(true, options);\n  };\n  // 15.3.2 utf-16be encoder\n  /** @param {{fatal: boolean}} options */\n  decoders['UTF-16BE'] = function(options) {\n    return new UTF16Decoder(true, options);\n  };\n\n  // 15.4 utf-16le\n  // 15.4.1 utf-16le decoder\n  /** @param {{fatal: boolean}} options */\n  encoders['UTF-16LE'] = function(options) {\n    return new UTF16Encoder(false, options);\n  };\n  // 15.4.2 utf-16le encoder\n  /** @param {{fatal: boolean}} options */\n  decoders['UTF-16LE'] = function(options) {\n    return new UTF16Decoder(false, options);\n  };\n\n  // 15.5 x-user-defined\n\n  // 15.5.1 x-user-defined decoder\n  /**\n   * @constructor\n   * @implements {Decoder}\n   * @param {{fatal: boolean}} options\n   */\n  function XUserDefinedDecoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream The stream of bytes being decoded.\n     * @param {number} bite The next byte read from the stream.\n     * @return {?(number|!Array.<number>)} The next code point(s)\n     *     decoded, or null if not enough data exists in the input\n     *     stream to decode a complete code point.\n     */\n    this.handler = function(stream, bite) {\n      // 1. If byte is end-of-stream, return finished.\n      if (bite === end_of_stream)\n        return finished;\n\n      // 2. If byte is an ASCII byte, return a code point whose value\n      // is byte.\n      if (isASCIIByte(bite))\n        return bite;\n\n      // 3. Return a code point whose value is 0xF780 + byte − 0x80.\n      return 0xF780 + bite - 0x80;\n    };\n  }\n\n  // 15.5.2 x-user-defined encoder\n  /**\n   * @constructor\n   * @implements {Encoder}\n   * @param {{fatal: boolean}} options\n   */\n  function XUserDefinedEncoder(options) {\n    var fatal = options.fatal;\n    /**\n     * @param {Stream} stream Input stream.\n     * @param {number} code_point Next code point read from the stream.\n     * @return {(number|!Array.<number>)} Byte(s) to emit.\n     */\n    this.handler = function(stream, code_point) {\n      // 1.If code point is end-of-stream, return finished.\n      if (code_point === end_of_stream)\n        return finished;\n\n      // 2. If code point is an ASCII code point, return a byte whose\n      // value is code point.\n      if (isASCIICodePoint(code_point))\n        return code_point;\n\n      // 3. If code point is in the range U+F780 to U+F7FF, inclusive,\n      // return a byte whose value is code point − 0xF780 + 0x80.\n      if (inRange(code_point, 0xF780, 0xF7FF))\n        return code_point - 0xF780 + 0x80;\n\n      // 4. Return error with code point.\n      return encoderError(code_point);\n    };\n  }\n\n  /** @param {{fatal: boolean}} options */\n  encoders['x-user-defined'] = function(options) {\n    return new XUserDefinedEncoder(options);\n  };\n  /** @param {{fatal: boolean}} options */\n  decoders['x-user-defined'] = function(options) {\n    return new XUserDefinedDecoder(options);\n  };\n\n  if (!global['TextEncoder'])\n    global['TextEncoder'] = TextEncoder;\n  if (!global['TextDecoder'])\n    global['TextDecoder'] = TextDecoder;\n\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = {\n      TextEncoder: global['TextEncoder'],\n      TextDecoder: global['TextDecoder'],\n      EncodingIndexes: global[\"encoding-indexes\"]\n    };\n  }\n\n// For strict environments where `this` inside the global scope\n// is `undefined`, take a pure object instead\n}(this || {}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/text-encoding/lib/encoding.js\n// module id = 84\n// module chunks = 0","(function(global) {\n  'use strict';\n\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = global;\n  }\n\n  global[\"encoding-indexes\"] =\n{\n  \"big5\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,170000,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14000,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132000,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22000,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21000,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,30000,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23000,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32000,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36000,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26000,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37000,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39000,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38000,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28000,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35000,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27000,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34000,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25000,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24000,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,40000,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],\n  \"euc-kr\":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46000,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48000,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49000,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,50000,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51000,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45000,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47000,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52000,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55000,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53000,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54000,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32000,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37000,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36000,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26000,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21000,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39000,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,30000,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64000,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27000,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\n  \"gb18030\":[19970,19972,19973,19974,19983,19986,19991,19999,20000,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22000,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24000,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29000,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59000,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31000,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25000,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32000,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,30000,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35000,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36000,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21000,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34000,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28000,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37000,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23000,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38000,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27000,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33000,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26000,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39000,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,40000,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58000,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],\n  \"gb18030-ranges\":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189000,65536]],\n  \"jis0208\":[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21000,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39000,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32000,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,30000,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26000,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36000,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27000,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34000,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38000,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\n  \"jis0212\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25000,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37000,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\n  \"ibm866\":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],\n  \"iso-8859-2\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],\n  \"iso-8859-3\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],\n  \"iso-8859-4\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],\n  \"iso-8859-5\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],\n  \"iso-8859-6\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],\n  \"iso-8859-7\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],\n  \"iso-8859-8\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],\n  \"iso-8859-10\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],\n  \"iso-8859-13\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],\n  \"iso-8859-14\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],\n  \"iso-8859-15\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],\n  \"iso-8859-16\":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],\n  \"koi8-r\":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],\n  \"koi8-u\":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],\n  \"macintosh\":[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],\n  \"windows-874\":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],\n  \"windows-1250\":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],\n  \"windows-1251\":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],\n  \"windows-1252\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],\n  \"windows-1253\":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],\n  \"windows-1254\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],\n  \"windows-1255\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],\n  \"windows-1256\":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],\n  \"windows-1257\":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],\n  \"windows-1258\":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],\n  \"x-mac-cyrillic\":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]\n};\n\n// For strict environments where `this` inside the global scope\n// is `undefined`, take a pure object instead\n}(this || {}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/text-encoding/lib/encoding-indexes.js\n// module id = 85\n// module chunks = 0","import THREE from 'three';\r\nimport PickingShader from './PickingShader';\r\n\r\n// FROM: https://github.com/brianxu/GPUPicker/blob/master/GPUPicker.js\r\n\r\nvar PickingMaterial = function() {\r\n  THREE.ShaderMaterial.call(this, {\r\n    uniforms: {\r\n      size: {\r\n        type: 'f',\r\n        value: 0.01,\r\n      },\r\n      scale: {\r\n        type: 'f',\r\n        value: 400,\r\n      }\r\n    },\r\n    // attributes: ['position', 'id'],\r\n    vertexShader: PickingShader.vertexShader,\r\n    fragmentShader: PickingShader.fragmentShader\r\n  });\r\n\r\n  this.linePadding = 2;\r\n};\r\n\r\nPickingMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\r\n\r\nPickingMaterial.prototype.constructor = PickingMaterial;\r\n\r\nPickingMaterial.prototype.setPointSize = function(size) {\r\n  this.uniforms.size.value = size;\r\n};\r\n\r\nPickingMaterial.prototype.setPointScale = function(scale) {\r\n  this.uniforms.scale.value = scale;\r\n};\r\n\r\nexport default PickingMaterial;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/PickingMaterial.js","// FROM: https://github.com/brianxu/GPUPicker/blob/master/GPUPicker.js\r\n\r\nvar PickingShader = {\r\n  vertexShader: [\r\n\t\t'attribute float pickingId;',\r\n\t\t// '',\r\n\t\t// 'uniform float size;',\r\n\t\t// 'uniform float scale;',\r\n\t\t'',\r\n\t\t'varying vec4 worldId;',\r\n\t\t'',\r\n\t\t'void main() {',\r\n\t\t'  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\r\n\t\t// '  gl_PointSize = size * ( scale / length( mvPosition.xyz ) );',\r\n\t\t'  vec3 a = fract(vec3(1.0/255.0, 1.0/(255.0*255.0), 1.0/(255.0*255.0*255.0)) * pickingId);',\r\n\t\t'  a -= a.xxy * vec3(0.0, 1.0/255.0, 1.0/255.0);',\r\n\t\t'  worldId = vec4(a,1);',\r\n\t\t'  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\t\t'}'\r\n\t].join('\\n'),\r\n\r\n  fragmentShader: [\r\n\t\t'#ifdef GL_ES\\n',\r\n\t\t'precision highp float;\\n',\r\n\t\t'#endif\\n',\r\n\t\t'',\r\n\t\t'varying vec4 worldId;',\r\n\t\t'',\r\n\t\t'void main() {',\r\n\t\t'  gl_FragColor = worldId;',\r\n\t\t'}'\r\n\t].join('\\n')\r\n};\r\n\r\nexport default PickingShader;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/engine/PickingShader.js","// TODO: Move duplicated logic between geometry layrs into GeometryLayer\r\n\r\n// TODO: Look at ways to drop unneeded references to array buffers, etc to\r\n// reduce memory footprint\r\n\r\n// TODO: Support dynamic updating / hiding / animation of geometry\r\n//\r\n// This could be pretty hard as it's all packed away within BufferGeometry and\r\n// may even be merged by another layer (eg. GeoJSONLayer)\r\n//\r\n// How much control should this layer support? Perhaps a different or custom\r\n// layer would be better suited for animation, for example.\r\n\r\n// TODO: Allow _setBufferAttributes to use a custom function passed in to\r\n// generate a custom mesh\r\n\r\nimport Layer from '../Layer';\r\nimport extend from 'lodash.assign';\r\nimport THREE from 'three';\r\nimport Geo from '../../geo/Geo';\r\nimport {latLon as LatLon} from '../../geo/LatLon';\r\nimport {point as Point} from '../../geo/Point';\r\nimport earcut from 'earcut';\r\nimport extrudePolygon from '../../util/extrudePolygon';\r\nimport PickingMaterial from '../../engine/PickingMaterial';\r\nimport Buffer from '../../util/Buffer';\r\n\r\nclass PolygonLayer extends Layer {\r\n  constructor(coordinates, options) {\r\n    var defaults = {\r\n      output: true,\r\n      interactive: false,\r\n      // Custom material override\r\n      //\r\n      // TODO: Should this be in the style object?\r\n      polygonMaterial: null,\r\n      onPolygonMesh: null,\r\n      onBufferAttributes: null,\r\n      // This default style is separate to Util.GeoJSON.defaultStyle\r\n      style: {\r\n        color: '#ffffff',\r\n        transparent: false,\r\n        opacity: 1,\r\n        blending: THREE.NormalBlending,\r\n        height: 0\r\n      }\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    super(_options);\r\n\r\n    // Return coordinates as array of polygons so it's easy to support\r\n    // MultiPolygon features (a single polygon would be a MultiPolygon with a\r\n    // single polygon in the array)\r\n    this._coordinates = (PolygonLayer.isSingle(coordinates)) ? [coordinates] : coordinates;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    return new Promise((resolve, reject) => {\r\n      this._setCoordinates();\r\n\r\n      if (this._options.interactive) {\r\n        // Only add to picking mesh if this layer is controlling output\r\n        //\r\n        // Otherwise, assume another component will eventually add a mesh to\r\n        // the picking scene\r\n        if (this.isOutput()) {\r\n          this._pickingMesh = new THREE.Object3D();\r\n          this.addToPicking(this._pickingMesh);\r\n        }\r\n\r\n        this._setPickingId();\r\n        this._addPickingEvents();\r\n      }\r\n\r\n      PolygonLayer.SetBufferAttributes(this._projectedCoordinates, this._options).then((result) => {\r\n        this._bufferAttributes = Buffer.mergeAttributes(result.attributes);\r\n\r\n        if (result.outlineAttributes.length > 0) {\r\n          this._outlineBufferAttributes = Buffer.mergeAttributes(result.outlineAttributes);\r\n        }\r\n\r\n        this._flat = result.flat;\r\n\r\n        if (this.isOutput()) {\r\n          var attributeLengths = {\r\n            positions: 3,\r\n            normals: 3,\r\n            colors: 3,\r\n            tops: 1\r\n          };\r\n\r\n          if (this._options.interactive) {\r\n            attributeLengths.pickingIds = 1;\r\n          }\r\n\r\n          var style = this._options.style;\r\n\r\n          // Set mesh if not merging elsewhere\r\n          PolygonLayer.SetMesh(this._bufferAttributes, attributeLengths, this._flat, style, this._options, this._world._environment._skybox).then((result) => {\r\n            // Output mesh\r\n            this.add(result.mesh);\r\n\r\n            if (result.pickingMesh) {\r\n              this._pickingMesh.add(result.pickingMesh);\r\n            }\r\n          });\r\n        }\r\n\r\n        result.attributes = null;\r\n        result.outlineAttributes = null;\r\n        result = null;\r\n\r\n        resolve(this);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // Return center of polygon as a LatLon\r\n  //\r\n  // This is used for things like placing popups / UI elements on the layer\r\n  //\r\n  // TODO: Find proper center position instead of returning first coordinate\r\n  // SEE: https://github.com/Leaflet/Leaflet/blob/master/src/layer/vector/Polygon.js#L15\r\n  getCenter() {\r\n    return this._center;\r\n  }\r\n\r\n  // Return polygon bounds in geographic coordinates\r\n  //\r\n  // TODO: Implement getBounds()\r\n  getBounds() {}\r\n\r\n  // Get unique ID for picking interaction\r\n  _setPickingId() {\r\n    this._pickingId = this.getPickingId();\r\n  }\r\n\r\n  // Set up and re-emit interaction events\r\n  _addPickingEvents() {\r\n    // TODO: Find a way to properly remove this listener on destroy\r\n    this._world.on('pick-' + this._pickingId, (point2d, point3d, intersects) => {\r\n      // Re-emit click event from the layer\r\n      this.emit('click', this, point2d, point3d, intersects);\r\n    });\r\n  }\r\n\r\n  // Create and store reference to THREE.BufferAttribute data for this layer\r\n  static SetBufferAttributes(coordinates, options) {\r\n    return new Promise((resolve) => {\r\n      var height = 0;\r\n\r\n      // Convert height into world units\r\n      if (options.style.height && options.style.height !== 0) {\r\n        height = Geo.metresToWorld(options.style.height, options.pointScale);\r\n      }\r\n\r\n      var colour = new THREE.Color();\r\n      colour.set(options.style.color);\r\n\r\n      // Light and dark colours used for poor-mans AO gradient on object sides\r\n      var light = new THREE.Color(0xffffff);\r\n      var shadow  = new THREE.Color(0x666666);\r\n\r\n      var flat = true;\r\n\r\n      var outlineAttributes = [];\r\n\r\n      // For each polygon\r\n      var attributes = coordinates.map(_coordinates => {\r\n        // Convert coordinates to earcut format\r\n        var _earcut = PolygonLayer.ToEarcut(_coordinates);\r\n\r\n        // Triangulate faces using earcut\r\n        var faces = PolygonLayer.Triangulate(_earcut.vertices, _earcut.holes, _earcut.dimensions);\r\n\r\n        var groupedVertices = [];\r\n        for (i = 0, il = _earcut.vertices.length; i < il; i += _earcut.dimensions) {\r\n          groupedVertices.push(_earcut.vertices.slice(i, i + _earcut.dimensions));\r\n        }\r\n\r\n        var extruded = extrudePolygon(groupedVertices, faces, {\r\n          bottom: 0,\r\n          top: height\r\n        });\r\n\r\n        var topColor = colour.clone().multiply(light);\r\n        var bottomColor = colour.clone().multiply(shadow);\r\n\r\n        var _vertices = extruded.positions;\r\n        var _faces = [];\r\n        var _colours = [];\r\n        var _tops = [];\r\n\r\n        var _colour;\r\n        extruded.top.forEach((face, fi) => {\r\n          _colour = [];\r\n\r\n          _colour.push([colour.r, colour.g, colour.b]);\r\n          _colour.push([colour.r, colour.g, colour.b]);\r\n          _colour.push([colour.r, colour.g, colour.b]);\r\n\r\n          _tops.push([true, true, true]);\r\n\r\n          _faces.push(face);\r\n          _colours.push(_colour);\r\n        });\r\n\r\n        if (extruded.sides) {\r\n          flat = false;\r\n\r\n          // Set up colours for every vertex with poor-mans AO on the sides\r\n          extruded.sides.forEach((face, fi) => {\r\n            _colour = [];\r\n\r\n            // First face is always bottom-bottom-top\r\n            if (fi % 2 === 0) {\r\n              _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\r\n              _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\r\n              _colour.push([topColor.r, topColor.g, topColor.b]);\r\n\r\n              _tops.push([false, false, true]);\r\n            // Reverse winding for the second face\r\n            // top-top-bottom\r\n            } else {\r\n              _colour.push([topColor.r, topColor.g, topColor.b]);\r\n              _colour.push([topColor.r, topColor.g, topColor.b]);\r\n              _colour.push([bottomColor.r, bottomColor.g, bottomColor.b]);\r\n\r\n              _tops.push([true, true, false]);\r\n            }\r\n\r\n            _faces.push(face);\r\n            _colours.push(_colour);\r\n          });\r\n        }\r\n\r\n        // Skip bottom as there's no point rendering it\r\n        // allFaces.push(extruded.faces);\r\n\r\n        var polygon = {\r\n          vertices: _vertices,\r\n          faces: _faces,\r\n          colours: _colours,\r\n          tops: _tops,\r\n          facesCount: _faces.length\r\n        };\r\n\r\n        if (options.style.outline) {\r\n          var outlineColour = new THREE.Color();\r\n          outlineColour.set(options.style.outlineColor || 0x000000);\r\n\r\n          outlineAttributes.push(PolygonLayer.Set2DOutline(_coordinates, outlineColour));\r\n        }\r\n\r\n        if (options.interactive && options.pickingId) {\r\n          // Inject picking ID\r\n          polygon.pickingId = options.pickingId;\r\n        }\r\n\r\n        // Convert polygon representation to proper attribute arrays\r\n        return PolygonLayer.ToAttributes(polygon);\r\n      });\r\n\r\n      resolve({\r\n        attributes: attributes,\r\n        outlineAttributes: outlineAttributes,\r\n        flat: flat\r\n      });\r\n    });\r\n  }\r\n\r\n  getBufferAttributes() {\r\n    return this._bufferAttributes;\r\n  }\r\n\r\n  getOutlineBufferAttributes() {\r\n    return this._outlineBufferAttributes;\r\n  }\r\n\r\n  // Used by external components to clear some memory when the attributes\r\n  // are no longer required to be stored in this layer\r\n  //\r\n  // For example, you would want to clear the attributes here after merging them\r\n  // using something like the GeoJSONLayer\r\n  clearBufferAttributes() {\r\n    this._bufferAttributes = null;\r\n    this._outlineBufferAttributes = null;\r\n  }\r\n\r\n  // Threshold angle is currently in rads\r\n  static Set2DOutline(coordinates, colour) {\r\n    var _vertices = [];\r\n\r\n    coordinates.forEach((ring) => {\r\n      var _ring = ring.map((coordinate) => {\r\n        return [coordinate.x, 0, coordinate.y];\r\n      });\r\n\r\n      // Add in duplicate vertices for line segments to work\r\n      var verticeCount = _ring.length;\r\n      var first = true;\r\n      while (--verticeCount) {\r\n        if (first || verticeCount === 0) {\r\n          first = false;\r\n          continue;\r\n        }\r\n\r\n        _ring.splice(verticeCount + 1, 0, _ring[verticeCount]);\r\n      }\r\n\r\n      _vertices = _vertices.concat(_ring);\r\n    });\r\n\r\n    _colour = [colour.r, colour.g, colour.b];\r\n\r\n    var vertices = new Float32Array(_vertices.length * 3);\r\n    var colours = new Float32Array(_vertices.length * 3);\r\n\r\n    var lastIndex = 0;\r\n\r\n    for (var i = 0; i < _vertices.length; i++) {\r\n      var ax = _vertices[i][0];\r\n      var ay = _vertices[i][1];\r\n      var az = _vertices[i][2];\r\n\r\n      var c1 = _colour;\r\n\r\n      vertices[lastIndex * 3 + 0] = ax;\r\n      vertices[lastIndex * 3 + 1] = ay;\r\n      vertices[lastIndex * 3 + 2] = az;\r\n\r\n      colours[lastIndex * 3 + 0] = c1[0];\r\n      colours[lastIndex * 3 + 1] = c1[1];\r\n      colours[lastIndex * 3 + 2] = c1[2];\r\n\r\n      lastIndex++;\r\n    }\r\n\r\n    var attributes = {\r\n      positions: vertices,\r\n      colors: colours\r\n    };\r\n\r\n    return attributes;\r\n  }\r\n\r\n  // Used by external components to clear some memory when the coordinates\r\n  // are no longer required to be stored in this layer\r\n  //\r\n  // For example, you would want to clear the coordinates here after this\r\n  // layer is merged in something like the GeoJSONLayer\r\n  clearCoordinates() {\r\n    this._coordinates = null;\r\n    this._projectedCoordinates = null;\r\n  }\r\n\r\n  static SetMesh(attributes, attributeLengths, flat, style, options, skybox) {\r\n    var geometry = new THREE.BufferGeometry();\r\n\r\n    for (var key in attributes) {\r\n      geometry.addAttribute(key.slice(0, -1), new THREE.BufferAttribute(attributes[key], attributeLengths[key]));\r\n    }\r\n\r\n    geometry.computeBoundingBox();\r\n\r\n    var material;\r\n    if (options.polygonMaterial && options.polygonMaterial instanceof THREE.Material) {\r\n      material = options.polygonMaterial;\r\n    } else if (!skybox) {\r\n      material = new THREE.MeshPhongMaterial({\r\n        vertexColors: THREE.VertexColors,\r\n        side: THREE.BackSide,\r\n        transparent: style.transparent,\r\n        opacity: style.opacity,\r\n        blending: style.blending\r\n      });\r\n    } else {\r\n      material = new THREE.MeshStandardMaterial({\r\n        vertexColors: THREE.VertexColors,\r\n        side: THREE.BackSide,\r\n        transparent: style.transparent,\r\n        opacity: style.opacity,\r\n        blending: style.blending\r\n      });\r\n      material.roughness = 1;\r\n      material.metalness = 0.1;\r\n      material.envMapIntensity = 3;\r\n      material.envMap = skybox.getRenderTarget();\r\n    }\r\n\r\n    var mesh;\r\n\r\n    // Pass mesh through callback, if defined\r\n    if (typeof options.onPolygonMesh === 'function') {\r\n      mesh = options.onPolygonMesh(geometry, material);\r\n    } else {\r\n      mesh = new THREE.Mesh(geometry, material);\r\n\r\n      mesh.castShadow = true;\r\n      mesh.receiveShadow = true;\r\n    }\r\n\r\n    if (flat || style.renderOrder !== undefined) {\r\n      if (!style.ignoreDepth) {\r\n        material.depthWrite = false;\r\n      }\r\n\r\n      var renderOrder = (style.renderOrder !== undefined) ? style.renderOrder : 3;\r\n      mesh.renderOrder = renderOrder;\r\n    }\r\n\r\n    if (options.interactive) {\r\n      material = new PickingMaterial();\r\n      material.side = THREE.BackSide;\r\n\r\n      var pickingMesh = new THREE.Mesh(geometry, material);\r\n    }\r\n\r\n    return Promise.resolve({\r\n      mesh: mesh,\r\n      pickingMesh: pickingMesh\r\n    });\r\n  }\r\n\r\n  // Convert and project coordinates\r\n  //\r\n  // TODO: Calculate bounds\r\n  _setCoordinates() {\r\n    this._bounds = [];\r\n    this._coordinates = this._convertCoordinates(this._coordinates);\r\n\r\n    this._projectedBounds = [];\r\n    this._projectedCoordinates = this._projectCoordinates();\r\n\r\n    this._center = this._coordinates[0][0][0];\r\n  }\r\n\r\n  // Recursively convert input coordinates into LatLon objects\r\n  //\r\n  // Calculate geographic bounds at the same time\r\n  //\r\n  // TODO: Calculate geographic bounds\r\n  _convertCoordinates(coordinates) {\r\n    return coordinates.map(_coordinates => {\r\n      return _coordinates.map(ring => {\r\n        return ring.map(coordinate => {\r\n          return LatLon(coordinate[1], coordinate[0]);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  // Recursively project coordinates into world positions\r\n  //\r\n  // Calculate world bounds, offset and pointScale at the same time\r\n  //\r\n  // TODO: Calculate world bounds\r\n  _projectCoordinates() {\r\n    var point;\r\n    return this._coordinates.map(_coordinates => {\r\n      return _coordinates.map(ring => {\r\n        return ring.map(latlon => {\r\n          point = this._world.latLonToPoint(latlon);\r\n\r\n          // TODO: Is offset ever being used or needed?\r\n          if (!this._offset) {\r\n            this._offset = Point(0, 0);\r\n            this._offset.x = -1 * point.x;\r\n            this._offset.y = -1 * point.y;\r\n\r\n            this._options.pointScale = this._world.pointScale(latlon);\r\n          }\r\n\r\n          return point;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  // Convert coordinates array to something earcut can understand\r\n  static ToEarcut(coordinates) {\r\n    var dim = 2;\r\n    var result = {vertices: [], holes: [], dimensions: dim};\r\n    var holeIndex = 0;\r\n\r\n    for (var i = 0; i < coordinates.length; i++) {\r\n      for (var j = 0; j < coordinates[i].length; j++) {\r\n        // for (var d = 0; d < dim; d++) {\r\n        result.vertices.push(coordinates[i][j].x);\r\n        result.vertices.push(coordinates[i][j].y);\r\n        // }\r\n      }\r\n      if (i > 0) {\r\n        holeIndex += coordinates[i - 1].length;\r\n        result.holes.push(holeIndex);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // Triangulate earcut-based input using earcut\r\n  static Triangulate(contour, holes, dim) {\r\n    // console.time('earcut');\r\n\r\n    var faces = earcut(contour, holes, dim);\r\n    var result = [];\r\n\r\n    for (i = 0, il = faces.length; i < il; i += 3) {\r\n      result.push(faces.slice(i, i + 3));\r\n    }\r\n\r\n    // console.timeEnd('earcut');\r\n\r\n    return result;\r\n  }\r\n\r\n  // Transform polygon representation into attribute arrays that can be used by\r\n  // THREE.BufferGeometry\r\n  //\r\n  // TODO: Can this be simplified? It's messy and huge\r\n  static ToAttributes(polygon) {\r\n    // Three components per vertex per face (3 x 3 = 9)\r\n    var positions = new Float32Array(polygon.facesCount * 9);\r\n    var normals = new Float32Array(polygon.facesCount * 9);\r\n    var colours = new Float32Array(polygon.facesCount * 9);\r\n\r\n    // One component per vertex per face (1 x 3 = 3)\r\n    var tops = new Float32Array(polygon.facesCount * 3);\r\n\r\n    var pickingIds;\r\n    if (polygon.pickingId) {\r\n      // One component per vertex per face (1 x 3 = 3)\r\n      pickingIds = new Float32Array(polygon.facesCount * 3);\r\n    }\r\n\r\n    var pA = new THREE.Vector3();\r\n    var pB = new THREE.Vector3();\r\n    var pC = new THREE.Vector3();\r\n\r\n    var cb = new THREE.Vector3();\r\n    var ab = new THREE.Vector3();\r\n\r\n    var index;\r\n\r\n    var _faces = polygon.faces;\r\n    var _vertices = polygon.vertices;\r\n    var _colour = polygon.colours;\r\n    var _tops = polygon.tops;\r\n\r\n    var _pickingId;\r\n    if (pickingIds) {\r\n      _pickingId = polygon.pickingId;\r\n    }\r\n\r\n    var lastIndex = 0;\r\n\r\n    for (var i = 0; i < _faces.length; i++) {\r\n      // Array of vertex indexes for the face\r\n      index = _faces[i][0];\r\n\r\n      var ax = _vertices[index][0];\r\n      var ay = _vertices[index][1];\r\n      var az = _vertices[index][2];\r\n\r\n      var c1 = _colour[i][0];\r\n      var t1 = _tops[i][0];\r\n\r\n      index = _faces[i][1];\r\n\r\n      var bx = _vertices[index][0];\r\n      var by = _vertices[index][1];\r\n      var bz = _vertices[index][2];\r\n\r\n      var c2 = _colour[i][1];\r\n      var t2 = _tops[i][1];\r\n\r\n      index = _faces[i][2];\r\n\r\n      var cx = _vertices[index][0];\r\n      var cy = _vertices[index][1];\r\n      var cz = _vertices[index][2];\r\n\r\n      var c3 = _colour[i][2];\r\n      var t3 = _tops[i][2];\r\n\r\n      // Flat face normals\r\n      // From: http://threejs.org/examples/webgl_buffergeometry.html\r\n      pA.set(ax, ay, az);\r\n      pB.set(bx, by, bz);\r\n      pC.set(cx, cy, cz);\r\n\r\n      cb.subVectors(pC, pB);\r\n      ab.subVectors(pA, pB);\r\n      cb.cross(ab);\r\n\r\n      cb.normalize();\r\n\r\n      var nx = cb.x;\r\n      var ny = cb.y;\r\n      var nz = cb.z;\r\n\r\n      positions[lastIndex * 9 + 0] = ax;\r\n      positions[lastIndex * 9 + 1] = ay;\r\n      positions[lastIndex * 9 + 2] = az;\r\n\r\n      normals[lastIndex * 9 + 0] = nx;\r\n      normals[lastIndex * 9 + 1] = ny;\r\n      normals[lastIndex * 9 + 2] = nz;\r\n\r\n      colours[lastIndex * 9 + 0] = c1[0];\r\n      colours[lastIndex * 9 + 1] = c1[1];\r\n      colours[lastIndex * 9 + 2] = c1[2];\r\n\r\n      positions[lastIndex * 9 + 3] = bx;\r\n      positions[lastIndex * 9 + 4] = by;\r\n      positions[lastIndex * 9 + 5] = bz;\r\n\r\n      normals[lastIndex * 9 + 3] = nx;\r\n      normals[lastIndex * 9 + 4] = ny;\r\n      normals[lastIndex * 9 + 5] = nz;\r\n\r\n      colours[lastIndex * 9 + 3] = c2[0];\r\n      colours[lastIndex * 9 + 4] = c2[1];\r\n      colours[lastIndex * 9 + 5] = c2[2];\r\n\r\n      positions[lastIndex * 9 + 6] = cx;\r\n      positions[lastIndex * 9 + 7] = cy;\r\n      positions[lastIndex * 9 + 8] = cz;\r\n\r\n      normals[lastIndex * 9 + 6] = nx;\r\n      normals[lastIndex * 9 + 7] = ny;\r\n      normals[lastIndex * 9 + 8] = nz;\r\n\r\n      colours[lastIndex * 9 + 6] = c3[0];\r\n      colours[lastIndex * 9 + 7] = c3[1];\r\n      colours[lastIndex * 9 + 8] = c3[2];\r\n\r\n      tops[lastIndex * 3 + 0] = t1;\r\n      tops[lastIndex * 3 + 1] = t2;\r\n      tops[lastIndex * 3 + 2] = t3;\r\n\r\n      if (pickingIds) {\r\n        pickingIds[lastIndex * 3 + 0] = _pickingId;\r\n        pickingIds[lastIndex * 3 + 1] = _pickingId;\r\n        pickingIds[lastIndex * 3 + 2] = _pickingId;\r\n      }\r\n\r\n      lastIndex++;\r\n    }\r\n\r\n    var attributes = {\r\n      positions: positions,\r\n      normals: normals,\r\n      colors: colours,\r\n      tops: tops\r\n    };\r\n\r\n    if (pickingIds) {\r\n      attributes.pickingIds = pickingIds;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n\r\n  // Returns true if the polygon is flat (has no height)\r\n  isFlat() {\r\n    return this._flat;\r\n  }\r\n\r\n  // Returns true if coordinates refer to a single geometry\r\n  //\r\n  // For example, not coordinates for a MultiPolygon GeoJSON feature\r\n  static isSingle(coordinates) {\r\n    return !Array.isArray(coordinates[0][0][0]);\r\n  }\r\n\r\n  // TODO: Make sure this is cleaning everything\r\n  destroy() {\r\n    if (this._pickingMesh) {\r\n      // TODO: Properly dispose of picking mesh\r\n      this._pickingMesh = null;\r\n    }\r\n\r\n    this.clearCoordinates();\r\n    this.clearBufferAttributes();\r\n\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default PolygonLayer;\r\n\r\nvar noNew = function(coordinates, options) {\r\n  return new PolygonLayer(coordinates, options);\r\n};\r\n\r\nexport {noNew as polygonLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/geometry/PolygonLayer.js","// TODO: Move duplicated logic between geometry layrs into GeometryLayer\r\n\r\n// TODO: Look at ways to drop unneeded references to array buffers, etc to\r\n// reduce memory footprint\r\n\r\n// TODO: Provide alternative output using tubes and splines / curves\r\n\r\n// TODO: Support dynamic updating / hiding / animation of geometry\r\n//\r\n// This could be pretty hard as it's all packed away within BufferGeometry and\r\n// may even be merged by another layer (eg. GeoJSONLayer)\r\n//\r\n// How much control should this layer support? Perhaps a different or custom\r\n// layer would be better suited for animation, for example.\r\n\r\n// TODO: Allow _setBufferAttributes to use a custom function passed in to\r\n// generate a custom mesh\r\n\r\nimport Layer from '../Layer';\r\nimport extend from 'lodash.assign';\r\nimport THREE from 'three';\r\nimport Geo from '../../geo/Geo';\r\nimport {latLon as LatLon} from '../../geo/LatLon';\r\nimport {point as Point} from '../../geo/Point';\r\nimport PickingMaterial from '../../engine/PickingMaterial';\r\nimport Buffer from '../../util/Buffer';\r\n\r\nclass PolylineLayer extends Layer {\r\n  constructor(coordinates, options) {\r\n    var defaults = {\r\n      output: true,\r\n      interactive: false,\r\n      // Custom material override\r\n      //\r\n      // TODO: Should this be in the style object?\r\n      polylineMaterial: null,\r\n      onPolylineMesh: null,\r\n      onBufferAttributes: null,\r\n      // This default style is separate to Util.GeoJSON.defaultStyle\r\n      style: {\r\n        lineOpacity: 1,\r\n        lineTransparent: false,\r\n        lineColor: '#ffffff',\r\n        lineWidth: 1,\r\n        lineBlending: THREE.NormalBlending\r\n      }\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    super(_options);\r\n\r\n    // Return coordinates as array of lines so it's easy to support\r\n    // MultiLineString features (a single line would be a MultiLineString with a\r\n    // single line in the array)\r\n    this._coordinates = (PolylineLayer.isSingle(coordinates)) ? [coordinates] : coordinates;\r\n\r\n    // Polyline features are always flat (for now at least)\r\n    this._flat = true;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    return new Promise((resolve, reject) => {\r\n      this._setCoordinates();\r\n\r\n      if (this._options.interactive) {\r\n        // Only add to picking mesh if this layer is controlling output\r\n        //\r\n        // Otherwise, assume another component will eventually add a mesh to\r\n        // the picking scene\r\n        if (this.isOutput()) {\r\n          this._pickingMesh = new THREE.Object3D();\r\n          this.addToPicking(this._pickingMesh);\r\n        }\r\n\r\n        this._setPickingId();\r\n        this._addPickingEvents();\r\n      }\r\n\r\n      // Store geometry representation as instances of THREE.BufferAttribute\r\n      PolylineLayer.SetBufferAttributes(this._projectedCoordinates, this._options).then((result) => {\r\n        this._bufferAttributes = Buffer.mergeAttributes(result.attributes);\r\n        this._flat = result.flat;\r\n\r\n        var attributeLengths = {\r\n          positions: 3,\r\n          colors: 3\r\n        };\r\n\r\n        if (this._options.interactive) {\r\n          attributeLengths.pickingIds = 1;\r\n        }\r\n\r\n        if (this.isOutput()) {\r\n          var style = this._options.style;\r\n\r\n          // Set mesh if not merging elsewhere\r\n          PolylineLayer.SetMesh(this._bufferAttributes, attributeLengths, this._flat, style, this._options).then((result) => {\r\n            // Output mesh\r\n            this.add(result.mesh);\r\n\r\n            if (result.pickingMesh) {\r\n              this._pickingMesh.add(result.pickingMesh);\r\n            }\r\n          });\r\n        }\r\n\r\n        result.attributes = null;\r\n        result = null;\r\n\r\n        resolve(this);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Return center of polyline as a LatLon\r\n  //\r\n  // This is used for things like placing popups / UI elements on the layer\r\n  //\r\n  // TODO: Find proper center position instead of returning first coordinate\r\n  // SEE: https://github.com/Leaflet/Leaflet/blob/master/src/layer/vector/Polyline.js#L59\r\n  getCenter() {\r\n    return this._center;\r\n  }\r\n\r\n  // Return line bounds in geographic coordinates\r\n  //\r\n  // TODO: Implement getBounds()\r\n  getBounds() {}\r\n\r\n  // Get unique ID for picking interaction\r\n  _setPickingId() {\r\n    this._pickingId = this.getPickingId();\r\n  }\r\n\r\n  // Set up and re-emit interaction events\r\n  _addPickingEvents() {\r\n    // TODO: Find a way to properly remove this listener on destroy\r\n    this._world.on('pick-' + this._pickingId, (point2d, point3d, intersects) => {\r\n      // Re-emit click event from the layer\r\n      this.emit('click', this, point2d, point3d, intersects);\r\n    });\r\n  }\r\n\r\n  static SetBufferAttributes(coordinates, options) {\r\n    return new Promise((resolve) => {\r\n      var height = 0;\r\n\r\n      // Convert height into world units\r\n      if (options.style.lineHeight) {\r\n        height = Geo.metresToWorld(options.style.lineHeight, options.pointScale);\r\n      }\r\n\r\n      var colour = new THREE.Color();\r\n      colour.set(options.style.lineColor);\r\n\r\n      var flat = true;\r\n\r\n      // For each line\r\n      var attributes = coordinates.map(_projectedCoordinates => {\r\n        var _vertices = [];\r\n        var _colours = [];\r\n\r\n        // Connect coordinate with the next to make a pair\r\n        //\r\n        // LineSegments requires pairs of vertices so repeat the last point if\r\n        // there's an odd number of vertices\r\n        var nextCoord;\r\n        _projectedCoordinates.forEach((coordinate, index) => {\r\n          _colours.push([colour.r, colour.g, colour.b]);\r\n          _vertices.push([coordinate.x, height, coordinate.y]);\r\n\r\n          nextCoord = (_projectedCoordinates[index + 1]) ? _projectedCoordinates[index + 1] : coordinate;\r\n\r\n          _colours.push([colour.r, colour.g, colour.b]);\r\n          _vertices.push([nextCoord.x, height, nextCoord.y]);\r\n        });\r\n\r\n        var line = {\r\n          vertices: _vertices,\r\n          colours: _colours,\r\n          verticesCount: _vertices.length\r\n        };\r\n\r\n        if (options.interactive && options.pickingId) {\r\n          // Inject picking ID\r\n          line.pickingId = options.pickingId;\r\n        }\r\n\r\n        // Convert line representation to proper attribute arrays\r\n        return PolylineLayer.ToAttributes(line);\r\n      });\r\n\r\n      resolve({\r\n        attributes: attributes,\r\n        flat: flat\r\n      });\r\n    });\r\n  }\r\n\r\n  getBufferAttributes() {\r\n    return this._bufferAttributes;\r\n  }\r\n\r\n  // Used by external components to clear some memory when the attributes\r\n  // are no longer required to be stored in this layer\r\n  //\r\n  // For example, you would want to clear the attributes here after merging them\r\n  // using something like the GeoJSONLayer\r\n  clearBufferAttributes() {\r\n    this._bufferAttributes = null;\r\n  }\r\n\r\n  // Used by external components to clear some memory when the coordinates\r\n  // are no longer required to be stored in this layer\r\n  //\r\n  // For example, you would want to clear the coordinates here after this\r\n  // layer is merged in something like the GeoJSONLayer\r\n  clearCoordinates() {\r\n    this._coordinates = null;\r\n    this._projectedCoordinates = null;\r\n  }\r\n\r\n  static SetMesh(attributes, attributeLengths, flat, style, options) {\r\n    var geometry = new THREE.BufferGeometry();\r\n\r\n    for (var key in attributes) {\r\n      geometry.addAttribute(key.slice(0, -1), new THREE.BufferAttribute(attributes[key], attributeLengths[key]));\r\n    }\r\n\r\n    geometry.computeBoundingBox();\r\n\r\n    var material;\r\n    if (options.polylineMaterial && options.polylineMaterial instanceof THREE.Material) {\r\n      material = options.polylineMaterial;\r\n    } else {\r\n      material = new THREE.LineBasicMaterial({\r\n        vertexColors: THREE.VertexColors,\r\n        linewidth: style.lineWidth,\r\n        transparent: style.lineTransparent,\r\n        opacity: style.lineOpacity,\r\n        blending: style.lineBlending\r\n      });\r\n    }\r\n\r\n    var mesh;\r\n\r\n    // Pass mesh through callback, if defined\r\n    if (typeof options.onPolylineMesh === 'function') {\r\n      mesh = options.onPolylineMesh(geometry, material);\r\n    } else {\r\n      mesh = new THREE.LineSegments(geometry, material);\r\n\r\n      if (style.lineRenderOrder !== undefined) {\r\n        material.depthWrite = false;\r\n        mesh.renderOrder = style.lineRenderOrder;\r\n      }\r\n\r\n      mesh.castShadow = true;\r\n      // mesh.receiveShadow = true;\r\n    }\r\n\r\n    if (options.interactive) {\r\n      material = new PickingMaterial();\r\n      // material.side = THREE.BackSide;\r\n\r\n      // Make the line wider / easier to pick\r\n      material.linewidth = style.lineWidth + material.linePadding;\r\n\r\n      var pickingMesh = new THREE.LineSegments(geometry, material);\r\n    }\r\n\r\n    return Promise.resolve({\r\n      mesh: mesh,\r\n      pickingMesh: pickingMesh\r\n    });\r\n  }\r\n\r\n  // Convert and project coordinates\r\n  //\r\n  // TODO: Calculate bounds\r\n  _setCoordinates() {\r\n    this._bounds = [];\r\n    this._coordinates = this._convertCoordinates(this._coordinates);\r\n\r\n    this._projectedBounds = [];\r\n    this._projectedCoordinates = this._projectCoordinates();\r\n\r\n    this._center = this._coordinates[0][0];\r\n  }\r\n\r\n  // Recursively convert input coordinates into LatLon objects\r\n  //\r\n  // Calculate geographic bounds at the same time\r\n  //\r\n  // TODO: Calculate geographic bounds\r\n  _convertCoordinates(coordinates) {\r\n    return coordinates.map(_coordinates => {\r\n      return _coordinates.map(coordinate => {\r\n        return LatLon(coordinate[1], coordinate[0]);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Recursively project coordinates into world positions\r\n  //\r\n  // Calculate world bounds, offset and pointScale at the same time\r\n  //\r\n  // TODO: Calculate world bounds\r\n  _projectCoordinates() {\r\n    var point;\r\n    return this._coordinates.map(_coordinates => {\r\n      return _coordinates.map(latlon => {\r\n        point = this._world.latLonToPoint(latlon);\r\n\r\n        // TODO: Is offset ever being used or needed?\r\n        if (!this._offset) {\r\n          this._offset = Point(0, 0);\r\n          this._offset.x = -1 * point.x;\r\n          this._offset.y = -1 * point.y;\r\n\r\n          this._options.pointScale = this._world.pointScale(latlon);\r\n        }\r\n\r\n        return point;\r\n      });\r\n    });\r\n  }\r\n\r\n  static ToAttributes(line) {\r\n    // Three components per vertex\r\n    var vertices = new Float32Array(line.verticesCount * 3);\r\n    var colours = new Float32Array(line.verticesCount * 3);\r\n\r\n    var pickingIds;\r\n    if (line.pickingId) {\r\n      // One component per vertex\r\n      pickingIds = new Float32Array(line.verticesCount);\r\n    }\r\n\r\n    var _vertices = line.vertices;\r\n    var _colour = line.colours;\r\n\r\n    var _pickingId;\r\n    if (pickingIds) {\r\n      _pickingId = line.pickingId;\r\n    }\r\n\r\n    var lastIndex = 0;\r\n\r\n    for (var i = 0; i < _vertices.length; i++) {\r\n      var ax = _vertices[i][0];\r\n      var ay = _vertices[i][1];\r\n      var az = _vertices[i][2];\r\n\r\n      var c1 = _colour[i];\r\n\r\n      vertices[lastIndex * 3 + 0] = ax;\r\n      vertices[lastIndex * 3 + 1] = ay;\r\n      vertices[lastIndex * 3 + 2] = az;\r\n\r\n      colours[lastIndex * 3 + 0] = c1[0];\r\n      colours[lastIndex * 3 + 1] = c1[1];\r\n      colours[lastIndex * 3 + 2] = c1[2];\r\n\r\n      if (pickingIds) {\r\n        pickingIds[lastIndex] = _pickingId;\r\n      }\r\n\r\n      lastIndex++;\r\n    }\r\n\r\n    var attributes = {\r\n      positions: vertices,\r\n      colors: colours\r\n    };\r\n\r\n    if (pickingIds) {\r\n      attributes.pickingIds = pickingIds;\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n\r\n  // Returns true if the line is flat (has no height)\r\n  isFlat() {\r\n    return this._flat;\r\n  }\r\n\r\n  // Returns true if coordinates refer to a single geometry\r\n  //\r\n  // For example, not coordinates for a MultiLineString GeoJSON feature\r\n  static isSingle(coordinates) {\r\n    return !Array.isArray(coordinates[0][0]);\r\n  }\r\n\r\n  destroy() {\r\n    if (this._pickingMesh) {\r\n      // TODO: Properly dispose of picking mesh\r\n      this._pickingMesh = null;\r\n    }\r\n\r\n    this.clearCoordinates();\r\n    this.clearBufferAttributes();\r\n\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default PolylineLayer;\r\n\r\nvar noNew = function(coordinates, options) {\r\n  return new PolylineLayer(coordinates, options);\r\n};\r\n\r\nexport {noNew as polylineLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/geometry/PolylineLayer.js","// TODO: Move duplicated logic between geometry layrs into GeometryLayer\r\n\r\n// TODO: Look at ways to drop unneeded references to array buffers, etc to\r\n// reduce memory footprint\r\n\r\n// TODO: Point features may be using custom models / meshes and so an approach\r\n// needs to be found to allow these to be brokwn down into buffer attributes for\r\n// merging\r\n//\r\n// Can probably use fromGeometry() or setFromObject() from THREE.BufferGeometry\r\n// and pull out the attributes\r\n\r\n// TODO: Support sprite objects using textures\r\n\r\n// TODO: Provide option to billboard geometry so it always faces the camera\r\n\r\n// TODO: Support dynamic updating / hiding / animation of geometry\r\n//\r\n// This could be pretty hard as it's all packed away within BufferGeometry and\r\n// may even be merged by another layer (eg. GeoJSONLayer)\r\n//\r\n// How much control should this layer support? Perhaps a different or custom\r\n// layer would be better suited for animation, for example.\r\n\r\nimport Layer from '../Layer';\r\nimport extend from 'lodash.assign';\r\nimport THREE from 'three';\r\nimport Geo from '../../geo/Geo';\r\nimport {latLon as LatLon} from '../../geo/LatLon';\r\nimport {point as Point} from '../../geo/Point';\r\nimport PickingMaterial from '../../engine/PickingMaterial';\r\nimport Buffer from '../../util/Buffer';\r\nimport PolygonLayer from './PolygonLayer';\r\n\r\nclass PointLayer extends Layer {\r\n  constructor(coordinates, options) {\r\n    var defaults = {\r\n      output: true,\r\n      interactive: false,\r\n      // THREE.Geometry or THREE.BufferGeometry to use for point output\r\n      pointGeometry: null,\r\n      // Custom material override\r\n      //\r\n      // TODO: Should this be in the style object?\r\n      pointMaterial: null,\r\n      onPointMesh: null,\r\n      // This default style is separate to Util.GeoJSON.defaultStyle\r\n      style: {\r\n        pointColor: '#ff0000'\r\n      }\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    super(_options);\r\n\r\n    // Return coordinates as array of points so it's easy to support\r\n    // MultiPoint features (a single point would be a MultiPoint with a\r\n    // single point in the array)\r\n    this._coordinates = (PointLayer.isSingle(coordinates)) ? [coordinates] : coordinates;\r\n\r\n    this._flat = false;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    return new Promise((resolve, reject) => {\r\n      this._setCoordinates();\r\n\r\n      if (this._options.interactive) {\r\n        // Only add to picking mesh if this layer is controlling output\r\n        //\r\n        // Otherwise, assume another component will eventually add a mesh to\r\n        // the picking scene\r\n        if (this.isOutput()) {\r\n          this._pickingMesh = new THREE.Object3D();\r\n          this.addToPicking(this._pickingMesh);\r\n        }\r\n\r\n        this._setPickingId();\r\n        this._addPickingEvents();\r\n      }\r\n\r\n      // Store geometry representation as instances of THREE.BufferAttribute\r\n      PointLayer.SetBufferAttributes(this._projectedCoordinates, this._options).then((result) => {\r\n        this._bufferAttributes = Buffer.mergeAttributes(result.attributes);\r\n        this._flat = result.flat;\r\n\r\n        var attributeLengths = {\r\n          positions: 3,\r\n          normals: 3,\r\n          colors: 3\r\n        };\r\n\r\n        if (this._options.interactive) {\r\n          attributeLengths.pickingIds = 1;\r\n        }\r\n\r\n        if (this.isOutput()) {\r\n          var style = this._options.style;\r\n\r\n          // Set mesh if not merging elsewhere\r\n          // TODO: Dedupe with PolygonLayer as they are identical\r\n          PointLayer.SetMesh(this._bufferAttributes, attributeLengths, this._flat, style, this._options, this._world._environment._skybox).then((result) => {\r\n            // Output mesh\r\n            this.add(result.mesh);\r\n\r\n            if (result.pickingMesh) {\r\n              this._pickingMesh.add(result.pickingMesh);\r\n            }\r\n          });\r\n        }\r\n\r\n        result.attributes = null;\r\n        result = null;\r\n\r\n        resolve(this);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // Return center of point as a LatLon\r\n  //\r\n  // This is used for things like placing popups / UI elements on the layer\r\n  getCenter() {\r\n    return this._center;\r\n  }\r\n\r\n  // Return point bounds in geographic coordinates\r\n  //\r\n  // While not useful for single points, it could be useful for MultiPoint\r\n  //\r\n  // TODO: Implement getBounds()\r\n  getBounds() {}\r\n\r\n  // Get unique ID for picking interaction\r\n  _setPickingId() {\r\n    this._pickingId = this.getPickingId();\r\n  }\r\n\r\n  // Set up and re-emit interaction events\r\n  _addPickingEvents() {\r\n    // TODO: Find a way to properly remove this listener on destroy\r\n    this._world.on('pick-' + this._pickingId, (point2d, point3d, intersects) => {\r\n      // Re-emit click event from the layer\r\n      this.emit('click', this, point2d, point3d, intersects);\r\n    });\r\n  }\r\n\r\n  static SetBufferAttributes(coordinates, options) {\r\n    return new Promise((resolve) => {\r\n      var height = 0;\r\n\r\n      // Convert height into world units\r\n      if (options.style.pointHeight) {\r\n        height = Geo.metresToWorld(options.style.pointHeight, options.pointScale);\r\n      }\r\n\r\n      var colour = new THREE.Color();\r\n      colour.set(options.style.pointColor);\r\n\r\n      // Use default geometry if none has been provided or the provided geometry\r\n      // isn't valid\r\n      if (!options.pointGeometry || (!options.pointGeometry instanceof THREE.Geometry || !options.pointGeometry instanceof THREE.BufferGeometry)) {\r\n        // Debug geometry for points is a thin bar\r\n        //\r\n        // TODO: Allow point geometry to be customised / overridden\r\n        var geometryWidth = Geo.metresToWorld(25, options.pointScale);\r\n        var geometryHeight = Geo.metresToWorld(200, options.pointScale);\r\n        var _geometry = new THREE.BoxGeometry(geometryWidth, geometryHeight, geometryWidth);\r\n\r\n        // Shift geometry up so it sits on the ground\r\n        _geometry.translate(0, geometryHeight * 0.5, 0);\r\n\r\n        // Pull attributes out of debug geometry\r\n        geometry = new THREE.BufferGeometry().fromGeometry(_geometry);\r\n      } else {\r\n        if (options.geometry instanceof THREE.BufferGeometry) {\r\n          geometry = options.pointGeometry;\r\n        } else {\r\n          geometry = new THREE.BufferGeometry().fromGeometry(options.pointGeometry);\r\n        }\r\n      }\r\n\r\n      var attributes = coordinates.map((coordinate) => {\r\n        var _vertices = [];\r\n        var _normals = [];\r\n        var _colours = [];\r\n\r\n        var _geometry = geometry.clone();\r\n        _geometry.translate(coordinate.x, height, coordinate.y);\r\n\r\n        var _vertices = _geometry.attributes.position.clone().array;\r\n        var _normals = _geometry.attributes.normal.clone().array;\r\n        var _colours = _geometry.attributes.color.clone().array;\r\n\r\n        for (var i = 0; i < _colours.length; i += 3) {\r\n          _colours[i] = colour.r;\r\n          _colours[i + 1] = colour.g;\r\n          _colours[i + 2] = colour.b;\r\n        }\r\n\r\n        var _point = {\r\n          positions: _vertices,\r\n          normals: _normals,\r\n          colors: _colours\r\n        };\r\n\r\n        if (options.interactive && options.pickingId) {\r\n          // Inject picking ID\r\n          _point.pickingId = options.pickingId;\r\n        }\r\n\r\n        return _point;\r\n      });\r\n\r\n      resolve({\r\n        attributes: attributes,\r\n        flat: false\r\n      });\r\n    });\r\n  }\r\n\r\n  getBufferAttributes() {\r\n    return this._bufferAttributes;\r\n  }\r\n\r\n  // Used by external components to clear some memory when the attributes\r\n  // are no longer required to be stored in this layer\r\n  //\r\n  // For example, you would want to clear the attributes here after merging them\r\n  // using something like the GeoJSONLayer\r\n  clearBufferAttributes() {\r\n    this._bufferAttributes = null;\r\n  }\r\n\r\n  // Used by external components to clear some memory when the coordinates\r\n  // are no longer required to be stored in this layer\r\n  //\r\n  // For example, you would want to clear the coordinates here after this\r\n  // layer is merged in something like the GeoJSONLayer\r\n  clearCoordinates() {\r\n    this._coordinates = null;\r\n    this._projectedCoordinates = null;\r\n  }\r\n\r\n  static SetMesh(attributes, attributeLengths, flat, style, options, skybox) {\r\n    var geometry = new THREE.BufferGeometry();\r\n\r\n    for (var key in attributes) {\r\n      geometry.addAttribute(key.slice(0, -1), new THREE.BufferAttribute(attributes[key], attributeLengths[key]));\r\n    }\r\n\r\n    geometry.computeBoundingBox();\r\n\r\n    var material;\r\n    if (options.pointMaterial && options.pointMaterial instanceof THREE.Material) {\r\n      material = options.pointMaterial;\r\n    } else if (!skybox) {\r\n      material = new THREE.MeshPhongMaterial({\r\n        vertexColors: THREE.VertexColors,\r\n        // side: THREE.BackSide,\r\n        transparent: style.transparent,\r\n        opacity: style.opacity,\r\n        blending: style.blending\r\n      });\r\n    } else {\r\n      material = new THREE.MeshStandardMaterial({\r\n        vertexColors: THREE.VertexColors,\r\n        // side: THREE.BackSide,\r\n        transparent: style.transparent,\r\n        opacity: style.opacity,\r\n        blending: style.blending\r\n      });\r\n      material.roughness = 1;\r\n      material.metalness = 0.1;\r\n      material.envMapIntensity = 3;\r\n      material.envMap = skybox.getRenderTarget();\r\n    }\r\n\r\n    var mesh;\r\n\r\n    // Pass mesh through callback, if defined\r\n    if (typeof options.onPolygonMesh === 'function') {\r\n      mesh = options.onPolygonMesh(geometry, material);\r\n    } else {\r\n      mesh = new THREE.Mesh(geometry, material);\r\n\r\n      mesh.castShadow = true;\r\n      mesh.receiveShadow = true;\r\n    }\r\n\r\n    if (flat) {\r\n      material.depthWrite = false;\r\n      mesh.renderOrder = 4;\r\n    }\r\n\r\n    if (options.interactive) {\r\n      material = new PickingMaterial();\r\n      material.side = THREE.BackSide;\r\n\r\n      var pickingMesh = new THREE.Mesh(geometry, material);\r\n    }\r\n\r\n    return Promise.resolve({\r\n      mesh: mesh,\r\n      pickingMesh: pickingMesh\r\n    });\r\n  }\r\n\r\n  // Convert and project coordinates\r\n  //\r\n  // TODO: Calculate bounds\r\n  _setCoordinates() {\r\n    this._bounds = [];\r\n    this._coordinates = this._convertCoordinates(this._coordinates);\r\n\r\n    this._projectedBounds = [];\r\n    this._projectedCoordinates = this._projectCoordinates();\r\n\r\n    this._center = this._coordinates;\r\n  }\r\n\r\n  // Recursively convert input coordinates into LatLon objects\r\n  //\r\n  // Calculate geographic bounds at the same time\r\n  //\r\n  // TODO: Calculate geographic bounds\r\n  _convertCoordinates(coordinates) {\r\n    return coordinates.map(coordinate => {\r\n      return LatLon(coordinate[1], coordinate[0]);\r\n    });\r\n  }\r\n\r\n  // Recursively project coordinates into world positions\r\n  //\r\n  // Calculate world bounds, offset and pointScale at the same time\r\n  //\r\n  // TODO: Calculate world bounds\r\n  _projectCoordinates() {\r\n    var _point;\r\n    return this._coordinates.map(latlon => {\r\n      _point = this._world.latLonToPoint(latlon);\r\n\r\n      // TODO: Is offset ever being used or needed?\r\n      if (!this._offset) {\r\n        this._offset = Point(0, 0);\r\n        this._offset.x = -1 * _point.x;\r\n        this._offset.y = -1 * _point.y;\r\n\r\n        this._options.pointScale = this._world.pointScale(latlon);\r\n      }\r\n\r\n      return _point;\r\n    });\r\n  }\r\n\r\n  // Returns true if the line is flat (has no height)\r\n  isFlat() {\r\n    return this._flat;\r\n  }\r\n\r\n  // Returns true if coordinates refer to a single geometry\r\n  //\r\n  // For example, not coordinates for a MultiPoint GeoJSON feature\r\n  static isSingle(coordinates) {\r\n    return !Array.isArray(coordinates[0]);\r\n  }\r\n\r\n  destroy() {\r\n    if (this._pickingMesh) {\r\n      // TODO: Properly dispose of picking mesh\r\n      this._pickingMesh = null;\r\n    }\r\n\r\n    this.clearCoordinates();\r\n    this.clearBufferAttributes();\r\n\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default PointLayer;\r\n\r\nvar noNew = function(coordinates, options) {\r\n  return new PointLayer(coordinates, options);\r\n};\r\n\r\nexport {noNew as pointLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/geometry/PointLayer.js","import Layer from './Layer';\r\nimport extend from 'lodash.assign';\r\nimport reqwest from 'reqwest';\r\nimport GeoJSON from '../util/GeoJSON';\r\nimport Worker from '../util/Worker';\r\nimport Buffer from '../util/Buffer';\r\nimport Stringify from '../util/Stringify';\r\nimport PolygonLayer from './geometry/PolygonLayer';\r\nimport PolylineLayer from './geometry/PolylineLayer';\r\nimport PointLayer from './geometry/PointLayer';\r\nimport {latLon as LatLon} from '../geo/LatLon';\r\nimport {point as Point} from '../geo/Point';\r\nimport Geo from '../geo/Geo';\r\nimport PickingMaterial from '../engine/PickingMaterial';\r\n\r\n// TODO: Allow filter method to be run inside a worker to improve performance\r\n// TODO: Allow onEachFeature method to be run inside a worker to improve performance\r\n\r\nclass GeoJSONWorkerLayer extends Layer {\r\n  constructor(geojson, options) {\r\n    var defaults = {\r\n      topojson: false,\r\n      style: GeoJSON.defaultStyle,\r\n      onEachFeature: null,\r\n      onEachFeatureWorker: null,\r\n      onAddAttributes: null,\r\n      interactive: false,\r\n      pointGeometry: null,\r\n      onClick: null,\r\n      headers: {}\r\n    };\r\n\r\n    var _options = extend({}, defaults, options);\r\n\r\n    if (typeof options.style === 'object') {\r\n      _options.style = extend({}, defaults.style, options.style);\r\n    }\r\n\r\n    super(_options);\r\n\r\n    this._aborted = false;\r\n    this._geojson = geojson;\r\n  }\r\n\r\n  _onAdd(world) {\r\n    if (this._options.interactive) {\r\n      // Worker layer always controls output to add a picking mesh\r\n      this._pickingMesh = new THREE.Object3D();\r\n    }\r\n\r\n    // Process GeoJSON\r\n    return this._process(this._geojson).catch((err) => {\r\n      console.error(err);\r\n    });\r\n  }\r\n\r\n  // Use workers to request and process GeoJSON, returning data structure\r\n  // containing geometry and any supplementary data for output\r\n  _process(_geojson) {\r\n    return new Promise((resolve, reject) => {\r\n      var style = this._options.style;\r\n\r\n      // TODO: Convert to buffer and use transferrable objects\r\n      if (typeof this._options.style === 'function') {\r\n        style = Stringify.functionToString(this._options.style);\r\n      }\r\n\r\n      var pointGeometry = this._options.pointGeometry;\r\n\r\n      // TODO: Convert to buffer and use transferrable objects\r\n      if (typeof this._options.pointGeometry === 'function') {\r\n        pointGeometry = Stringify.functionToString(this._options.pointGeometry);\r\n      }\r\n\r\n      var geojson = _geojson;\r\n      var transferrables = [];\r\n\r\n      if (typeof geojson !== 'string') {\r\n        this._geojson = geojson = Buffer.stringToUint8Array(JSON.stringify(geojson));\r\n        transferrables.push(geojson.buffer);\r\n        this._execWorker(geojson, this._options.topojson, this._world._originPoint, style, this._options.interactive, pointGeometry, transferrables).then(() => {\r\n          resolve();\r\n        }).catch(reject);\r\n      } else if (typeof this._options.filter === 'function' || typeof this._options.onEachFeature === 'function') {\r\n        GeoJSONWorkerLayer.RequestGeoJSON(geojson).then((res) => {\r\n          // if (this._aborted) {\r\n          //   resolve();\r\n          //   return;\r\n          // }\r\n\r\n          var fc = GeoJSON.collectFeatures(res, this._options.topojson);\r\n          var features = fc.features;\r\n\r\n          // Run filter, if provided\r\n          if (this._options.filter) {\r\n            fc.features = features.filter(this._options.filter);\r\n          }\r\n\r\n          if (this._options.onEachFeature) {\r\n            var feature;\r\n            for (var i = 0; i < features.length; i++) {\r\n              feature = features[i];\r\n              this._options.onEachFeature(feature);\r\n            };\r\n          }\r\n\r\n          this._geojson = geojson = Buffer.stringToUint8Array(JSON.stringify(fc));\r\n          transferrables.push(geojson.buffer);\r\n\r\n          this._execWorker(geojson, false, this._options.headers, this._world._originPoint, style, this._options.interactive, pointGeometry, transferrables).then(() => {\r\n            resolve();\r\n          }).catch(reject);\r\n        });\r\n      } else {\r\n        this._execWorker(geojson, this._options.topojson, this._options.headers, this._world._originPoint, style, this._options.interactive, pointGeometry, transferrables).then(() => {\r\n          resolve();\r\n        }).catch(reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  _execWorker(geojson, topojson, headers, originPoint, style, interactive, pointGeometry, transferrables) {\r\n    return new Promise((resolve, reject) => {\r\n      // console.time('Worker round trip');\r\n\r\n      Worker.exec('GeoJSONWorkerLayer.Process', [geojson, topojson, headers, originPoint, style, interactive, pointGeometry], transferrables).then((results) => {\r\n        // console.timeEnd('Worker round trip');\r\n\r\n        // if (this._aborted) {\r\n        //   resolve();\r\n        //   return;\r\n        // }\r\n\r\n        var processPromises = [];\r\n\r\n        if (results.polygons) {\r\n          processPromises.push(this._processPolygonResults(results.polygons));\r\n        }\r\n\r\n        if (results.polylines) {\r\n          processPromises.push(this._processPolylineResults(results.polylines));\r\n        }\r\n\r\n        if (results.points) {\r\n          processPromises.push(this._processPointResults(results.points));\r\n        }\r\n\r\n        if (processPromises.length > 0) {\r\n          Promise.all(processPromises).then(() => {\r\n            resolve();\r\n          }).catch(reject);\r\n        } else {\r\n          resolve();\r\n        }\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // TODO: Dedupe with polyline method\r\n  _processPolygonResults(results) {\r\n    return new Promise((resolve, reject) => {\r\n      var splitPositions = Buffer.splitFloat32Array(results.attributes.positions);\r\n      var splitNormals = Buffer.splitFloat32Array(results.attributes.normals);\r\n      var splitColors = Buffer.splitFloat32Array(results.attributes.colors);\r\n      var splitTops = Buffer.splitFloat32Array(results.attributes.tops);\r\n\r\n      var splitOutlinePositions;\r\n      var splitOutlineColors;\r\n\r\n      if (results.outlineAttributes) {\r\n        splitOutlinePositions = Buffer.splitFloat32Array(results.outlineAttributes.positions);\r\n        splitOutlineColors = Buffer.splitFloat32Array(results.outlineAttributes.colors);\r\n      }\r\n\r\n      var splitProperties;\r\n      if (results.properties) {\r\n        splitProperties = Buffer.splitUint8Array(results.properties);\r\n      }\r\n\r\n      var flats = results.flats;\r\n\r\n      var objects = [];\r\n      var outlineObjects = [];\r\n\r\n      var obj;\r\n      var pickingId;\r\n      var pickingIds;\r\n      var properties;\r\n\r\n      var polygonAttributeLengths = {\r\n        positions: 3,\r\n        normals: 3,\r\n        colors: 3,\r\n        tops: 1\r\n      };\r\n\r\n      var polygonOutlineAttributeLengths = {\r\n        positions: 3,\r\n        colors: 3\r\n      };\r\n\r\n      for (var i = 0; i < splitPositions.length; i++) {\r\n        if (splitProperties && splitProperties[i]) {\r\n          properties = JSON.parse(Buffer.uint8ArrayToString(splitProperties[i]));\r\n        } else {\r\n          properties = {};\r\n        }\r\n\r\n        // WORKERS: obj.attributes should actually an array of polygons for\r\n        // the feature, though the current logic isn't aware of that\r\n        obj = {\r\n          attributes: [{\r\n            positions: splitPositions[i],\r\n            normals: splitNormals[i],\r\n            colors: splitColors[i],\r\n            tops: splitTops[i]\r\n          }],\r\n          properties: properties,\r\n          flat: flats[i]\r\n        };\r\n\r\n        // WORKERS: If interactive, generate unique ID for each feature, create\r\n        // the buffer attributes and set up event listeners\r\n        if (this._options.interactive) {\r\n          pickingId = this.getPickingId();\r\n\r\n          pickingIds = new Float32Array(splitPositions[i].length / 3);\r\n          Buffer.fillTypedArray(pickingIds, pickingId);\r\n\r\n          obj.attributes[0].pickingIds = pickingIds;\r\n\r\n          polygonAttributeLengths.pickingIds = 1;\r\n\r\n          this._addPicking(pickingId, properties);\r\n        }\r\n\r\n        // TODO: Make this specific to polygon attributes\r\n        if (typeof this._options.onAddAttributes === 'function') {\r\n          var customAttributes = this._options.onAddAttributes(obj.attributes[0], properties);\r\n          var customAttribute;\r\n          for (var key in customAttributes) {\r\n            customAttribute = customAttributes[key];\r\n            obj.attributes[0][key] = customAttribute.value;\r\n            polygonAttributeLengths[key] = customAttribute.length;\r\n          }\r\n        }\r\n\r\n        objects.push(obj);\r\n      }\r\n\r\n      for (var i = 0; i < splitOutlinePositions.length; i++) {\r\n        obj = {\r\n          attributes: [{\r\n            positions: splitOutlinePositions[i],\r\n            colors: splitOutlineColors[i]\r\n          }],\r\n          flat: true\r\n        };\r\n\r\n        outlineObjects.push(obj);\r\n      }\r\n\r\n      var polygonAttributes = [];\r\n      var polygonOutlineAttributes = [];\r\n\r\n      var polygonFlat = true;\r\n\r\n      for (var i = 0; i < objects.length; i++) {\r\n        obj = objects[i];\r\n\r\n        // TODO: Work out why obj.flat is rarely set to something other than\r\n        // true or false. Potentially undefined.\r\n        if (polygonFlat && obj.flat === false) {\r\n          polygonFlat = false;\r\n        }\r\n\r\n        var bufferAttributes = Buffer.mergeAttributes(obj.attributes);\r\n        polygonAttributes.push(bufferAttributes);\r\n      };\r\n\r\n      for (var i = 0; i < outlineObjects.length; i++) {\r\n        obj = outlineObjects[i];\r\n\r\n        var bufferAttributes = Buffer.mergeAttributes(obj.attributes);\r\n        polygonOutlineAttributes.push(bufferAttributes);\r\n      };\r\n\r\n      var outputPromises = [];\r\n\r\n      var style;\r\n\r\n      if (polygonAttributes.length > 0) {\r\n        var mergedPolygonAttributes = Buffer.mergeAttributes(polygonAttributes);\r\n\r\n        // TODO: Make this work when style is a function per feature\r\n        style = (typeof this._options.style === 'function') ? this._options.style(objects[0]) : this._options.style;\r\n        style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n        outputPromises.push(this._setPolygonMesh(mergedPolygonAttributes, polygonAttributeLengths, style, polygonFlat));\r\n      }\r\n\r\n      if (polygonOutlineAttributes.length > 0) {\r\n        var mergedPolygonOutlineAttributes = Buffer.mergeAttributes(polygonOutlineAttributes);\r\n\r\n        style = (typeof this._options.style === 'function') ? this._options.style(objects[0]) : this._options.style;\r\n        style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n        if (style.outlineRenderOrder !== undefined) {\r\n          style.lineRenderOrder = style.outlineRenderOrder;\r\n        } else {\r\n          style.lineRenderOrder = (style.renderOrder) ? style.renderOrder + 1 : 4;\r\n        }\r\n\r\n        if (style.outlineWidth) {\r\n          style.lineWidth = style.outlineWidth;\r\n        }\r\n\r\n        outputPromises.push(this._setPolylineMesh(mergedPolygonOutlineAttributes, polygonOutlineAttributeLengths, style, true));\r\n      }\r\n\r\n      Promise.all(outputPromises).then((results) => {\r\n        var [polygonResult, outlineResult] = results;\r\n\r\n        if (polygonResult) {\r\n          this._polygonMesh = polygonResult.mesh;\r\n          this.add(this._polygonMesh);\r\n\r\n          if (polygonResult.pickingMesh) {\r\n            this._pickingMesh.add(polygonResult.pickingMesh);\r\n          }\r\n        }\r\n\r\n        if (outlineResult) {\r\n          this.add(outlineResult.mesh);\r\n        }\r\n\r\n        // Clean up\r\n        results.attributes = null;\r\n        results.flats = null;\r\n        results = null;\r\n\r\n        resolve();\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // TODO: Dedupe with polygon method\r\n  _processPolylineResults(results) {\r\n    return new Promise((resolve, reject) => {\r\n      var splitPositions = Buffer.splitFloat32Array(results.attributes.positions);\r\n      var splitColors = Buffer.splitFloat32Array(results.attributes.colors);\r\n\r\n      var splitProperties;\r\n      if (results.properties) {\r\n        splitProperties = Buffer.splitUint8Array(results.properties);\r\n      }\r\n\r\n      var flats = results.flats;\r\n\r\n      var objects = [];\r\n      var obj;\r\n      var pickingId;\r\n      var pickingIds;\r\n      var properties;\r\n\r\n      var polylineAttributeLengths = {\r\n        positions: 3,\r\n        colors: 3\r\n      };\r\n\r\n      for (var i = 0; i < splitPositions.length; i++) {\r\n        if (splitProperties && splitProperties[i]) {\r\n          properties = JSON.parse(Buffer.uint8ArrayToString(splitProperties[i]));\r\n        } else {\r\n          properties = {};\r\n        }\r\n\r\n        // WORKERS: obj.attributes should actually an array of polygons for\r\n        // the feature, though the current logic isn't aware of that\r\n        obj = {\r\n          attributes: [{\r\n            positions: splitPositions[i],\r\n            colors: splitColors[i]\r\n          }],\r\n          properties: properties,\r\n          flat: flats[i]\r\n        };\r\n\r\n        // WORKERS: If interactive, generate unique ID for each feature, create\r\n        // the buffer attributes and set up event listeners\r\n        if (this._options.interactive) {\r\n          pickingId = this.getPickingId();\r\n\r\n          pickingIds = new Float32Array(splitPositions[i].length / 3);\r\n          Buffer.fillTypedArray(pickingIds, pickingId);\r\n\r\n          obj.attributes[0].pickingIds = pickingIds;\r\n\r\n          polylineAttributeLengths.pickingIds = 1;\r\n\r\n          this._addPicking(pickingId, properties);\r\n        }\r\n\r\n        // TODO: Make this specific to polyline attributes\r\n        if (typeof this._options.onAddAttributes === 'function') {\r\n          var customAttributes = this._options.onAddAttributes(obj.attributes[0], properties);\r\n          var customAttribute;\r\n          for (var key in customAttributes) {\r\n            customAttribute = customAttributes[key];\r\n            obj.attributes[0][key] = customAttribute.value;\r\n            polylineAttributeLengths[key] = customAttribute.length;\r\n          }\r\n        }\r\n\r\n        objects.push(obj);\r\n      }\r\n\r\n      var polylineAttributes = [];\r\n\r\n      var polylineFlat = true;\r\n\r\n      for (var i = 0; i < objects.length; i++) {\r\n        obj = objects[i];\r\n\r\n        if (polylineFlat && !obj.flat) {\r\n          polylineFlat = false;\r\n        }\r\n\r\n        var bufferAttributes = Buffer.mergeAttributes(obj.attributes);\r\n        polylineAttributes.push(bufferAttributes);\r\n      };\r\n\r\n      if (polylineAttributes.length > 0) {\r\n        var mergedPolylineAttributes = Buffer.mergeAttributes(polylineAttributes);\r\n\r\n        // TODO: Make this work when style is a function per feature\r\n        var style = (typeof this._options.style === 'function') ? this._options.style(objects[0]) : this._options.style;\r\n        style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n        this._setPolylineMesh(mergedPolylineAttributes, polylineAttributeLengths, style, polylineFlat).then((result) => {\r\n          this._polylineMesh = result.mesh;\r\n          this.add(this._polylineMesh);\r\n\r\n          if (result.pickingMesh) {\r\n            this._pickingMesh.add(result.pickingMesh);\r\n          }\r\n\r\n          resolve();\r\n        }).catch(reject);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  _processPointResults(results) {\r\n    return new Promise((resolve, reject) => {\r\n      var splitPositions = Buffer.splitFloat32Array(results.attributes.positions);\r\n      var splitNormals = Buffer.splitFloat32Array(results.attributes.normals);\r\n      var splitColors = Buffer.splitFloat32Array(results.attributes.colors);\r\n\r\n      var splitProperties;\r\n      if (results.properties) {\r\n        splitProperties = Buffer.splitUint8Array(results.properties);\r\n      }\r\n\r\n      var flats = results.flats;\r\n\r\n      var objects = [];\r\n      var obj;\r\n      var pickingId;\r\n      var pickingIds;\r\n      var properties;\r\n\r\n      var pointAttributeLengths = {\r\n        positions: 3,\r\n        normals: 3,\r\n        colors: 3\r\n      };\r\n\r\n      for (var i = 0; i < splitPositions.length; i++) {\r\n        if (splitProperties && splitProperties[i]) {\r\n          properties = JSON.parse(Buffer.uint8ArrayToString(splitProperties[i]));\r\n        } else {\r\n          properties = {};\r\n        }\r\n\r\n        // WORKERS: obj.attributes should actually an array of polygons for\r\n        // the feature, though the current logic isn't aware of that\r\n        obj = {\r\n          attributes: [{\r\n            positions: splitPositions[i],\r\n            normals: splitNormals[i],\r\n            colors: splitColors[i]\r\n          }],\r\n          properties: properties,\r\n          flat: flats[i]\r\n        };\r\n\r\n        // WORKERS: If interactive, generate unique ID for each feature, create\r\n        // the buffer attributes and set up event listeners\r\n        if (this._options.interactive) {\r\n          pickingId = this.getPickingId();\r\n\r\n          pickingIds = new Float32Array(splitPositions[i].length / 3);\r\n          Buffer.fillTypedArray(pickingIds, pickingId);\r\n\r\n          obj.attributes[0].pickingIds = pickingIds;\r\n\r\n          pointAttributeLengths.pickingIds = 1;\r\n\r\n          this._addPicking(pickingId, properties);\r\n        }\r\n\r\n        // TODO: Make this specific to polygon attributes\r\n        if (typeof this._options.onAddAttributes === 'function') {\r\n          var customAttributes = this._options.onAddAttributes(obj.attributes[0], properties);\r\n          var customAttribute;\r\n          for (var key in customAttributes) {\r\n            customAttribute = customAttributes[key];\r\n            obj.attributes[0][key] = customAttribute.value;\r\n            pointAttributeLengths[key] = customAttribute.length;\r\n          }\r\n        }\r\n\r\n        objects.push(obj);\r\n      }\r\n\r\n      var pointAttributes = [];\r\n\r\n      var pointFlat = true;\r\n\r\n      for (var i = 0; i < objects.length; i++) {\r\n        obj = objects[i];\r\n\r\n        if (pointFlat && !obj.flat) {\r\n          pointFlat = false;\r\n        }\r\n\r\n        var bufferAttributes = Buffer.mergeAttributes(obj.attributes);\r\n        pointAttributes.push(bufferAttributes);\r\n      };\r\n\r\n      if (pointAttributes.length > 0) {\r\n        var mergedPointAttributes = Buffer.mergeAttributes(pointAttributes);\r\n\r\n        // TODO: Make this work when style is a function per feature\r\n        var style = (typeof this._options.style === 'function') ? this._options.style(objects[0]) : this._options.style;\r\n        style = extend({}, GeoJSON.defaultStyle, style);\r\n\r\n        this._setPointMesh(mergedPointAttributes, pointAttributeLengths, style, pointFlat).then((result) => {\r\n          this._pointMesh = result.mesh;\r\n          this.add(this._pointMesh);\r\n\r\n          if (result.pickingMesh) {\r\n            this._pickingMesh.add(result.pickingMesh);\r\n          }\r\n\r\n          resolve();\r\n        }).catch(reject);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  // TODO: At some point this needs to return all the features to the main thread\r\n  // so it can generate meshes and output to the scene, as well as perhaps creating\r\n  // individual layers / components for each feature to track things like picking\r\n  // and properties\r\n  //\r\n  // TODO: Find a way so the origin point isn't needed to be passed in as it\r\n  // feels a bit messy and against the idea of a static Geo class\r\n  //\r\n  // TODO: Support passing custom geometry for point layers\r\n  static Process(geojson, topojson, headers, originPoint, _style, _properties, _pointGeometry) {\r\n    return new Promise((resolve, reject) => {\r\n      GeoJSONWorkerLayer.ProcessGeoJSON(geojson, headers).then((res) => {\r\n        // Collects features into a single FeatureCollection\r\n        //\r\n        // Also converts TopoJSON to GeoJSON if instructed\r\n        var geojson = GeoJSON.collectFeatures(res, topojson);\r\n\r\n        // TODO: Check that GeoJSON is valid / usable\r\n\r\n        var features = geojson.features;\r\n\r\n        // TODO: Run filter, if provided (must be static)\r\n\r\n        var pointScale;\r\n        var polygons = [];\r\n        var polylines = [];\r\n        var points = [];\r\n\r\n        // Deserialise style function if provided\r\n        if (typeof _style === 'string') {\r\n          _style = Stringify.stringToFunction(_style);\r\n        }\r\n\r\n        // Assume that a style won't be set per feature\r\n        var style = _style;\r\n\r\n        var pointGeometry;\r\n        // Deserialise pointGeometry function if provided\r\n        if (typeof _pointGeometry === 'string') {\r\n          pointGeometry = Stringify.stringToFunction(_pointGeometry);\r\n        }\r\n\r\n        var feature;\r\n        for (var i = 0; i < features.length; i++) {\r\n          feature = features[i];\r\n\r\n          var geometry = feature.geometry;\r\n          var coordinates = (geometry.coordinates) ? geometry.coordinates : null;\r\n\r\n          if (!coordinates || !geometry) {\r\n            return;\r\n          }\r\n\r\n          // Get per-feature style object, if provided\r\n          if (typeof _style === 'function') {\r\n            style = extend({}, GeoJSON.defaultStyle, _style(feature));\r\n            // console.log(feature, style);\r\n          }\r\n\r\n          if (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon') {\r\n            coordinates = (PolygonLayer.isSingle(coordinates)) ? [coordinates] : coordinates;\r\n\r\n            var converted = coordinates.map(_coordinates => {\r\n              return _coordinates.map(ring => {\r\n                return ring.map(coordinate => {\r\n                  return LatLon(coordinate[1], coordinate[0]);\r\n                });\r\n              });\r\n            });\r\n\r\n            var point;\r\n            var projected = converted.map((_coordinates) => {\r\n              return _coordinates.map((ring) => {\r\n                return ring.map((latlon) => {\r\n                  point = Geo.latLonToPoint(latlon)._subtract(originPoint);\r\n\r\n                  if (!pointScale) {\r\n                    pointScale = Geo.pointScale(latlon);\r\n                  }\r\n\r\n                  return point;\r\n                });\r\n              });\r\n            });\r\n\r\n            var polygon = {\r\n              projected: projected,\r\n              options: {\r\n                pointScale: pointScale,\r\n                style: style\r\n              }\r\n            };\r\n\r\n            if (_properties) {\r\n              polygon.properties = feature.properties;\r\n            }\r\n\r\n            polygons.push(polygon);\r\n          }\r\n\r\n          if (geometry.type === 'LineString' || geometry.type === 'MultiLineString') {\r\n            coordinates = (PolylineLayer.isSingle(coordinates)) ? [coordinates] : coordinates;\r\n\r\n            var converted = coordinates.map(_coordinates => {\r\n              return _coordinates.map(coordinate => {\r\n                return LatLon(coordinate[1], coordinate[0]);\r\n              });\r\n            });\r\n\r\n            var point;\r\n            var projected = converted.map((_coordinates) => {\r\n              return _coordinates.map((latlon) => {\r\n                point = Geo.latLonToPoint(latlon)._subtract(originPoint);\r\n\r\n                if (!pointScale) {\r\n                  pointScale = Geo.pointScale(latlon);\r\n                }\r\n\r\n                return point;\r\n              });\r\n            });\r\n\r\n            var polyline = {\r\n              projected: projected,\r\n              options: {\r\n                pointScale: pointScale,\r\n                style: style\r\n              }\r\n            };\r\n\r\n            if (_properties) {\r\n              polyline.properties = feature.properties;\r\n            }\r\n\r\n            polylines.push(polyline);\r\n          }\r\n\r\n          if (geometry.type === 'Point' || geometry.type === 'MultiPoint') {\r\n            coordinates = (PointLayer.isSingle(coordinates)) ? [coordinates] : coordinates;\r\n\r\n            var converted = coordinates.map(coordinate => {\r\n              return LatLon(coordinate[1], coordinate[0]);\r\n            });\r\n\r\n            var point;\r\n            var projected = converted.map((latlon) => {\r\n              point = Geo.latLonToPoint(latlon)._subtract(originPoint);\r\n\r\n              if (!pointScale) {\r\n                pointScale = Geo.pointScale(latlon);\r\n              }\r\n\r\n              return point;\r\n            });\r\n\r\n            var point = {\r\n              projected: projected,\r\n              options: {\r\n                pointGeometry: pointGeometry(feature),\r\n                pointScale: pointScale,\r\n                style: style\r\n              }\r\n            };\r\n\r\n            if (_properties) {\r\n              point.properties = feature.properties;\r\n            }\r\n\r\n            points.push(point);\r\n          }\r\n        };\r\n\r\n        var polygonBufferPromises = [];\r\n        var polylineBufferPromises = [];\r\n        var pointBufferPromises = [];\r\n\r\n        var polygon;\r\n        for (var i = 0; i < polygons.length; i++) {\r\n          polygon = polygons[i];\r\n          polygonBufferPromises.push(PolygonLayer.SetBufferAttributes(polygon.projected, polygon.options));\r\n        };\r\n\r\n        var polyline;\r\n        for (var i = 0; i < polylines.length; i++) {\r\n          polyline = polylines[i];\r\n          polylineBufferPromises.push(PolylineLayer.SetBufferAttributes(polyline.projected, polyline.options));\r\n        };\r\n\r\n        var point;\r\n        for (var i = 0; i < points.length; i++) {\r\n          point = points[i];\r\n          pointBufferPromises.push(PointLayer.SetBufferAttributes(point.projected, point.options));\r\n        };\r\n\r\n        var data = {};\r\n        var transferrables = [];\r\n\r\n        // TODO: Make this work with polylines too\r\n        // TODO: Make this so it's not a nest of promises\r\n        GeoJSONWorkerLayer.ProcessPolygons(polygonBufferPromises, polygons, _properties).then((result) => {\r\n          data.polygons = result.data;\r\n          transferrables = transferrables.concat(result.transferrables);\r\n\r\n          GeoJSONWorkerLayer.ProcessPolylines(polylineBufferPromises, polylines, _properties).then((result) => {\r\n            data.polylines = result.data;\r\n            transferrables = transferrables.concat(result.transferrables);\r\n\r\n            GeoJSONWorkerLayer.ProcessPoints(pointBufferPromises, points, _properties).then((result) => {\r\n              data.points = result.data;\r\n              transferrables = transferrables.concat(result.transferrables);\r\n\r\n              resolve({\r\n                data: data,\r\n                transferrables: transferrables\r\n              });\r\n            });\r\n          });\r\n        });\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  static ProcessPolygons(polygonPromises, polygons, _properties) {\r\n    return new Promise((resolve, reject) => {\r\n      Promise.all(polygonPromises).then((results) => {\r\n        var transferrables = [];\r\n\r\n        var positions = [];\r\n        var normals = [];\r\n        var colors = [];\r\n        var tops = [];\r\n\r\n        var outlinePositions = [];\r\n        var outlineColors = [];\r\n\r\n        var properties = [];\r\n\r\n        var flats = [];\r\n        var polygon;\r\n\r\n        var result;\r\n        for (var i = 0; i < results.length; i++) {\r\n          result = results[i];\r\n\r\n          polygon = polygons[i];\r\n\r\n          // WORKERS: Making this a typed array will speed up transfer time\r\n          // As things stand this adds on a few milliseconds\r\n          flats.push(result.flat);\r\n\r\n          // WORKERS: result.attributes is actually an array of polygons for each\r\n          // feature, though the current logic isn't keeping these all together\r\n\r\n          var attributes;\r\n          for (var j = 0; j < result.attributes.length; j++) {\r\n            attributes = result.attributes[j];\r\n\r\n            positions.push(attributes.positions);\r\n            normals.push(attributes.normals);\r\n            colors.push(attributes.colors);\r\n            tops.push(attributes.tops);\r\n\r\n            if (_properties) {\r\n              properties.push(Buffer.stringToUint8Array(JSON.stringify(polygon.properties)));\r\n            }\r\n          };\r\n\r\n          var outlineAttributes;\r\n          for (var j = 0; j < result.outlineAttributes.length; j++) {\r\n            outlineAttributes = result.outlineAttributes[j];\r\n\r\n            outlinePositions.push(outlineAttributes.positions);\r\n            outlineColors.push(outlineAttributes.colors);\r\n          };\r\n        };\r\n\r\n        var mergedAttributes = {\r\n          positions: Buffer.mergeFloat32Arrays(positions),\r\n          normals: Buffer.mergeFloat32Arrays(normals),\r\n          colors: Buffer.mergeFloat32Arrays(colors),\r\n          tops: Buffer.mergeFloat32Arrays(tops)\r\n        };\r\n\r\n        var mergedOutlineAttributes = {\r\n          positions: Buffer.mergeFloat32Arrays(outlinePositions),\r\n          colors: Buffer.mergeFloat32Arrays(outlineColors)\r\n        };\r\n\r\n        transferrables.push(mergedAttributes.positions[0].buffer);\r\n        transferrables.push(mergedAttributes.positions[1].buffer);\r\n\r\n        transferrables.push(mergedAttributes.normals[0].buffer);\r\n        transferrables.push(mergedAttributes.normals[1].buffer);\r\n\r\n        transferrables.push(mergedAttributes.colors[0].buffer);\r\n        transferrables.push(mergedAttributes.colors[1].buffer);\r\n\r\n        transferrables.push(mergedAttributes.tops[0].buffer);\r\n        transferrables.push(mergedAttributes.tops[1].buffer);\r\n\r\n        transferrables.push(mergedOutlineAttributes.positions[0].buffer);\r\n        transferrables.push(mergedOutlineAttributes.positions[1].buffer);\r\n\r\n        transferrables.push(mergedOutlineAttributes.colors[0].buffer);\r\n        transferrables.push(mergedOutlineAttributes.colors[1].buffer);\r\n\r\n        var mergedProperties;\r\n        if (_properties) {\r\n          mergedProperties = Buffer.mergeUint8Arrays(properties);\r\n\r\n          transferrables.push(mergedProperties[0].buffer);\r\n          transferrables.push(mergedProperties[1].buffer);\r\n        }\r\n\r\n        var output = {\r\n          attributes: mergedAttributes,\r\n          outlineAttributes: mergedOutlineAttributes,\r\n          flats: flats\r\n        };\r\n\r\n        if (_properties) {\r\n          output.properties = mergedProperties;\r\n        }\r\n\r\n        // TODO: Also return GeoJSON features that can be mapped to objects on\r\n        // the main thread. Allow user to provide filter / toggles to only return\r\n        // properties from the GeoJSON that they need (eg. don't return geometry,\r\n        // or don't return properties.height)\r\n        resolve({\r\n          data: output,\r\n          transferrables: transferrables\r\n        });\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  static ProcessPolylines(polylinePromises, polylines, _properties) {\r\n    return new Promise((resolve, reject) => {\r\n      Promise.all(polylinePromises).then((results) => {\r\n        var transferrables = [];\r\n\r\n        var positions = [];\r\n        var colors = [];\r\n\r\n        var properties = [];\r\n\r\n        var flats = [];\r\n        var polyline;\r\n\r\n        var result;\r\n        for (var i = 0; i < results.length; i++) {\r\n          result = results[i];\r\n\r\n          polyline = polylines[i];\r\n\r\n          // WORKERS: Making this a typed array will speed up transfer time\r\n          // As things stand this adds on a few milliseconds\r\n          flats.push(result.flat);\r\n\r\n          // WORKERS: result.attributes is actually an array of polygons for each\r\n          // feature, though the current logic isn't keeping these all together\r\n\r\n          var attributes;\r\n          for (var j = 0; j < result.attributes.length; j++) {\r\n            attributes = result.attributes[j];\r\n\r\n            positions.push(attributes.positions);\r\n            colors.push(attributes.colors);\r\n\r\n            if (_properties) {\r\n              properties.push(Buffer.stringToUint8Array(JSON.stringify(polyline.properties)));\r\n            }\r\n          };\r\n        };\r\n\r\n        var mergedAttributes = {\r\n          positions: Buffer.mergeFloat32Arrays(positions),\r\n          colors: Buffer.mergeFloat32Arrays(colors)\r\n        };\r\n\r\n        transferrables.push(mergedAttributes.positions[0].buffer);\r\n        transferrables.push(mergedAttributes.positions[1].buffer);\r\n\r\n        transferrables.push(mergedAttributes.colors[0].buffer);\r\n        transferrables.push(mergedAttributes.colors[1].buffer);\r\n\r\n        var mergedProperties;\r\n        if (_properties) {\r\n          mergedProperties = Buffer.mergeUint8Arrays(properties);\r\n\r\n          transferrables.push(mergedProperties[0].buffer);\r\n          transferrables.push(mergedProperties[1].buffer);\r\n        }\r\n\r\n        var output = {\r\n          attributes: mergedAttributes,\r\n          flats: flats\r\n        };\r\n\r\n        if (_properties) {\r\n          output.properties = mergedProperties;\r\n        }\r\n\r\n        // TODO: Also return GeoJSON features that can be mapped to objects on\r\n        // the main thread. Allow user to provide filter / toggles to only return\r\n        // properties from the GeoJSON that they need (eg. don't return geometry,\r\n        // or don't return properties.height)\r\n        resolve({\r\n          data: output,\r\n          transferrables: transferrables\r\n        });\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  // TODO: Dedupe with ProcessPolygons as they are identical\r\n  static ProcessPoints(pointPromises, points, _properties) {\r\n    return new Promise((resolve, reject) => {\r\n      Promise.all(pointPromises).then((results) => {\r\n        var transferrables = [];\r\n\r\n        var positions = [];\r\n        var normals = [];\r\n        var colors = [];\r\n\r\n        var properties = [];\r\n\r\n        var flats = [];\r\n        var point;\r\n\r\n        var result;\r\n        for (var i = 0; i < results.length; i++) {\r\n          result = results[i];\r\n\r\n          point = points[i];\r\n\r\n          // WORKERS: Making this a typed array will speed up transfer time\r\n          // As things stand this adds on a few milliseconds\r\n          flats.push(result.flat);\r\n\r\n          // WORKERS: result.attributes is actually an array of polygons for each\r\n          // feature, though the current logic isn't keeping these all together\r\n\r\n          var attributes;\r\n          for (var j = 0; j < result.attributes.length; j++) {\r\n            attributes = result.attributes[j];\r\n\r\n            positions.push(attributes.positions);\r\n            normals.push(attributes.normals);\r\n            colors.push(attributes.colors);\r\n\r\n            if (_properties) {\r\n              properties.push(Buffer.stringToUint8Array(JSON.stringify(polygon.properties)));\r\n            }\r\n          };\r\n        };\r\n\r\n        var mergedAttributes = {\r\n          positions: Buffer.mergeFloat32Arrays(positions),\r\n          normals: Buffer.mergeFloat32Arrays(normals),\r\n          colors: Buffer.mergeFloat32Arrays(colors)\r\n        };\r\n\r\n        transferrables.push(mergedAttributes.positions[0].buffer);\r\n        transferrables.push(mergedAttributes.positions[1].buffer);\r\n\r\n        transferrables.push(mergedAttributes.normals[0].buffer);\r\n        transferrables.push(mergedAttributes.normals[1].buffer);\r\n\r\n        transferrables.push(mergedAttributes.colors[0].buffer);\r\n        transferrables.push(mergedAttributes.colors[1].buffer);\r\n\r\n        var mergedProperties;\r\n        if (_properties) {\r\n          mergedProperties = Buffer.mergeUint8Arrays(properties);\r\n\r\n          transferrables.push(mergedProperties[0].buffer);\r\n          transferrables.push(mergedProperties[1].buffer);\r\n        }\r\n\r\n        var output = {\r\n          attributes: mergedAttributes,\r\n          flats: flats\r\n        };\r\n\r\n        if (_properties) {\r\n          output.properties = mergedProperties;\r\n        }\r\n\r\n        // TODO: Also return GeoJSON features that can be mapped to objects on\r\n        // the main thread. Allow user to provide filter / toggles to only return\r\n        // properties from the GeoJSON that they need (eg. don't return geometry,\r\n        // or don't return properties.height)\r\n        resolve({\r\n          data: output,\r\n          transferrables: transferrables\r\n        });\r\n      }).catch(reject);\r\n    });\r\n  }\r\n\r\n  static ProcessGeoJSON(geojson, headers) {\r\n    if (typeof geojson === 'string') {\r\n      return GeoJSONWorkerLayer.RequestGeoJSON(geojson, headers);\r\n    } else {\r\n      return Promise.resolve(JSON.parse(Buffer.uint8ArrayToString(geojson)));\r\n    }\r\n  }\r\n\r\n  static RequestGeoJSON(path, headers) {\r\n    return reqwest({\r\n      url: path,\r\n      type: 'json',\r\n      crossOrigin: true,\r\n      headers: headers\r\n    });\r\n  }\r\n\r\n  // Create and store mesh from buffer attributes\r\n  //\r\n  // Could make this an abstract method for each geometry layer\r\n  _setPolygonMesh(attributes, attributeLengths, style, flat) {\r\n    if (!this._world) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    return PolygonLayer.SetMesh(attributes, attributeLengths, flat, style, this._options, this._world._environment._skybox);\r\n  }\r\n\r\n  _setPolylineMesh(attributes, attributeLengths, style, flat) {\r\n    if (!this._world) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    return PolylineLayer.SetMesh(attributes, attributeLengths, flat, style, this._options);\r\n  }\r\n\r\n  _setPointMesh(attributes, attributeLengths, style, flat) {\r\n    if (!this._world) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    return PointLayer.SetMesh(attributes, attributeLengths, flat, style, this._options, this._world._environment._skybox);\r\n  }\r\n\r\n  // Set up and re-emit interaction events\r\n  _addPicking(pickingId, properties) {\r\n    this._world.on('pick-click-' + pickingId, (pickingId, point2d, point3d, intersects) => {\r\n      this._world.emit('click', this, properties, point2d, point3d);\r\n    });\r\n\r\n    this._world.on('pick-hover-' + pickingId, (pickingId, point2d, point3d, intersects) => {\r\n      this._world.emit('hover', this, properties, point2d, point3d);\r\n    });\r\n  }\r\n\r\n  // TODO: Finish cleanup\r\n  destroy() {\r\n    // Run common destruction logic from parent\r\n    super.destroy();\r\n  }\r\n}\r\n\r\nexport default GeoJSONWorkerLayer;\r\n\r\nvar noNew = function(geojson, options) {\r\n  return new GeoJSONWorkerLayer(geojson, options);\r\n};\r\n\r\nexport {noNew as geoJSONWorkerLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/GeoJSONWorkerLayer.js","var Stringify = (function() {\r\n  var functionToString = function(f) {\r\n    return f.toString();\r\n  };\r\n\r\n  // Based on https://github.com/tangrams/tangram/blob/2a31893c814cf15d5077f87ffa10af20160716b9/src/utils/utils.js#L245\r\n  var stringToFunction = function(str) {\r\n    if (typeof str === 'string' && str.match(/^\\s*function\\s*\\w*\\s*\\([\\s\\S]*\\)\\s*\\{[\\s\\S]*\\}/m) != null) {\r\n      var f;\r\n\r\n      try {\r\n        eval('f = ' + str);\r\n        return f;\r\n      } catch (err) {\r\n        return str;\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    functionToString: functionToString,\r\n    stringToFunction: stringToFunction\r\n  };\r\n})();\r\n\r\nexport default Stringify;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/Stringify.js","import GeoJSONTileLayer from './GeoJSONTileLayer';\r\nimport extend from 'lodash.assign';\r\n\r\nclass TopoJSONTileLayer extends GeoJSONTileLayer {\r\n  constructor(path, options) {\r\n    var defaults = {\r\n      topojson: true\r\n    };\r\n\r\n    options = extend({}, defaults, options);\r\n\r\n    super(path, options);\r\n  }\r\n}\r\n\r\nexport default TopoJSONTileLayer;\r\n\r\nvar noNew = function(path, options) {\r\n  return new TopoJSONTileLayer(path, options);\r\n};\r\n\r\nexport {noNew as topoJSONTileLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/tile/TopoJSONTileLayer.js","import GeoJSONLayer from './GeoJSONLayer';\r\nimport extend from 'lodash.assign';\r\n\r\nclass TopoJSONLayer extends GeoJSONLayer {\r\n  constructor(topojson, options) {\r\n    var defaults = {\r\n      topojson: true\r\n    };\r\n\r\n    options = extend({}, defaults, options);\r\n\r\n    super(topojson, options);\r\n  }\r\n}\r\n\r\nexport default TopoJSONLayer;\r\n\r\nvar noNew = function(topojson, options) {\r\n  return new TopoJSONLayer(topojson, options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as topoJSONLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/TopoJSONLayer.js","import GeoJSONWorkerLayer from './GeoJSONWorkerLayer';\r\nimport extend from 'lodash.assign';\r\n\r\nclass TopoJSONWorkerLayer extends GeoJSONWorkerLayer {\r\n  constructor(topojson, options) {\r\n    var defaults = {\r\n      topojson: true\r\n    };\r\n\r\n    options = extend({}, defaults, options);\r\n\r\n    super(topojson, options);\r\n  }\r\n}\r\n\r\nexport default TopoJSONWorkerLayer;\r\n\r\nvar noNew = function(topojson, options) {\r\n  return new TopoJSONWorkerLayer(topojson, options);\r\n};\r\n\r\n// Initialise without requiring new keyword\r\nexport {noNew as topoJSONWorkerLayer};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/layer/TopoJSONWorkerLayer.js","// TODO: A lot of these utils don't need to be in separate, tiny files\r\n\r\nimport wrapNum from './wrapNum';\r\nimport extrudePolygon from './extrudePolygon';\r\nimport GeoJSON from './GeoJSON';\r\nimport Buffer from './Buffer';\r\nimport Worker from './Worker';\r\nimport Stringify from './Stringify';\r\n\r\nconst Util = {};\r\n\r\nUtil.wrapNum = wrapNum;\r\nUtil.extrudePolygon = extrudePolygon;\r\nUtil.GeoJSON = GeoJSON;\r\nUtil.Buffer = Buffer;\r\nUtil.Worker = Worker;\r\nUtil.Stringify = Stringify;\r\n\r\nexport default Util;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/index.js","/*\r\n * Wrap the given number to lie within a certain range (eg. longitude)\r\n *\r\n * Based on:\r\n * https://github.com/Leaflet/Leaflet/blob/master/src/core/Util.js\r\n */\r\n\r\nvar wrapNum = function(x, range, includeMax) {\r\n  var max = range[1];\r\n  var min = range[0];\r\n  var d = max - min;\r\n  return x === max && includeMax ? x : ((x - min) % d + d) % d + min;\r\n};\r\n\r\nexport default wrapNum;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/util/wrapNum.js"]}